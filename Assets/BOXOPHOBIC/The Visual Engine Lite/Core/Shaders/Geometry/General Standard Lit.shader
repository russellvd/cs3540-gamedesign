// Made with Amplify Shader Editor v1.9.4.4
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit (Lite)"
{
	Properties
	{
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2000
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Warning, Global Elements and Layers are only available with The Visual Engine Core package., 0, 0)]_GlobalLiteInfo("# Global Lite Info", Float) = 0
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to control the mask for Global Tinting__ Main Colors__ Gradient Tinting and Subsurface Scattering when available. The mask is stored in Main Mask Blue channel. , 0, 10)]_MessageMainMask("# Message Main Mask", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThitdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThitdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		[StyledMessage(Warning, The Variation feature is only available with The Visual Engine Core package., 0, 10)]_VariationLiteInfo("# Variation Lite Info", Float) = 0
		[StyledColoring]_VariationColoring("# Variation Coloring", Color) = (1,1,1,0.6)
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotsValue1("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		[StyledMessage(Warning, The Tinting feature is only available with The Visual Engine Core package., 0, 10)]_TintingLiteInfo("# Tinting Lite Info", Float) = 0
		[StyledColoring]_TintingColoring("# Tinting Coloring", Color) = (1,1,1,0.6)
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		[StyledMessage(Warning, The Dryness feature is only available with The Visual Engine Core package., 0, 10)]_DrynessLiteInfo("# Dryness Lite Info", Float) = 0
		[StyledColoring]_DrynessColoring("# Dryness Coloring", Color) = (1,1,1,0.6)
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		[StyledMessage(Warning, The Overlay Glitter feature is only available with The Visual Engine Core package., 0, 10)]_OverlayLiteInfo("# Overlay Lite Info", Float) = 0
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[StyledColoring]_OverlayColoringOn("# Overlay Coloring On", Color) = (1,1,1,0.6)
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 10)) = 2
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledColoring]_OverlayColoringOff("# Overlay Coloring Off", Color) = (1,1,1,1)
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		[StyledMessage(Warning, The Wetness feature is only available with The Visual Engine Core package., 0, 10)]_WetnessLiteInfo("# Wetness Lite Info", Float) = 0
		[StyledColoring]_WetnessColoring("# Wetness Coloring", Color) = (1,1,1,0.6)
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.25
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 1
		[HDR][Space(10)]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		[StyledRemapSlider]_WetnessWaterBaseRemap("Wetness Water Base Mask", Vector) = (0,0,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( 0 , 1)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 10)) = 1
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 10
		[StyledRemapSlider]_WetnessDropsProjRemap("Wetness Drops ProjY Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		[StyledMessage(Warning, The Cutout feature is only available with The Visual Engine Core package., 0, 10)]_CutoutLiteInfo("# Cutout Lite Info", Float) = 0
		[StyledColoring]_CutoutColoring("# Cutout Coloring", Color) = (1,1,1,0.6)
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[StyledSpace(10)]_CutoutSpace("[ Cutout Space ]", Float) = 1
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		[StyledMessage(Warning, The Dither feature is only available with The Visual Engine Core package., 0, 10)]_DitherLiteInfo("# Dither Lite Info", Float) = 0
		[StyledColoring]_DitherColoring("# Dither Coloring", Color) = (1,1,1,0.6)
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 1
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, In HDRP__ the Subsurface Color and Power are fake effects used for artistic control. For physically correct subsurface scattering the Power slider need to be set to 0., 0, 10)]_SubsurfaceHDRPInfo("# SubsurfaceHDRPInfo", Float) = 0
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)]_SubsurfaceAproxInfo("# Subsurface Aprox Info", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		[StyledMessage(Warning, The Perspective feature is only available with The Visual Engine Core package., 0, 10)]_PerspectiveLiteInfo("# Perspective Lite Info", Float) = 0
		[StyledColoring]_PerspectiveColoring("# Perspective Coloring", Color) = (1,1,1,0.6)
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 4)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		[StyledMessage(Warning, The Size Fade feature is only available with The Visual Engine Core package., 0, 10)]_SizeFadeLiteInfo("# SizeFade Lite Info", Float) = 0
		[StyledColoring]_SizeFadeColoring("# SizeFade Coloring", Color) = (1,1,1,0.6)
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Scale", Range( 0 , 1)) = 1
		[Space(10)]_SizeFadeDistMinValue("Size Fade Min", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Max", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Wave Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Wave Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion 01 Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion 01 Pivots", Range( 0 , 1)) = 0.5
		_MotionBasePhaseValue("Motion 01 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion 01 Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion 01 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion 02 Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion 02 Pivots", Range( 0 , 1)) = 0
		_MotionSmallPhaseValue("Motion 02 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion 02 Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion 02 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion 03 Intensity", Range( 0 , 8)) = 0
		_MotionTinyTillingValue("Motion 03 Tilling", Range( 0 , 40)) = 20
		_MotionTinySpeedValue("Motion 03 Speed", Range( 0 , 40)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion 03 Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion 03 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionNoiseValue("Motion Wind Noise", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionSpeedValue("Motion Wind Speed", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		[StyledMessage(Warning, The Interaction feature is only available with The Visual Engine Core package., 0, 10)]_InteractionLiteInfo("# Interaction Lite Info", Float) = 0
		[StyledColoring]_InteractionColoring("# Interaction Coloring", Color) = (1,1,1,0.6)
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		[StyledMessage(Warning, Computing normals from vertex transform is only available with The Visual Engine Core package., 0, 10)]_NormalLiteInfo("# Normal Lite Info", Float) = 0
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		[StyledColoring]_NormalColoring("# Normal Coloring", Color) = (1,1,1,0.6)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsStandardShader("_IsStandardShader", Float) = 1
		[HideInInspector]_IsLiteShader("_IsLiteShader", Float) = 1
		[HideInInspector] _texcoord( "", 2D ) = "white" {}

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend Off
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				float4 ase_texcoord14 : TEXCOORD14;
				float4 ase_texcoord15 : TEXCOORD15;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _IsLiteShader;
			uniform half _IsStandardShader;
			uniform half _IsGeneralShader;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = v.vertex.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g154892 = ase_worldPos;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float4x4 break19_g154894 = unity_ObjectToWorld;
				float3 appendResult20_g154894 = (float3(break19_g154894[ 0 ][ 3 ] , break19_g154894[ 1 ][ 3 ] , break19_g154894[ 2 ][ 3 ]));
				half3 ObjectData20_g154896 = appendResult20_g154894;
				half3 WorldData19_g154896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154896 = WorldData19_g154896;
				#else
				float3 staticSwitch14_g154896 = ObjectData20_g154896;
				#endif
				float3 temp_output_124_0_g154894 = staticSwitch14_g154896;
				float3 temp_output_239_7_g154892 = temp_output_124_0_g154894;
				float4x4 break19_g154898 = unity_ObjectToWorld;
				float3 appendResult20_g154898 = (float3(break19_g154898[ 0 ][ 3 ] , break19_g154898[ 1 ][ 3 ] , break19_g154898[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 temp_output_122_0_g154898 = PivotOS149_g154892;
				float3 PivotsOnly105_g154898 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g154898 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g154900 = ( appendResult20_g154898 + PivotsOnly105_g154898 );
				half3 WorldData19_g154900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154900 = WorldData19_g154900;
				#else
				float3 staticSwitch14_g154900 = ObjectData20_g154900;
				#endif
				float3 temp_output_124_0_g154898 = staticSwitch14_g154900;
				float3 temp_output_237_7_g154892 = temp_output_124_0_g154898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#else
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#endif
				float3 vertexToFrag76_g154892 = staticSwitch236_g154892;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = v.normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = v.tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = v.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( v.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( v.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( v.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( v.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ), 0.0 );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157893 = Data16_g157339;
				float Out_Dummy15_g157893 = 0;
				float3 Out_PositionOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157893 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157893 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157893 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157893 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157893 = float3( 0,0,0 );
				float4 Out_VertexData15_g157893 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157893 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157893 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157893 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157893 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157893 = Data15_g157893.Dummy;
				Out_PositionOS15_g157893 = Data15_g157893.PositionOS;
				Out_PositionWS15_g157893 = Data15_g157893.PositionWS;
				Out_PositionWO15_g157893 = Data15_g157893.PositionWO;
				Out_PositionRawOS15_g157893 = Data15_g157893.PositionRawOS;
				Out_PositionAddOS15_g157893 = Data15_g157893.PositionAddOS;
				Out_PivotOS15_g157893 = Data15_g157893.PivotOS;
				Out_PivotWS15_g157893 = Data15_g157893.PivotWS;
				Out_PivotWO15_g157893 = Data15_g157893.PivotWO;
				Out_NormalOS15_g157893 = Data15_g157893.NormalOS;
				Out_NormalWS15_g157893 = Data15_g157893.NormalWS;
				Out_NormalRawOS15_g157893 = Data15_g157893.NormalRawOS;
				Out_NormalRawWS15_g157893 = Data15_g157893.NormalRawWS;
				Out_TangentOS15_g157893 = Data15_g157893.TangentOS;
				Out_ViewDirWS15_g157893 = Data15_g157893.ViewDirWS;
				Out_VertexData15_g157893 = Data15_g157893.VertexData;
				Out_MotionData15_g157893 = Data15_g157893.MotionData;
				Out_BoundsData15_g157893 = Data15_g157893.BoundsData;
				Out_RotationData15_g157893 = Data15_g157893.RotationData;
				Out_FragmentData15_g157893 = Data15_g157893.FragmentData;
				}
				float3 temp_output_31_0_g157890 = Out_PositionOS15_g157893;
				
				float4 temp_output_6_0_g157905 = Out_TangentOS15_g157893;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157905 = ( temp_output_6_0_g157905 + ( Dummy_Data978 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157905 = temp_output_6_0_g157905;
				#endif
				
				o.ase_texcoord13.xyz = vertexToFrag73_g154892;
				o.ase_texcoord14.xyz = vertexToFrag76_g154892;
				TVEModelData Data15_g157488 = Data16_g157339;
				float Out_Dummy15_g157488 = 0;
				float3 Out_PositionOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157488 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157488 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157488 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157488 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157488 = float3( 0,0,0 );
				float4 Out_VertexData15_g157488 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157488 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157488 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157488 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157488 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157488 = Data15_g157488.Dummy;
				Out_PositionOS15_g157488 = Data15_g157488.PositionOS;
				Out_PositionWS15_g157488 = Data15_g157488.PositionWS;
				Out_PositionWO15_g157488 = Data15_g157488.PositionWO;
				Out_PositionRawOS15_g157488 = Data15_g157488.PositionRawOS;
				Out_PositionAddOS15_g157488 = Data15_g157488.PositionAddOS;
				Out_PivotOS15_g157488 = Data15_g157488.PivotOS;
				Out_PivotWS15_g157488 = Data15_g157488.PivotWS;
				Out_PivotWO15_g157488 = Data15_g157488.PivotWO;
				Out_NormalOS15_g157488 = Data15_g157488.NormalOS;
				Out_NormalWS15_g157488 = Data15_g157488.NormalWS;
				Out_NormalRawOS15_g157488 = Data15_g157488.NormalRawOS;
				Out_NormalRawWS15_g157488 = Data15_g157488.NormalRawWS;
				Out_TangentOS15_g157488 = Data15_g157488.TangentOS;
				Out_ViewDirWS15_g157488 = Data15_g157488.ViewDirWS;
				Out_VertexData15_g157488 = Data15_g157488.VertexData;
				Out_MotionData15_g157488 = Data15_g157488.MotionData;
				Out_BoundsData15_g157488 = Data15_g157488.BoundsData;
				Out_RotationData15_g157488 = Data15_g157488.RotationData;
				Out_FragmentData15_g157488 = Data15_g157488.FragmentData;
				}
				half4 Model_FragmentData196_g157486 = Out_FragmentData15_g157488;
				float vertexToFrag203_g157486 = (Model_FragmentData196_g157486).w;
				o.ase_texcoord10.z = vertexToFrag203_g157486;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord11 = v.texcoord1.xyzw;
				o.ase_texcoord12 = v.vertex;
				o.ase_texcoord15 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.w = 0;
				o.ase_texcoord13.w = 0;
				o.ase_texcoord14.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g157890 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g157893;
				v.tangent = staticSwitch14_g157905;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g157896 = ( 0.0 );
				float localCompData3_g157883 = ( 0.0 );
				TVEVisualData Data3_g157883 = (TVEVisualData)0;
				half Dummy145_g157881 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g157883 = Dummy145_g157881;
				float localBreakData4_g157882 = ( 0.0 );
				float localCompData3_g157872 = ( 0.0 );
				TVEVisualData Data3_g157872 = (TVEVisualData)0;
				half Dummy145_g157860 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g157872 = Dummy145_g157860;
				float localBreakData4_g157871 = ( 0.0 );
				float localCompData3_g157836 = ( 0.0 );
				TVEVisualData Data3_g157836 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g157833 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g157836 = Dummy594_g157833.r;
				float localBreakData4_g157834 = ( 0.0 );
				float localCompData3_g157489 = ( 0.0 );
				TVEVisualData Data3_g157489 = (TVEVisualData)0;
				float In_Dummy3_g157489 = 0.0;
				float localBreakData4_g157487 = ( 0.0 );
				float localCompData3_g157480 = ( 0.0 );
				TVEVisualData Data3_g157480 = (TVEVisualData)0;
				half Dummy220_g157476 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g157480 = Dummy220_g157476;
				float localBreakData4_g157479 = ( 0.0 );
				float localCompData3_g157468 = ( 0.0 );
				TVEVisualData Data3_g157468 = (TVEVisualData)0;
				half Dummy202_g157466 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g157468 = Dummy202_g157466;
				float localBreakData4_g157467 = ( 0.0 );
				float localCompData3_g157454 = ( 0.0 );
				TVEVisualData Data3_g157454 = (TVEVisualData)0;
				half4 Dummy944_g157436 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g157454 = Dummy944_g157436.x;
				float localBreakData4_g157453 = ( 0.0 );
				float localCompData3_g157416 = ( 0.0 );
				TVEVisualData Data3_g157416 = (TVEVisualData)0;
				half4 Dummy946_g157405 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g157416 = Dummy946_g157405.x;
				float localBreakData4_g157419 = ( 0.0 );
				float localCompData3_g157401 = ( 0.0 );
				TVEVisualData Data3_g157401 = (TVEVisualData)0;
				half4 Dummy130_g157391 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g157401 = Dummy130_g157391.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157402) = _MainAlbedoTex;
				SamplerState Sampler276_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g157391 = _main_coord_value;
				float4 temp_output_37_0_g157402 = Local_Coords180_g157391;
				half4 Coords276_g157402 = temp_output_37_0_g157402;
				half2 TexCoord276_g157402 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157402 = SampleMain( Texture276_g157402 , Sampler276_g157402 , Coords276_g157402 , TexCoord276_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157402) = _MainAlbedoTex;
				SamplerState Sampler275_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157402 = temp_output_37_0_g157402;
				float2 appendResult289_g157402 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157402 = appendResult289_g157402;
				#else
				float2 staticSwitch288_g157402 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157402 = staticSwitch288_g157402;
				half4 localSampleExtra275_g157402 = SampleExtra( Texture275_g157402 , Sampler275_g157402 , Coords275_g157402 , TexCoord275_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157402) = _MainAlbedoTex;
				SamplerState Sampler238_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157402 = temp_output_37_0_g157402;
				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = IN.ase_texcoord12.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 vertexToFrag73_g154892 = IN.ase_texcoord13.xyz;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float3 vertexToFrag76_g154892 = IN.ase_texcoord14.xyz;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(IN.ase_texcoord15.x , 0.0 , IN.ase_texcoord15.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = IN.ase_normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = IN.ase_tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = IN.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( IN.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( IN.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( IN.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( IN.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = IN.ase_texcoord9.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ) );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157392 = Data16_g157339;
				float Out_Dummy15_g157392 = 0;
				float3 Out_PositionOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157392 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157392 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157392 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157392 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157392 = float3( 0,0,0 );
				float4 Out_VertexData15_g157392 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157392 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157392 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157392 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157392 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157392 = Data15_g157392.Dummy;
				Out_PositionOS15_g157392 = Data15_g157392.PositionOS;
				Out_PositionWS15_g157392 = Data15_g157392.PositionWS;
				Out_PositionWO15_g157392 = Data15_g157392.PositionWO;
				Out_PositionRawOS15_g157392 = Data15_g157392.PositionRawOS;
				Out_PositionAddOS15_g157392 = Data15_g157392.PositionAddOS;
				Out_PivotOS15_g157392 = Data15_g157392.PivotOS;
				Out_PivotWS15_g157392 = Data15_g157392.PivotWS;
				Out_PivotWO15_g157392 = Data15_g157392.PivotWO;
				Out_NormalOS15_g157392 = Data15_g157392.NormalOS;
				Out_NormalWS15_g157392 = Data15_g157392.NormalWS;
				Out_NormalRawOS15_g157392 = Data15_g157392.NormalRawOS;
				Out_NormalRawWS15_g157392 = Data15_g157392.NormalRawWS;
				Out_TangentOS15_g157392 = Data15_g157392.TangentOS;
				Out_ViewDirWS15_g157392 = Data15_g157392.ViewDirWS;
				Out_VertexData15_g157392 = Data15_g157392.VertexData;
				Out_MotionData15_g157392 = Data15_g157392.MotionData;
				Out_BoundsData15_g157392 = Data15_g157392.BoundsData;
				Out_RotationData15_g157392 = Data15_g157392.RotationData;
				Out_FragmentData15_g157392 = Data15_g157392.FragmentData;
				}
				half3 Model_PositionWO222_g157391 = Out_PositionWO15_g157392;
				float3 temp_output_279_0_g157402 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157402 = temp_output_279_0_g157402;
				half4 localSamplePlanar2D238_g157402 = SamplePlanar2D( Texture238_g157402 , Sampler238_g157402 , Coords238_g157402 , WorldPosition238_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157402) = _MainAlbedoTex;
				SamplerState Sampler246_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition246_g157402 = temp_output_279_0_g157402;
				half3 Model_NormalWS226_g157391 = Out_NormalWS15_g157392;
				float3 temp_output_280_0_g157402 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157402 = temp_output_280_0_g157402;
				half4 localSamplePlanar3D246_g157402 = SamplePlanar3D( Texture246_g157402 , Sampler246_g157402 , Coords246_g157402 , WorldPosition246_g157402 , WorldNormal246_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157402) = _MainAlbedoTex;
				SamplerState Sampler234_g157402 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157402 = temp_output_37_0_g157402;
				float3 WorldPosition234_g157402 = temp_output_279_0_g157402;
				float4 localSampleStochastic2D234_g157402 = SampleStochastic2D( Texture234_g157402 , Sampler234_g157402 , Coords234_g157402 , WorldPosition234_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157402) = _MainAlbedoTex;
				SamplerState Sampler263_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition263_g157402 = temp_output_279_0_g157402;
				half3 WorldNormal263_g157402 = temp_output_280_0_g157402;
				half4 localSampleStochastic3D263_g157402 = SampleStochastic3D( Texture263_g157402 , Sampler263_g157402 , Coords263_g157402 , WorldPosition263_g157402 , WorldNormal263_g157402 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g157391 = localSampleExtra275_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g157391 = localSamplePlanar2D238_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g157391 = localSamplePlanar3D246_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g157391 = localSampleStochastic2D234_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g157391 = localSampleStochastic3D263_g157402;
				#else
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#endif
				half4 Local_AlbedoTex185_g157391 = staticSwitch184_g157391;
				float3 lerpResult53_g157391 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g157391).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g157391 = lerpResult53_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157404) = _MainShaderTex;
				SamplerState Sampler276_g157404 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157404 = Local_Coords180_g157391;
				half4 Coords276_g157404 = temp_output_37_0_g157404;
				half2 TexCoord276_g157404 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157404 = SampleMain( Texture276_g157404 , Sampler276_g157404 , Coords276_g157404 , TexCoord276_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157404) = _MainShaderTex;
				SamplerState Sampler275_g157404 = sampler_Linear_Repeat;
				half4 Coords275_g157404 = temp_output_37_0_g157404;
				float2 appendResult289_g157404 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157404 = appendResult289_g157404;
				#else
				float2 staticSwitch288_g157404 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157404 = staticSwitch288_g157404;
				half4 localSampleExtra275_g157404 = SampleExtra( Texture275_g157404 , Sampler275_g157404 , Coords275_g157404 , TexCoord275_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157404) = _MainShaderTex;
				SamplerState Sampler238_g157404 = sampler_Linear_Repeat;
				half4 Coords238_g157404 = temp_output_37_0_g157404;
				float3 temp_output_279_0_g157404 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157404 = temp_output_279_0_g157404;
				half4 localSamplePlanar2D238_g157404 = SamplePlanar2D( Texture238_g157404 , Sampler238_g157404 , Coords238_g157404 , WorldPosition238_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157404) = _MainShaderTex;
				SamplerState Sampler246_g157404 = sampler_Linear_Repeat;
				half4 Coords246_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition246_g157404 = temp_output_279_0_g157404;
				float3 temp_output_280_0_g157404 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157404 = temp_output_280_0_g157404;
				half4 localSamplePlanar3D246_g157404 = SamplePlanar3D( Texture246_g157404 , Sampler246_g157404 , Coords246_g157404 , WorldPosition246_g157404 , WorldNormal246_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157404) = _MainShaderTex;
				SamplerState Sampler234_g157404 = sampler_Linear_Repeat;
				float4 Coords234_g157404 = temp_output_37_0_g157404;
				float3 WorldPosition234_g157404 = temp_output_279_0_g157404;
				float4 localSampleStochastic2D234_g157404 = SampleStochastic2D( Texture234_g157404 , Sampler234_g157404 , Coords234_g157404 , WorldPosition234_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157404) = _MainShaderTex;
				SamplerState Sampler263_g157404 = sampler_Linear_Repeat;
				half4 Coords263_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition263_g157404 = temp_output_279_0_g157404;
				half3 WorldNormal263_g157404 = temp_output_280_0_g157404;
				half4 localSampleStochastic3D263_g157404 = SampleStochastic3D( Texture263_g157404 , Sampler263_g157404 , Coords263_g157404 , WorldPosition263_g157404 , WorldNormal263_g157404 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g157391 = localSampleExtra275_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g157391 = localSamplePlanar2D238_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g157391 = localSamplePlanar3D246_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g157391 = localSampleStochastic2D234_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g157391 = localSampleStochastic3D263_g157404;
				#else
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#endif
				half4 Local_MasksTex199_g157391 = staticSwitch198_g157391;
				float lerpResult23_g157391 = lerp( 1.0 , (Local_MasksTex199_g157391).y , _MainOcclusionValue);
				float4 appendResult73_g157391 = (float4(( (Local_MasksTex199_g157391).x * _MainMetallicValue ) , lerpResult23_g157391 , (Local_MasksTex199_g157391).z , ( (Local_MasksTex199_g157391).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g157391 = appendResult73_g157391;
				float clampResult17_g157397 = clamp( (Local_Masks109_g157391).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157398 = _MainMultiRemap.x;
				float temp_output_10_0_g157398 = ( _MainMultiRemap.y - temp_output_7_0_g157398 );
				half Local_MultiMask78_g157391 = saturate( ( ( clampResult17_g157397 - temp_output_7_0_g157398 ) / ( temp_output_10_0_g157398 + 0.0001 ) ) );
				float lerpResult58_g157391 = lerp( 1.0 , Local_MultiMask78_g157391 , _MainColorMode);
				float4 lerpResult62_g157391 = lerp( _MainColorTwo , _MainColor , lerpResult58_g157391);
				half3 Local_ColorRGB93_g157391 = (lerpResult62_g157391).rgb;
				half3 Local_Albedo139_g157391 = ( Local_AlbedoRGB107_g157391 * Local_ColorRGB93_g157391 );
				float3 In_Albedo3_g157401 = Local_Albedo139_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157403) = _MainNormalTex;
				SamplerState Sampler276_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g157403 = Local_Coords180_g157391;
				half4 Coords276_g157403 = temp_output_37_0_g157403;
				half2 TexCoord276_g157403 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157403 = SampleMain( Texture276_g157403 , Sampler276_g157403 , Coords276_g157403 , TexCoord276_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157403) = _MainNormalTex;
				SamplerState Sampler275_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157403 = temp_output_37_0_g157403;
				float2 appendResult289_g157403 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157403 = appendResult289_g157403;
				#else
				float2 staticSwitch288_g157403 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157403 = staticSwitch288_g157403;
				half4 localSampleExtra275_g157403 = SampleExtra( Texture275_g157403 , Sampler275_g157403 , Coords275_g157403 , TexCoord275_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157403) = _MainNormalTex;
				SamplerState Sampler238_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157403 = temp_output_37_0_g157403;
				float3 temp_output_279_0_g157403 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157403 = temp_output_279_0_g157403;
				half4 localSamplePlanar2D238_g157403 = SamplePlanar2D( Texture238_g157403 , Sampler238_g157403 , Coords238_g157403 , WorldPosition238_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157403) = _MainNormalTex;
				SamplerState Sampler246_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition246_g157403 = temp_output_279_0_g157403;
				float3 temp_output_280_0_g157403 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157403 = temp_output_280_0_g157403;
				half4 localSamplePlanar3D246_g157403 = SamplePlanar3D( Texture246_g157403 , Sampler246_g157403 , Coords246_g157403 , WorldPosition246_g157403 , WorldNormal246_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157403) = _MainNormalTex;
				SamplerState Sampler234_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157403 = temp_output_37_0_g157403;
				float3 WorldPosition234_g157403 = temp_output_279_0_g157403;
				float4 localSampleStochastic2D234_g157403 = SampleStochastic2D( Texture234_g157403 , Sampler234_g157403 , Coords234_g157403 , WorldPosition234_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157403) = _MainNormalTex;
				SamplerState Sampler263_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition263_g157403 = temp_output_279_0_g157403;
				half3 WorldNormal263_g157403 = temp_output_280_0_g157403;
				half4 localSampleStochastic3D263_g157403 = SampleStochastic3D( Texture263_g157403 , Sampler263_g157403 , Coords263_g157403 , WorldPosition263_g157403 , WorldNormal263_g157403 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g157391 = localSampleExtra275_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g157391 = localSamplePlanar2D238_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g157391 = localSamplePlanar3D246_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g157391 = localSampleStochastic2D234_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g157391 = localSampleStochastic3D263_g157403;
				#else
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#endif
				half4 Local_NormaTex191_g157391 = staticSwitch193_g157391;
				half4 Normal_Packed45_g157393 = Local_NormaTex191_g157391;
				float2 appendResult58_g157393 = (float2(( (Normal_Packed45_g157393).x * (Normal_Packed45_g157393).w ) , (Normal_Packed45_g157393).y));
				half2 Normal_Default50_g157393 = appendResult58_g157393;
				half2 Normal_ASTC41_g157393 = (Normal_Packed45_g157393).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157393 = Normal_ASTC41_g157393;
				#else
				float2 staticSwitch38_g157393 = Normal_Default50_g157393;
				#endif
				half2 Normal_NO_DTX544_g157393 = (Normal_Packed45_g157393).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157393 = Normal_NO_DTX544_g157393;
				#else
				float2 staticSwitch37_g157393 = staticSwitch38_g157393;
				#endif
				float2 temp_output_26_0_g157391 = ( (staticSwitch37_g157393*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g157394 = temp_output_26_0_g157391;
				float2 break71_g157394 = Normal_Planar45_g157394;
				float3 appendResult72_g157394 = (float3(break71_g157394.x , 0.0 , break71_g157394.y));
				float2 temp_output_205_0_g157391 = (mul( ase_worldToTangent, appendResult72_g157394 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#else
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#endif
				half2 Local_NormalTS108_g157391 = staticSwitch204_g157391;
				float2 In_NormalTS3_g157401 = Local_NormalTS108_g157391;
				float3 appendResult68_g157395 = (float3(Local_NormalTS108_g157391 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g157395 = appendResult68_g157395;
				float3 worldNormal74_g157395 = normalize( float3(dot(tanToWorld0,tanNormal74_g157395), dot(tanToWorld1,tanNormal74_g157395), dot(tanToWorld2,tanNormal74_g157395)) );
				half3 Local_NormalWS250_g157391 = worldNormal74_g157395;
				float3 In_NormalWS3_g157401 = Local_NormalWS250_g157391;
				float4 In_Shader3_g157401 = Local_Masks109_g157391;
				float4 In_Emissive3_g157401 = half4(1,1,1,1);
				float3 temp_output_3_0_g157396 = Local_Albedo139_g157391;
				float dotResult20_g157396 = dot( temp_output_3_0_g157396 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g157391 = dotResult20_g157396;
				float In_Grayscale3_g157401 = Local_Grayscale110_g157391;
				float clampResult144_g157391 = clamp( saturate( ( Local_Grayscale110_g157391 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g157391 = clampResult144_g157391;
				float In_Luminosity3_g157401 = Local_Luminosity145_g157391;
				float In_MultiMask3_g157401 = Local_MultiMask78_g157391;
				float temp_output_187_0_g157391 = (Local_AlbedoTex185_g157391).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g157391 = ( temp_output_187_0_g157391 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g157391 = temp_output_187_0_g157391;
				#endif
				half Local_AlphaClip111_g157391 = staticSwitch236_g157391;
				float In_AlphaClip3_g157401 = Local_AlphaClip111_g157391;
				half Local_AlphaFade246_g157391 = (lerpResult62_g157391).a;
				float In_AlphaFade3_g157401 = Local_AlphaFade246_g157391;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g157401 = temp_cast_22;
				float In_Transmission3_g157401 = 1.0;
				float In_Thickness3_g157401 = 0.0;
				float In_Diffusion3_g157401 = 0.0;
				{
				Data3_g157401.Dummy = In_Dummy3_g157401;
				Data3_g157401.Albedo = In_Albedo3_g157401;
				Data3_g157401.NormalTS = In_NormalTS3_g157401;
				Data3_g157401.NormalWS = In_NormalWS3_g157401;
				Data3_g157401.Shader = In_Shader3_g157401;
				Data3_g157401.Emissive= In_Emissive3_g157401;
				Data3_g157401.MultiMask = In_MultiMask3_g157401;
				Data3_g157401.Grayscale = In_Grayscale3_g157401;
				Data3_g157401.Luminosity = In_Luminosity3_g157401;
				Data3_g157401.AlphaClip = In_AlphaClip3_g157401;
				Data3_g157401.AlphaFade = In_AlphaFade3_g157401;
				Data3_g157401.Translucency = In_Translucency3_g157401;
				Data3_g157401.Transmission = In_Transmission3_g157401;
				Data3_g157401.Thickness = In_Thickness3_g157401;
				Data3_g157401.Diffusion = In_Diffusion3_g157401;
				}
				TVEVisualData Data4_g157419 = Data3_g157401;
				float Out_Dummy4_g157419 = 0;
				float3 Out_Albedo4_g157419 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157419 = float2( 0,0 );
				float3 Out_NormalWS4_g157419 = float3( 0,0,0 );
				float4 Out_Shader4_g157419 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157419 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157419 = 0;
				float Out_Grayscale4_g157419 = 0;
				float Out_Luminosity4_g157419 = 0;
				float Out_AlphaClip4_g157419 = 0;
				float Out_AlphaFade4_g157419 = 0;
				float3 Out_Translucency4_g157419 = float3( 0,0,0 );
				float Out_Transmission4_g157419 = 0;
				float Out_Thickness4_g157419 = 0;
				float Out_Diffusion4_g157419 = 0;
				{
				Out_Dummy4_g157419 = Data4_g157419.Dummy;
				Out_Albedo4_g157419 = Data4_g157419.Albedo;
				Out_NormalTS4_g157419 = Data4_g157419.NormalTS;
				Out_NormalWS4_g157419 = Data4_g157419.NormalWS;
				Out_Shader4_g157419 = Data4_g157419.Shader;
				Out_Emissive4_g157419= Data4_g157419.Emissive;
				Out_MultiMask4_g157419 = Data4_g157419.MultiMask;
				Out_Grayscale4_g157419 = Data4_g157419.Grayscale;
				Out_Luminosity4_g157419= Data4_g157419.Luminosity;
				Out_AlphaClip4_g157419 = Data4_g157419.AlphaClip;
				Out_AlphaFade4_g157419 = Data4_g157419.AlphaFade;
				Out_Translucency4_g157419 = Data4_g157419.Translucency;
				Out_Transmission4_g157419 = Data4_g157419.Transmission;
				Out_Thickness4_g157419 = Data4_g157419.Thickness;
				Out_Diffusion4_g157419 = Data4_g157419.Diffusion;
				}
				half3 Visual_Albedo527_g157405 = Out_Albedo4_g157419;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157406) = _SecondAlbedoTex;
				SamplerState Sampler276_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157405 = _second_coord_value;
				float4 temp_output_37_0_g157406 = Local_LayerCoords790_g157405;
				half4 Coords276_g157406 = temp_output_37_0_g157406;
				half2 TexCoord276_g157406 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157406 = SampleMain( Texture276_g157406 , Sampler276_g157406 , Coords276_g157406 , TexCoord276_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157406) = _SecondAlbedoTex;
				SamplerState Sampler275_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157406 = temp_output_37_0_g157406;
				float2 appendResult289_g157406 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157406 = appendResult289_g157406;
				#else
				float2 staticSwitch288_g157406 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157406 = staticSwitch288_g157406;
				half4 localSampleExtra275_g157406 = SampleExtra( Texture275_g157406 , Sampler275_g157406 , Coords275_g157406 , TexCoord275_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157406) = _SecondAlbedoTex;
				SamplerState Sampler238_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157406 = temp_output_37_0_g157406;
				TVEModelData Data15_g157417 = Data16_g157339;
				float Out_Dummy15_g157417 = 0;
				float3 Out_PositionOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157417 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157417 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157417 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157417 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157417 = float3( 0,0,0 );
				float4 Out_VertexData15_g157417 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157417 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157417 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157417 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157417 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157417 = Data15_g157417.Dummy;
				Out_PositionOS15_g157417 = Data15_g157417.PositionOS;
				Out_PositionWS15_g157417 = Data15_g157417.PositionWS;
				Out_PositionWO15_g157417 = Data15_g157417.PositionWO;
				Out_PositionRawOS15_g157417 = Data15_g157417.PositionRawOS;
				Out_PositionAddOS15_g157417 = Data15_g157417.PositionAddOS;
				Out_PivotOS15_g157417 = Data15_g157417.PivotOS;
				Out_PivotWS15_g157417 = Data15_g157417.PivotWS;
				Out_PivotWO15_g157417 = Data15_g157417.PivotWO;
				Out_NormalOS15_g157417 = Data15_g157417.NormalOS;
				Out_NormalWS15_g157417 = Data15_g157417.NormalWS;
				Out_NormalRawOS15_g157417 = Data15_g157417.NormalRawOS;
				Out_NormalRawWS15_g157417 = Data15_g157417.NormalRawWS;
				Out_TangentOS15_g157417 = Data15_g157417.TangentOS;
				Out_ViewDirWS15_g157417 = Data15_g157417.ViewDirWS;
				Out_VertexData15_g157417 = Data15_g157417.VertexData;
				Out_MotionData15_g157417 = Data15_g157417.MotionData;
				Out_BoundsData15_g157417 = Data15_g157417.BoundsData;
				Out_RotationData15_g157417 = Data15_g157417.RotationData;
				Out_FragmentData15_g157417 = Data15_g157417.FragmentData;
				}
				half3 Model_PositionWO636_g157405 = Out_PositionWO15_g157417;
				float3 temp_output_279_0_g157406 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157406 = temp_output_279_0_g157406;
				half4 localSamplePlanar2D238_g157406 = SamplePlanar2D( Texture238_g157406 , Sampler238_g157406 , Coords238_g157406 , WorldPosition238_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157406) = _SecondAlbedoTex;
				SamplerState Sampler246_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition246_g157406 = temp_output_279_0_g157406;
				half3 Model_NormalWS869_g157405 = Out_NormalWS15_g157417;
				float3 temp_output_280_0_g157406 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157406 = temp_output_280_0_g157406;
				half4 localSamplePlanar3D246_g157406 = SamplePlanar3D( Texture246_g157406 , Sampler246_g157406 , Coords246_g157406 , WorldPosition246_g157406 , WorldNormal246_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157406) = _SecondAlbedoTex;
				SamplerState Sampler234_g157406 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157406 = temp_output_37_0_g157406;
				float3 WorldPosition234_g157406 = temp_output_279_0_g157406;
				float4 localSampleStochastic2D234_g157406 = SampleStochastic2D( Texture234_g157406 , Sampler234_g157406 , Coords234_g157406 , WorldPosition234_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157406) = _SecondAlbedoTex;
				SamplerState Sampler263_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition263_g157406 = temp_output_279_0_g157406;
				half3 WorldNormal263_g157406 = temp_output_280_0_g157406;
				half4 localSampleStochastic3D263_g157406 = SampleStochastic3D( Texture263_g157406 , Sampler263_g157406 , Coords263_g157406 , WorldPosition263_g157406 , WorldNormal263_g157406 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157405 = localSampleExtra275_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157405 = localSamplePlanar2D238_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157405 = localSamplePlanar3D246_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157405 = localSampleStochastic2D234_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157405 = localSampleStochastic3D263_g157406;
				#else
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#endif
				half4 Local_AlbedoTex777_g157405 = staticSwitch693_g157405;
				float3 lerpResult716_g157405 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157405).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g157405 = lerpResult716_g157405;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157408) = _SecondShaderTex;
				SamplerState Sampler276_g157408 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157408 = Local_LayerCoords790_g157405;
				half4 Coords276_g157408 = temp_output_37_0_g157408;
				half2 TexCoord276_g157408 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157408 = SampleMain( Texture276_g157408 , Sampler276_g157408 , Coords276_g157408 , TexCoord276_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157408) = _SecondShaderTex;
				SamplerState Sampler275_g157408 = sampler_Linear_Repeat;
				half4 Coords275_g157408 = temp_output_37_0_g157408;
				float2 appendResult289_g157408 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157408 = appendResult289_g157408;
				#else
				float2 staticSwitch288_g157408 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157408 = staticSwitch288_g157408;
				half4 localSampleExtra275_g157408 = SampleExtra( Texture275_g157408 , Sampler275_g157408 , Coords275_g157408 , TexCoord275_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157408) = _SecondShaderTex;
				SamplerState Sampler238_g157408 = sampler_Linear_Repeat;
				half4 Coords238_g157408 = temp_output_37_0_g157408;
				float3 temp_output_279_0_g157408 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157408 = temp_output_279_0_g157408;
				half4 localSamplePlanar2D238_g157408 = SamplePlanar2D( Texture238_g157408 , Sampler238_g157408 , Coords238_g157408 , WorldPosition238_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157408) = _SecondShaderTex;
				SamplerState Sampler246_g157408 = sampler_Linear_Repeat;
				half4 Coords246_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition246_g157408 = temp_output_279_0_g157408;
				float3 temp_output_280_0_g157408 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157408 = temp_output_280_0_g157408;
				half4 localSamplePlanar3D246_g157408 = SamplePlanar3D( Texture246_g157408 , Sampler246_g157408 , Coords246_g157408 , WorldPosition246_g157408 , WorldNormal246_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157408) = _SecondShaderTex;
				SamplerState Sampler234_g157408 = sampler_Linear_Repeat;
				float4 Coords234_g157408 = temp_output_37_0_g157408;
				float3 WorldPosition234_g157408 = temp_output_279_0_g157408;
				float4 localSampleStochastic2D234_g157408 = SampleStochastic2D( Texture234_g157408 , Sampler234_g157408 , Coords234_g157408 , WorldPosition234_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157408) = _SecondShaderTex;
				SamplerState Sampler263_g157408 = sampler_Linear_Repeat;
				half4 Coords263_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition263_g157408 = temp_output_279_0_g157408;
				half3 WorldNormal263_g157408 = temp_output_280_0_g157408;
				half4 localSampleStochastic3D263_g157408 = SampleStochastic3D( Texture263_g157408 , Sampler263_g157408 , Coords263_g157408 , WorldPosition263_g157408 , WorldNormal263_g157408 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157405 = localSampleExtra275_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157405 = localSamplePlanar2D238_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157405 = localSamplePlanar3D246_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157405 = localSampleStochastic2D234_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157405 = localSampleStochastic3D263_g157408;
				#else
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#endif
				half4 Local_ShaderTex775_g157405 = staticSwitch722_g157405;
				float lerpResult739_g157405 = lerp( 1.0 , (Local_ShaderTex775_g157405).y , _SecondOcclusionValue);
				float4 appendResult749_g157405 = (float4(( (Local_ShaderTex775_g157405).x * _SecondMetallicValue ) , lerpResult739_g157405 , (Local_ShaderTex775_g157405).z , ( (Local_ShaderTex775_g157405).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g157405 = appendResult749_g157405;
				float clampResult17_g157412 = clamp( (Local_Masks750_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157413 = _SecondMultiRemap.x;
				float temp_output_10_0_g157413 = ( _SecondMultiRemap.y - temp_output_7_0_g157413 );
				float temp_output_765_0_g157405 = saturate( ( ( clampResult17_g157412 - temp_output_7_0_g157413 ) / ( temp_output_10_0_g157413 + 0.0001 ) ) );
				half Local_MultiMask767_g157405 = temp_output_765_0_g157405;
				float lerpResult705_g157405 = lerp( 1.0 , Local_MultiMask767_g157405 , _SecondColorMode);
				float4 lerpResult706_g157405 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g157405);
				half3 Local_ColorRGB774_g157405 = (lerpResult706_g157405).rgb;
				half3 Local_Albedo768_g157405 = ( Local_AlbedoRGB771_g157405 * Local_ColorRGB774_g157405 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157432 = 2.0;
				#else
				float staticSwitch1_g157432 = 4.594794;
				#endif
				float3 lerpResult985_g157405 = lerp( Local_Albedo768_g157405 , ( Visual_Albedo527_g157405 * Local_Albedo768_g157405 * staticSwitch1_g157432 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157409) = _SecondMaskTex;
				SamplerState Sampler276_g157409 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g157405 = _second_mask_coord_value;
				float4 temp_output_37_0_g157409 = Local_BlendCoords813_g157405;
				half4 Coords276_g157409 = temp_output_37_0_g157409;
				half2 TexCoord276_g157409 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157409 = SampleMain( Texture276_g157409 , Sampler276_g157409 , Coords276_g157409 , TexCoord276_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157409) = _SecondMaskTex;
				SamplerState Sampler275_g157409 = sampler_Linear_Repeat;
				half4 Coords275_g157409 = temp_output_37_0_g157409;
				float2 appendResult289_g157409 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157409 = appendResult289_g157409;
				#else
				float2 staticSwitch288_g157409 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157409 = staticSwitch288_g157409;
				half4 localSampleExtra275_g157409 = SampleExtra( Texture275_g157409 , Sampler275_g157409 , Coords275_g157409 , TexCoord275_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157409) = _SecondMaskTex;
				SamplerState Sampler238_g157409 = sampler_Linear_Repeat;
				half4 Coords238_g157409 = temp_output_37_0_g157409;
				float3 temp_output_279_0_g157409 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157409 = temp_output_279_0_g157409;
				half4 localSamplePlanar2D238_g157409 = SamplePlanar2D( Texture238_g157409 , Sampler238_g157409 , Coords238_g157409 , WorldPosition238_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157409) = _SecondMaskTex;
				SamplerState Sampler246_g157409 = sampler_Linear_Repeat;
				half4 Coords246_g157409 = temp_output_37_0_g157409;
				half3 WorldPosition246_g157409 = temp_output_279_0_g157409;
				float3 temp_output_280_0_g157409 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157409 = temp_output_280_0_g157409;
				half4 localSamplePlanar3D246_g157409 = SamplePlanar3D( Texture246_g157409 , Sampler246_g157409 , Coords246_g157409 , WorldPosition246_g157409 , WorldNormal246_g157409 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157405 = localSampleExtra275_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157405 = localSamplePlanar2D238_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157405 = localSamplePlanar3D246_g157409;
				#else
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#endif
				half4 Local_MaskTex861_g157405 = staticSwitch817_g157405;
				float clampResult17_g157423 = clamp( (Local_MaskTex861_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157422 = _SecondMaskRemap.x;
				float temp_output_10_0_g157422 = ( _SecondMaskRemap.y - temp_output_7_0_g157422 );
				float lerpResult1015_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157423 - temp_output_7_0_g157422 ) / ( temp_output_10_0_g157422 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g157405 = lerpResult1015_g157405;
				#else
				float staticSwitch893_g157405 = 1.0;
				#endif
				half Blend_TexMask429_g157405 = staticSwitch893_g157405;
				half3 Visual_NormalWS951_g157405 = Out_NormalWS4_g157419;
				float clampResult17_g157424 = clamp( saturate( (Visual_NormalWS951_g157405).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157425 = _SecondProjRemap.x;
				float temp_output_10_0_g157425 = ( _SecondProjRemap.y - temp_output_7_0_g157425 );
				float lerpResult996_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157424 - temp_output_7_0_g157425 ) / ( temp_output_10_0_g157425 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g157405 = lerpResult996_g157405;
				#else
				float staticSwitch878_g157405 = 1.0;
				#endif
				half Blend_ProjMask434_g157405 = staticSwitch878_g157405;
				half4 Model_VertexMasks964_g157405 = Out_VertexData15_g157417;
				float4 break965_g157405 = Model_VertexMasks964_g157405;
				float4 break33_g157426 = _second_vert_mode;
				float temp_output_30_0_g157426 = ( break965_g157405.x * break33_g157426.x );
				float temp_output_29_0_g157426 = ( break965_g157405.y * break33_g157426.y );
				float temp_output_31_0_g157426 = ( break965_g157405.z * break33_g157426.z );
				float temp_output_28_0_g157426 = ( temp_output_30_0_g157426 + temp_output_29_0_g157426 + temp_output_31_0_g157426 + ( break965_g157405.w * break33_g157426.w ) );
				float clampResult17_g157420 = clamp( temp_output_28_0_g157426 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157421 = _SecondMeshRemap.x;
				float temp_output_10_0_g157421 = ( _SecondMeshRemap.y - temp_output_7_0_g157421 );
				float lerpResult1017_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157420 - temp_output_7_0_g157421 ) / ( temp_output_10_0_g157421 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g157434 = lerpResult1017_g157405;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157434 = ( temp_output_6_0_g157434 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157434 = temp_output_6_0_g157434;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g157405 = staticSwitch14_g157434;
				#else
				float staticSwitch917_g157405 = 1.0;
				#endif
				half Blend_VertMask918_g157405 = staticSwitch917_g157405;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				{
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				}
				TVEGlobalData Data15_g157418 = Data204_g157340;
				float Out_Dummy15_g157418 = 0;
				float4 Out_CoatParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157418 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157418 = Data15_g157418.Dummy;
				Out_CoatParams15_g157418 = Data15_g157418.CoatParams;
				Out_PaintParams15_g157418 = Data15_g157418.PaintParams;
				Out_GlowParams15_g157418 = Data15_g157418.GlowParams;
				Out_AtmoParams15_g157418= Data15_g157418.AtmoParams;
				Out_FormParams15_g157418 = Data15_g157418.FormParams;
				Out_LandParams15_g157418 = Data15_g157418.LandParams;
				Out_WindParams15_g157418 = Data15_g157418.WindParams;
				Out_PushParams15_g157418 = Data15_g157418.PushParams;
				}
				half4 Global_CoatParams975_g157405 = Out_CoatParams15_g157418;
				float lerpResult1013_g157405 = lerp( 1.0 , (Global_CoatParams975_g157405).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g157405 = lerpResult1013_g157405;
				#else
				float staticSwitch971_g157405 = 1.0;
				#endif
				half Blend_GlobalMask972_g157405 = staticSwitch971_g157405;
				float temp_output_432_0_g157405 = ( _SecondIntensityValue * Blend_TexMask429_g157405 * Blend_ProjMask434_g157405 * Blend_VertMask918_g157405 * Blend_GlobalMask972_g157405 );
				float clampResult17_g157428 = clamp( temp_output_432_0_g157405 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157427 = _SecondBlendRemap.x;
				float temp_output_10_0_g157427 = ( _SecondBlendRemap.y - temp_output_7_0_g157427 );
				half Blend_Mask412_g157405 = ( saturate( ( ( clampResult17_g157428 - temp_output_7_0_g157427 ) / ( temp_output_10_0_g157427 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g157405 = lerp( Visual_Albedo527_g157405 , lerpResult985_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g157405 = lerpResult403_g157405;
				#else
				float3 staticSwitch415_g157405 = Visual_Albedo527_g157405;
				#endif
				half3 Final_Albedo601_g157405 = staticSwitch415_g157405;
				float3 In_Albedo3_g157416 = Final_Albedo601_g157405;
				half2 Visual_NormalTS529_g157405 = Out_NormalTS4_g157419;
				float2 lerpResult40_g157430 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157405 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157407) = _SecondNormalTex;
				SamplerState Sampler276_g157407 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157407 = Local_LayerCoords790_g157405;
				half4 Coords276_g157407 = temp_output_37_0_g157407;
				half2 TexCoord276_g157407 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157407 = SampleMain( Texture276_g157407 , Sampler276_g157407 , Coords276_g157407 , TexCoord276_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157407) = _SecondNormalTex;
				SamplerState Sampler275_g157407 = sampler_Linear_Repeat;
				half4 Coords275_g157407 = temp_output_37_0_g157407;
				float2 appendResult289_g157407 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157407 = appendResult289_g157407;
				#else
				float2 staticSwitch288_g157407 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157407 = staticSwitch288_g157407;
				half4 localSampleExtra275_g157407 = SampleExtra( Texture275_g157407 , Sampler275_g157407 , Coords275_g157407 , TexCoord275_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157407) = _SecondNormalTex;
				SamplerState Sampler238_g157407 = sampler_Linear_Repeat;
				half4 Coords238_g157407 = temp_output_37_0_g157407;
				float3 temp_output_279_0_g157407 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157407 = temp_output_279_0_g157407;
				half4 localSamplePlanar2D238_g157407 = SamplePlanar2D( Texture238_g157407 , Sampler238_g157407 , Coords238_g157407 , WorldPosition238_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157407) = _SecondNormalTex;
				SamplerState Sampler246_g157407 = sampler_Linear_Repeat;
				half4 Coords246_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition246_g157407 = temp_output_279_0_g157407;
				float3 temp_output_280_0_g157407 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157407 = temp_output_280_0_g157407;
				half4 localSamplePlanar3D246_g157407 = SamplePlanar3D( Texture246_g157407 , Sampler246_g157407 , Coords246_g157407 , WorldPosition246_g157407 , WorldNormal246_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157407) = _SecondNormalTex;
				SamplerState Sampler234_g157407 = sampler_Linear_Repeat;
				float4 Coords234_g157407 = temp_output_37_0_g157407;
				float3 WorldPosition234_g157407 = temp_output_279_0_g157407;
				float4 localSampleStochastic2D234_g157407 = SampleStochastic2D( Texture234_g157407 , Sampler234_g157407 , Coords234_g157407 , WorldPosition234_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157407) = _SecondNormalTex;
				SamplerState Sampler263_g157407 = sampler_Linear_Repeat;
				half4 Coords263_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition263_g157407 = temp_output_279_0_g157407;
				half3 WorldNormal263_g157407 = temp_output_280_0_g157407;
				half4 localSampleStochastic3D263_g157407 = SampleStochastic3D( Texture263_g157407 , Sampler263_g157407 , Coords263_g157407 , WorldPosition263_g157407 , WorldNormal263_g157407 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157405 = localSampleExtra275_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157405 = localSamplePlanar2D238_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157405 = localSamplePlanar3D246_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157405 = localSampleStochastic2D234_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157405 = localSampleStochastic3D263_g157407;
				#else
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#endif
				half4 Local_NormalTex776_g157405 = staticSwitch698_g157405;
				half4 Normal_Packed45_g157410 = Local_NormalTex776_g157405;
				float2 appendResult58_g157410 = (float2(( (Normal_Packed45_g157410).x * (Normal_Packed45_g157410).w ) , (Normal_Packed45_g157410).y));
				half2 Normal_Default50_g157410 = appendResult58_g157410;
				half2 Normal_ASTC41_g157410 = (Normal_Packed45_g157410).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157410 = Normal_ASTC41_g157410;
				#else
				float2 staticSwitch38_g157410 = Normal_Default50_g157410;
				#endif
				half2 Normal_NO_DTX544_g157410 = (Normal_Packed45_g157410).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157410 = Normal_NO_DTX544_g157410;
				#else
				float2 staticSwitch37_g157410 = staticSwitch38_g157410;
				#endif
				float2 temp_output_724_0_g157405 = ( (staticSwitch37_g157410*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g157411 = temp_output_724_0_g157405;
				float2 break71_g157411 = Normal_Planar45_g157411;
				float3 appendResult72_g157411 = (float3(break71_g157411.x , 0.0 , break71_g157411.y));
				float2 temp_output_858_0_g157405 = (mul( ase_worldToTangent, appendResult72_g157411 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#endif
				half2 Local_NormalTS729_g157405 = staticSwitch727_g157405;
				float2 temp_output_36_0_g157430 = ( lerpResult40_g157430 + Local_NormalTS729_g157405 );
				float2 lerpResult405_g157405 = lerp( Visual_NormalTS529_g157405 , temp_output_36_0_g157430 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g157405 = lerpResult405_g157405;
				#else
				float2 staticSwitch418_g157405 = Visual_NormalTS529_g157405;
				#endif
				half2 Final_NormalTS612_g157405 = staticSwitch418_g157405;
				float2 In_NormalTS3_g157416 = Final_NormalTS612_g157405;
				float3 appendResult68_g157431 = (float3(Final_NormalTS612_g157405 , 1.0));
				float3 tanNormal74_g157431 = appendResult68_g157431;
				float3 worldNormal74_g157431 = normalize( float3(dot(tanToWorld0,tanNormal74_g157431), dot(tanToWorld1,tanNormal74_g157431), dot(tanToWorld2,tanNormal74_g157431)) );
				half3 Final_NormalWS950_g157405 = worldNormal74_g157431;
				float3 In_NormalWS3_g157416 = Final_NormalWS950_g157405;
				half4 Visual_Shader531_g157405 = Out_Shader4_g157419;
				float4 lerpResult994_g157405 = lerp( Local_Masks750_g157405 , ( Visual_Shader531_g157405 * Local_Masks750_g157405 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g157405 = lerp( Visual_Shader531_g157405 , lerpResult994_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g157405 = lerpResult440_g157405;
				#else
				float4 staticSwitch451_g157405 = Visual_Shader531_g157405;
				#endif
				half4 Final_Masks613_g157405 = staticSwitch451_g157405;
				float4 In_Shader3_g157416 = Final_Masks613_g157405;
				float4 In_Emissive3_g157416 = Out_Emissive4_g157419;
				float3 temp_output_3_0_g157433 = Final_Albedo601_g157405;
				float dotResult20_g157433 = dot( temp_output_3_0_g157433 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157405 = dotResult20_g157433;
				float In_Grayscale3_g157416 = Final_Grayscale615_g157405;
				float clampResult651_g157405 = clamp( saturate( ( Final_Grayscale615_g157405 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157405 = clampResult651_g157405;
				float In_Luminosity3_g157416 = Final_Luminosity652_g157405;
				half Visual_MultiMask547_g157405 = Out_MultiMask4_g157419;
				float lerpResult477_g157405 = lerp( Visual_MultiMask547_g157405 , Local_MultiMask767_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch482_g157405 = lerpResult477_g157405;
				#else
				float staticSwitch482_g157405 = Visual_MultiMask547_g157405;
				#endif
				half Final_MultiMask572_g157405 = staticSwitch482_g157405;
				float In_MultiMask3_g157416 = Final_MultiMask572_g157405;
				half Visual_AlphaClip559_g157405 = Out_AlphaClip4_g157419;
				float temp_output_718_0_g157405 = (Local_AlbedoTex777_g157405).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g157405 = ( temp_output_718_0_g157405 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g157405 = temp_output_718_0_g157405;
				#endif
				half Local_AlphaClip772_g157405 = staticSwitch932_g157405;
				float lerpResult448_g157405 = lerp( Visual_AlphaClip559_g157405 , Local_AlphaClip772_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch564_g157405 = lerpResult448_g157405;
				#else
				float staticSwitch564_g157405 = Visual_AlphaClip559_g157405;
				#endif
				half Final_AlphaClip602_g157405 = staticSwitch564_g157405;
				float In_AlphaClip3_g157416 = Final_AlphaClip602_g157405;
				half Visual_AlphaFade588_g157405 = Out_AlphaFade4_g157419;
				half Local_AlphaFade773_g157405 = (lerpResult706_g157405).a;
				float lerpResult604_g157405 = lerp( Visual_AlphaFade588_g157405 , Local_AlphaFade773_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch608_g157405 = lerpResult604_g157405;
				#else
				float staticSwitch608_g157405 = Visual_AlphaFade588_g157405;
				#endif
				half Final_AlphaFade611_g157405 = staticSwitch608_g157405;
				float In_AlphaFade3_g157416 = Final_AlphaFade611_g157405;
				float3 In_Translucency3_g157416 = Out_Translucency4_g157419;
				float In_Transmission3_g157416 = Out_Transmission4_g157419;
				float In_Thickness3_g157416 = Out_Thickness4_g157419;
				float In_Diffusion3_g157416 = Out_Diffusion4_g157419;
				{
				Data3_g157416.Dummy = In_Dummy3_g157416;
				Data3_g157416.Albedo = In_Albedo3_g157416;
				Data3_g157416.NormalTS = In_NormalTS3_g157416;
				Data3_g157416.NormalWS = In_NormalWS3_g157416;
				Data3_g157416.Shader = In_Shader3_g157416;
				Data3_g157416.Emissive= In_Emissive3_g157416;
				Data3_g157416.MultiMask = In_MultiMask3_g157416;
				Data3_g157416.Grayscale = In_Grayscale3_g157416;
				Data3_g157416.Luminosity = In_Luminosity3_g157416;
				Data3_g157416.AlphaClip = In_AlphaClip3_g157416;
				Data3_g157416.AlphaFade = In_AlphaFade3_g157416;
				Data3_g157416.Translucency = In_Translucency3_g157416;
				Data3_g157416.Transmission = In_Transmission3_g157416;
				Data3_g157416.Thickness = In_Thickness3_g157416;
				Data3_g157416.Diffusion = In_Diffusion3_g157416;
				}
				TVEVisualData Data4_g157453 = Data3_g157416;
				float Out_Dummy4_g157453 = 0;
				float3 Out_Albedo4_g157453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157453 = float2( 0,0 );
				float3 Out_NormalWS4_g157453 = float3( 0,0,0 );
				float4 Out_Shader4_g157453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157453 = 0;
				float Out_Grayscale4_g157453 = 0;
				float Out_Luminosity4_g157453 = 0;
				float Out_AlphaClip4_g157453 = 0;
				float Out_AlphaFade4_g157453 = 0;
				float3 Out_Translucency4_g157453 = float3( 0,0,0 );
				float Out_Transmission4_g157453 = 0;
				float Out_Thickness4_g157453 = 0;
				float Out_Diffusion4_g157453 = 0;
				{
				Out_Dummy4_g157453 = Data4_g157453.Dummy;
				Out_Albedo4_g157453 = Data4_g157453.Albedo;
				Out_NormalTS4_g157453 = Data4_g157453.NormalTS;
				Out_NormalWS4_g157453 = Data4_g157453.NormalWS;
				Out_Shader4_g157453 = Data4_g157453.Shader;
				Out_Emissive4_g157453= Data4_g157453.Emissive;
				Out_MultiMask4_g157453 = Data4_g157453.MultiMask;
				Out_Grayscale4_g157453 = Data4_g157453.Grayscale;
				Out_Luminosity4_g157453= Data4_g157453.Luminosity;
				Out_AlphaClip4_g157453 = Data4_g157453.AlphaClip;
				Out_AlphaFade4_g157453 = Data4_g157453.AlphaFade;
				Out_Translucency4_g157453 = Data4_g157453.Translucency;
				Out_Transmission4_g157453 = Data4_g157453.Transmission;
				Out_Thickness4_g157453 = Data4_g157453.Thickness;
				Out_Diffusion4_g157453 = Data4_g157453.Diffusion;
				}
				half3 Visual_Albedo527_g157436 = Out_Albedo4_g157453;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler276_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157436 = _third_coord_value;
				float4 temp_output_37_0_g157437 = Local_LayerCoords790_g157436;
				half4 Coords276_g157437 = temp_output_37_0_g157437;
				half2 TexCoord276_g157437 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157437 = SampleMain( Texture276_g157437 , Sampler276_g157437 , Coords276_g157437 , TexCoord276_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler275_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157437 = temp_output_37_0_g157437;
				float2 appendResult289_g157437 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157437 = appendResult289_g157437;
				#else
				float2 staticSwitch288_g157437 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157437 = staticSwitch288_g157437;
				half4 localSampleExtra275_g157437 = SampleExtra( Texture275_g157437 , Sampler275_g157437 , Coords275_g157437 , TexCoord275_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler238_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157437 = temp_output_37_0_g157437;
				TVEModelData Data15_g157452 = Data16_g157339;
				float Out_Dummy15_g157452 = 0;
				float3 Out_PositionOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157452 = float3( 0,0,0 );
				float4 Out_VertexData15_g157452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157452 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157452 = Data15_g157452.Dummy;
				Out_PositionOS15_g157452 = Data15_g157452.PositionOS;
				Out_PositionWS15_g157452 = Data15_g157452.PositionWS;
				Out_PositionWO15_g157452 = Data15_g157452.PositionWO;
				Out_PositionRawOS15_g157452 = Data15_g157452.PositionRawOS;
				Out_PositionAddOS15_g157452 = Data15_g157452.PositionAddOS;
				Out_PivotOS15_g157452 = Data15_g157452.PivotOS;
				Out_PivotWS15_g157452 = Data15_g157452.PivotWS;
				Out_PivotWO15_g157452 = Data15_g157452.PivotWO;
				Out_NormalOS15_g157452 = Data15_g157452.NormalOS;
				Out_NormalWS15_g157452 = Data15_g157452.NormalWS;
				Out_NormalRawOS15_g157452 = Data15_g157452.NormalRawOS;
				Out_NormalRawWS15_g157452 = Data15_g157452.NormalRawWS;
				Out_TangentOS15_g157452 = Data15_g157452.TangentOS;
				Out_ViewDirWS15_g157452 = Data15_g157452.ViewDirWS;
				Out_VertexData15_g157452 = Data15_g157452.VertexData;
				Out_MotionData15_g157452 = Data15_g157452.MotionData;
				Out_BoundsData15_g157452 = Data15_g157452.BoundsData;
				Out_RotationData15_g157452 = Data15_g157452.RotationData;
				Out_FragmentData15_g157452 = Data15_g157452.FragmentData;
				}
				half3 Model_PositionWO636_g157436 = Out_PositionWO15_g157452;
				float3 temp_output_279_0_g157437 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157437 = temp_output_279_0_g157437;
				half4 localSamplePlanar2D238_g157437 = SamplePlanar2D( Texture238_g157437 , Sampler238_g157437 , Coords238_g157437 , WorldPosition238_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler246_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition246_g157437 = temp_output_279_0_g157437;
				half3 Model_NormalWS869_g157436 = Out_NormalWS15_g157452;
				float3 temp_output_280_0_g157437 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157437 = temp_output_280_0_g157437;
				half4 localSamplePlanar3D246_g157437 = SamplePlanar3D( Texture246_g157437 , Sampler246_g157437 , Coords246_g157437 , WorldPosition246_g157437 , WorldNormal246_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler234_g157437 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157437 = temp_output_37_0_g157437;
				float3 WorldPosition234_g157437 = temp_output_279_0_g157437;
				float4 localSampleStochastic2D234_g157437 = SampleStochastic2D( Texture234_g157437 , Sampler234_g157437 , Coords234_g157437 , WorldPosition234_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler263_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition263_g157437 = temp_output_279_0_g157437;
				half3 WorldNormal263_g157437 = temp_output_280_0_g157437;
				half4 localSampleStochastic3D263_g157437 = SampleStochastic3D( Texture263_g157437 , Sampler263_g157437 , Coords263_g157437 , WorldPosition263_g157437 , WorldNormal263_g157437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157436 = localSampleExtra275_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157436 = localSamplePlanar2D238_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157436 = localSamplePlanar3D246_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157436 = localSampleStochastic2D234_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157436 = localSampleStochastic3D263_g157437;
				#else
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#endif
				half4 Local_AlbedoTex777_g157436 = staticSwitch693_g157436;
				float3 lerpResult716_g157436 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157436).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g157436 = lerpResult716_g157436;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157439) = _ThirdShaderTex;
				SamplerState Sampler276_g157439 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157439 = Local_LayerCoords790_g157436;
				half4 Coords276_g157439 = temp_output_37_0_g157439;
				half2 TexCoord276_g157439 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157439 = SampleMain( Texture276_g157439 , Sampler276_g157439 , Coords276_g157439 , TexCoord276_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157439) = _ThirdShaderTex;
				SamplerState Sampler275_g157439 = sampler_Linear_Repeat;
				half4 Coords275_g157439 = temp_output_37_0_g157439;
				float2 appendResult289_g157439 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157439 = appendResult289_g157439;
				#else
				float2 staticSwitch288_g157439 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157439 = staticSwitch288_g157439;
				half4 localSampleExtra275_g157439 = SampleExtra( Texture275_g157439 , Sampler275_g157439 , Coords275_g157439 , TexCoord275_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157439) = _ThirdShaderTex;
				SamplerState Sampler238_g157439 = sampler_Linear_Repeat;
				half4 Coords238_g157439 = temp_output_37_0_g157439;
				float3 temp_output_279_0_g157439 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157439 = temp_output_279_0_g157439;
				half4 localSamplePlanar2D238_g157439 = SamplePlanar2D( Texture238_g157439 , Sampler238_g157439 , Coords238_g157439 , WorldPosition238_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157439) = _ThirdShaderTex;
				SamplerState Sampler246_g157439 = sampler_Linear_Repeat;
				half4 Coords246_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition246_g157439 = temp_output_279_0_g157439;
				float3 temp_output_280_0_g157439 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157439 = temp_output_280_0_g157439;
				half4 localSamplePlanar3D246_g157439 = SamplePlanar3D( Texture246_g157439 , Sampler246_g157439 , Coords246_g157439 , WorldPosition246_g157439 , WorldNormal246_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157439) = _ThirdShaderTex;
				SamplerState Sampler234_g157439 = sampler_Linear_Repeat;
				float4 Coords234_g157439 = temp_output_37_0_g157439;
				float3 WorldPosition234_g157439 = temp_output_279_0_g157439;
				float4 localSampleStochastic2D234_g157439 = SampleStochastic2D( Texture234_g157439 , Sampler234_g157439 , Coords234_g157439 , WorldPosition234_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157439) = _ThirdShaderTex;
				SamplerState Sampler263_g157439 = sampler_Linear_Repeat;
				half4 Coords263_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition263_g157439 = temp_output_279_0_g157439;
				half3 WorldNormal263_g157439 = temp_output_280_0_g157439;
				half4 localSampleStochastic3D263_g157439 = SampleStochastic3D( Texture263_g157439 , Sampler263_g157439 , Coords263_g157439 , WorldPosition263_g157439 , WorldNormal263_g157439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157436 = localSampleExtra275_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157436 = localSamplePlanar2D238_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157436 = localSamplePlanar3D246_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157436 = localSampleStochastic2D234_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157436 = localSampleStochastic3D263_g157439;
				#else
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#endif
				half4 Local_ShaderTex775_g157436 = staticSwitch722_g157436;
				float lerpResult739_g157436 = lerp( 1.0 , (Local_ShaderTex775_g157436).y , _ThirdOcclusionValue);
				float4 appendResult749_g157436 = (float4(( (Local_ShaderTex775_g157436).x * _ThirdMetallicValue ) , lerpResult739_g157436 , (Local_ShaderTex775_g157436).z , ( (Local_ShaderTex775_g157436).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g157436 = appendResult749_g157436;
				float clampResult17_g157442 = clamp( (Local_Masks750_g157436).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157443 = _ThirdMultiRemap.x;
				float temp_output_10_0_g157443 = ( _ThirdMultiRemap.y - temp_output_7_0_g157443 );
				float temp_output_765_0_g157436 = saturate( ( ( clampResult17_g157442 - temp_output_7_0_g157443 ) / ( temp_output_10_0_g157443 + 0.0001 ) ) );
				half Local_MultiMask767_g157436 = temp_output_765_0_g157436;
				float lerpResult705_g157436 = lerp( 1.0 , Local_MultiMask767_g157436 , _ThirdColorMode);
				float4 lerpResult706_g157436 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g157436);
				half3 Local_ColorRGB774_g157436 = (lerpResult706_g157436).rgb;
				half3 Local_Albedo768_g157436 = ( Local_AlbedoRGB771_g157436 * Local_ColorRGB774_g157436 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157461 = 2.0;
				#else
				float staticSwitch1_g157461 = 4.594794;
				#endif
				float3 lerpResult985_g157436 = lerp( Local_Albedo768_g157436 , ( Visual_Albedo527_g157436 * Local_Albedo768_g157436 * staticSwitch1_g157461 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157464) = _ThirdMaskTex;
				SamplerState Sampler276_g157464 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g157436 = _third_mask_coord_value;
				float4 temp_output_37_0_g157464 = Local_MaskCoords813_g157436;
				half4 Coords276_g157464 = temp_output_37_0_g157464;
				half2 TexCoord276_g157464 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157464 = SampleMain( Texture276_g157464 , Sampler276_g157464 , Coords276_g157464 , TexCoord276_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157464) = _ThirdMaskTex;
				SamplerState Sampler275_g157464 = sampler_Linear_Repeat;
				half4 Coords275_g157464 = temp_output_37_0_g157464;
				float2 appendResult289_g157464 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157464 = appendResult289_g157464;
				#else
				float2 staticSwitch288_g157464 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157464 = staticSwitch288_g157464;
				half4 localSampleExtra275_g157464 = SampleExtra( Texture275_g157464 , Sampler275_g157464 , Coords275_g157464 , TexCoord275_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157464) = _ThirdMaskTex;
				SamplerState Sampler238_g157464 = sampler_Linear_Repeat;
				half4 Coords238_g157464 = temp_output_37_0_g157464;
				float3 temp_output_279_0_g157464 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157464 = temp_output_279_0_g157464;
				half4 localSamplePlanar2D238_g157464 = SamplePlanar2D( Texture238_g157464 , Sampler238_g157464 , Coords238_g157464 , WorldPosition238_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157464) = _ThirdMaskTex;
				SamplerState Sampler246_g157464 = sampler_Linear_Repeat;
				half4 Coords246_g157464 = temp_output_37_0_g157464;
				half3 WorldPosition246_g157464 = temp_output_279_0_g157464;
				float3 temp_output_280_0_g157464 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157464 = temp_output_280_0_g157464;
				half4 localSamplePlanar3D246_g157464 = SamplePlanar3D( Texture246_g157464 , Sampler246_g157464 , Coords246_g157464 , WorldPosition246_g157464 , WorldNormal246_g157464 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157436 = localSampleExtra275_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157436 = localSamplePlanar2D238_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157436 = localSamplePlanar3D246_g157464;
				#else
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#endif
				half4 Local_MaskTex861_g157436 = staticSwitch817_g157436;
				float clampResult17_g157447 = clamp( (Local_MaskTex861_g157436).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g157448 = _ThirdMaskRemap.x;
				float temp_output_10_0_g157448 = ( _ThirdMaskRemap.y - temp_output_7_0_g157448 );
				float lerpResult1028_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157447 - temp_output_7_0_g157448 ) / ( temp_output_10_0_g157448 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g157436 = lerpResult1028_g157436;
				#else
				float staticSwitch892_g157436 = 1.0;
				#endif
				half Detail_TexMask429_g157436 = staticSwitch892_g157436;
				half4 Model_VertexMasks960_g157436 = Out_VertexData15_g157452;
				float4 break961_g157436 = Model_VertexMasks960_g157436;
				float4 break33_g157451 = _third_vert_mode;
				float temp_output_30_0_g157451 = ( break961_g157436.x * break33_g157451.x );
				float temp_output_29_0_g157451 = ( break961_g157436.y * break33_g157451.y );
				float temp_output_31_0_g157451 = ( break961_g157436.z * break33_g157451.z );
				float temp_output_28_0_g157451 = ( temp_output_30_0_g157451 + temp_output_29_0_g157451 + temp_output_31_0_g157451 + ( break961_g157436.w * break33_g157451.w ) );
				float clampResult17_g157445 = clamp( temp_output_28_0_g157451 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157446 = _ThirdMeshRemap.x;
				float temp_output_10_0_g157446 = ( _ThirdMeshRemap.y - temp_output_7_0_g157446 );
				float lerpResult1026_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157445 - temp_output_7_0_g157446 ) / ( temp_output_10_0_g157446 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g157463 = lerpResult1026_g157436;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157463 = ( temp_output_6_0_g157463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157463 = temp_output_6_0_g157463;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g157436 = staticSwitch14_g157463;
				#else
				float staticSwitch917_g157436 = 1.0;
				#endif
				half Blend_VertMask913_g157436 = staticSwitch917_g157436;
				half3 Visual_NormalWS953_g157436 = Out_NormalWS4_g157453;
				float clampResult17_g157449 = clamp( saturate( (Visual_NormalWS953_g157436).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157450 = _ThirdProjRemap.x;
				float temp_output_10_0_g157450 = ( _ThirdProjRemap.y - temp_output_7_0_g157450 );
				float lerpResult1004_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157449 - temp_output_7_0_g157450 ) / ( temp_output_10_0_g157450 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g157436 = lerpResult1004_g157436;
				#else
				float staticSwitch908_g157436 = 1.0;
				#endif
				half Blend_ProjMask912_g157436 = staticSwitch908_g157436;
				TVEGlobalData Data15_g157455 = Data204_g157340;
				float Out_Dummy15_g157455 = 0;
				float4 Out_CoatParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157455 = Data15_g157455.Dummy;
				Out_CoatParams15_g157455 = Data15_g157455.CoatParams;
				Out_PaintParams15_g157455 = Data15_g157455.PaintParams;
				Out_GlowParams15_g157455 = Data15_g157455.GlowParams;
				Out_AtmoParams15_g157455= Data15_g157455.AtmoParams;
				Out_FormParams15_g157455 = Data15_g157455.FormParams;
				Out_LandParams15_g157455 = Data15_g157455.LandParams;
				Out_WindParams15_g157455 = Data15_g157455.WindParams;
				Out_PushParams15_g157455 = Data15_g157455.PushParams;
				}
				half4 Global_CoatParams972_g157436 = Out_CoatParams15_g157455;
				float lerpResult1023_g157436 = lerp( 1.0 , (Global_CoatParams972_g157436).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g157436 = lerpResult1023_g157436;
				#else
				float staticSwitch965_g157436 = 1.0;
				#endif
				half Blend_GlobalMask968_g157436 = staticSwitch965_g157436;
				float temp_output_432_0_g157436 = ( _ThirdIntensityValue * Detail_TexMask429_g157436 * Blend_VertMask913_g157436 * Blend_ProjMask912_g157436 * Blend_GlobalMask968_g157436 );
				float clampResult17_g157457 = clamp( temp_output_432_0_g157436 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157456 = _ThirdBlendRemap.x;
				float temp_output_10_0_g157456 = ( _ThirdBlendRemap.y - temp_output_7_0_g157456 );
				half Detail_Mask412_g157436 = ( saturate( ( ( clampResult17_g157457 - temp_output_7_0_g157456 ) / ( temp_output_10_0_g157456 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g157436 = lerp( Visual_Albedo527_g157436 , lerpResult985_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g157436 = lerpResult989_g157436;
				#else
				float3 staticSwitch415_g157436 = Visual_Albedo527_g157436;
				#endif
				half3 Final_Albedo601_g157436 = staticSwitch415_g157436;
				float3 In_Albedo3_g157454 = Final_Albedo601_g157436;
				half2 Visual_NormalTS529_g157436 = Out_NormalTS4_g157453;
				float2 lerpResult40_g157459 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157436 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157438) = _ThirdNormalTex;
				SamplerState Sampler276_g157438 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157438 = Local_LayerCoords790_g157436;
				half4 Coords276_g157438 = temp_output_37_0_g157438;
				half2 TexCoord276_g157438 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157438 = SampleMain( Texture276_g157438 , Sampler276_g157438 , Coords276_g157438 , TexCoord276_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157438) = _ThirdNormalTex;
				SamplerState Sampler275_g157438 = sampler_Linear_Repeat;
				half4 Coords275_g157438 = temp_output_37_0_g157438;
				float2 appendResult289_g157438 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157438 = appendResult289_g157438;
				#else
				float2 staticSwitch288_g157438 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157438 = staticSwitch288_g157438;
				half4 localSampleExtra275_g157438 = SampleExtra( Texture275_g157438 , Sampler275_g157438 , Coords275_g157438 , TexCoord275_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157438) = _ThirdNormalTex;
				SamplerState Sampler238_g157438 = sampler_Linear_Repeat;
				half4 Coords238_g157438 = temp_output_37_0_g157438;
				float3 temp_output_279_0_g157438 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157438 = temp_output_279_0_g157438;
				half4 localSamplePlanar2D238_g157438 = SamplePlanar2D( Texture238_g157438 , Sampler238_g157438 , Coords238_g157438 , WorldPosition238_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157438) = _ThirdNormalTex;
				SamplerState Sampler246_g157438 = sampler_Linear_Repeat;
				half4 Coords246_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition246_g157438 = temp_output_279_0_g157438;
				float3 temp_output_280_0_g157438 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157438 = temp_output_280_0_g157438;
				half4 localSamplePlanar3D246_g157438 = SamplePlanar3D( Texture246_g157438 , Sampler246_g157438 , Coords246_g157438 , WorldPosition246_g157438 , WorldNormal246_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157438) = _ThirdNormalTex;
				SamplerState Sampler234_g157438 = sampler_Linear_Repeat;
				float4 Coords234_g157438 = temp_output_37_0_g157438;
				float3 WorldPosition234_g157438 = temp_output_279_0_g157438;
				float4 localSampleStochastic2D234_g157438 = SampleStochastic2D( Texture234_g157438 , Sampler234_g157438 , Coords234_g157438 , WorldPosition234_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157438) = _ThirdNormalTex;
				SamplerState Sampler263_g157438 = sampler_Linear_Repeat;
				half4 Coords263_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition263_g157438 = temp_output_279_0_g157438;
				half3 WorldNormal263_g157438 = temp_output_280_0_g157438;
				half4 localSampleStochastic3D263_g157438 = SampleStochastic3D( Texture263_g157438 , Sampler263_g157438 , Coords263_g157438 , WorldPosition263_g157438 , WorldNormal263_g157438 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157436 = localSampleExtra275_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157436 = localSamplePlanar2D238_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157436 = localSamplePlanar3D246_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157436 = localSampleStochastic2D234_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157436 = localSampleStochastic3D263_g157438;
				#else
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#endif
				half4 Local_NormalTex776_g157436 = staticSwitch698_g157436;
				half4 Normal_Packed45_g157440 = Local_NormalTex776_g157436;
				float2 appendResult58_g157440 = (float2(( (Normal_Packed45_g157440).x * (Normal_Packed45_g157440).w ) , (Normal_Packed45_g157440).y));
				half2 Normal_Default50_g157440 = appendResult58_g157440;
				half2 Normal_ASTC41_g157440 = (Normal_Packed45_g157440).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157440 = Normal_ASTC41_g157440;
				#else
				float2 staticSwitch38_g157440 = Normal_Default50_g157440;
				#endif
				half2 Normal_NO_DTX544_g157440 = (Normal_Packed45_g157440).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157440 = Normal_NO_DTX544_g157440;
				#else
				float2 staticSwitch37_g157440 = staticSwitch38_g157440;
				#endif
				float2 temp_output_724_0_g157436 = ( (staticSwitch37_g157440*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g157441 = temp_output_724_0_g157436;
				float2 break71_g157441 = Normal_Planar45_g157441;
				float3 appendResult72_g157441 = (float3(break71_g157441.x , 0.0 , break71_g157441.y));
				float2 temp_output_858_0_g157436 = (mul( ase_worldToTangent, appendResult72_g157441 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#endif
				half2 Local_NormalTS729_g157436 = staticSwitch727_g157436;
				float2 temp_output_36_0_g157459 = ( lerpResult40_g157459 + Local_NormalTS729_g157436 );
				float2 lerpResult405_g157436 = lerp( Visual_NormalTS529_g157436 , temp_output_36_0_g157459 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g157436 = lerpResult405_g157436;
				#else
				float2 staticSwitch418_g157436 = Visual_NormalTS529_g157436;
				#endif
				half2 Final_NormalTS612_g157436 = staticSwitch418_g157436;
				float2 In_NormalTS3_g157454 = Final_NormalTS612_g157436;
				float3 appendResult68_g157460 = (float3(Final_NormalTS612_g157436 , 1.0));
				float3 tanNormal74_g157460 = appendResult68_g157460;
				float3 worldNormal74_g157460 = normalize( float3(dot(tanToWorld0,tanNormal74_g157460), dot(tanToWorld1,tanNormal74_g157460), dot(tanToWorld2,tanNormal74_g157460)) );
				half3 Final_NormalWS956_g157436 = worldNormal74_g157460;
				float3 In_NormalWS3_g157454 = Final_NormalWS956_g157436;
				half4 Visual_Shader531_g157436 = Out_Shader4_g157453;
				float4 lerpResult1000_g157436 = lerp( Local_Masks750_g157436 , ( Visual_Shader531_g157436 * Local_Masks750_g157436 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g157436 = lerp( Visual_Shader531_g157436 , lerpResult1000_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g157436 = lerpResult998_g157436;
				#else
				float4 staticSwitch451_g157436 = Visual_Shader531_g157436;
				#endif
				half4 Final_Masks613_g157436 = staticSwitch451_g157436;
				float4 In_Shader3_g157454 = Final_Masks613_g157436;
				float4 In_Emissive3_g157454 = Out_Emissive4_g157453;
				float3 temp_output_3_0_g157462 = Final_Albedo601_g157436;
				float dotResult20_g157462 = dot( temp_output_3_0_g157462 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157436 = dotResult20_g157462;
				float In_Grayscale3_g157454 = Final_Grayscale615_g157436;
				float clampResult651_g157436 = clamp( saturate( ( Final_Grayscale615_g157436 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157436 = clampResult651_g157436;
				float In_Luminosity3_g157454 = Final_Luminosity652_g157436;
				half Visual_MultiMask547_g157436 = Out_MultiMask4_g157453;
				float lerpResult477_g157436 = lerp( Visual_MultiMask547_g157436 , Local_MultiMask767_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch482_g157436 = lerpResult477_g157436;
				#else
				float staticSwitch482_g157436 = Visual_MultiMask547_g157436;
				#endif
				half Final_MultiMask572_g157436 = staticSwitch482_g157436;
				float In_MultiMask3_g157454 = Final_MultiMask572_g157436;
				half Visual_AlphaClip559_g157436 = Out_AlphaClip4_g157453;
				float temp_output_718_0_g157436 = (Local_AlbedoTex777_g157436).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g157436 = ( temp_output_718_0_g157436 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g157436 = temp_output_718_0_g157436;
				#endif
				half Local_AlphaClip772_g157436 = staticSwitch924_g157436;
				float lerpResult448_g157436 = lerp( Visual_AlphaClip559_g157436 , Local_AlphaClip772_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch564_g157436 = lerpResult448_g157436;
				#else
				float staticSwitch564_g157436 = Visual_AlphaClip559_g157436;
				#endif
				half Final_AlphaClip602_g157436 = staticSwitch564_g157436;
				float In_AlphaClip3_g157454 = Final_AlphaClip602_g157436;
				half Visual_AlphaFade588_g157436 = Out_AlphaFade4_g157453;
				half Local_AlphaFade773_g157436 = (lerpResult706_g157436).a;
				float lerpResult604_g157436 = lerp( Visual_AlphaFade588_g157436 , Local_AlphaFade773_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch608_g157436 = lerpResult604_g157436;
				#else
				float staticSwitch608_g157436 = Visual_AlphaFade588_g157436;
				#endif
				half Final_AlphaFade611_g157436 = staticSwitch608_g157436;
				float In_AlphaFade3_g157454 = Final_AlphaFade611_g157436;
				float3 In_Translucency3_g157454 = Out_Translucency4_g157453;
				float In_Transmission3_g157454 = Out_Transmission4_g157453;
				float In_Thickness3_g157454 = Out_Thickness4_g157453;
				float In_Diffusion3_g157454 = Out_Diffusion4_g157453;
				{
				Data3_g157454.Dummy = In_Dummy3_g157454;
				Data3_g157454.Albedo = In_Albedo3_g157454;
				Data3_g157454.NormalTS = In_NormalTS3_g157454;
				Data3_g157454.NormalWS = In_NormalWS3_g157454;
				Data3_g157454.Shader = In_Shader3_g157454;
				Data3_g157454.Emissive= In_Emissive3_g157454;
				Data3_g157454.MultiMask = In_MultiMask3_g157454;
				Data3_g157454.Grayscale = In_Grayscale3_g157454;
				Data3_g157454.Luminosity = In_Luminosity3_g157454;
				Data3_g157454.AlphaClip = In_AlphaClip3_g157454;
				Data3_g157454.AlphaFade = In_AlphaFade3_g157454;
				Data3_g157454.Translucency = In_Translucency3_g157454;
				Data3_g157454.Transmission = In_Transmission3_g157454;
				Data3_g157454.Thickness = In_Thickness3_g157454;
				Data3_g157454.Diffusion = In_Diffusion3_g157454;
				}
				TVEVisualData Data4_g157467 = Data3_g157454;
				float Out_Dummy4_g157467 = 0;
				float3 Out_Albedo4_g157467 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157467 = float2( 0,0 );
				float3 Out_NormalWS4_g157467 = float3( 0,0,0 );
				float4 Out_Shader4_g157467 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157467 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157467 = 0;
				float Out_Grayscale4_g157467 = 0;
				float Out_Luminosity4_g157467 = 0;
				float Out_AlphaClip4_g157467 = 0;
				float Out_AlphaFade4_g157467 = 0;
				float3 Out_Translucency4_g157467 = float3( 0,0,0 );
				float Out_Transmission4_g157467 = 0;
				float Out_Thickness4_g157467 = 0;
				float Out_Diffusion4_g157467 = 0;
				{
				Out_Dummy4_g157467 = Data4_g157467.Dummy;
				Out_Albedo4_g157467 = Data4_g157467.Albedo;
				Out_NormalTS4_g157467 = Data4_g157467.NormalTS;
				Out_NormalWS4_g157467 = Data4_g157467.NormalWS;
				Out_Shader4_g157467 = Data4_g157467.Shader;
				Out_Emissive4_g157467= Data4_g157467.Emissive;
				Out_MultiMask4_g157467 = Data4_g157467.MultiMask;
				Out_Grayscale4_g157467 = Data4_g157467.Grayscale;
				Out_Luminosity4_g157467= Data4_g157467.Luminosity;
				Out_AlphaClip4_g157467 = Data4_g157467.AlphaClip;
				Out_AlphaFade4_g157467 = Data4_g157467.AlphaFade;
				Out_Translucency4_g157467 = Data4_g157467.Translucency;
				Out_Transmission4_g157467 = Data4_g157467.Transmission;
				Out_Thickness4_g157467 = Data4_g157467.Thickness;
				Out_Diffusion4_g157467 = Data4_g157467.Diffusion;
				}
				half3 Visual_Albedo127_g157466 = Out_Albedo4_g157467;
				TVEModelData Data15_g157469 = Data16_g157339;
				float Out_Dummy15_g157469 = 0;
				float3 Out_PositionOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157469 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157469 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157469 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157469 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157469 = float3( 0,0,0 );
				float4 Out_VertexData15_g157469 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157469 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157469 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157469 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157469 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157469 = Data15_g157469.Dummy;
				Out_PositionOS15_g157469 = Data15_g157469.PositionOS;
				Out_PositionWS15_g157469 = Data15_g157469.PositionWS;
				Out_PositionWO15_g157469 = Data15_g157469.PositionWO;
				Out_PositionRawOS15_g157469 = Data15_g157469.PositionRawOS;
				Out_PositionAddOS15_g157469 = Data15_g157469.PositionAddOS;
				Out_PivotOS15_g157469 = Data15_g157469.PivotOS;
				Out_PivotWS15_g157469 = Data15_g157469.PivotWS;
				Out_PivotWO15_g157469 = Data15_g157469.PivotWO;
				Out_NormalOS15_g157469 = Data15_g157469.NormalOS;
				Out_NormalWS15_g157469 = Data15_g157469.NormalWS;
				Out_NormalRawOS15_g157469 = Data15_g157469.NormalRawOS;
				Out_NormalRawWS15_g157469 = Data15_g157469.NormalRawWS;
				Out_TangentOS15_g157469 = Data15_g157469.TangentOS;
				Out_ViewDirWS15_g157469 = Data15_g157469.ViewDirWS;
				Out_VertexData15_g157469 = Data15_g157469.VertexData;
				Out_MotionData15_g157469 = Data15_g157469.MotionData;
				Out_BoundsData15_g157469 = Data15_g157469.BoundsData;
				Out_RotationData15_g157469 = Data15_g157469.RotationData;
				Out_FragmentData15_g157469 = Data15_g157469.FragmentData;
				}
				half4 Model_VertexData206_g157466 = Out_VertexData15_g157469;
				float4 break208_g157466 = Model_VertexData206_g157466;
				float4 break33_g157474 = _occlusion_vert_mode;
				float temp_output_30_0_g157474 = ( break208_g157466.x * break33_g157474.x );
				float temp_output_29_0_g157474 = ( break208_g157466.y * break33_g157474.y );
				float temp_output_31_0_g157474 = ( break208_g157466.z * break33_g157474.z );
				float temp_output_28_0_g157474 = ( temp_output_30_0_g157474 + temp_output_29_0_g157474 + temp_output_31_0_g157474 + ( break208_g157466.w * break33_g157474.w ) );
				float temp_output_194_0_g157466 = temp_output_28_0_g157474;
				float clampResult17_g157472 = clamp( temp_output_194_0_g157466 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157471 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g157471 = ( _OcclusionMeshRemap.y - temp_output_7_0_g157471 );
				float temp_output_6_0_g157473 = saturate( ( ( clampResult17_g157472 - temp_output_7_0_g157471 ) / ( temp_output_10_0_g157471 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157473 = ( temp_output_6_0_g157473 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157473 = temp_output_6_0_g157473;
				#endif
				half Occlusion_Mask82_g157466 = staticSwitch14_g157473;
				float3 lerpResult75_g157466 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g157466);
				float3 lerpResult186_g157466 = lerp( Visual_Albedo127_g157466 , ( Visual_Albedo127_g157466 * lerpResult75_g157466 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g157466 = lerpResult186_g157466;
				#else
				float3 staticSwitch171_g157466 = Visual_Albedo127_g157466;
				#endif
				half3 Final_Albedo160_g157466 = staticSwitch171_g157466;
				float3 In_Albedo3_g157468 = Final_Albedo160_g157466;
				float2 In_NormalTS3_g157468 = Out_NormalTS4_g157467;
				float3 In_NormalWS3_g157468 = Out_NormalWS4_g157467;
				float4 In_Shader3_g157468 = Out_Shader4_g157467;
				float4 In_Emissive3_g157468 = Out_Emissive4_g157467;
				float3 temp_output_3_0_g157470 = Final_Albedo160_g157466;
				float dotResult20_g157470 = dot( temp_output_3_0_g157470 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157466 = dotResult20_g157470;
				float In_Grayscale3_g157468 = Final_Grayscale164_g157466;
				float clampResult180_g157466 = clamp( saturate( ( Final_Grayscale164_g157466 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g157466 = clampResult180_g157466;
				float In_Luminosity3_g157468 = Final_Shading181_g157466;
				float In_MultiMask3_g157468 = Out_MultiMask4_g157467;
				float In_AlphaClip3_g157468 = Out_AlphaClip4_g157467;
				float In_AlphaFade3_g157468 = Out_AlphaFade4_g157467;
				float3 In_Translucency3_g157468 = Out_Translucency4_g157467;
				float In_Transmission3_g157468 = Out_Transmission4_g157467;
				float In_Thickness3_g157468 = Out_Thickness4_g157467;
				float In_Diffusion3_g157468 = Out_Diffusion4_g157467;
				{
				Data3_g157468.Dummy = In_Dummy3_g157468;
				Data3_g157468.Albedo = In_Albedo3_g157468;
				Data3_g157468.NormalTS = In_NormalTS3_g157468;
				Data3_g157468.NormalWS = In_NormalWS3_g157468;
				Data3_g157468.Shader = In_Shader3_g157468;
				Data3_g157468.Emissive= In_Emissive3_g157468;
				Data3_g157468.MultiMask = In_MultiMask3_g157468;
				Data3_g157468.Grayscale = In_Grayscale3_g157468;
				Data3_g157468.Luminosity = In_Luminosity3_g157468;
				Data3_g157468.AlphaClip = In_AlphaClip3_g157468;
				Data3_g157468.AlphaFade = In_AlphaFade3_g157468;
				Data3_g157468.Translucency = In_Translucency3_g157468;
				Data3_g157468.Transmission = In_Transmission3_g157468;
				Data3_g157468.Thickness = In_Thickness3_g157468;
				Data3_g157468.Diffusion = In_Diffusion3_g157468;
				}
				TVEVisualData Data4_g157479 = Data3_g157468;
				float Out_Dummy4_g157479 = 0;
				float3 Out_Albedo4_g157479 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157479 = float2( 0,0 );
				float3 Out_NormalWS4_g157479 = float3( 0,0,0 );
				float4 Out_Shader4_g157479 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157479 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157479 = 0;
				float Out_Grayscale4_g157479 = 0;
				float Out_Luminosity4_g157479 = 0;
				float Out_AlphaClip4_g157479 = 0;
				float Out_AlphaFade4_g157479 = 0;
				float3 Out_Translucency4_g157479 = float3( 0,0,0 );
				float Out_Transmission4_g157479 = 0;
				float Out_Thickness4_g157479 = 0;
				float Out_Diffusion4_g157479 = 0;
				{
				Out_Dummy4_g157479 = Data4_g157479.Dummy;
				Out_Albedo4_g157479 = Data4_g157479.Albedo;
				Out_NormalTS4_g157479 = Data4_g157479.NormalTS;
				Out_NormalWS4_g157479 = Data4_g157479.NormalWS;
				Out_Shader4_g157479 = Data4_g157479.Shader;
				Out_Emissive4_g157479= Data4_g157479.Emissive;
				Out_MultiMask4_g157479 = Data4_g157479.MultiMask;
				Out_Grayscale4_g157479 = Data4_g157479.Grayscale;
				Out_Luminosity4_g157479= Data4_g157479.Luminosity;
				Out_AlphaClip4_g157479 = Data4_g157479.AlphaClip;
				Out_AlphaFade4_g157479 = Data4_g157479.AlphaFade;
				Out_Translucency4_g157479 = Data4_g157479.Translucency;
				Out_Transmission4_g157479 = Data4_g157479.Transmission;
				Out_Thickness4_g157479 = Data4_g157479.Thickness;
				Out_Diffusion4_g157479 = Data4_g157479.Diffusion;
				}
				half3 Visual_Albedo127_g157476 = Out_Albedo4_g157479;
				float temp_output_162_11_g157476 = Out_MultiMask4_g157479;
				half Visual_MultiMask196_g157476 = temp_output_162_11_g157476;
				float lerpResult190_g157476 = lerp( 1.0 , Visual_MultiMask196_g157476 , _GradientMultiValue);
				half Gradient_MultiMask194_g157476 = lerpResult190_g157476;
				TVEModelData Data15_g157477 = Data16_g157339;
				float Out_Dummy15_g157477 = 0;
				float3 Out_PositionOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157477 = float3( 0,0,0 );
				float4 Out_VertexData15_g157477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157477 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157477 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157477 = Data15_g157477.Dummy;
				Out_PositionOS15_g157477 = Data15_g157477.PositionOS;
				Out_PositionWS15_g157477 = Data15_g157477.PositionWS;
				Out_PositionWO15_g157477 = Data15_g157477.PositionWO;
				Out_PositionRawOS15_g157477 = Data15_g157477.PositionRawOS;
				Out_PositionAddOS15_g157477 = Data15_g157477.PositionAddOS;
				Out_PivotOS15_g157477 = Data15_g157477.PivotOS;
				Out_PivotWS15_g157477 = Data15_g157477.PivotWS;
				Out_PivotWO15_g157477 = Data15_g157477.PivotWO;
				Out_NormalOS15_g157477 = Data15_g157477.NormalOS;
				Out_NormalWS15_g157477 = Data15_g157477.NormalWS;
				Out_NormalRawOS15_g157477 = Data15_g157477.NormalRawOS;
				Out_NormalRawWS15_g157477 = Data15_g157477.NormalRawWS;
				Out_TangentOS15_g157477 = Data15_g157477.TangentOS;
				Out_ViewDirWS15_g157477 = Data15_g157477.ViewDirWS;
				Out_VertexData15_g157477 = Data15_g157477.VertexData;
				Out_MotionData15_g157477 = Data15_g157477.MotionData;
				Out_BoundsData15_g157477 = Data15_g157477.BoundsData;
				Out_RotationData15_g157477 = Data15_g157477.RotationData;
				Out_FragmentData15_g157477 = Data15_g157477.FragmentData;
				}
				half4 Model_VertexData224_g157476 = Out_VertexData15_g157477;
				float4 break226_g157476 = Model_VertexData224_g157476;
				float4 break33_g157478 = _gradient_vert_mode;
				float temp_output_30_0_g157478 = ( break226_g157476.x * break33_g157478.x );
				float temp_output_29_0_g157478 = ( break226_g157476.y * break33_g157478.y );
				float temp_output_31_0_g157478 = ( break226_g157476.z * break33_g157478.z );
				float temp_output_28_0_g157478 = ( temp_output_30_0_g157478 + temp_output_29_0_g157478 + temp_output_31_0_g157478 + ( break226_g157476.w * break33_g157478.w ) );
				float temp_output_211_0_g157476 = temp_output_28_0_g157478;
				float clampResult17_g157483 = clamp( temp_output_211_0_g157476 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157484 = _GradientMeshRemap.x;
				float temp_output_10_0_g157484 = ( _GradientMeshRemap.y - temp_output_7_0_g157484 );
				float temp_output_6_0_g157485 = saturate( ( ( clampResult17_g157483 - temp_output_7_0_g157484 ) / ( temp_output_10_0_g157484 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157485 = ( temp_output_6_0_g157485 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157485 = temp_output_6_0_g157485;
				#endif
				half Gradient_VertMask82_g157476 = staticSwitch14_g157485;
				half Gradient_Mask200_g157476 = ( Gradient_MultiMask194_g157476 * Gradient_VertMask82_g157476 );
				float3 lerpResult75_g157476 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g157476);
				float3 lerpResult186_g157476 = lerp( Visual_Albedo127_g157476 , ( Visual_Albedo127_g157476 * lerpResult75_g157476 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g157476 = lerpResult186_g157476;
				#else
				float3 staticSwitch171_g157476 = Visual_Albedo127_g157476;
				#endif
				half3 Final_Albedo160_g157476 = staticSwitch171_g157476;
				float3 In_Albedo3_g157480 = Final_Albedo160_g157476;
				float2 In_NormalTS3_g157480 = Out_NormalTS4_g157479;
				float3 In_NormalWS3_g157480 = Out_NormalWS4_g157479;
				float4 In_Shader3_g157480 = Out_Shader4_g157479;
				float4 In_Emissive3_g157480 = Out_Emissive4_g157479;
				float3 temp_output_3_0_g157481 = Final_Albedo160_g157476;
				float dotResult20_g157481 = dot( temp_output_3_0_g157481 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157476 = dotResult20_g157481;
				float In_Grayscale3_g157480 = Final_Grayscale164_g157476;
				float clampResult180_g157476 = clamp( saturate( ( Final_Grayscale164_g157476 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g157476 = clampResult180_g157476;
				float In_Luminosity3_g157480 = Final_Luminosity181_g157476;
				float In_MultiMask3_g157480 = temp_output_162_11_g157476;
				float In_AlphaClip3_g157480 = Out_AlphaClip4_g157479;
				float In_AlphaFade3_g157480 = Out_AlphaFade4_g157479;
				float3 In_Translucency3_g157480 = Out_Translucency4_g157479;
				float In_Transmission3_g157480 = Out_Transmission4_g157479;
				float In_Thickness3_g157480 = Out_Thickness4_g157479;
				float In_Diffusion3_g157480 = Out_Diffusion4_g157479;
				{
				Data3_g157480.Dummy = In_Dummy3_g157480;
				Data3_g157480.Albedo = In_Albedo3_g157480;
				Data3_g157480.NormalTS = In_NormalTS3_g157480;
				Data3_g157480.NormalWS = In_NormalWS3_g157480;
				Data3_g157480.Shader = In_Shader3_g157480;
				Data3_g157480.Emissive= In_Emissive3_g157480;
				Data3_g157480.MultiMask = In_MultiMask3_g157480;
				Data3_g157480.Grayscale = In_Grayscale3_g157480;
				Data3_g157480.Luminosity = In_Luminosity3_g157480;
				Data3_g157480.AlphaClip = In_AlphaClip3_g157480;
				Data3_g157480.AlphaFade = In_AlphaFade3_g157480;
				Data3_g157480.Translucency = In_Translucency3_g157480;
				Data3_g157480.Transmission = In_Transmission3_g157480;
				Data3_g157480.Thickness = In_Thickness3_g157480;
				Data3_g157480.Diffusion = In_Diffusion3_g157480;
				}
				TVEVisualData Data4_g157487 = Data3_g157480;
				float Out_Dummy4_g157487 = 0;
				float3 Out_Albedo4_g157487 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157487 = float2( 0,0 );
				float3 Out_NormalWS4_g157487 = float3( 0,0,0 );
				float4 Out_Shader4_g157487 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157487 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157487 = 0;
				float Out_Grayscale4_g157487 = 0;
				float Out_Luminosity4_g157487 = 0;
				float Out_AlphaClip4_g157487 = 0;
				float Out_AlphaFade4_g157487 = 0;
				float3 Out_Translucency4_g157487 = float3( 0,0,0 );
				float Out_Transmission4_g157487 = 0;
				float Out_Thickness4_g157487 = 0;
				float Out_Diffusion4_g157487 = 0;
				{
				Out_Dummy4_g157487 = Data4_g157487.Dummy;
				Out_Albedo4_g157487 = Data4_g157487.Albedo;
				Out_NormalTS4_g157487 = Data4_g157487.NormalTS;
				Out_NormalWS4_g157487 = Data4_g157487.NormalWS;
				Out_Shader4_g157487 = Data4_g157487.Shader;
				Out_Emissive4_g157487= Data4_g157487.Emissive;
				Out_MultiMask4_g157487 = Data4_g157487.MultiMask;
				Out_Grayscale4_g157487 = Data4_g157487.Grayscale;
				Out_Luminosity4_g157487= Data4_g157487.Luminosity;
				Out_AlphaClip4_g157487 = Data4_g157487.AlphaClip;
				Out_AlphaFade4_g157487 = Data4_g157487.AlphaFade;
				Out_Translucency4_g157487 = Data4_g157487.Translucency;
				Out_Transmission4_g157487 = Data4_g157487.Transmission;
				Out_Thickness4_g157487 = Data4_g157487.Thickness;
				Out_Diffusion4_g157487 = Data4_g157487.Diffusion;
				}
				half3 Visual_Albedo127_g157486 = Out_Albedo4_g157487;
				float vertexToFrag203_g157486 = IN.ase_texcoord10.z;
				float clampResult208_g157486 = clamp( vertexToFrag203_g157486 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g157486 = ( Visual_Albedo127_g157486 + ( ( Visual_Albedo127_g157486 * Visual_Albedo127_g157486 * 200.0 * _motion_highlight_color ) * clampResult208_g157486 ) );
				#else
				float3 staticSwitch209_g157486 = Visual_Albedo127_g157486;
				#endif
				half3 Final_Albedo160_g157486 = staticSwitch209_g157486;
				float3 In_Albedo3_g157489 = Final_Albedo160_g157486;
				float2 In_NormalTS3_g157489 = Out_NormalTS4_g157487;
				float3 In_NormalWS3_g157489 = Out_NormalWS4_g157487;
				float4 In_Shader3_g157489 = Out_Shader4_g157487;
				float4 In_Emissive3_g157489 = Out_Emissive4_g157487;
				float In_Grayscale3_g157489 = Out_Grayscale4_g157487;
				float In_Luminosity3_g157489 = Out_Luminosity4_g157487;
				float In_MultiMask3_g157489 = Out_MultiMask4_g157487;
				float In_AlphaClip3_g157489 = Out_AlphaClip4_g157487;
				float In_AlphaFade3_g157489 = Out_AlphaFade4_g157487;
				float3 In_Translucency3_g157489 = Out_Translucency4_g157487;
				float In_Transmission3_g157489 = Out_Transmission4_g157487;
				float In_Thickness3_g157489 = Out_Thickness4_g157487;
				float In_Diffusion3_g157489 = Out_Diffusion4_g157487;
				{
				Data3_g157489.Dummy = In_Dummy3_g157489;
				Data3_g157489.Albedo = In_Albedo3_g157489;
				Data3_g157489.NormalTS = In_NormalTS3_g157489;
				Data3_g157489.NormalWS = In_NormalWS3_g157489;
				Data3_g157489.Shader = In_Shader3_g157489;
				Data3_g157489.Emissive= In_Emissive3_g157489;
				Data3_g157489.MultiMask = In_MultiMask3_g157489;
				Data3_g157489.Grayscale = In_Grayscale3_g157489;
				Data3_g157489.Luminosity = In_Luminosity3_g157489;
				Data3_g157489.AlphaClip = In_AlphaClip3_g157489;
				Data3_g157489.AlphaFade = In_AlphaFade3_g157489;
				Data3_g157489.Translucency = In_Translucency3_g157489;
				Data3_g157489.Transmission = In_Transmission3_g157489;
				Data3_g157489.Thickness = In_Thickness3_g157489;
				Data3_g157489.Diffusion = In_Diffusion3_g157489;
				}
				TVEVisualData Data4_g157834 = Data3_g157489;
				float Out_Dummy4_g157834 = 0;
				float3 Out_Albedo4_g157834 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157834 = float2( 0,0 );
				float3 Out_NormalWS4_g157834 = float3( 0,0,0 );
				float4 Out_Shader4_g157834 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157834 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157834 = 0;
				float Out_Grayscale4_g157834 = 0;
				float Out_Luminosity4_g157834 = 0;
				float Out_AlphaClip4_g157834 = 0;
				float Out_AlphaFade4_g157834 = 0;
				float3 Out_Translucency4_g157834 = float3( 0,0,0 );
				float Out_Transmission4_g157834 = 0;
				float Out_Thickness4_g157834 = 0;
				float Out_Diffusion4_g157834 = 0;
				{
				Out_Dummy4_g157834 = Data4_g157834.Dummy;
				Out_Albedo4_g157834 = Data4_g157834.Albedo;
				Out_NormalTS4_g157834 = Data4_g157834.NormalTS;
				Out_NormalWS4_g157834 = Data4_g157834.NormalWS;
				Out_Shader4_g157834 = Data4_g157834.Shader;
				Out_Emissive4_g157834= Data4_g157834.Emissive;
				Out_MultiMask4_g157834 = Data4_g157834.MultiMask;
				Out_Grayscale4_g157834 = Data4_g157834.Grayscale;
				Out_Luminosity4_g157834= Data4_g157834.Luminosity;
				Out_AlphaClip4_g157834 = Data4_g157834.AlphaClip;
				Out_AlphaFade4_g157834 = Data4_g157834.AlphaFade;
				Out_Translucency4_g157834 = Data4_g157834.Translucency;
				Out_Transmission4_g157834 = Data4_g157834.Transmission;
				Out_Thickness4_g157834 = Data4_g157834.Thickness;
				Out_Diffusion4_g157834 = Data4_g157834.Diffusion;
				}
				half3 Visual_Albedo127_g157833 = Out_Albedo4_g157834;
				float3 temp_output_622_0_g157833 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler238_g157837 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157840 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157840 = ( temp_output_6_0_g157840 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157840 = temp_output_6_0_g157840;
				#endif
				half4 Overlay_Coords639_g157833 = staticSwitch14_g157840;
				float4 temp_output_37_0_g157837 = Overlay_Coords639_g157833;
				half4 Coords238_g157837 = temp_output_37_0_g157837;
				TVEModelData Data15_g157841 = Data16_g157339;
				float Out_Dummy15_g157841 = 0;
				float3 Out_PositionOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157841 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157841 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157841 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157841 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157841 = float3( 0,0,0 );
				float4 Out_VertexData15_g157841 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157841 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157841 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157841 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157841 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157841 = Data15_g157841.Dummy;
				Out_PositionOS15_g157841 = Data15_g157841.PositionOS;
				Out_PositionWS15_g157841 = Data15_g157841.PositionWS;
				Out_PositionWO15_g157841 = Data15_g157841.PositionWO;
				Out_PositionRawOS15_g157841 = Data15_g157841.PositionRawOS;
				Out_PositionAddOS15_g157841 = Data15_g157841.PositionAddOS;
				Out_PivotOS15_g157841 = Data15_g157841.PivotOS;
				Out_PivotWS15_g157841 = Data15_g157841.PivotWS;
				Out_PivotWO15_g157841 = Data15_g157841.PivotWO;
				Out_NormalOS15_g157841 = Data15_g157841.NormalOS;
				Out_NormalWS15_g157841 = Data15_g157841.NormalWS;
				Out_NormalRawOS15_g157841 = Data15_g157841.NormalRawOS;
				Out_NormalRawWS15_g157841 = Data15_g157841.NormalRawWS;
				Out_TangentOS15_g157841 = Data15_g157841.TangentOS;
				Out_ViewDirWS15_g157841 = Data15_g157841.ViewDirWS;
				Out_VertexData15_g157841 = Data15_g157841.VertexData;
				Out_MotionData15_g157841 = Data15_g157841.MotionData;
				Out_BoundsData15_g157841 = Data15_g157841.BoundsData;
				Out_RotationData15_g157841 = Data15_g157841.RotationData;
				Out_FragmentData15_g157841 = Data15_g157841.FragmentData;
				}
				half3 Model_PositionWO602_g157833 = Out_PositionWO15_g157841;
				float3 temp_output_279_0_g157837 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157837 = temp_output_279_0_g157837;
				half4 localSamplePlanar2D238_g157837 = SamplePlanar2D( Texture238_g157837 , Sampler238_g157837 , Coords238_g157837 , WorldPosition238_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler246_g157837 = sampler_Linear_Repeat;
				half4 Coords246_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition246_g157837 = temp_output_279_0_g157837;
				half3 Model_NormalWS712_g157833 = Out_NormalWS15_g157841;
				float3 temp_output_280_0_g157837 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157837 = temp_output_280_0_g157837;
				half4 localSamplePlanar3D246_g157837 = SamplePlanar3D( Texture246_g157837 , Sampler246_g157837 , Coords246_g157837 , WorldPosition246_g157837 , WorldNormal246_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler234_g157837 = sampler_Linear_Repeat;
				float4 Coords234_g157837 = temp_output_37_0_g157837;
				float3 WorldPosition234_g157837 = temp_output_279_0_g157837;
				float4 localSampleStochastic2D234_g157837 = SampleStochastic2D( Texture234_g157837 , Sampler234_g157837 , Coords234_g157837 , WorldPosition234_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler263_g157837 = sampler_Linear_Repeat;
				half4 Coords263_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition263_g157837 = temp_output_279_0_g157837;
				half3 WorldNormal263_g157837 = temp_output_280_0_g157837;
				half4 localSampleStochastic3D263_g157837 = SampleStochastic3D( Texture263_g157837 , Sampler263_g157837 , Coords263_g157837 , WorldPosition263_g157837 , WorldNormal263_g157837 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g157833 = localSamplePlanar3D246_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g157833 = localSampleStochastic2D234_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g157833 = localSampleStochastic3D263_g157837;
				#else
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#endif
				half3 Overlay_Albedo526_g157833 = (staticSwitch676_g157833).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g157833 = ( temp_output_622_0_g157833 * Overlay_Albedo526_g157833 );
				#else
				float3 staticSwitch578_g157833 = temp_output_622_0_g157833;
				#endif
				float3 temp_output_6_0_g157856 = staticSwitch578_g157833;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157856 = ( temp_output_6_0_g157856 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g157856 = temp_output_6_0_g157856;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157843) = _OverlayMaskTex;
				SamplerState Sampler276_g157843 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157844 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157844 = ( temp_output_6_0_g157844 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157844 = temp_output_6_0_g157844;
				#endif
				half4 Local_MaskCoords886_g157833 = staticSwitch14_g157844;
				float4 temp_output_37_0_g157843 = Local_MaskCoords886_g157833;
				half4 Coords276_g157843 = temp_output_37_0_g157843;
				half2 TexCoord276_g157843 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157843 = SampleMain( Texture276_g157843 , Sampler276_g157843 , Coords276_g157843 , TexCoord276_g157843 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157843) = _OverlayMaskTex;
				SamplerState Sampler275_g157843 = sampler_Linear_Repeat;
				half4 Coords275_g157843 = temp_output_37_0_g157843;
				float2 appendResult289_g157843 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157843 = appendResult289_g157843;
				#else
				float2 staticSwitch288_g157843 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157843 = staticSwitch288_g157843;
				half4 localSampleExtra275_g157843 = SampleExtra( Texture275_g157843 , Sampler275_g157843 , Coords275_g157843 , TexCoord275_g157843 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g157833 = localSampleExtra275_g157843;
				#else
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#endif
				half4 Local_MaskTex885_g157833 = staticSwitch894_g157833;
				float clampResult17_g157858 = clamp( (Local_MaskTex885_g157833).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157859 = _OverlayMaskRemap.x;
				float temp_output_10_0_g157859 = ( _OverlayMaskRemap.y - temp_output_7_0_g157859 );
				float lerpResult898_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157858 - temp_output_7_0_g157859 ) / ( temp_output_10_0_g157859 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g157833 = lerpResult898_g157833;
				#else
				float staticSwitch904_g157833 = 1.0;
				#endif
				half Overlay_TexMask906_g157833 = staticSwitch904_g157833;
				float3 temp_output_739_21_g157833 = Out_NormalWS4_g157834;
				half3 Visual_NormalWS749_g157833 = temp_output_739_21_g157833;
				float clampResult17_g157853 = clamp( saturate( (Visual_NormalWS749_g157833).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157852 = _OverlayProjRemap.x;
				float temp_output_10_0_g157852 = ( _OverlayProjRemap.y - temp_output_7_0_g157852 );
				float lerpResult842_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157853 - temp_output_7_0_g157852 ) / ( temp_output_10_0_g157852 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g157833 = lerpResult842_g157833;
				#else
				float staticSwitch734_g157833 = 1.0;
				#endif
				half Overlay_MaskProj457_g157833 = staticSwitch734_g157833;
				float temp_output_739_15_g157833 = Out_Luminosity4_g157834;
				half Visual_Luminosity654_g157833 = temp_output_739_15_g157833;
				float clampResult17_g157855 = clamp( Visual_Luminosity654_g157833 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157854 = _OverlayLumaRemap.x;
				float temp_output_10_0_g157854 = ( _OverlayLumaRemap.y - temp_output_7_0_g157854 );
				float lerpResult587_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157855 - temp_output_7_0_g157854 ) / ( temp_output_10_0_g157854 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g157833 = lerpResult587_g157833;
				half4 Model_VertexMasks791_g157833 = Out_VertexData15_g157841;
				float4 break792_g157833 = Model_VertexMasks791_g157833;
				float4 break33_g157845 = _overlay_vert_mode;
				float temp_output_30_0_g157845 = ( break792_g157833.x * break33_g157845.x );
				float temp_output_29_0_g157845 = ( break792_g157833.y * break33_g157845.y );
				float temp_output_31_0_g157845 = ( break792_g157833.z * break33_g157845.z );
				float temp_output_28_0_g157845 = ( temp_output_30_0_g157845 + temp_output_29_0_g157845 + temp_output_31_0_g157845 + ( break792_g157833.w * break33_g157845.w ) );
				float clampResult17_g157846 = clamp( temp_output_28_0_g157845 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157848 = _OverlayMeshRemap.x;
				float temp_output_10_0_g157848 = ( _OverlayMeshRemap.y - temp_output_7_0_g157848 );
				float lerpResult879_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157846 - temp_output_7_0_g157848 ) / ( temp_output_10_0_g157848 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g157857 = lerpResult879_g157833;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157857 = ( temp_output_6_0_g157857 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157857 = temp_output_6_0_g157857;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g157833 = staticSwitch14_g157857;
				#else
				float staticSwitch800_g157833 = 1.0;
				#endif
				half Overlay_VertMask801_g157833 = staticSwitch800_g157833;
				half Overlay_MaskNoise427_g157833 = 1.0;
				TVEGlobalData Data15_g157835 = Data204_g157340;
				float Out_Dummy15_g157835 = 0;
				float4 Out_CoatParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157835 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157835 = Data15_g157835.Dummy;
				Out_CoatParams15_g157835 = Data15_g157835.CoatParams;
				Out_PaintParams15_g157835 = Data15_g157835.PaintParams;
				Out_GlowParams15_g157835 = Data15_g157835.GlowParams;
				Out_AtmoParams15_g157835= Data15_g157835.AtmoParams;
				Out_FormParams15_g157835 = Data15_g157835.FormParams;
				Out_LandParams15_g157835 = Data15_g157835.LandParams;
				Out_WindParams15_g157835 = Data15_g157835.WindParams;
				Out_PushParams15_g157835 = Data15_g157835.PushParams;
				}
				half4 Global_AtmoParams516_g157833 = Out_AtmoParams15_g157835;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g157833 = (Global_AtmoParams516_g157833).z;
				#else
				float staticSwitch705_g157833 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g157833 = staticSwitch705_g157833;
				half Custom_Mask646_g157833 = 1.0;
				float temp_output_7_0_g157851 = 0.1;
				float temp_output_10_0_g157851 = ( 0.2 - temp_output_7_0_g157851 );
				half Overlay_Mask494_g157833 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g157833 * Overlay_MaskProj457_g157833 * Overlay_MaskLuma438_g157833 * Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 * Custom_Mask646_g157833 ) - temp_output_7_0_g157851 ) / ( temp_output_10_0_g157851 + 0.0001 ) ) );
				float3 lerpResult467_g157833 = lerp( Visual_Albedo127_g157833 , staticSwitch14_g157856 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g157833 = lerpResult467_g157833;
				#else
				float3 staticSwitch577_g157833 = Visual_Albedo127_g157833;
				#endif
				half3 Final_Albedo493_g157833 = staticSwitch577_g157833;
				float3 In_Albedo3_g157836 = Final_Albedo493_g157833;
				half2 Visual_NormalTS535_g157833 = Out_NormalTS4_g157834;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157842) = _OverlayNormalTex;
				SamplerState Sampler238_g157842 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157842 = Overlay_Coords639_g157833;
				half4 Coords238_g157842 = temp_output_37_0_g157842;
				float3 temp_output_279_0_g157842 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157842 = temp_output_279_0_g157842;
				half4 localSamplePlanar2D238_g157842 = SamplePlanar2D( Texture238_g157842 , Sampler238_g157842 , Coords238_g157842 , WorldPosition238_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157842) = _OverlayNormalTex;
				SamplerState Sampler246_g157842 = sampler_Linear_Repeat;
				half4 Coords246_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition246_g157842 = temp_output_279_0_g157842;
				float3 temp_output_280_0_g157842 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157842 = temp_output_280_0_g157842;
				half4 localSamplePlanar3D246_g157842 = SamplePlanar3D( Texture246_g157842 , Sampler246_g157842 , Coords246_g157842 , WorldPosition246_g157842 , WorldNormal246_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157842) = _OverlayNormalTex;
				SamplerState Sampler234_g157842 = sampler_Linear_Repeat;
				float4 Coords234_g157842 = temp_output_37_0_g157842;
				float3 WorldPosition234_g157842 = temp_output_279_0_g157842;
				float4 localSampleStochastic2D234_g157842 = SampleStochastic2D( Texture234_g157842 , Sampler234_g157842 , Coords234_g157842 , WorldPosition234_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157842) = _OverlayNormalTex;
				SamplerState Sampler263_g157842 = sampler_Linear_Repeat;
				half4 Coords263_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition263_g157842 = temp_output_279_0_g157842;
				half3 WorldNormal263_g157842 = temp_output_280_0_g157842;
				half4 localSampleStochastic3D263_g157842 = SampleStochastic3D( Texture263_g157842 , Sampler263_g157842 , Coords263_g157842 , WorldPosition263_g157842 , WorldNormal263_g157842 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g157833 = localSamplePlanar3D246_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g157833 = localSampleStochastic2D234_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g157833 = localSampleStochastic3D263_g157842;
				#else
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#endif
				half4 Normal_Packed45_g157839 = staticSwitch686_g157833;
				float2 appendResult58_g157839 = (float2(( (Normal_Packed45_g157839).x * (Normal_Packed45_g157839).w ) , (Normal_Packed45_g157839).y));
				half2 Normal_Default50_g157839 = appendResult58_g157839;
				half2 Normal_ASTC41_g157839 = (Normal_Packed45_g157839).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157839 = Normal_ASTC41_g157839;
				#else
				float2 staticSwitch38_g157839 = Normal_Default50_g157839;
				#endif
				half2 Normal_NO_DTX544_g157839 = (Normal_Packed45_g157839).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157839 = Normal_NO_DTX544_g157839;
				#else
				float2 staticSwitch37_g157839 = staticSwitch38_g157839;
				#endif
				half2 Normal_Planar45_g157838 = (staticSwitch37_g157839*2.0 + -1.0);
				float2 break71_g157838 = Normal_Planar45_g157838;
				float3 appendResult72_g157838 = (float3(break71_g157838.x , 0.0 , break71_g157838.y));
				half2 Overlay_Normal528_g157833 = (mul( ase_worldToTangent, appendResult72_g157838 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g157833 = Overlay_Normal528_g157833;
				#else
				float2 staticSwitch579_g157833 = Visual_NormalTS535_g157833;
				#endif
				float2 lerpResult551_g157833 = lerp( Visual_NormalTS535_g157833 , ( staticSwitch579_g157833 * _OverlayNormalValue ) , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g157833 = lerpResult551_g157833;
				#else
				float2 staticSwitch583_g157833 = Visual_NormalTS535_g157833;
				#endif
				half2 Final_NormalTS499_g157833 = staticSwitch583_g157833;
				float2 In_NormalTS3_g157836 = Final_NormalTS499_g157833;
				float3 In_NormalWS3_g157836 = temp_output_739_21_g157833;
				half4 Visual_Masks536_g157833 = Out_Shader4_g157834;
				float4 appendResult585_g157833 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g157833 = lerp( Visual_Masks536_g157833 , appendResult585_g157833 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g157833 = lerpResult584_g157833;
				#else
				float4 staticSwitch586_g157833 = Visual_Masks536_g157833;
				#endif
				half4 Final_Masks482_g157833 = staticSwitch586_g157833;
				float4 In_Shader3_g157836 = Final_Masks482_g157833;
				float4 In_Emissive3_g157836 = Out_Emissive4_g157834;
				float temp_output_739_12_g157833 = Out_Grayscale4_g157834;
				float In_Grayscale3_g157836 = temp_output_739_12_g157833;
				float In_Luminosity3_g157836 = temp_output_739_15_g157833;
				float In_MultiMask3_g157836 = Out_MultiMask4_g157834;
				float In_AlphaClip3_g157836 = Out_AlphaClip4_g157834;
				float In_AlphaFade3_g157836 = Out_AlphaFade4_g157834;
				float3 In_Translucency3_g157836 = Out_Translucency4_g157834;
				half Visual_Transmission699_g157833 = Out_Transmission4_g157834;
				float lerpResult746_g157833 = lerp( Visual_Transmission699_g157833 , ( Visual_Transmission699_g157833 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g157833 = lerpResult746_g157833;
				#else
				float staticSwitch703_g157833 = Visual_Transmission699_g157833;
				#endif
				half Final_Transmission702_g157833 = staticSwitch703_g157833;
				float In_Transmission3_g157836 = Final_Transmission702_g157833;
				float In_Thickness3_g157836 = Out_Thickness4_g157834;
				float In_Diffusion3_g157836 = Out_Diffusion4_g157834;
				{
				Data3_g157836.Dummy = In_Dummy3_g157836;
				Data3_g157836.Albedo = In_Albedo3_g157836;
				Data3_g157836.NormalTS = In_NormalTS3_g157836;
				Data3_g157836.NormalWS = In_NormalWS3_g157836;
				Data3_g157836.Shader = In_Shader3_g157836;
				Data3_g157836.Emissive= In_Emissive3_g157836;
				Data3_g157836.MultiMask = In_MultiMask3_g157836;
				Data3_g157836.Grayscale = In_Grayscale3_g157836;
				Data3_g157836.Luminosity = In_Luminosity3_g157836;
				Data3_g157836.AlphaClip = In_AlphaClip3_g157836;
				Data3_g157836.AlphaFade = In_AlphaFade3_g157836;
				Data3_g157836.Translucency = In_Translucency3_g157836;
				Data3_g157836.Transmission = In_Transmission3_g157836;
				Data3_g157836.Thickness = In_Thickness3_g157836;
				Data3_g157836.Diffusion = In_Diffusion3_g157836;
				}
				TVEVisualData Data4_g157871 = Data3_g157836;
				float Out_Dummy4_g157871 = 0;
				float3 Out_Albedo4_g157871 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157871 = float2( 0,0 );
				float3 Out_NormalWS4_g157871 = float3( 0,0,0 );
				float4 Out_Shader4_g157871 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157871 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157871 = 0;
				float Out_Grayscale4_g157871 = 0;
				float Out_Luminosity4_g157871 = 0;
				float Out_AlphaClip4_g157871 = 0;
				float Out_AlphaFade4_g157871 = 0;
				float3 Out_Translucency4_g157871 = float3( 0,0,0 );
				float Out_Transmission4_g157871 = 0;
				float Out_Thickness4_g157871 = 0;
				float Out_Diffusion4_g157871 = 0;
				{
				Out_Dummy4_g157871 = Data4_g157871.Dummy;
				Out_Albedo4_g157871 = Data4_g157871.Albedo;
				Out_NormalTS4_g157871 = Data4_g157871.NormalTS;
				Out_NormalWS4_g157871 = Data4_g157871.NormalWS;
				Out_Shader4_g157871 = Data4_g157871.Shader;
				Out_Emissive4_g157871= Data4_g157871.Emissive;
				Out_MultiMask4_g157871 = Data4_g157871.MultiMask;
				Out_Grayscale4_g157871 = Data4_g157871.Grayscale;
				Out_Luminosity4_g157871= Data4_g157871.Luminosity;
				Out_AlphaClip4_g157871 = Data4_g157871.AlphaClip;
				Out_AlphaFade4_g157871 = Data4_g157871.AlphaFade;
				Out_Translucency4_g157871 = Data4_g157871.Translucency;
				Out_Transmission4_g157871 = Data4_g157871.Transmission;
				Out_Thickness4_g157871 = Data4_g157871.Thickness;
				Out_Diffusion4_g157871 = Data4_g157871.Diffusion;
				}
				float3 temp_output_297_0_g157860 = Out_Albedo4_g157871;
				float3 In_Albedo3_g157872 = temp_output_297_0_g157860;
				float2 In_NormalTS3_g157872 = Out_NormalTS4_g157871;
				float3 In_NormalWS3_g157872 = Out_NormalWS4_g157871;
				float4 In_Shader3_g157872 = Out_Shader4_g157871;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g157860 = Out_Emissive4_g157871;
				TVEModelData Data15_g157861 = Data16_g157339;
				float Out_Dummy15_g157861 = 0;
				float3 Out_PositionOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157861 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157861 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157861 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157861 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157861 = float3( 0,0,0 );
				float4 Out_VertexData15_g157861 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157861 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157861 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157861 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157861 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157861 = Data15_g157861.Dummy;
				Out_PositionOS15_g157861 = Data15_g157861.PositionOS;
				Out_PositionWS15_g157861 = Data15_g157861.PositionWS;
				Out_PositionWO15_g157861 = Data15_g157861.PositionWO;
				Out_PositionRawOS15_g157861 = Data15_g157861.PositionRawOS;
				Out_PositionAddOS15_g157861 = Data15_g157861.PositionAddOS;
				Out_PivotOS15_g157861 = Data15_g157861.PivotOS;
				Out_PivotWS15_g157861 = Data15_g157861.PivotWS;
				Out_PivotWO15_g157861 = Data15_g157861.PivotWO;
				Out_NormalOS15_g157861 = Data15_g157861.NormalOS;
				Out_NormalWS15_g157861 = Data15_g157861.NormalWS;
				Out_NormalRawOS15_g157861 = Data15_g157861.NormalRawOS;
				Out_NormalRawWS15_g157861 = Data15_g157861.NormalRawWS;
				Out_TangentOS15_g157861 = Data15_g157861.TangentOS;
				Out_ViewDirWS15_g157861 = Data15_g157861.ViewDirWS;
				Out_VertexData15_g157861 = Data15_g157861.VertexData;
				Out_MotionData15_g157861 = Data15_g157861.MotionData;
				Out_BoundsData15_g157861 = Data15_g157861.BoundsData;
				Out_RotationData15_g157861 = Data15_g157861.RotationData;
				Out_FragmentData15_g157861 = Data15_g157861.FragmentData;
				}
				half4 Model_VertexMasks216_g157860 = Out_VertexData15_g157861;
				float4 break251_g157860 = Model_VertexMasks216_g157860;
				float4 break33_g157865 = _emissive_vert_mode;
				float temp_output_30_0_g157865 = ( break251_g157860.x * break33_g157865.x );
				float temp_output_29_0_g157865 = ( break251_g157860.y * break33_g157865.y );
				float temp_output_31_0_g157865 = ( break251_g157860.z * break33_g157865.z );
				float temp_output_28_0_g157865 = ( temp_output_30_0_g157865 + temp_output_29_0_g157865 + temp_output_31_0_g157865 + ( break251_g157860.w * break33_g157865.w ) );
				float clampResult17_g157864 = clamp( temp_output_28_0_g157865 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157868 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g157868 = ( _EmissiveMeshRemap.y - temp_output_7_0_g157868 );
				float lerpResult303_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157864 - temp_output_7_0_g157868 ) / ( temp_output_10_0_g157868 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g157874 = lerpResult303_g157860;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157874 = ( temp_output_6_0_g157874 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157874 = temp_output_6_0_g157874;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g157860 = staticSwitch14_g157874;
				#else
				float staticSwitch242_g157860 = 1.0;
				#endif
				half Emissive_MeshMask221_g157860 = staticSwitch242_g157860;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157863) = _EmissiveMaskTex;
				SamplerState Sampler276_g157863 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157869 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157869 = ( temp_output_6_0_g157869 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157869 = temp_output_6_0_g157869;
				#endif
				half4 Emissive_Coords167_g157860 = staticSwitch14_g157869;
				float4 temp_output_37_0_g157863 = Emissive_Coords167_g157860;
				half4 Coords276_g157863 = temp_output_37_0_g157863;
				half2 TexCoord276_g157863 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157863 = SampleMain( Texture276_g157863 , Sampler276_g157863 , Coords276_g157863 , TexCoord276_g157863 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157863) = _EmissiveMaskTex;
				SamplerState Sampler275_g157863 = sampler_Linear_Repeat;
				half4 Coords275_g157863 = temp_output_37_0_g157863;
				float2 appendResult289_g157863 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157863 = appendResult289_g157863;
				#else
				float2 staticSwitch288_g157863 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157863 = staticSwitch288_g157863;
				half4 localSampleExtra275_g157863 = SampleExtra( Texture275_g157863 , Sampler275_g157863 , Coords275_g157863 , TexCoord275_g157863 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g157860 = localSampleExtra275_g157863;
				#else
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#endif
				half4 Emissive_MaskTex201_g157860 = staticSwitch176_g157860;
				float clampResult17_g157867 = clamp( (Emissive_MaskTex201_g157860).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g157866 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g157866 = ( _EmissiveMaskRemap.y - temp_output_7_0_g157866 );
				float lerpResult302_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157867 - temp_output_7_0_g157866 ) / ( temp_output_10_0_g157866 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g157860 = lerpResult302_g157860;
				#else
				float staticSwitch190_g157860 = 1.0;
				#endif
				half Emissive_Mask103_g157860 = staticSwitch190_g157860;
				float temp_output_279_0_g157860 = ( Emissive_MeshMask221_g157860 * Emissive_Mask103_g157860 );
				float3 appendResult293_g157860 = (float3(temp_output_279_0_g157860 , temp_output_279_0_g157860 , temp_output_279_0_g157860));
				half3 Local_EmissiveColor278_g157860 = appendResult293_g157860;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g157862 = Data204_g157340;
				float Out_Dummy15_g157862 = 0;
				float4 Out_CoatParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157862 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157862 = Data15_g157862.Dummy;
				Out_CoatParams15_g157862 = Data15_g157862.CoatParams;
				Out_PaintParams15_g157862 = Data15_g157862.PaintParams;
				Out_GlowParams15_g157862 = Data15_g157862.GlowParams;
				Out_AtmoParams15_g157862= Data15_g157862.AtmoParams;
				Out_FormParams15_g157862 = Data15_g157862.FormParams;
				Out_LandParams15_g157862 = Data15_g157862.LandParams;
				Out_WindParams15_g157862 = Data15_g157862.WindParams;
				Out_PushParams15_g157862 = Data15_g157862.PushParams;
				}
				half4 Global_GlowParams179_g157860 = Out_GlowParams15_g157862;
				float3 lerpResult299_g157860 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g157860).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g157860 = lerpResult299_g157860;
				#else
				float3 staticSwitch228_g157860 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g157860 = staticSwitch228_g157860;
				half3 Local_EmissiveValue88_g157860 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g157860 );
				half3 Emissive_Blend260_g157860 = ( ( (Visual_Emissive255_g157860).xyz * Local_EmissiveColor278_g157860 ) * Local_EmissiveValue88_g157860 );
				float3 temp_output_3_0_g157870 = Emissive_Blend260_g157860;
				float temp_output_15_0_g157870 = _emissive_power_value;
				float3 temp_output_23_0_g157870 = ( temp_output_3_0_g157870 * temp_output_15_0_g157870 );
				float4 appendResult295_g157860 = (float4(temp_output_23_0_g157870 , Emissive_Mask103_g157860));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g157860 = appendResult295_g157860;
				#else
				float4 staticSwitch129_g157860 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g157860 = staticSwitch129_g157860;
				float4 In_Emissive3_g157872 = Final_Emissive184_g157860;
				float In_Grayscale3_g157872 = Out_Grayscale4_g157871;
				float In_Luminosity3_g157872 = Out_Luminosity4_g157871;
				float temp_output_297_11_g157860 = Out_MultiMask4_g157871;
				float In_MultiMask3_g157872 = temp_output_297_11_g157860;
				float In_AlphaClip3_g157872 = Out_AlphaClip4_g157871;
				float In_AlphaFade3_g157872 = Out_AlphaFade4_g157871;
				float3 In_Translucency3_g157872 = Out_Translucency4_g157871;
				float In_Transmission3_g157872 = Out_Transmission4_g157871;
				float In_Thickness3_g157872 = Out_Thickness4_g157871;
				float In_Diffusion3_g157872 = Out_Diffusion4_g157871;
				{
				Data3_g157872.Dummy = In_Dummy3_g157872;
				Data3_g157872.Albedo = In_Albedo3_g157872;
				Data3_g157872.NormalTS = In_NormalTS3_g157872;
				Data3_g157872.NormalWS = In_NormalWS3_g157872;
				Data3_g157872.Shader = In_Shader3_g157872;
				Data3_g157872.Emissive= In_Emissive3_g157872;
				Data3_g157872.MultiMask = In_MultiMask3_g157872;
				Data3_g157872.Grayscale = In_Grayscale3_g157872;
				Data3_g157872.Luminosity = In_Luminosity3_g157872;
				Data3_g157872.AlphaClip = In_AlphaClip3_g157872;
				Data3_g157872.AlphaFade = In_AlphaFade3_g157872;
				Data3_g157872.Translucency = In_Translucency3_g157872;
				Data3_g157872.Transmission = In_Transmission3_g157872;
				Data3_g157872.Thickness = In_Thickness3_g157872;
				Data3_g157872.Diffusion = In_Diffusion3_g157872;
				}
				TVEVisualData Data4_g157882 = Data3_g157872;
				float Out_Dummy4_g157882 = 0;
				float3 Out_Albedo4_g157882 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157882 = float2( 0,0 );
				float3 Out_NormalWS4_g157882 = float3( 0,0,0 );
				float4 Out_Shader4_g157882 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157882 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157882 = 0;
				float Out_Grayscale4_g157882 = 0;
				float Out_Luminosity4_g157882 = 0;
				float Out_AlphaClip4_g157882 = 0;
				float Out_AlphaFade4_g157882 = 0;
				float3 Out_Translucency4_g157882 = float3( 0,0,0 );
				float Out_Transmission4_g157882 = 0;
				float Out_Thickness4_g157882 = 0;
				float Out_Diffusion4_g157882 = 0;
				{
				Out_Dummy4_g157882 = Data4_g157882.Dummy;
				Out_Albedo4_g157882 = Data4_g157882.Albedo;
				Out_NormalTS4_g157882 = Data4_g157882.NormalTS;
				Out_NormalWS4_g157882 = Data4_g157882.NormalWS;
				Out_Shader4_g157882 = Data4_g157882.Shader;
				Out_Emissive4_g157882= Data4_g157882.Emissive;
				Out_MultiMask4_g157882 = Data4_g157882.MultiMask;
				Out_Grayscale4_g157882 = Data4_g157882.Grayscale;
				Out_Luminosity4_g157882= Data4_g157882.Luminosity;
				Out_AlphaClip4_g157882 = Data4_g157882.AlphaClip;
				Out_AlphaFade4_g157882 = Data4_g157882.AlphaFade;
				Out_Translucency4_g157882 = Data4_g157882.Translucency;
				Out_Transmission4_g157882 = Data4_g157882.Transmission;
				Out_Thickness4_g157882 = Data4_g157882.Thickness;
				Out_Diffusion4_g157882 = Data4_g157882.Diffusion;
				}
				half3 Visual_Albedo199_g157881 = Out_Albedo4_g157882;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g157881 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g157881 );
				half Visual_Transmission138_g157881 = Out_Transmission4_g157882;
				half Subsurface_Value268_g157881 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g157885 = Data204_g157340;
				float Out_Dummy15_g157885 = 0;
				float4 Out_CoatParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157885 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157885 = Data15_g157885.Dummy;
				Out_CoatParams15_g157885 = Data15_g157885.CoatParams;
				Out_PaintParams15_g157885 = Data15_g157885.PaintParams;
				Out_GlowParams15_g157885 = Data15_g157885.GlowParams;
				Out_AtmoParams15_g157885= Data15_g157885.AtmoParams;
				Out_FormParams15_g157885 = Data15_g157885.FormParams;
				Out_LandParams15_g157885 = Data15_g157885.LandParams;
				Out_WindParams15_g157885 = Data15_g157885.WindParams;
				Out_PushParams15_g157885 = Data15_g157885.PushParams;
				}
				half4 Global_GlowParams373_g157881 = Out_GlowParams15_g157885;
				float lerpResult403_g157881 = lerp( 1.0 , saturate( (Global_GlowParams373_g157881).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g157881 = lerpResult403_g157881;
				#else
				float staticSwitch367_g157881 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g157881 = staticSwitch367_g157881;
				float temp_output_301_11_g157881 = Out_MultiMask4_g157882;
				half Visual_MultiMask292_g157881 = temp_output_301_11_g157881;
				float lerpResult293_g157881 = lerp( 1.0 , Visual_MultiMask292_g157881 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g157881 = lerpResult293_g157881;
				half Custom_Mask363_g157881 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g157881 = ( Visual_Transmission138_g157881 * Subsurface_Value268_g157881 * Subsurface_GlobalMask369_g157881 * Subsurface_MultiMask296_g157881 * Custom_Mask363_g157881 );
				#else
				float staticSwitch345_g157881 = 0.0;
				#endif
				half Final_Transmission269_g157881 = staticSwitch345_g157881;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g157881 = ( Subsurface_Color264_g157881 * Final_Transmission269_g157881 * 10.0 );
				#else
				float3 staticSwitch348_g157881 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g157881 = staticSwitch348_g157881;
				TVEModelData Data15_g157884 = Data16_g157339;
				float Out_Dummy15_g157884 = 0;
				float3 Out_PositionOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157884 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157884 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157884 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157884 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157884 = float3( 0,0,0 );
				float4 Out_VertexData15_g157884 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157884 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157884 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157884 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157884 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157884 = Data15_g157884.Dummy;
				Out_PositionOS15_g157884 = Data15_g157884.PositionOS;
				Out_PositionWS15_g157884 = Data15_g157884.PositionWS;
				Out_PositionWO15_g157884 = Data15_g157884.PositionWO;
				Out_PositionRawOS15_g157884 = Data15_g157884.PositionRawOS;
				Out_PositionAddOS15_g157884 = Data15_g157884.PositionAddOS;
				Out_PivotOS15_g157884 = Data15_g157884.PivotOS;
				Out_PivotWS15_g157884 = Data15_g157884.PivotWS;
				Out_PivotWO15_g157884 = Data15_g157884.PivotWO;
				Out_NormalOS15_g157884 = Data15_g157884.NormalOS;
				Out_NormalWS15_g157884 = Data15_g157884.NormalWS;
				Out_NormalRawOS15_g157884 = Data15_g157884.NormalRawOS;
				Out_NormalRawWS15_g157884 = Data15_g157884.NormalRawWS;
				Out_TangentOS15_g157884 = Data15_g157884.TangentOS;
				Out_ViewDirWS15_g157884 = Data15_g157884.ViewDirWS;
				Out_VertexData15_g157884 = Data15_g157884.VertexData;
				Out_MotionData15_g157884 = Data15_g157884.MotionData;
				Out_BoundsData15_g157884 = Data15_g157884.BoundsData;
				Out_RotationData15_g157884 = Data15_g157884.RotationData;
				Out_FragmentData15_g157884 = Data15_g157884.FragmentData;
				}
				half3 Model_ViewDirWS392_g157881 = Out_ViewDirWS15_g157884;
				float dotResult324_g157881 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g157881 );
				float saferPower323_g157881 = abs( saturate( dotResult324_g157881 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g157881 = 0.0;
				#else
				float staticSwitch330_g157881 = ( pow( saferPower323_g157881 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g157881 = staticSwitch330_g157881;
				float3 temp_output_6_0_g157886 = ( Final_Translucency254_g157881 * Mask_Subsurface_View320_g157881 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157886 = ( temp_output_6_0_g157886 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g157886 = temp_output_6_0_g157886;
				#endif
				half3 Subsurface_Approximation333_g157881 = staticSwitch14_g157886;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g157881 = ( Visual_Albedo199_g157881 + Subsurface_Approximation333_g157881 );
				#else
				float3 staticSwitch353_g157881 = Visual_Albedo199_g157881;
				#endif
				half3 Final_Albedo312_g157881 = staticSwitch353_g157881;
				float3 In_Albedo3_g157883 = Final_Albedo312_g157881;
				float2 In_NormalTS3_g157883 = Out_NormalTS4_g157882;
				float3 In_NormalWS3_g157883 = Out_NormalWS4_g157882;
				float4 In_Shader3_g157883 = Out_Shader4_g157882;
				float4 In_Emissive3_g157883 = Out_Emissive4_g157882;
				float In_Grayscale3_g157883 = Out_Grayscale4_g157882;
				float In_Luminosity3_g157883 = Out_Luminosity4_g157882;
				float In_MultiMask3_g157883 = temp_output_301_11_g157881;
				float In_AlphaClip3_g157883 = Out_AlphaClip4_g157882;
				float In_AlphaFade3_g157883 = Out_AlphaFade4_g157882;
				float3 In_Translucency3_g157883 = Final_Translucency254_g157881;
				float In_Transmission3_g157883 = Final_Transmission269_g157881;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g157881 = 0.0;
				#else
				float staticSwitch351_g157881 = 1.0;
				#endif
				half Final_Thickness275_g157881 = staticSwitch351_g157881;
				float In_Thickness3_g157883 = Final_Thickness275_g157881;
				float Final_Diffusion340_g157881 = _SubsurfaceDiffusion;
				float In_Diffusion3_g157883 = Final_Diffusion340_g157881;
				{
				Data3_g157883.Dummy = In_Dummy3_g157883;
				Data3_g157883.Albedo = In_Albedo3_g157883;
				Data3_g157883.NormalTS = In_NormalTS3_g157883;
				Data3_g157883.NormalWS = In_NormalWS3_g157883;
				Data3_g157883.Shader = In_Shader3_g157883;
				Data3_g157883.Emissive= In_Emissive3_g157883;
				Data3_g157883.MultiMask = In_MultiMask3_g157883;
				Data3_g157883.Grayscale = In_Grayscale3_g157883;
				Data3_g157883.Luminosity = In_Luminosity3_g157883;
				Data3_g157883.AlphaClip = In_AlphaClip3_g157883;
				Data3_g157883.AlphaFade = In_AlphaFade3_g157883;
				Data3_g157883.Translucency = In_Translucency3_g157883;
				Data3_g157883.Transmission = In_Transmission3_g157883;
				Data3_g157883.Thickness = In_Thickness3_g157883;
				Data3_g157883.Diffusion = In_Diffusion3_g157883;
				}
				TVEVisualData Data4_g157896 = Data3_g157883;
				float Out_Dummy4_g157896 = 0;
				float3 Out_Albedo4_g157896 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157896 = float2( 0,0 );
				float3 Out_NormalWS4_g157896 = float3( 0,0,0 );
				float4 Out_Shader4_g157896 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157896 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157896 = 0;
				float Out_Grayscale4_g157896 = 0;
				float Out_Luminosity4_g157896 = 0;
				float Out_AlphaClip4_g157896 = 0;
				float Out_AlphaFade4_g157896 = 0;
				float3 Out_Translucency4_g157896 = float3( 0,0,0 );
				float Out_Transmission4_g157896 = 0;
				float Out_Thickness4_g157896 = 0;
				float Out_Diffusion4_g157896 = 0;
				{
				Out_Dummy4_g157896 = Data4_g157896.Dummy;
				Out_Albedo4_g157896 = Data4_g157896.Albedo;
				Out_NormalTS4_g157896 = Data4_g157896.NormalTS;
				Out_NormalWS4_g157896 = Data4_g157896.NormalWS;
				Out_Shader4_g157896 = Data4_g157896.Shader;
				Out_Emissive4_g157896= Data4_g157896.Emissive;
				Out_MultiMask4_g157896 = Data4_g157896.MultiMask;
				Out_Grayscale4_g157896 = Data4_g157896.Grayscale;
				Out_Luminosity4_g157896= Data4_g157896.Luminosity;
				Out_AlphaClip4_g157896 = Data4_g157896.AlphaClip;
				Out_AlphaFade4_g157896 = Data4_g157896.AlphaFade;
				Out_Translucency4_g157896 = Data4_g157896.Translucency;
				Out_Transmission4_g157896 = Data4_g157896.Transmission;
				Out_Thickness4_g157896 = Data4_g157896.Thickness;
				Out_Diffusion4_g157896 = Data4_g157896.Diffusion;
				}
				half3 Input_Albedo24_g157895 = Out_Albedo4_g157896;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g157895 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g157895 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g157895 = staticSwitch22_g157895;
				float4 break24_g157890 = Out_Shader4_g157896;
				half Metallic95_g157890 = break24_g157890.x;
				half Input_Metallic25_g157895 = Metallic95_g157890;
				half OneMinusReflectivity31_g157895 = ( (ColorSpaceDielectricSpec23_g157895).w - ( (ColorSpaceDielectricSpec23_g157895).w * Input_Metallic25_g157895 ) );
				
				float3 appendResult23_g157890 = (float3(Out_NormalTS4_g157896 , 1.0));
				float3 temp_output_13_0_g157894 = appendResult23_g157890;
				float3 temp_output_33_0_g157894 = ( temp_output_13_0_g157894 * _render_normal );
				float3 switchResult12_g157894 = (((ase_vface>0)?(temp_output_13_0_g157894):(temp_output_33_0_g157894)));
				
				float3 lerpResult28_g157895 = lerp( (ColorSpaceDielectricSpec23_g157895).xyz , Input_Albedo24_g157895 , Input_Metallic25_g157895);
				half RenderSpec102_g157890 = _RenderSpecular;
				
				float localCustomAlphaClip19_g157897 = ( 0.0 );
				float temp_output_3_0_g157897 = Out_AlphaClip4_g157896;
				float Alpha19_g157897 = temp_output_3_0_g157897;
				float temp_output_15_0_g157897 = 0.0;
				float Treshold19_g157897 = temp_output_15_0_g157897;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#else
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g157895 * OneMinusReflectivity31_g157895 );
				o.Normal = switchResult12_g157894;
				o.Emission = (Out_Emissive4_g157896).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 1;
					o.Gloss = 1;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g157895 * RenderSpec102_g157890 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g157890.y;
					o.Smoothness = break24_g157890.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g157897 * Out_AlphaFade4_g157896 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				float4 ase_texcoord14 : TEXCOORD14;
				float4 ase_texcoord15 : TEXCOORD15;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _IsLiteShader;
			uniform half _IsStandardShader;
			uniform half _IsGeneralShader;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = v.vertex.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g154892 = ase_worldPos;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float4x4 break19_g154894 = unity_ObjectToWorld;
				float3 appendResult20_g154894 = (float3(break19_g154894[ 0 ][ 3 ] , break19_g154894[ 1 ][ 3 ] , break19_g154894[ 2 ][ 3 ]));
				half3 ObjectData20_g154896 = appendResult20_g154894;
				half3 WorldData19_g154896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154896 = WorldData19_g154896;
				#else
				float3 staticSwitch14_g154896 = ObjectData20_g154896;
				#endif
				float3 temp_output_124_0_g154894 = staticSwitch14_g154896;
				float3 temp_output_239_7_g154892 = temp_output_124_0_g154894;
				float4x4 break19_g154898 = unity_ObjectToWorld;
				float3 appendResult20_g154898 = (float3(break19_g154898[ 0 ][ 3 ] , break19_g154898[ 1 ][ 3 ] , break19_g154898[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 temp_output_122_0_g154898 = PivotOS149_g154892;
				float3 PivotsOnly105_g154898 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g154898 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g154900 = ( appendResult20_g154898 + PivotsOnly105_g154898 );
				half3 WorldData19_g154900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154900 = WorldData19_g154900;
				#else
				float3 staticSwitch14_g154900 = ObjectData20_g154900;
				#endif
				float3 temp_output_124_0_g154898 = staticSwitch14_g154900;
				float3 temp_output_237_7_g154892 = temp_output_124_0_g154898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#else
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#endif
				float3 vertexToFrag76_g154892 = staticSwitch236_g154892;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = v.normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = v.tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = v.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( v.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( v.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( v.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( v.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ), 0.0 );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157893 = Data16_g157339;
				float Out_Dummy15_g157893 = 0;
				float3 Out_PositionOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157893 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157893 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157893 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157893 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157893 = float3( 0,0,0 );
				float4 Out_VertexData15_g157893 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157893 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157893 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157893 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157893 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157893 = Data15_g157893.Dummy;
				Out_PositionOS15_g157893 = Data15_g157893.PositionOS;
				Out_PositionWS15_g157893 = Data15_g157893.PositionWS;
				Out_PositionWO15_g157893 = Data15_g157893.PositionWO;
				Out_PositionRawOS15_g157893 = Data15_g157893.PositionRawOS;
				Out_PositionAddOS15_g157893 = Data15_g157893.PositionAddOS;
				Out_PivotOS15_g157893 = Data15_g157893.PivotOS;
				Out_PivotWS15_g157893 = Data15_g157893.PivotWS;
				Out_PivotWO15_g157893 = Data15_g157893.PivotWO;
				Out_NormalOS15_g157893 = Data15_g157893.NormalOS;
				Out_NormalWS15_g157893 = Data15_g157893.NormalWS;
				Out_NormalRawOS15_g157893 = Data15_g157893.NormalRawOS;
				Out_NormalRawWS15_g157893 = Data15_g157893.NormalRawWS;
				Out_TangentOS15_g157893 = Data15_g157893.TangentOS;
				Out_ViewDirWS15_g157893 = Data15_g157893.ViewDirWS;
				Out_VertexData15_g157893 = Data15_g157893.VertexData;
				Out_MotionData15_g157893 = Data15_g157893.MotionData;
				Out_BoundsData15_g157893 = Data15_g157893.BoundsData;
				Out_RotationData15_g157893 = Data15_g157893.RotationData;
				Out_FragmentData15_g157893 = Data15_g157893.FragmentData;
				}
				float3 temp_output_31_0_g157890 = Out_PositionOS15_g157893;
				
				float4 temp_output_6_0_g157905 = Out_TangentOS15_g157893;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157905 = ( temp_output_6_0_g157905 + ( Dummy_Data978 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157905 = temp_output_6_0_g157905;
				#endif
				
				o.ase_texcoord13.xyz = vertexToFrag73_g154892;
				o.ase_texcoord14.xyz = vertexToFrag76_g154892;
				TVEModelData Data15_g157488 = Data16_g157339;
				float Out_Dummy15_g157488 = 0;
				float3 Out_PositionOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157488 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157488 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157488 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157488 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157488 = float3( 0,0,0 );
				float4 Out_VertexData15_g157488 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157488 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157488 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157488 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157488 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157488 = Data15_g157488.Dummy;
				Out_PositionOS15_g157488 = Data15_g157488.PositionOS;
				Out_PositionWS15_g157488 = Data15_g157488.PositionWS;
				Out_PositionWO15_g157488 = Data15_g157488.PositionWO;
				Out_PositionRawOS15_g157488 = Data15_g157488.PositionRawOS;
				Out_PositionAddOS15_g157488 = Data15_g157488.PositionAddOS;
				Out_PivotOS15_g157488 = Data15_g157488.PivotOS;
				Out_PivotWS15_g157488 = Data15_g157488.PivotWS;
				Out_PivotWO15_g157488 = Data15_g157488.PivotWO;
				Out_NormalOS15_g157488 = Data15_g157488.NormalOS;
				Out_NormalWS15_g157488 = Data15_g157488.NormalWS;
				Out_NormalRawOS15_g157488 = Data15_g157488.NormalRawOS;
				Out_NormalRawWS15_g157488 = Data15_g157488.NormalRawWS;
				Out_TangentOS15_g157488 = Data15_g157488.TangentOS;
				Out_ViewDirWS15_g157488 = Data15_g157488.ViewDirWS;
				Out_VertexData15_g157488 = Data15_g157488.VertexData;
				Out_MotionData15_g157488 = Data15_g157488.MotionData;
				Out_BoundsData15_g157488 = Data15_g157488.BoundsData;
				Out_RotationData15_g157488 = Data15_g157488.RotationData;
				Out_FragmentData15_g157488 = Data15_g157488.FragmentData;
				}
				half4 Model_FragmentData196_g157486 = Out_FragmentData15_g157488;
				float vertexToFrag203_g157486 = (Model_FragmentData196_g157486).w;
				o.ase_texcoord10.z = vertexToFrag203_g157486;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord11 = v.texcoord1.xyzw;
				o.ase_texcoord12 = v.vertex;
				o.ase_texcoord15 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.w = 0;
				o.ase_texcoord13.w = 0;
				o.ase_texcoord14.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g157890 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g157893;
				v.tangent = staticSwitch14_g157905;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g157896 = ( 0.0 );
				float localCompData3_g157883 = ( 0.0 );
				TVEVisualData Data3_g157883 = (TVEVisualData)0;
				half Dummy145_g157881 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g157883 = Dummy145_g157881;
				float localBreakData4_g157882 = ( 0.0 );
				float localCompData3_g157872 = ( 0.0 );
				TVEVisualData Data3_g157872 = (TVEVisualData)0;
				half Dummy145_g157860 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g157872 = Dummy145_g157860;
				float localBreakData4_g157871 = ( 0.0 );
				float localCompData3_g157836 = ( 0.0 );
				TVEVisualData Data3_g157836 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g157833 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g157836 = Dummy594_g157833.r;
				float localBreakData4_g157834 = ( 0.0 );
				float localCompData3_g157489 = ( 0.0 );
				TVEVisualData Data3_g157489 = (TVEVisualData)0;
				float In_Dummy3_g157489 = 0.0;
				float localBreakData4_g157487 = ( 0.0 );
				float localCompData3_g157480 = ( 0.0 );
				TVEVisualData Data3_g157480 = (TVEVisualData)0;
				half Dummy220_g157476 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g157480 = Dummy220_g157476;
				float localBreakData4_g157479 = ( 0.0 );
				float localCompData3_g157468 = ( 0.0 );
				TVEVisualData Data3_g157468 = (TVEVisualData)0;
				half Dummy202_g157466 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g157468 = Dummy202_g157466;
				float localBreakData4_g157467 = ( 0.0 );
				float localCompData3_g157454 = ( 0.0 );
				TVEVisualData Data3_g157454 = (TVEVisualData)0;
				half4 Dummy944_g157436 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g157454 = Dummy944_g157436.x;
				float localBreakData4_g157453 = ( 0.0 );
				float localCompData3_g157416 = ( 0.0 );
				TVEVisualData Data3_g157416 = (TVEVisualData)0;
				half4 Dummy946_g157405 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g157416 = Dummy946_g157405.x;
				float localBreakData4_g157419 = ( 0.0 );
				float localCompData3_g157401 = ( 0.0 );
				TVEVisualData Data3_g157401 = (TVEVisualData)0;
				half4 Dummy130_g157391 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g157401 = Dummy130_g157391.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157402) = _MainAlbedoTex;
				SamplerState Sampler276_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g157391 = _main_coord_value;
				float4 temp_output_37_0_g157402 = Local_Coords180_g157391;
				half4 Coords276_g157402 = temp_output_37_0_g157402;
				half2 TexCoord276_g157402 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157402 = SampleMain( Texture276_g157402 , Sampler276_g157402 , Coords276_g157402 , TexCoord276_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157402) = _MainAlbedoTex;
				SamplerState Sampler275_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157402 = temp_output_37_0_g157402;
				float2 appendResult289_g157402 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157402 = appendResult289_g157402;
				#else
				float2 staticSwitch288_g157402 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157402 = staticSwitch288_g157402;
				half4 localSampleExtra275_g157402 = SampleExtra( Texture275_g157402 , Sampler275_g157402 , Coords275_g157402 , TexCoord275_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157402) = _MainAlbedoTex;
				SamplerState Sampler238_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157402 = temp_output_37_0_g157402;
				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = IN.ase_texcoord12.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 vertexToFrag73_g154892 = IN.ase_texcoord13.xyz;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float3 vertexToFrag76_g154892 = IN.ase_texcoord14.xyz;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(IN.ase_texcoord15.x , 0.0 , IN.ase_texcoord15.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = IN.ase_normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = IN.ase_tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = IN.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( IN.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( IN.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( IN.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( IN.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = IN.ase_texcoord9.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ) );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157392 = Data16_g157339;
				float Out_Dummy15_g157392 = 0;
				float3 Out_PositionOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157392 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157392 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157392 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157392 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157392 = float3( 0,0,0 );
				float4 Out_VertexData15_g157392 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157392 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157392 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157392 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157392 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157392 = Data15_g157392.Dummy;
				Out_PositionOS15_g157392 = Data15_g157392.PositionOS;
				Out_PositionWS15_g157392 = Data15_g157392.PositionWS;
				Out_PositionWO15_g157392 = Data15_g157392.PositionWO;
				Out_PositionRawOS15_g157392 = Data15_g157392.PositionRawOS;
				Out_PositionAddOS15_g157392 = Data15_g157392.PositionAddOS;
				Out_PivotOS15_g157392 = Data15_g157392.PivotOS;
				Out_PivotWS15_g157392 = Data15_g157392.PivotWS;
				Out_PivotWO15_g157392 = Data15_g157392.PivotWO;
				Out_NormalOS15_g157392 = Data15_g157392.NormalOS;
				Out_NormalWS15_g157392 = Data15_g157392.NormalWS;
				Out_NormalRawOS15_g157392 = Data15_g157392.NormalRawOS;
				Out_NormalRawWS15_g157392 = Data15_g157392.NormalRawWS;
				Out_TangentOS15_g157392 = Data15_g157392.TangentOS;
				Out_ViewDirWS15_g157392 = Data15_g157392.ViewDirWS;
				Out_VertexData15_g157392 = Data15_g157392.VertexData;
				Out_MotionData15_g157392 = Data15_g157392.MotionData;
				Out_BoundsData15_g157392 = Data15_g157392.BoundsData;
				Out_RotationData15_g157392 = Data15_g157392.RotationData;
				Out_FragmentData15_g157392 = Data15_g157392.FragmentData;
				}
				half3 Model_PositionWO222_g157391 = Out_PositionWO15_g157392;
				float3 temp_output_279_0_g157402 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157402 = temp_output_279_0_g157402;
				half4 localSamplePlanar2D238_g157402 = SamplePlanar2D( Texture238_g157402 , Sampler238_g157402 , Coords238_g157402 , WorldPosition238_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157402) = _MainAlbedoTex;
				SamplerState Sampler246_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition246_g157402 = temp_output_279_0_g157402;
				half3 Model_NormalWS226_g157391 = Out_NormalWS15_g157392;
				float3 temp_output_280_0_g157402 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157402 = temp_output_280_0_g157402;
				half4 localSamplePlanar3D246_g157402 = SamplePlanar3D( Texture246_g157402 , Sampler246_g157402 , Coords246_g157402 , WorldPosition246_g157402 , WorldNormal246_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157402) = _MainAlbedoTex;
				SamplerState Sampler234_g157402 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157402 = temp_output_37_0_g157402;
				float3 WorldPosition234_g157402 = temp_output_279_0_g157402;
				float4 localSampleStochastic2D234_g157402 = SampleStochastic2D( Texture234_g157402 , Sampler234_g157402 , Coords234_g157402 , WorldPosition234_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157402) = _MainAlbedoTex;
				SamplerState Sampler263_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition263_g157402 = temp_output_279_0_g157402;
				half3 WorldNormal263_g157402 = temp_output_280_0_g157402;
				half4 localSampleStochastic3D263_g157402 = SampleStochastic3D( Texture263_g157402 , Sampler263_g157402 , Coords263_g157402 , WorldPosition263_g157402 , WorldNormal263_g157402 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g157391 = localSampleExtra275_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g157391 = localSamplePlanar2D238_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g157391 = localSamplePlanar3D246_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g157391 = localSampleStochastic2D234_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g157391 = localSampleStochastic3D263_g157402;
				#else
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#endif
				half4 Local_AlbedoTex185_g157391 = staticSwitch184_g157391;
				float3 lerpResult53_g157391 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g157391).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g157391 = lerpResult53_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157404) = _MainShaderTex;
				SamplerState Sampler276_g157404 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157404 = Local_Coords180_g157391;
				half4 Coords276_g157404 = temp_output_37_0_g157404;
				half2 TexCoord276_g157404 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157404 = SampleMain( Texture276_g157404 , Sampler276_g157404 , Coords276_g157404 , TexCoord276_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157404) = _MainShaderTex;
				SamplerState Sampler275_g157404 = sampler_Linear_Repeat;
				half4 Coords275_g157404 = temp_output_37_0_g157404;
				float2 appendResult289_g157404 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157404 = appendResult289_g157404;
				#else
				float2 staticSwitch288_g157404 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157404 = staticSwitch288_g157404;
				half4 localSampleExtra275_g157404 = SampleExtra( Texture275_g157404 , Sampler275_g157404 , Coords275_g157404 , TexCoord275_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157404) = _MainShaderTex;
				SamplerState Sampler238_g157404 = sampler_Linear_Repeat;
				half4 Coords238_g157404 = temp_output_37_0_g157404;
				float3 temp_output_279_0_g157404 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157404 = temp_output_279_0_g157404;
				half4 localSamplePlanar2D238_g157404 = SamplePlanar2D( Texture238_g157404 , Sampler238_g157404 , Coords238_g157404 , WorldPosition238_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157404) = _MainShaderTex;
				SamplerState Sampler246_g157404 = sampler_Linear_Repeat;
				half4 Coords246_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition246_g157404 = temp_output_279_0_g157404;
				float3 temp_output_280_0_g157404 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157404 = temp_output_280_0_g157404;
				half4 localSamplePlanar3D246_g157404 = SamplePlanar3D( Texture246_g157404 , Sampler246_g157404 , Coords246_g157404 , WorldPosition246_g157404 , WorldNormal246_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157404) = _MainShaderTex;
				SamplerState Sampler234_g157404 = sampler_Linear_Repeat;
				float4 Coords234_g157404 = temp_output_37_0_g157404;
				float3 WorldPosition234_g157404 = temp_output_279_0_g157404;
				float4 localSampleStochastic2D234_g157404 = SampleStochastic2D( Texture234_g157404 , Sampler234_g157404 , Coords234_g157404 , WorldPosition234_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157404) = _MainShaderTex;
				SamplerState Sampler263_g157404 = sampler_Linear_Repeat;
				half4 Coords263_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition263_g157404 = temp_output_279_0_g157404;
				half3 WorldNormal263_g157404 = temp_output_280_0_g157404;
				half4 localSampleStochastic3D263_g157404 = SampleStochastic3D( Texture263_g157404 , Sampler263_g157404 , Coords263_g157404 , WorldPosition263_g157404 , WorldNormal263_g157404 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g157391 = localSampleExtra275_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g157391 = localSamplePlanar2D238_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g157391 = localSamplePlanar3D246_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g157391 = localSampleStochastic2D234_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g157391 = localSampleStochastic3D263_g157404;
				#else
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#endif
				half4 Local_MasksTex199_g157391 = staticSwitch198_g157391;
				float lerpResult23_g157391 = lerp( 1.0 , (Local_MasksTex199_g157391).y , _MainOcclusionValue);
				float4 appendResult73_g157391 = (float4(( (Local_MasksTex199_g157391).x * _MainMetallicValue ) , lerpResult23_g157391 , (Local_MasksTex199_g157391).z , ( (Local_MasksTex199_g157391).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g157391 = appendResult73_g157391;
				float clampResult17_g157397 = clamp( (Local_Masks109_g157391).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157398 = _MainMultiRemap.x;
				float temp_output_10_0_g157398 = ( _MainMultiRemap.y - temp_output_7_0_g157398 );
				half Local_MultiMask78_g157391 = saturate( ( ( clampResult17_g157397 - temp_output_7_0_g157398 ) / ( temp_output_10_0_g157398 + 0.0001 ) ) );
				float lerpResult58_g157391 = lerp( 1.0 , Local_MultiMask78_g157391 , _MainColorMode);
				float4 lerpResult62_g157391 = lerp( _MainColorTwo , _MainColor , lerpResult58_g157391);
				half3 Local_ColorRGB93_g157391 = (lerpResult62_g157391).rgb;
				half3 Local_Albedo139_g157391 = ( Local_AlbedoRGB107_g157391 * Local_ColorRGB93_g157391 );
				float3 In_Albedo3_g157401 = Local_Albedo139_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157403) = _MainNormalTex;
				SamplerState Sampler276_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g157403 = Local_Coords180_g157391;
				half4 Coords276_g157403 = temp_output_37_0_g157403;
				half2 TexCoord276_g157403 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157403 = SampleMain( Texture276_g157403 , Sampler276_g157403 , Coords276_g157403 , TexCoord276_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157403) = _MainNormalTex;
				SamplerState Sampler275_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157403 = temp_output_37_0_g157403;
				float2 appendResult289_g157403 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157403 = appendResult289_g157403;
				#else
				float2 staticSwitch288_g157403 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157403 = staticSwitch288_g157403;
				half4 localSampleExtra275_g157403 = SampleExtra( Texture275_g157403 , Sampler275_g157403 , Coords275_g157403 , TexCoord275_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157403) = _MainNormalTex;
				SamplerState Sampler238_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157403 = temp_output_37_0_g157403;
				float3 temp_output_279_0_g157403 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157403 = temp_output_279_0_g157403;
				half4 localSamplePlanar2D238_g157403 = SamplePlanar2D( Texture238_g157403 , Sampler238_g157403 , Coords238_g157403 , WorldPosition238_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157403) = _MainNormalTex;
				SamplerState Sampler246_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition246_g157403 = temp_output_279_0_g157403;
				float3 temp_output_280_0_g157403 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157403 = temp_output_280_0_g157403;
				half4 localSamplePlanar3D246_g157403 = SamplePlanar3D( Texture246_g157403 , Sampler246_g157403 , Coords246_g157403 , WorldPosition246_g157403 , WorldNormal246_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157403) = _MainNormalTex;
				SamplerState Sampler234_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157403 = temp_output_37_0_g157403;
				float3 WorldPosition234_g157403 = temp_output_279_0_g157403;
				float4 localSampleStochastic2D234_g157403 = SampleStochastic2D( Texture234_g157403 , Sampler234_g157403 , Coords234_g157403 , WorldPosition234_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157403) = _MainNormalTex;
				SamplerState Sampler263_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition263_g157403 = temp_output_279_0_g157403;
				half3 WorldNormal263_g157403 = temp_output_280_0_g157403;
				half4 localSampleStochastic3D263_g157403 = SampleStochastic3D( Texture263_g157403 , Sampler263_g157403 , Coords263_g157403 , WorldPosition263_g157403 , WorldNormal263_g157403 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g157391 = localSampleExtra275_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g157391 = localSamplePlanar2D238_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g157391 = localSamplePlanar3D246_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g157391 = localSampleStochastic2D234_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g157391 = localSampleStochastic3D263_g157403;
				#else
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#endif
				half4 Local_NormaTex191_g157391 = staticSwitch193_g157391;
				half4 Normal_Packed45_g157393 = Local_NormaTex191_g157391;
				float2 appendResult58_g157393 = (float2(( (Normal_Packed45_g157393).x * (Normal_Packed45_g157393).w ) , (Normal_Packed45_g157393).y));
				half2 Normal_Default50_g157393 = appendResult58_g157393;
				half2 Normal_ASTC41_g157393 = (Normal_Packed45_g157393).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157393 = Normal_ASTC41_g157393;
				#else
				float2 staticSwitch38_g157393 = Normal_Default50_g157393;
				#endif
				half2 Normal_NO_DTX544_g157393 = (Normal_Packed45_g157393).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157393 = Normal_NO_DTX544_g157393;
				#else
				float2 staticSwitch37_g157393 = staticSwitch38_g157393;
				#endif
				float2 temp_output_26_0_g157391 = ( (staticSwitch37_g157393*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g157394 = temp_output_26_0_g157391;
				float2 break71_g157394 = Normal_Planar45_g157394;
				float3 appendResult72_g157394 = (float3(break71_g157394.x , 0.0 , break71_g157394.y));
				float2 temp_output_205_0_g157391 = (mul( ase_worldToTangent, appendResult72_g157394 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#else
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#endif
				half2 Local_NormalTS108_g157391 = staticSwitch204_g157391;
				float2 In_NormalTS3_g157401 = Local_NormalTS108_g157391;
				float3 appendResult68_g157395 = (float3(Local_NormalTS108_g157391 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g157395 = appendResult68_g157395;
				float3 worldNormal74_g157395 = normalize( float3(dot(tanToWorld0,tanNormal74_g157395), dot(tanToWorld1,tanNormal74_g157395), dot(tanToWorld2,tanNormal74_g157395)) );
				half3 Local_NormalWS250_g157391 = worldNormal74_g157395;
				float3 In_NormalWS3_g157401 = Local_NormalWS250_g157391;
				float4 In_Shader3_g157401 = Local_Masks109_g157391;
				float4 In_Emissive3_g157401 = half4(1,1,1,1);
				float3 temp_output_3_0_g157396 = Local_Albedo139_g157391;
				float dotResult20_g157396 = dot( temp_output_3_0_g157396 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g157391 = dotResult20_g157396;
				float In_Grayscale3_g157401 = Local_Grayscale110_g157391;
				float clampResult144_g157391 = clamp( saturate( ( Local_Grayscale110_g157391 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g157391 = clampResult144_g157391;
				float In_Luminosity3_g157401 = Local_Luminosity145_g157391;
				float In_MultiMask3_g157401 = Local_MultiMask78_g157391;
				float temp_output_187_0_g157391 = (Local_AlbedoTex185_g157391).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g157391 = ( temp_output_187_0_g157391 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g157391 = temp_output_187_0_g157391;
				#endif
				half Local_AlphaClip111_g157391 = staticSwitch236_g157391;
				float In_AlphaClip3_g157401 = Local_AlphaClip111_g157391;
				half Local_AlphaFade246_g157391 = (lerpResult62_g157391).a;
				float In_AlphaFade3_g157401 = Local_AlphaFade246_g157391;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g157401 = temp_cast_22;
				float In_Transmission3_g157401 = 1.0;
				float In_Thickness3_g157401 = 0.0;
				float In_Diffusion3_g157401 = 0.0;
				{
				Data3_g157401.Dummy = In_Dummy3_g157401;
				Data3_g157401.Albedo = In_Albedo3_g157401;
				Data3_g157401.NormalTS = In_NormalTS3_g157401;
				Data3_g157401.NormalWS = In_NormalWS3_g157401;
				Data3_g157401.Shader = In_Shader3_g157401;
				Data3_g157401.Emissive= In_Emissive3_g157401;
				Data3_g157401.MultiMask = In_MultiMask3_g157401;
				Data3_g157401.Grayscale = In_Grayscale3_g157401;
				Data3_g157401.Luminosity = In_Luminosity3_g157401;
				Data3_g157401.AlphaClip = In_AlphaClip3_g157401;
				Data3_g157401.AlphaFade = In_AlphaFade3_g157401;
				Data3_g157401.Translucency = In_Translucency3_g157401;
				Data3_g157401.Transmission = In_Transmission3_g157401;
				Data3_g157401.Thickness = In_Thickness3_g157401;
				Data3_g157401.Diffusion = In_Diffusion3_g157401;
				}
				TVEVisualData Data4_g157419 = Data3_g157401;
				float Out_Dummy4_g157419 = 0;
				float3 Out_Albedo4_g157419 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157419 = float2( 0,0 );
				float3 Out_NormalWS4_g157419 = float3( 0,0,0 );
				float4 Out_Shader4_g157419 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157419 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157419 = 0;
				float Out_Grayscale4_g157419 = 0;
				float Out_Luminosity4_g157419 = 0;
				float Out_AlphaClip4_g157419 = 0;
				float Out_AlphaFade4_g157419 = 0;
				float3 Out_Translucency4_g157419 = float3( 0,0,0 );
				float Out_Transmission4_g157419 = 0;
				float Out_Thickness4_g157419 = 0;
				float Out_Diffusion4_g157419 = 0;
				{
				Out_Dummy4_g157419 = Data4_g157419.Dummy;
				Out_Albedo4_g157419 = Data4_g157419.Albedo;
				Out_NormalTS4_g157419 = Data4_g157419.NormalTS;
				Out_NormalWS4_g157419 = Data4_g157419.NormalWS;
				Out_Shader4_g157419 = Data4_g157419.Shader;
				Out_Emissive4_g157419= Data4_g157419.Emissive;
				Out_MultiMask4_g157419 = Data4_g157419.MultiMask;
				Out_Grayscale4_g157419 = Data4_g157419.Grayscale;
				Out_Luminosity4_g157419= Data4_g157419.Luminosity;
				Out_AlphaClip4_g157419 = Data4_g157419.AlphaClip;
				Out_AlphaFade4_g157419 = Data4_g157419.AlphaFade;
				Out_Translucency4_g157419 = Data4_g157419.Translucency;
				Out_Transmission4_g157419 = Data4_g157419.Transmission;
				Out_Thickness4_g157419 = Data4_g157419.Thickness;
				Out_Diffusion4_g157419 = Data4_g157419.Diffusion;
				}
				half3 Visual_Albedo527_g157405 = Out_Albedo4_g157419;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157406) = _SecondAlbedoTex;
				SamplerState Sampler276_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157405 = _second_coord_value;
				float4 temp_output_37_0_g157406 = Local_LayerCoords790_g157405;
				half4 Coords276_g157406 = temp_output_37_0_g157406;
				half2 TexCoord276_g157406 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157406 = SampleMain( Texture276_g157406 , Sampler276_g157406 , Coords276_g157406 , TexCoord276_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157406) = _SecondAlbedoTex;
				SamplerState Sampler275_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157406 = temp_output_37_0_g157406;
				float2 appendResult289_g157406 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157406 = appendResult289_g157406;
				#else
				float2 staticSwitch288_g157406 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157406 = staticSwitch288_g157406;
				half4 localSampleExtra275_g157406 = SampleExtra( Texture275_g157406 , Sampler275_g157406 , Coords275_g157406 , TexCoord275_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157406) = _SecondAlbedoTex;
				SamplerState Sampler238_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157406 = temp_output_37_0_g157406;
				TVEModelData Data15_g157417 = Data16_g157339;
				float Out_Dummy15_g157417 = 0;
				float3 Out_PositionOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157417 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157417 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157417 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157417 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157417 = float3( 0,0,0 );
				float4 Out_VertexData15_g157417 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157417 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157417 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157417 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157417 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157417 = Data15_g157417.Dummy;
				Out_PositionOS15_g157417 = Data15_g157417.PositionOS;
				Out_PositionWS15_g157417 = Data15_g157417.PositionWS;
				Out_PositionWO15_g157417 = Data15_g157417.PositionWO;
				Out_PositionRawOS15_g157417 = Data15_g157417.PositionRawOS;
				Out_PositionAddOS15_g157417 = Data15_g157417.PositionAddOS;
				Out_PivotOS15_g157417 = Data15_g157417.PivotOS;
				Out_PivotWS15_g157417 = Data15_g157417.PivotWS;
				Out_PivotWO15_g157417 = Data15_g157417.PivotWO;
				Out_NormalOS15_g157417 = Data15_g157417.NormalOS;
				Out_NormalWS15_g157417 = Data15_g157417.NormalWS;
				Out_NormalRawOS15_g157417 = Data15_g157417.NormalRawOS;
				Out_NormalRawWS15_g157417 = Data15_g157417.NormalRawWS;
				Out_TangentOS15_g157417 = Data15_g157417.TangentOS;
				Out_ViewDirWS15_g157417 = Data15_g157417.ViewDirWS;
				Out_VertexData15_g157417 = Data15_g157417.VertexData;
				Out_MotionData15_g157417 = Data15_g157417.MotionData;
				Out_BoundsData15_g157417 = Data15_g157417.BoundsData;
				Out_RotationData15_g157417 = Data15_g157417.RotationData;
				Out_FragmentData15_g157417 = Data15_g157417.FragmentData;
				}
				half3 Model_PositionWO636_g157405 = Out_PositionWO15_g157417;
				float3 temp_output_279_0_g157406 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157406 = temp_output_279_0_g157406;
				half4 localSamplePlanar2D238_g157406 = SamplePlanar2D( Texture238_g157406 , Sampler238_g157406 , Coords238_g157406 , WorldPosition238_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157406) = _SecondAlbedoTex;
				SamplerState Sampler246_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition246_g157406 = temp_output_279_0_g157406;
				half3 Model_NormalWS869_g157405 = Out_NormalWS15_g157417;
				float3 temp_output_280_0_g157406 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157406 = temp_output_280_0_g157406;
				half4 localSamplePlanar3D246_g157406 = SamplePlanar3D( Texture246_g157406 , Sampler246_g157406 , Coords246_g157406 , WorldPosition246_g157406 , WorldNormal246_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157406) = _SecondAlbedoTex;
				SamplerState Sampler234_g157406 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157406 = temp_output_37_0_g157406;
				float3 WorldPosition234_g157406 = temp_output_279_0_g157406;
				float4 localSampleStochastic2D234_g157406 = SampleStochastic2D( Texture234_g157406 , Sampler234_g157406 , Coords234_g157406 , WorldPosition234_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157406) = _SecondAlbedoTex;
				SamplerState Sampler263_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition263_g157406 = temp_output_279_0_g157406;
				half3 WorldNormal263_g157406 = temp_output_280_0_g157406;
				half4 localSampleStochastic3D263_g157406 = SampleStochastic3D( Texture263_g157406 , Sampler263_g157406 , Coords263_g157406 , WorldPosition263_g157406 , WorldNormal263_g157406 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157405 = localSampleExtra275_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157405 = localSamplePlanar2D238_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157405 = localSamplePlanar3D246_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157405 = localSampleStochastic2D234_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157405 = localSampleStochastic3D263_g157406;
				#else
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#endif
				half4 Local_AlbedoTex777_g157405 = staticSwitch693_g157405;
				float3 lerpResult716_g157405 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157405).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g157405 = lerpResult716_g157405;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157408) = _SecondShaderTex;
				SamplerState Sampler276_g157408 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157408 = Local_LayerCoords790_g157405;
				half4 Coords276_g157408 = temp_output_37_0_g157408;
				half2 TexCoord276_g157408 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157408 = SampleMain( Texture276_g157408 , Sampler276_g157408 , Coords276_g157408 , TexCoord276_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157408) = _SecondShaderTex;
				SamplerState Sampler275_g157408 = sampler_Linear_Repeat;
				half4 Coords275_g157408 = temp_output_37_0_g157408;
				float2 appendResult289_g157408 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157408 = appendResult289_g157408;
				#else
				float2 staticSwitch288_g157408 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157408 = staticSwitch288_g157408;
				half4 localSampleExtra275_g157408 = SampleExtra( Texture275_g157408 , Sampler275_g157408 , Coords275_g157408 , TexCoord275_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157408) = _SecondShaderTex;
				SamplerState Sampler238_g157408 = sampler_Linear_Repeat;
				half4 Coords238_g157408 = temp_output_37_0_g157408;
				float3 temp_output_279_0_g157408 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157408 = temp_output_279_0_g157408;
				half4 localSamplePlanar2D238_g157408 = SamplePlanar2D( Texture238_g157408 , Sampler238_g157408 , Coords238_g157408 , WorldPosition238_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157408) = _SecondShaderTex;
				SamplerState Sampler246_g157408 = sampler_Linear_Repeat;
				half4 Coords246_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition246_g157408 = temp_output_279_0_g157408;
				float3 temp_output_280_0_g157408 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157408 = temp_output_280_0_g157408;
				half4 localSamplePlanar3D246_g157408 = SamplePlanar3D( Texture246_g157408 , Sampler246_g157408 , Coords246_g157408 , WorldPosition246_g157408 , WorldNormal246_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157408) = _SecondShaderTex;
				SamplerState Sampler234_g157408 = sampler_Linear_Repeat;
				float4 Coords234_g157408 = temp_output_37_0_g157408;
				float3 WorldPosition234_g157408 = temp_output_279_0_g157408;
				float4 localSampleStochastic2D234_g157408 = SampleStochastic2D( Texture234_g157408 , Sampler234_g157408 , Coords234_g157408 , WorldPosition234_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157408) = _SecondShaderTex;
				SamplerState Sampler263_g157408 = sampler_Linear_Repeat;
				half4 Coords263_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition263_g157408 = temp_output_279_0_g157408;
				half3 WorldNormal263_g157408 = temp_output_280_0_g157408;
				half4 localSampleStochastic3D263_g157408 = SampleStochastic3D( Texture263_g157408 , Sampler263_g157408 , Coords263_g157408 , WorldPosition263_g157408 , WorldNormal263_g157408 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157405 = localSampleExtra275_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157405 = localSamplePlanar2D238_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157405 = localSamplePlanar3D246_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157405 = localSampleStochastic2D234_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157405 = localSampleStochastic3D263_g157408;
				#else
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#endif
				half4 Local_ShaderTex775_g157405 = staticSwitch722_g157405;
				float lerpResult739_g157405 = lerp( 1.0 , (Local_ShaderTex775_g157405).y , _SecondOcclusionValue);
				float4 appendResult749_g157405 = (float4(( (Local_ShaderTex775_g157405).x * _SecondMetallicValue ) , lerpResult739_g157405 , (Local_ShaderTex775_g157405).z , ( (Local_ShaderTex775_g157405).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g157405 = appendResult749_g157405;
				float clampResult17_g157412 = clamp( (Local_Masks750_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157413 = _SecondMultiRemap.x;
				float temp_output_10_0_g157413 = ( _SecondMultiRemap.y - temp_output_7_0_g157413 );
				float temp_output_765_0_g157405 = saturate( ( ( clampResult17_g157412 - temp_output_7_0_g157413 ) / ( temp_output_10_0_g157413 + 0.0001 ) ) );
				half Local_MultiMask767_g157405 = temp_output_765_0_g157405;
				float lerpResult705_g157405 = lerp( 1.0 , Local_MultiMask767_g157405 , _SecondColorMode);
				float4 lerpResult706_g157405 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g157405);
				half3 Local_ColorRGB774_g157405 = (lerpResult706_g157405).rgb;
				half3 Local_Albedo768_g157405 = ( Local_AlbedoRGB771_g157405 * Local_ColorRGB774_g157405 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157432 = 2.0;
				#else
				float staticSwitch1_g157432 = 4.594794;
				#endif
				float3 lerpResult985_g157405 = lerp( Local_Albedo768_g157405 , ( Visual_Albedo527_g157405 * Local_Albedo768_g157405 * staticSwitch1_g157432 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157409) = _SecondMaskTex;
				SamplerState Sampler276_g157409 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g157405 = _second_mask_coord_value;
				float4 temp_output_37_0_g157409 = Local_BlendCoords813_g157405;
				half4 Coords276_g157409 = temp_output_37_0_g157409;
				half2 TexCoord276_g157409 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157409 = SampleMain( Texture276_g157409 , Sampler276_g157409 , Coords276_g157409 , TexCoord276_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157409) = _SecondMaskTex;
				SamplerState Sampler275_g157409 = sampler_Linear_Repeat;
				half4 Coords275_g157409 = temp_output_37_0_g157409;
				float2 appendResult289_g157409 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157409 = appendResult289_g157409;
				#else
				float2 staticSwitch288_g157409 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157409 = staticSwitch288_g157409;
				half4 localSampleExtra275_g157409 = SampleExtra( Texture275_g157409 , Sampler275_g157409 , Coords275_g157409 , TexCoord275_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157409) = _SecondMaskTex;
				SamplerState Sampler238_g157409 = sampler_Linear_Repeat;
				half4 Coords238_g157409 = temp_output_37_0_g157409;
				float3 temp_output_279_0_g157409 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157409 = temp_output_279_0_g157409;
				half4 localSamplePlanar2D238_g157409 = SamplePlanar2D( Texture238_g157409 , Sampler238_g157409 , Coords238_g157409 , WorldPosition238_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157409) = _SecondMaskTex;
				SamplerState Sampler246_g157409 = sampler_Linear_Repeat;
				half4 Coords246_g157409 = temp_output_37_0_g157409;
				half3 WorldPosition246_g157409 = temp_output_279_0_g157409;
				float3 temp_output_280_0_g157409 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157409 = temp_output_280_0_g157409;
				half4 localSamplePlanar3D246_g157409 = SamplePlanar3D( Texture246_g157409 , Sampler246_g157409 , Coords246_g157409 , WorldPosition246_g157409 , WorldNormal246_g157409 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157405 = localSampleExtra275_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157405 = localSamplePlanar2D238_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157405 = localSamplePlanar3D246_g157409;
				#else
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#endif
				half4 Local_MaskTex861_g157405 = staticSwitch817_g157405;
				float clampResult17_g157423 = clamp( (Local_MaskTex861_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157422 = _SecondMaskRemap.x;
				float temp_output_10_0_g157422 = ( _SecondMaskRemap.y - temp_output_7_0_g157422 );
				float lerpResult1015_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157423 - temp_output_7_0_g157422 ) / ( temp_output_10_0_g157422 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g157405 = lerpResult1015_g157405;
				#else
				float staticSwitch893_g157405 = 1.0;
				#endif
				half Blend_TexMask429_g157405 = staticSwitch893_g157405;
				half3 Visual_NormalWS951_g157405 = Out_NormalWS4_g157419;
				float clampResult17_g157424 = clamp( saturate( (Visual_NormalWS951_g157405).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157425 = _SecondProjRemap.x;
				float temp_output_10_0_g157425 = ( _SecondProjRemap.y - temp_output_7_0_g157425 );
				float lerpResult996_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157424 - temp_output_7_0_g157425 ) / ( temp_output_10_0_g157425 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g157405 = lerpResult996_g157405;
				#else
				float staticSwitch878_g157405 = 1.0;
				#endif
				half Blend_ProjMask434_g157405 = staticSwitch878_g157405;
				half4 Model_VertexMasks964_g157405 = Out_VertexData15_g157417;
				float4 break965_g157405 = Model_VertexMasks964_g157405;
				float4 break33_g157426 = _second_vert_mode;
				float temp_output_30_0_g157426 = ( break965_g157405.x * break33_g157426.x );
				float temp_output_29_0_g157426 = ( break965_g157405.y * break33_g157426.y );
				float temp_output_31_0_g157426 = ( break965_g157405.z * break33_g157426.z );
				float temp_output_28_0_g157426 = ( temp_output_30_0_g157426 + temp_output_29_0_g157426 + temp_output_31_0_g157426 + ( break965_g157405.w * break33_g157426.w ) );
				float clampResult17_g157420 = clamp( temp_output_28_0_g157426 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157421 = _SecondMeshRemap.x;
				float temp_output_10_0_g157421 = ( _SecondMeshRemap.y - temp_output_7_0_g157421 );
				float lerpResult1017_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157420 - temp_output_7_0_g157421 ) / ( temp_output_10_0_g157421 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g157434 = lerpResult1017_g157405;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157434 = ( temp_output_6_0_g157434 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157434 = temp_output_6_0_g157434;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g157405 = staticSwitch14_g157434;
				#else
				float staticSwitch917_g157405 = 1.0;
				#endif
				half Blend_VertMask918_g157405 = staticSwitch917_g157405;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				{
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				}
				TVEGlobalData Data15_g157418 = Data204_g157340;
				float Out_Dummy15_g157418 = 0;
				float4 Out_CoatParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157418 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157418 = Data15_g157418.Dummy;
				Out_CoatParams15_g157418 = Data15_g157418.CoatParams;
				Out_PaintParams15_g157418 = Data15_g157418.PaintParams;
				Out_GlowParams15_g157418 = Data15_g157418.GlowParams;
				Out_AtmoParams15_g157418= Data15_g157418.AtmoParams;
				Out_FormParams15_g157418 = Data15_g157418.FormParams;
				Out_LandParams15_g157418 = Data15_g157418.LandParams;
				Out_WindParams15_g157418 = Data15_g157418.WindParams;
				Out_PushParams15_g157418 = Data15_g157418.PushParams;
				}
				half4 Global_CoatParams975_g157405 = Out_CoatParams15_g157418;
				float lerpResult1013_g157405 = lerp( 1.0 , (Global_CoatParams975_g157405).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g157405 = lerpResult1013_g157405;
				#else
				float staticSwitch971_g157405 = 1.0;
				#endif
				half Blend_GlobalMask972_g157405 = staticSwitch971_g157405;
				float temp_output_432_0_g157405 = ( _SecondIntensityValue * Blend_TexMask429_g157405 * Blend_ProjMask434_g157405 * Blend_VertMask918_g157405 * Blend_GlobalMask972_g157405 );
				float clampResult17_g157428 = clamp( temp_output_432_0_g157405 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157427 = _SecondBlendRemap.x;
				float temp_output_10_0_g157427 = ( _SecondBlendRemap.y - temp_output_7_0_g157427 );
				half Blend_Mask412_g157405 = ( saturate( ( ( clampResult17_g157428 - temp_output_7_0_g157427 ) / ( temp_output_10_0_g157427 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g157405 = lerp( Visual_Albedo527_g157405 , lerpResult985_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g157405 = lerpResult403_g157405;
				#else
				float3 staticSwitch415_g157405 = Visual_Albedo527_g157405;
				#endif
				half3 Final_Albedo601_g157405 = staticSwitch415_g157405;
				float3 In_Albedo3_g157416 = Final_Albedo601_g157405;
				half2 Visual_NormalTS529_g157405 = Out_NormalTS4_g157419;
				float2 lerpResult40_g157430 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157405 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157407) = _SecondNormalTex;
				SamplerState Sampler276_g157407 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157407 = Local_LayerCoords790_g157405;
				half4 Coords276_g157407 = temp_output_37_0_g157407;
				half2 TexCoord276_g157407 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157407 = SampleMain( Texture276_g157407 , Sampler276_g157407 , Coords276_g157407 , TexCoord276_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157407) = _SecondNormalTex;
				SamplerState Sampler275_g157407 = sampler_Linear_Repeat;
				half4 Coords275_g157407 = temp_output_37_0_g157407;
				float2 appendResult289_g157407 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157407 = appendResult289_g157407;
				#else
				float2 staticSwitch288_g157407 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157407 = staticSwitch288_g157407;
				half4 localSampleExtra275_g157407 = SampleExtra( Texture275_g157407 , Sampler275_g157407 , Coords275_g157407 , TexCoord275_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157407) = _SecondNormalTex;
				SamplerState Sampler238_g157407 = sampler_Linear_Repeat;
				half4 Coords238_g157407 = temp_output_37_0_g157407;
				float3 temp_output_279_0_g157407 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157407 = temp_output_279_0_g157407;
				half4 localSamplePlanar2D238_g157407 = SamplePlanar2D( Texture238_g157407 , Sampler238_g157407 , Coords238_g157407 , WorldPosition238_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157407) = _SecondNormalTex;
				SamplerState Sampler246_g157407 = sampler_Linear_Repeat;
				half4 Coords246_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition246_g157407 = temp_output_279_0_g157407;
				float3 temp_output_280_0_g157407 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157407 = temp_output_280_0_g157407;
				half4 localSamplePlanar3D246_g157407 = SamplePlanar3D( Texture246_g157407 , Sampler246_g157407 , Coords246_g157407 , WorldPosition246_g157407 , WorldNormal246_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157407) = _SecondNormalTex;
				SamplerState Sampler234_g157407 = sampler_Linear_Repeat;
				float4 Coords234_g157407 = temp_output_37_0_g157407;
				float3 WorldPosition234_g157407 = temp_output_279_0_g157407;
				float4 localSampleStochastic2D234_g157407 = SampleStochastic2D( Texture234_g157407 , Sampler234_g157407 , Coords234_g157407 , WorldPosition234_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157407) = _SecondNormalTex;
				SamplerState Sampler263_g157407 = sampler_Linear_Repeat;
				half4 Coords263_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition263_g157407 = temp_output_279_0_g157407;
				half3 WorldNormal263_g157407 = temp_output_280_0_g157407;
				half4 localSampleStochastic3D263_g157407 = SampleStochastic3D( Texture263_g157407 , Sampler263_g157407 , Coords263_g157407 , WorldPosition263_g157407 , WorldNormal263_g157407 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157405 = localSampleExtra275_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157405 = localSamplePlanar2D238_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157405 = localSamplePlanar3D246_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157405 = localSampleStochastic2D234_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157405 = localSampleStochastic3D263_g157407;
				#else
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#endif
				half4 Local_NormalTex776_g157405 = staticSwitch698_g157405;
				half4 Normal_Packed45_g157410 = Local_NormalTex776_g157405;
				float2 appendResult58_g157410 = (float2(( (Normal_Packed45_g157410).x * (Normal_Packed45_g157410).w ) , (Normal_Packed45_g157410).y));
				half2 Normal_Default50_g157410 = appendResult58_g157410;
				half2 Normal_ASTC41_g157410 = (Normal_Packed45_g157410).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157410 = Normal_ASTC41_g157410;
				#else
				float2 staticSwitch38_g157410 = Normal_Default50_g157410;
				#endif
				half2 Normal_NO_DTX544_g157410 = (Normal_Packed45_g157410).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157410 = Normal_NO_DTX544_g157410;
				#else
				float2 staticSwitch37_g157410 = staticSwitch38_g157410;
				#endif
				float2 temp_output_724_0_g157405 = ( (staticSwitch37_g157410*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g157411 = temp_output_724_0_g157405;
				float2 break71_g157411 = Normal_Planar45_g157411;
				float3 appendResult72_g157411 = (float3(break71_g157411.x , 0.0 , break71_g157411.y));
				float2 temp_output_858_0_g157405 = (mul( ase_worldToTangent, appendResult72_g157411 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#endif
				half2 Local_NormalTS729_g157405 = staticSwitch727_g157405;
				float2 temp_output_36_0_g157430 = ( lerpResult40_g157430 + Local_NormalTS729_g157405 );
				float2 lerpResult405_g157405 = lerp( Visual_NormalTS529_g157405 , temp_output_36_0_g157430 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g157405 = lerpResult405_g157405;
				#else
				float2 staticSwitch418_g157405 = Visual_NormalTS529_g157405;
				#endif
				half2 Final_NormalTS612_g157405 = staticSwitch418_g157405;
				float2 In_NormalTS3_g157416 = Final_NormalTS612_g157405;
				float3 appendResult68_g157431 = (float3(Final_NormalTS612_g157405 , 1.0));
				float3 tanNormal74_g157431 = appendResult68_g157431;
				float3 worldNormal74_g157431 = normalize( float3(dot(tanToWorld0,tanNormal74_g157431), dot(tanToWorld1,tanNormal74_g157431), dot(tanToWorld2,tanNormal74_g157431)) );
				half3 Final_NormalWS950_g157405 = worldNormal74_g157431;
				float3 In_NormalWS3_g157416 = Final_NormalWS950_g157405;
				half4 Visual_Shader531_g157405 = Out_Shader4_g157419;
				float4 lerpResult994_g157405 = lerp( Local_Masks750_g157405 , ( Visual_Shader531_g157405 * Local_Masks750_g157405 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g157405 = lerp( Visual_Shader531_g157405 , lerpResult994_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g157405 = lerpResult440_g157405;
				#else
				float4 staticSwitch451_g157405 = Visual_Shader531_g157405;
				#endif
				half4 Final_Masks613_g157405 = staticSwitch451_g157405;
				float4 In_Shader3_g157416 = Final_Masks613_g157405;
				float4 In_Emissive3_g157416 = Out_Emissive4_g157419;
				float3 temp_output_3_0_g157433 = Final_Albedo601_g157405;
				float dotResult20_g157433 = dot( temp_output_3_0_g157433 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157405 = dotResult20_g157433;
				float In_Grayscale3_g157416 = Final_Grayscale615_g157405;
				float clampResult651_g157405 = clamp( saturate( ( Final_Grayscale615_g157405 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157405 = clampResult651_g157405;
				float In_Luminosity3_g157416 = Final_Luminosity652_g157405;
				half Visual_MultiMask547_g157405 = Out_MultiMask4_g157419;
				float lerpResult477_g157405 = lerp( Visual_MultiMask547_g157405 , Local_MultiMask767_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch482_g157405 = lerpResult477_g157405;
				#else
				float staticSwitch482_g157405 = Visual_MultiMask547_g157405;
				#endif
				half Final_MultiMask572_g157405 = staticSwitch482_g157405;
				float In_MultiMask3_g157416 = Final_MultiMask572_g157405;
				half Visual_AlphaClip559_g157405 = Out_AlphaClip4_g157419;
				float temp_output_718_0_g157405 = (Local_AlbedoTex777_g157405).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g157405 = ( temp_output_718_0_g157405 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g157405 = temp_output_718_0_g157405;
				#endif
				half Local_AlphaClip772_g157405 = staticSwitch932_g157405;
				float lerpResult448_g157405 = lerp( Visual_AlphaClip559_g157405 , Local_AlphaClip772_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch564_g157405 = lerpResult448_g157405;
				#else
				float staticSwitch564_g157405 = Visual_AlphaClip559_g157405;
				#endif
				half Final_AlphaClip602_g157405 = staticSwitch564_g157405;
				float In_AlphaClip3_g157416 = Final_AlphaClip602_g157405;
				half Visual_AlphaFade588_g157405 = Out_AlphaFade4_g157419;
				half Local_AlphaFade773_g157405 = (lerpResult706_g157405).a;
				float lerpResult604_g157405 = lerp( Visual_AlphaFade588_g157405 , Local_AlphaFade773_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch608_g157405 = lerpResult604_g157405;
				#else
				float staticSwitch608_g157405 = Visual_AlphaFade588_g157405;
				#endif
				half Final_AlphaFade611_g157405 = staticSwitch608_g157405;
				float In_AlphaFade3_g157416 = Final_AlphaFade611_g157405;
				float3 In_Translucency3_g157416 = Out_Translucency4_g157419;
				float In_Transmission3_g157416 = Out_Transmission4_g157419;
				float In_Thickness3_g157416 = Out_Thickness4_g157419;
				float In_Diffusion3_g157416 = Out_Diffusion4_g157419;
				{
				Data3_g157416.Dummy = In_Dummy3_g157416;
				Data3_g157416.Albedo = In_Albedo3_g157416;
				Data3_g157416.NormalTS = In_NormalTS3_g157416;
				Data3_g157416.NormalWS = In_NormalWS3_g157416;
				Data3_g157416.Shader = In_Shader3_g157416;
				Data3_g157416.Emissive= In_Emissive3_g157416;
				Data3_g157416.MultiMask = In_MultiMask3_g157416;
				Data3_g157416.Grayscale = In_Grayscale3_g157416;
				Data3_g157416.Luminosity = In_Luminosity3_g157416;
				Data3_g157416.AlphaClip = In_AlphaClip3_g157416;
				Data3_g157416.AlphaFade = In_AlphaFade3_g157416;
				Data3_g157416.Translucency = In_Translucency3_g157416;
				Data3_g157416.Transmission = In_Transmission3_g157416;
				Data3_g157416.Thickness = In_Thickness3_g157416;
				Data3_g157416.Diffusion = In_Diffusion3_g157416;
				}
				TVEVisualData Data4_g157453 = Data3_g157416;
				float Out_Dummy4_g157453 = 0;
				float3 Out_Albedo4_g157453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157453 = float2( 0,0 );
				float3 Out_NormalWS4_g157453 = float3( 0,0,0 );
				float4 Out_Shader4_g157453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157453 = 0;
				float Out_Grayscale4_g157453 = 0;
				float Out_Luminosity4_g157453 = 0;
				float Out_AlphaClip4_g157453 = 0;
				float Out_AlphaFade4_g157453 = 0;
				float3 Out_Translucency4_g157453 = float3( 0,0,0 );
				float Out_Transmission4_g157453 = 0;
				float Out_Thickness4_g157453 = 0;
				float Out_Diffusion4_g157453 = 0;
				{
				Out_Dummy4_g157453 = Data4_g157453.Dummy;
				Out_Albedo4_g157453 = Data4_g157453.Albedo;
				Out_NormalTS4_g157453 = Data4_g157453.NormalTS;
				Out_NormalWS4_g157453 = Data4_g157453.NormalWS;
				Out_Shader4_g157453 = Data4_g157453.Shader;
				Out_Emissive4_g157453= Data4_g157453.Emissive;
				Out_MultiMask4_g157453 = Data4_g157453.MultiMask;
				Out_Grayscale4_g157453 = Data4_g157453.Grayscale;
				Out_Luminosity4_g157453= Data4_g157453.Luminosity;
				Out_AlphaClip4_g157453 = Data4_g157453.AlphaClip;
				Out_AlphaFade4_g157453 = Data4_g157453.AlphaFade;
				Out_Translucency4_g157453 = Data4_g157453.Translucency;
				Out_Transmission4_g157453 = Data4_g157453.Transmission;
				Out_Thickness4_g157453 = Data4_g157453.Thickness;
				Out_Diffusion4_g157453 = Data4_g157453.Diffusion;
				}
				half3 Visual_Albedo527_g157436 = Out_Albedo4_g157453;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler276_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157436 = _third_coord_value;
				float4 temp_output_37_0_g157437 = Local_LayerCoords790_g157436;
				half4 Coords276_g157437 = temp_output_37_0_g157437;
				half2 TexCoord276_g157437 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157437 = SampleMain( Texture276_g157437 , Sampler276_g157437 , Coords276_g157437 , TexCoord276_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler275_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157437 = temp_output_37_0_g157437;
				float2 appendResult289_g157437 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157437 = appendResult289_g157437;
				#else
				float2 staticSwitch288_g157437 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157437 = staticSwitch288_g157437;
				half4 localSampleExtra275_g157437 = SampleExtra( Texture275_g157437 , Sampler275_g157437 , Coords275_g157437 , TexCoord275_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler238_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157437 = temp_output_37_0_g157437;
				TVEModelData Data15_g157452 = Data16_g157339;
				float Out_Dummy15_g157452 = 0;
				float3 Out_PositionOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157452 = float3( 0,0,0 );
				float4 Out_VertexData15_g157452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157452 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157452 = Data15_g157452.Dummy;
				Out_PositionOS15_g157452 = Data15_g157452.PositionOS;
				Out_PositionWS15_g157452 = Data15_g157452.PositionWS;
				Out_PositionWO15_g157452 = Data15_g157452.PositionWO;
				Out_PositionRawOS15_g157452 = Data15_g157452.PositionRawOS;
				Out_PositionAddOS15_g157452 = Data15_g157452.PositionAddOS;
				Out_PivotOS15_g157452 = Data15_g157452.PivotOS;
				Out_PivotWS15_g157452 = Data15_g157452.PivotWS;
				Out_PivotWO15_g157452 = Data15_g157452.PivotWO;
				Out_NormalOS15_g157452 = Data15_g157452.NormalOS;
				Out_NormalWS15_g157452 = Data15_g157452.NormalWS;
				Out_NormalRawOS15_g157452 = Data15_g157452.NormalRawOS;
				Out_NormalRawWS15_g157452 = Data15_g157452.NormalRawWS;
				Out_TangentOS15_g157452 = Data15_g157452.TangentOS;
				Out_ViewDirWS15_g157452 = Data15_g157452.ViewDirWS;
				Out_VertexData15_g157452 = Data15_g157452.VertexData;
				Out_MotionData15_g157452 = Data15_g157452.MotionData;
				Out_BoundsData15_g157452 = Data15_g157452.BoundsData;
				Out_RotationData15_g157452 = Data15_g157452.RotationData;
				Out_FragmentData15_g157452 = Data15_g157452.FragmentData;
				}
				half3 Model_PositionWO636_g157436 = Out_PositionWO15_g157452;
				float3 temp_output_279_0_g157437 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157437 = temp_output_279_0_g157437;
				half4 localSamplePlanar2D238_g157437 = SamplePlanar2D( Texture238_g157437 , Sampler238_g157437 , Coords238_g157437 , WorldPosition238_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler246_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition246_g157437 = temp_output_279_0_g157437;
				half3 Model_NormalWS869_g157436 = Out_NormalWS15_g157452;
				float3 temp_output_280_0_g157437 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157437 = temp_output_280_0_g157437;
				half4 localSamplePlanar3D246_g157437 = SamplePlanar3D( Texture246_g157437 , Sampler246_g157437 , Coords246_g157437 , WorldPosition246_g157437 , WorldNormal246_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler234_g157437 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157437 = temp_output_37_0_g157437;
				float3 WorldPosition234_g157437 = temp_output_279_0_g157437;
				float4 localSampleStochastic2D234_g157437 = SampleStochastic2D( Texture234_g157437 , Sampler234_g157437 , Coords234_g157437 , WorldPosition234_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler263_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition263_g157437 = temp_output_279_0_g157437;
				half3 WorldNormal263_g157437 = temp_output_280_0_g157437;
				half4 localSampleStochastic3D263_g157437 = SampleStochastic3D( Texture263_g157437 , Sampler263_g157437 , Coords263_g157437 , WorldPosition263_g157437 , WorldNormal263_g157437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157436 = localSampleExtra275_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157436 = localSamplePlanar2D238_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157436 = localSamplePlanar3D246_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157436 = localSampleStochastic2D234_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157436 = localSampleStochastic3D263_g157437;
				#else
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#endif
				half4 Local_AlbedoTex777_g157436 = staticSwitch693_g157436;
				float3 lerpResult716_g157436 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157436).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g157436 = lerpResult716_g157436;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157439) = _ThirdShaderTex;
				SamplerState Sampler276_g157439 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157439 = Local_LayerCoords790_g157436;
				half4 Coords276_g157439 = temp_output_37_0_g157439;
				half2 TexCoord276_g157439 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157439 = SampleMain( Texture276_g157439 , Sampler276_g157439 , Coords276_g157439 , TexCoord276_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157439) = _ThirdShaderTex;
				SamplerState Sampler275_g157439 = sampler_Linear_Repeat;
				half4 Coords275_g157439 = temp_output_37_0_g157439;
				float2 appendResult289_g157439 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157439 = appendResult289_g157439;
				#else
				float2 staticSwitch288_g157439 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157439 = staticSwitch288_g157439;
				half4 localSampleExtra275_g157439 = SampleExtra( Texture275_g157439 , Sampler275_g157439 , Coords275_g157439 , TexCoord275_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157439) = _ThirdShaderTex;
				SamplerState Sampler238_g157439 = sampler_Linear_Repeat;
				half4 Coords238_g157439 = temp_output_37_0_g157439;
				float3 temp_output_279_0_g157439 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157439 = temp_output_279_0_g157439;
				half4 localSamplePlanar2D238_g157439 = SamplePlanar2D( Texture238_g157439 , Sampler238_g157439 , Coords238_g157439 , WorldPosition238_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157439) = _ThirdShaderTex;
				SamplerState Sampler246_g157439 = sampler_Linear_Repeat;
				half4 Coords246_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition246_g157439 = temp_output_279_0_g157439;
				float3 temp_output_280_0_g157439 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157439 = temp_output_280_0_g157439;
				half4 localSamplePlanar3D246_g157439 = SamplePlanar3D( Texture246_g157439 , Sampler246_g157439 , Coords246_g157439 , WorldPosition246_g157439 , WorldNormal246_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157439) = _ThirdShaderTex;
				SamplerState Sampler234_g157439 = sampler_Linear_Repeat;
				float4 Coords234_g157439 = temp_output_37_0_g157439;
				float3 WorldPosition234_g157439 = temp_output_279_0_g157439;
				float4 localSampleStochastic2D234_g157439 = SampleStochastic2D( Texture234_g157439 , Sampler234_g157439 , Coords234_g157439 , WorldPosition234_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157439) = _ThirdShaderTex;
				SamplerState Sampler263_g157439 = sampler_Linear_Repeat;
				half4 Coords263_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition263_g157439 = temp_output_279_0_g157439;
				half3 WorldNormal263_g157439 = temp_output_280_0_g157439;
				half4 localSampleStochastic3D263_g157439 = SampleStochastic3D( Texture263_g157439 , Sampler263_g157439 , Coords263_g157439 , WorldPosition263_g157439 , WorldNormal263_g157439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157436 = localSampleExtra275_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157436 = localSamplePlanar2D238_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157436 = localSamplePlanar3D246_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157436 = localSampleStochastic2D234_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157436 = localSampleStochastic3D263_g157439;
				#else
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#endif
				half4 Local_ShaderTex775_g157436 = staticSwitch722_g157436;
				float lerpResult739_g157436 = lerp( 1.0 , (Local_ShaderTex775_g157436).y , _ThirdOcclusionValue);
				float4 appendResult749_g157436 = (float4(( (Local_ShaderTex775_g157436).x * _ThirdMetallicValue ) , lerpResult739_g157436 , (Local_ShaderTex775_g157436).z , ( (Local_ShaderTex775_g157436).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g157436 = appendResult749_g157436;
				float clampResult17_g157442 = clamp( (Local_Masks750_g157436).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157443 = _ThirdMultiRemap.x;
				float temp_output_10_0_g157443 = ( _ThirdMultiRemap.y - temp_output_7_0_g157443 );
				float temp_output_765_0_g157436 = saturate( ( ( clampResult17_g157442 - temp_output_7_0_g157443 ) / ( temp_output_10_0_g157443 + 0.0001 ) ) );
				half Local_MultiMask767_g157436 = temp_output_765_0_g157436;
				float lerpResult705_g157436 = lerp( 1.0 , Local_MultiMask767_g157436 , _ThirdColorMode);
				float4 lerpResult706_g157436 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g157436);
				half3 Local_ColorRGB774_g157436 = (lerpResult706_g157436).rgb;
				half3 Local_Albedo768_g157436 = ( Local_AlbedoRGB771_g157436 * Local_ColorRGB774_g157436 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157461 = 2.0;
				#else
				float staticSwitch1_g157461 = 4.594794;
				#endif
				float3 lerpResult985_g157436 = lerp( Local_Albedo768_g157436 , ( Visual_Albedo527_g157436 * Local_Albedo768_g157436 * staticSwitch1_g157461 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157464) = _ThirdMaskTex;
				SamplerState Sampler276_g157464 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g157436 = _third_mask_coord_value;
				float4 temp_output_37_0_g157464 = Local_MaskCoords813_g157436;
				half4 Coords276_g157464 = temp_output_37_0_g157464;
				half2 TexCoord276_g157464 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157464 = SampleMain( Texture276_g157464 , Sampler276_g157464 , Coords276_g157464 , TexCoord276_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157464) = _ThirdMaskTex;
				SamplerState Sampler275_g157464 = sampler_Linear_Repeat;
				half4 Coords275_g157464 = temp_output_37_0_g157464;
				float2 appendResult289_g157464 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157464 = appendResult289_g157464;
				#else
				float2 staticSwitch288_g157464 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157464 = staticSwitch288_g157464;
				half4 localSampleExtra275_g157464 = SampleExtra( Texture275_g157464 , Sampler275_g157464 , Coords275_g157464 , TexCoord275_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157464) = _ThirdMaskTex;
				SamplerState Sampler238_g157464 = sampler_Linear_Repeat;
				half4 Coords238_g157464 = temp_output_37_0_g157464;
				float3 temp_output_279_0_g157464 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157464 = temp_output_279_0_g157464;
				half4 localSamplePlanar2D238_g157464 = SamplePlanar2D( Texture238_g157464 , Sampler238_g157464 , Coords238_g157464 , WorldPosition238_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157464) = _ThirdMaskTex;
				SamplerState Sampler246_g157464 = sampler_Linear_Repeat;
				half4 Coords246_g157464 = temp_output_37_0_g157464;
				half3 WorldPosition246_g157464 = temp_output_279_0_g157464;
				float3 temp_output_280_0_g157464 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157464 = temp_output_280_0_g157464;
				half4 localSamplePlanar3D246_g157464 = SamplePlanar3D( Texture246_g157464 , Sampler246_g157464 , Coords246_g157464 , WorldPosition246_g157464 , WorldNormal246_g157464 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157436 = localSampleExtra275_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157436 = localSamplePlanar2D238_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157436 = localSamplePlanar3D246_g157464;
				#else
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#endif
				half4 Local_MaskTex861_g157436 = staticSwitch817_g157436;
				float clampResult17_g157447 = clamp( (Local_MaskTex861_g157436).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g157448 = _ThirdMaskRemap.x;
				float temp_output_10_0_g157448 = ( _ThirdMaskRemap.y - temp_output_7_0_g157448 );
				float lerpResult1028_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157447 - temp_output_7_0_g157448 ) / ( temp_output_10_0_g157448 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g157436 = lerpResult1028_g157436;
				#else
				float staticSwitch892_g157436 = 1.0;
				#endif
				half Detail_TexMask429_g157436 = staticSwitch892_g157436;
				half4 Model_VertexMasks960_g157436 = Out_VertexData15_g157452;
				float4 break961_g157436 = Model_VertexMasks960_g157436;
				float4 break33_g157451 = _third_vert_mode;
				float temp_output_30_0_g157451 = ( break961_g157436.x * break33_g157451.x );
				float temp_output_29_0_g157451 = ( break961_g157436.y * break33_g157451.y );
				float temp_output_31_0_g157451 = ( break961_g157436.z * break33_g157451.z );
				float temp_output_28_0_g157451 = ( temp_output_30_0_g157451 + temp_output_29_0_g157451 + temp_output_31_0_g157451 + ( break961_g157436.w * break33_g157451.w ) );
				float clampResult17_g157445 = clamp( temp_output_28_0_g157451 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157446 = _ThirdMeshRemap.x;
				float temp_output_10_0_g157446 = ( _ThirdMeshRemap.y - temp_output_7_0_g157446 );
				float lerpResult1026_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157445 - temp_output_7_0_g157446 ) / ( temp_output_10_0_g157446 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g157463 = lerpResult1026_g157436;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157463 = ( temp_output_6_0_g157463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157463 = temp_output_6_0_g157463;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g157436 = staticSwitch14_g157463;
				#else
				float staticSwitch917_g157436 = 1.0;
				#endif
				half Blend_VertMask913_g157436 = staticSwitch917_g157436;
				half3 Visual_NormalWS953_g157436 = Out_NormalWS4_g157453;
				float clampResult17_g157449 = clamp( saturate( (Visual_NormalWS953_g157436).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157450 = _ThirdProjRemap.x;
				float temp_output_10_0_g157450 = ( _ThirdProjRemap.y - temp_output_7_0_g157450 );
				float lerpResult1004_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157449 - temp_output_7_0_g157450 ) / ( temp_output_10_0_g157450 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g157436 = lerpResult1004_g157436;
				#else
				float staticSwitch908_g157436 = 1.0;
				#endif
				half Blend_ProjMask912_g157436 = staticSwitch908_g157436;
				TVEGlobalData Data15_g157455 = Data204_g157340;
				float Out_Dummy15_g157455 = 0;
				float4 Out_CoatParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157455 = Data15_g157455.Dummy;
				Out_CoatParams15_g157455 = Data15_g157455.CoatParams;
				Out_PaintParams15_g157455 = Data15_g157455.PaintParams;
				Out_GlowParams15_g157455 = Data15_g157455.GlowParams;
				Out_AtmoParams15_g157455= Data15_g157455.AtmoParams;
				Out_FormParams15_g157455 = Data15_g157455.FormParams;
				Out_LandParams15_g157455 = Data15_g157455.LandParams;
				Out_WindParams15_g157455 = Data15_g157455.WindParams;
				Out_PushParams15_g157455 = Data15_g157455.PushParams;
				}
				half4 Global_CoatParams972_g157436 = Out_CoatParams15_g157455;
				float lerpResult1023_g157436 = lerp( 1.0 , (Global_CoatParams972_g157436).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g157436 = lerpResult1023_g157436;
				#else
				float staticSwitch965_g157436 = 1.0;
				#endif
				half Blend_GlobalMask968_g157436 = staticSwitch965_g157436;
				float temp_output_432_0_g157436 = ( _ThirdIntensityValue * Detail_TexMask429_g157436 * Blend_VertMask913_g157436 * Blend_ProjMask912_g157436 * Blend_GlobalMask968_g157436 );
				float clampResult17_g157457 = clamp( temp_output_432_0_g157436 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157456 = _ThirdBlendRemap.x;
				float temp_output_10_0_g157456 = ( _ThirdBlendRemap.y - temp_output_7_0_g157456 );
				half Detail_Mask412_g157436 = ( saturate( ( ( clampResult17_g157457 - temp_output_7_0_g157456 ) / ( temp_output_10_0_g157456 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g157436 = lerp( Visual_Albedo527_g157436 , lerpResult985_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g157436 = lerpResult989_g157436;
				#else
				float3 staticSwitch415_g157436 = Visual_Albedo527_g157436;
				#endif
				half3 Final_Albedo601_g157436 = staticSwitch415_g157436;
				float3 In_Albedo3_g157454 = Final_Albedo601_g157436;
				half2 Visual_NormalTS529_g157436 = Out_NormalTS4_g157453;
				float2 lerpResult40_g157459 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157436 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157438) = _ThirdNormalTex;
				SamplerState Sampler276_g157438 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157438 = Local_LayerCoords790_g157436;
				half4 Coords276_g157438 = temp_output_37_0_g157438;
				half2 TexCoord276_g157438 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157438 = SampleMain( Texture276_g157438 , Sampler276_g157438 , Coords276_g157438 , TexCoord276_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157438) = _ThirdNormalTex;
				SamplerState Sampler275_g157438 = sampler_Linear_Repeat;
				half4 Coords275_g157438 = temp_output_37_0_g157438;
				float2 appendResult289_g157438 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157438 = appendResult289_g157438;
				#else
				float2 staticSwitch288_g157438 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157438 = staticSwitch288_g157438;
				half4 localSampleExtra275_g157438 = SampleExtra( Texture275_g157438 , Sampler275_g157438 , Coords275_g157438 , TexCoord275_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157438) = _ThirdNormalTex;
				SamplerState Sampler238_g157438 = sampler_Linear_Repeat;
				half4 Coords238_g157438 = temp_output_37_0_g157438;
				float3 temp_output_279_0_g157438 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157438 = temp_output_279_0_g157438;
				half4 localSamplePlanar2D238_g157438 = SamplePlanar2D( Texture238_g157438 , Sampler238_g157438 , Coords238_g157438 , WorldPosition238_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157438) = _ThirdNormalTex;
				SamplerState Sampler246_g157438 = sampler_Linear_Repeat;
				half4 Coords246_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition246_g157438 = temp_output_279_0_g157438;
				float3 temp_output_280_0_g157438 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157438 = temp_output_280_0_g157438;
				half4 localSamplePlanar3D246_g157438 = SamplePlanar3D( Texture246_g157438 , Sampler246_g157438 , Coords246_g157438 , WorldPosition246_g157438 , WorldNormal246_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157438) = _ThirdNormalTex;
				SamplerState Sampler234_g157438 = sampler_Linear_Repeat;
				float4 Coords234_g157438 = temp_output_37_0_g157438;
				float3 WorldPosition234_g157438 = temp_output_279_0_g157438;
				float4 localSampleStochastic2D234_g157438 = SampleStochastic2D( Texture234_g157438 , Sampler234_g157438 , Coords234_g157438 , WorldPosition234_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157438) = _ThirdNormalTex;
				SamplerState Sampler263_g157438 = sampler_Linear_Repeat;
				half4 Coords263_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition263_g157438 = temp_output_279_0_g157438;
				half3 WorldNormal263_g157438 = temp_output_280_0_g157438;
				half4 localSampleStochastic3D263_g157438 = SampleStochastic3D( Texture263_g157438 , Sampler263_g157438 , Coords263_g157438 , WorldPosition263_g157438 , WorldNormal263_g157438 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157436 = localSampleExtra275_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157436 = localSamplePlanar2D238_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157436 = localSamplePlanar3D246_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157436 = localSampleStochastic2D234_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157436 = localSampleStochastic3D263_g157438;
				#else
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#endif
				half4 Local_NormalTex776_g157436 = staticSwitch698_g157436;
				half4 Normal_Packed45_g157440 = Local_NormalTex776_g157436;
				float2 appendResult58_g157440 = (float2(( (Normal_Packed45_g157440).x * (Normal_Packed45_g157440).w ) , (Normal_Packed45_g157440).y));
				half2 Normal_Default50_g157440 = appendResult58_g157440;
				half2 Normal_ASTC41_g157440 = (Normal_Packed45_g157440).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157440 = Normal_ASTC41_g157440;
				#else
				float2 staticSwitch38_g157440 = Normal_Default50_g157440;
				#endif
				half2 Normal_NO_DTX544_g157440 = (Normal_Packed45_g157440).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157440 = Normal_NO_DTX544_g157440;
				#else
				float2 staticSwitch37_g157440 = staticSwitch38_g157440;
				#endif
				float2 temp_output_724_0_g157436 = ( (staticSwitch37_g157440*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g157441 = temp_output_724_0_g157436;
				float2 break71_g157441 = Normal_Planar45_g157441;
				float3 appendResult72_g157441 = (float3(break71_g157441.x , 0.0 , break71_g157441.y));
				float2 temp_output_858_0_g157436 = (mul( ase_worldToTangent, appendResult72_g157441 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#endif
				half2 Local_NormalTS729_g157436 = staticSwitch727_g157436;
				float2 temp_output_36_0_g157459 = ( lerpResult40_g157459 + Local_NormalTS729_g157436 );
				float2 lerpResult405_g157436 = lerp( Visual_NormalTS529_g157436 , temp_output_36_0_g157459 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g157436 = lerpResult405_g157436;
				#else
				float2 staticSwitch418_g157436 = Visual_NormalTS529_g157436;
				#endif
				half2 Final_NormalTS612_g157436 = staticSwitch418_g157436;
				float2 In_NormalTS3_g157454 = Final_NormalTS612_g157436;
				float3 appendResult68_g157460 = (float3(Final_NormalTS612_g157436 , 1.0));
				float3 tanNormal74_g157460 = appendResult68_g157460;
				float3 worldNormal74_g157460 = normalize( float3(dot(tanToWorld0,tanNormal74_g157460), dot(tanToWorld1,tanNormal74_g157460), dot(tanToWorld2,tanNormal74_g157460)) );
				half3 Final_NormalWS956_g157436 = worldNormal74_g157460;
				float3 In_NormalWS3_g157454 = Final_NormalWS956_g157436;
				half4 Visual_Shader531_g157436 = Out_Shader4_g157453;
				float4 lerpResult1000_g157436 = lerp( Local_Masks750_g157436 , ( Visual_Shader531_g157436 * Local_Masks750_g157436 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g157436 = lerp( Visual_Shader531_g157436 , lerpResult1000_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g157436 = lerpResult998_g157436;
				#else
				float4 staticSwitch451_g157436 = Visual_Shader531_g157436;
				#endif
				half4 Final_Masks613_g157436 = staticSwitch451_g157436;
				float4 In_Shader3_g157454 = Final_Masks613_g157436;
				float4 In_Emissive3_g157454 = Out_Emissive4_g157453;
				float3 temp_output_3_0_g157462 = Final_Albedo601_g157436;
				float dotResult20_g157462 = dot( temp_output_3_0_g157462 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157436 = dotResult20_g157462;
				float In_Grayscale3_g157454 = Final_Grayscale615_g157436;
				float clampResult651_g157436 = clamp( saturate( ( Final_Grayscale615_g157436 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157436 = clampResult651_g157436;
				float In_Luminosity3_g157454 = Final_Luminosity652_g157436;
				half Visual_MultiMask547_g157436 = Out_MultiMask4_g157453;
				float lerpResult477_g157436 = lerp( Visual_MultiMask547_g157436 , Local_MultiMask767_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch482_g157436 = lerpResult477_g157436;
				#else
				float staticSwitch482_g157436 = Visual_MultiMask547_g157436;
				#endif
				half Final_MultiMask572_g157436 = staticSwitch482_g157436;
				float In_MultiMask3_g157454 = Final_MultiMask572_g157436;
				half Visual_AlphaClip559_g157436 = Out_AlphaClip4_g157453;
				float temp_output_718_0_g157436 = (Local_AlbedoTex777_g157436).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g157436 = ( temp_output_718_0_g157436 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g157436 = temp_output_718_0_g157436;
				#endif
				half Local_AlphaClip772_g157436 = staticSwitch924_g157436;
				float lerpResult448_g157436 = lerp( Visual_AlphaClip559_g157436 , Local_AlphaClip772_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch564_g157436 = lerpResult448_g157436;
				#else
				float staticSwitch564_g157436 = Visual_AlphaClip559_g157436;
				#endif
				half Final_AlphaClip602_g157436 = staticSwitch564_g157436;
				float In_AlphaClip3_g157454 = Final_AlphaClip602_g157436;
				half Visual_AlphaFade588_g157436 = Out_AlphaFade4_g157453;
				half Local_AlphaFade773_g157436 = (lerpResult706_g157436).a;
				float lerpResult604_g157436 = lerp( Visual_AlphaFade588_g157436 , Local_AlphaFade773_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch608_g157436 = lerpResult604_g157436;
				#else
				float staticSwitch608_g157436 = Visual_AlphaFade588_g157436;
				#endif
				half Final_AlphaFade611_g157436 = staticSwitch608_g157436;
				float In_AlphaFade3_g157454 = Final_AlphaFade611_g157436;
				float3 In_Translucency3_g157454 = Out_Translucency4_g157453;
				float In_Transmission3_g157454 = Out_Transmission4_g157453;
				float In_Thickness3_g157454 = Out_Thickness4_g157453;
				float In_Diffusion3_g157454 = Out_Diffusion4_g157453;
				{
				Data3_g157454.Dummy = In_Dummy3_g157454;
				Data3_g157454.Albedo = In_Albedo3_g157454;
				Data3_g157454.NormalTS = In_NormalTS3_g157454;
				Data3_g157454.NormalWS = In_NormalWS3_g157454;
				Data3_g157454.Shader = In_Shader3_g157454;
				Data3_g157454.Emissive= In_Emissive3_g157454;
				Data3_g157454.MultiMask = In_MultiMask3_g157454;
				Data3_g157454.Grayscale = In_Grayscale3_g157454;
				Data3_g157454.Luminosity = In_Luminosity3_g157454;
				Data3_g157454.AlphaClip = In_AlphaClip3_g157454;
				Data3_g157454.AlphaFade = In_AlphaFade3_g157454;
				Data3_g157454.Translucency = In_Translucency3_g157454;
				Data3_g157454.Transmission = In_Transmission3_g157454;
				Data3_g157454.Thickness = In_Thickness3_g157454;
				Data3_g157454.Diffusion = In_Diffusion3_g157454;
				}
				TVEVisualData Data4_g157467 = Data3_g157454;
				float Out_Dummy4_g157467 = 0;
				float3 Out_Albedo4_g157467 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157467 = float2( 0,0 );
				float3 Out_NormalWS4_g157467 = float3( 0,0,0 );
				float4 Out_Shader4_g157467 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157467 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157467 = 0;
				float Out_Grayscale4_g157467 = 0;
				float Out_Luminosity4_g157467 = 0;
				float Out_AlphaClip4_g157467 = 0;
				float Out_AlphaFade4_g157467 = 0;
				float3 Out_Translucency4_g157467 = float3( 0,0,0 );
				float Out_Transmission4_g157467 = 0;
				float Out_Thickness4_g157467 = 0;
				float Out_Diffusion4_g157467 = 0;
				{
				Out_Dummy4_g157467 = Data4_g157467.Dummy;
				Out_Albedo4_g157467 = Data4_g157467.Albedo;
				Out_NormalTS4_g157467 = Data4_g157467.NormalTS;
				Out_NormalWS4_g157467 = Data4_g157467.NormalWS;
				Out_Shader4_g157467 = Data4_g157467.Shader;
				Out_Emissive4_g157467= Data4_g157467.Emissive;
				Out_MultiMask4_g157467 = Data4_g157467.MultiMask;
				Out_Grayscale4_g157467 = Data4_g157467.Grayscale;
				Out_Luminosity4_g157467= Data4_g157467.Luminosity;
				Out_AlphaClip4_g157467 = Data4_g157467.AlphaClip;
				Out_AlphaFade4_g157467 = Data4_g157467.AlphaFade;
				Out_Translucency4_g157467 = Data4_g157467.Translucency;
				Out_Transmission4_g157467 = Data4_g157467.Transmission;
				Out_Thickness4_g157467 = Data4_g157467.Thickness;
				Out_Diffusion4_g157467 = Data4_g157467.Diffusion;
				}
				half3 Visual_Albedo127_g157466 = Out_Albedo4_g157467;
				TVEModelData Data15_g157469 = Data16_g157339;
				float Out_Dummy15_g157469 = 0;
				float3 Out_PositionOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157469 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157469 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157469 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157469 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157469 = float3( 0,0,0 );
				float4 Out_VertexData15_g157469 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157469 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157469 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157469 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157469 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157469 = Data15_g157469.Dummy;
				Out_PositionOS15_g157469 = Data15_g157469.PositionOS;
				Out_PositionWS15_g157469 = Data15_g157469.PositionWS;
				Out_PositionWO15_g157469 = Data15_g157469.PositionWO;
				Out_PositionRawOS15_g157469 = Data15_g157469.PositionRawOS;
				Out_PositionAddOS15_g157469 = Data15_g157469.PositionAddOS;
				Out_PivotOS15_g157469 = Data15_g157469.PivotOS;
				Out_PivotWS15_g157469 = Data15_g157469.PivotWS;
				Out_PivotWO15_g157469 = Data15_g157469.PivotWO;
				Out_NormalOS15_g157469 = Data15_g157469.NormalOS;
				Out_NormalWS15_g157469 = Data15_g157469.NormalWS;
				Out_NormalRawOS15_g157469 = Data15_g157469.NormalRawOS;
				Out_NormalRawWS15_g157469 = Data15_g157469.NormalRawWS;
				Out_TangentOS15_g157469 = Data15_g157469.TangentOS;
				Out_ViewDirWS15_g157469 = Data15_g157469.ViewDirWS;
				Out_VertexData15_g157469 = Data15_g157469.VertexData;
				Out_MotionData15_g157469 = Data15_g157469.MotionData;
				Out_BoundsData15_g157469 = Data15_g157469.BoundsData;
				Out_RotationData15_g157469 = Data15_g157469.RotationData;
				Out_FragmentData15_g157469 = Data15_g157469.FragmentData;
				}
				half4 Model_VertexData206_g157466 = Out_VertexData15_g157469;
				float4 break208_g157466 = Model_VertexData206_g157466;
				float4 break33_g157474 = _occlusion_vert_mode;
				float temp_output_30_0_g157474 = ( break208_g157466.x * break33_g157474.x );
				float temp_output_29_0_g157474 = ( break208_g157466.y * break33_g157474.y );
				float temp_output_31_0_g157474 = ( break208_g157466.z * break33_g157474.z );
				float temp_output_28_0_g157474 = ( temp_output_30_0_g157474 + temp_output_29_0_g157474 + temp_output_31_0_g157474 + ( break208_g157466.w * break33_g157474.w ) );
				float temp_output_194_0_g157466 = temp_output_28_0_g157474;
				float clampResult17_g157472 = clamp( temp_output_194_0_g157466 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157471 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g157471 = ( _OcclusionMeshRemap.y - temp_output_7_0_g157471 );
				float temp_output_6_0_g157473 = saturate( ( ( clampResult17_g157472 - temp_output_7_0_g157471 ) / ( temp_output_10_0_g157471 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157473 = ( temp_output_6_0_g157473 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157473 = temp_output_6_0_g157473;
				#endif
				half Occlusion_Mask82_g157466 = staticSwitch14_g157473;
				float3 lerpResult75_g157466 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g157466);
				float3 lerpResult186_g157466 = lerp( Visual_Albedo127_g157466 , ( Visual_Albedo127_g157466 * lerpResult75_g157466 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g157466 = lerpResult186_g157466;
				#else
				float3 staticSwitch171_g157466 = Visual_Albedo127_g157466;
				#endif
				half3 Final_Albedo160_g157466 = staticSwitch171_g157466;
				float3 In_Albedo3_g157468 = Final_Albedo160_g157466;
				float2 In_NormalTS3_g157468 = Out_NormalTS4_g157467;
				float3 In_NormalWS3_g157468 = Out_NormalWS4_g157467;
				float4 In_Shader3_g157468 = Out_Shader4_g157467;
				float4 In_Emissive3_g157468 = Out_Emissive4_g157467;
				float3 temp_output_3_0_g157470 = Final_Albedo160_g157466;
				float dotResult20_g157470 = dot( temp_output_3_0_g157470 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157466 = dotResult20_g157470;
				float In_Grayscale3_g157468 = Final_Grayscale164_g157466;
				float clampResult180_g157466 = clamp( saturate( ( Final_Grayscale164_g157466 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g157466 = clampResult180_g157466;
				float In_Luminosity3_g157468 = Final_Shading181_g157466;
				float In_MultiMask3_g157468 = Out_MultiMask4_g157467;
				float In_AlphaClip3_g157468 = Out_AlphaClip4_g157467;
				float In_AlphaFade3_g157468 = Out_AlphaFade4_g157467;
				float3 In_Translucency3_g157468 = Out_Translucency4_g157467;
				float In_Transmission3_g157468 = Out_Transmission4_g157467;
				float In_Thickness3_g157468 = Out_Thickness4_g157467;
				float In_Diffusion3_g157468 = Out_Diffusion4_g157467;
				{
				Data3_g157468.Dummy = In_Dummy3_g157468;
				Data3_g157468.Albedo = In_Albedo3_g157468;
				Data3_g157468.NormalTS = In_NormalTS3_g157468;
				Data3_g157468.NormalWS = In_NormalWS3_g157468;
				Data3_g157468.Shader = In_Shader3_g157468;
				Data3_g157468.Emissive= In_Emissive3_g157468;
				Data3_g157468.MultiMask = In_MultiMask3_g157468;
				Data3_g157468.Grayscale = In_Grayscale3_g157468;
				Data3_g157468.Luminosity = In_Luminosity3_g157468;
				Data3_g157468.AlphaClip = In_AlphaClip3_g157468;
				Data3_g157468.AlphaFade = In_AlphaFade3_g157468;
				Data3_g157468.Translucency = In_Translucency3_g157468;
				Data3_g157468.Transmission = In_Transmission3_g157468;
				Data3_g157468.Thickness = In_Thickness3_g157468;
				Data3_g157468.Diffusion = In_Diffusion3_g157468;
				}
				TVEVisualData Data4_g157479 = Data3_g157468;
				float Out_Dummy4_g157479 = 0;
				float3 Out_Albedo4_g157479 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157479 = float2( 0,0 );
				float3 Out_NormalWS4_g157479 = float3( 0,0,0 );
				float4 Out_Shader4_g157479 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157479 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157479 = 0;
				float Out_Grayscale4_g157479 = 0;
				float Out_Luminosity4_g157479 = 0;
				float Out_AlphaClip4_g157479 = 0;
				float Out_AlphaFade4_g157479 = 0;
				float3 Out_Translucency4_g157479 = float3( 0,0,0 );
				float Out_Transmission4_g157479 = 0;
				float Out_Thickness4_g157479 = 0;
				float Out_Diffusion4_g157479 = 0;
				{
				Out_Dummy4_g157479 = Data4_g157479.Dummy;
				Out_Albedo4_g157479 = Data4_g157479.Albedo;
				Out_NormalTS4_g157479 = Data4_g157479.NormalTS;
				Out_NormalWS4_g157479 = Data4_g157479.NormalWS;
				Out_Shader4_g157479 = Data4_g157479.Shader;
				Out_Emissive4_g157479= Data4_g157479.Emissive;
				Out_MultiMask4_g157479 = Data4_g157479.MultiMask;
				Out_Grayscale4_g157479 = Data4_g157479.Grayscale;
				Out_Luminosity4_g157479= Data4_g157479.Luminosity;
				Out_AlphaClip4_g157479 = Data4_g157479.AlphaClip;
				Out_AlphaFade4_g157479 = Data4_g157479.AlphaFade;
				Out_Translucency4_g157479 = Data4_g157479.Translucency;
				Out_Transmission4_g157479 = Data4_g157479.Transmission;
				Out_Thickness4_g157479 = Data4_g157479.Thickness;
				Out_Diffusion4_g157479 = Data4_g157479.Diffusion;
				}
				half3 Visual_Albedo127_g157476 = Out_Albedo4_g157479;
				float temp_output_162_11_g157476 = Out_MultiMask4_g157479;
				half Visual_MultiMask196_g157476 = temp_output_162_11_g157476;
				float lerpResult190_g157476 = lerp( 1.0 , Visual_MultiMask196_g157476 , _GradientMultiValue);
				half Gradient_MultiMask194_g157476 = lerpResult190_g157476;
				TVEModelData Data15_g157477 = Data16_g157339;
				float Out_Dummy15_g157477 = 0;
				float3 Out_PositionOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157477 = float3( 0,0,0 );
				float4 Out_VertexData15_g157477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157477 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157477 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157477 = Data15_g157477.Dummy;
				Out_PositionOS15_g157477 = Data15_g157477.PositionOS;
				Out_PositionWS15_g157477 = Data15_g157477.PositionWS;
				Out_PositionWO15_g157477 = Data15_g157477.PositionWO;
				Out_PositionRawOS15_g157477 = Data15_g157477.PositionRawOS;
				Out_PositionAddOS15_g157477 = Data15_g157477.PositionAddOS;
				Out_PivotOS15_g157477 = Data15_g157477.PivotOS;
				Out_PivotWS15_g157477 = Data15_g157477.PivotWS;
				Out_PivotWO15_g157477 = Data15_g157477.PivotWO;
				Out_NormalOS15_g157477 = Data15_g157477.NormalOS;
				Out_NormalWS15_g157477 = Data15_g157477.NormalWS;
				Out_NormalRawOS15_g157477 = Data15_g157477.NormalRawOS;
				Out_NormalRawWS15_g157477 = Data15_g157477.NormalRawWS;
				Out_TangentOS15_g157477 = Data15_g157477.TangentOS;
				Out_ViewDirWS15_g157477 = Data15_g157477.ViewDirWS;
				Out_VertexData15_g157477 = Data15_g157477.VertexData;
				Out_MotionData15_g157477 = Data15_g157477.MotionData;
				Out_BoundsData15_g157477 = Data15_g157477.BoundsData;
				Out_RotationData15_g157477 = Data15_g157477.RotationData;
				Out_FragmentData15_g157477 = Data15_g157477.FragmentData;
				}
				half4 Model_VertexData224_g157476 = Out_VertexData15_g157477;
				float4 break226_g157476 = Model_VertexData224_g157476;
				float4 break33_g157478 = _gradient_vert_mode;
				float temp_output_30_0_g157478 = ( break226_g157476.x * break33_g157478.x );
				float temp_output_29_0_g157478 = ( break226_g157476.y * break33_g157478.y );
				float temp_output_31_0_g157478 = ( break226_g157476.z * break33_g157478.z );
				float temp_output_28_0_g157478 = ( temp_output_30_0_g157478 + temp_output_29_0_g157478 + temp_output_31_0_g157478 + ( break226_g157476.w * break33_g157478.w ) );
				float temp_output_211_0_g157476 = temp_output_28_0_g157478;
				float clampResult17_g157483 = clamp( temp_output_211_0_g157476 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157484 = _GradientMeshRemap.x;
				float temp_output_10_0_g157484 = ( _GradientMeshRemap.y - temp_output_7_0_g157484 );
				float temp_output_6_0_g157485 = saturate( ( ( clampResult17_g157483 - temp_output_7_0_g157484 ) / ( temp_output_10_0_g157484 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157485 = ( temp_output_6_0_g157485 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157485 = temp_output_6_0_g157485;
				#endif
				half Gradient_VertMask82_g157476 = staticSwitch14_g157485;
				half Gradient_Mask200_g157476 = ( Gradient_MultiMask194_g157476 * Gradient_VertMask82_g157476 );
				float3 lerpResult75_g157476 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g157476);
				float3 lerpResult186_g157476 = lerp( Visual_Albedo127_g157476 , ( Visual_Albedo127_g157476 * lerpResult75_g157476 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g157476 = lerpResult186_g157476;
				#else
				float3 staticSwitch171_g157476 = Visual_Albedo127_g157476;
				#endif
				half3 Final_Albedo160_g157476 = staticSwitch171_g157476;
				float3 In_Albedo3_g157480 = Final_Albedo160_g157476;
				float2 In_NormalTS3_g157480 = Out_NormalTS4_g157479;
				float3 In_NormalWS3_g157480 = Out_NormalWS4_g157479;
				float4 In_Shader3_g157480 = Out_Shader4_g157479;
				float4 In_Emissive3_g157480 = Out_Emissive4_g157479;
				float3 temp_output_3_0_g157481 = Final_Albedo160_g157476;
				float dotResult20_g157481 = dot( temp_output_3_0_g157481 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157476 = dotResult20_g157481;
				float In_Grayscale3_g157480 = Final_Grayscale164_g157476;
				float clampResult180_g157476 = clamp( saturate( ( Final_Grayscale164_g157476 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g157476 = clampResult180_g157476;
				float In_Luminosity3_g157480 = Final_Luminosity181_g157476;
				float In_MultiMask3_g157480 = temp_output_162_11_g157476;
				float In_AlphaClip3_g157480 = Out_AlphaClip4_g157479;
				float In_AlphaFade3_g157480 = Out_AlphaFade4_g157479;
				float3 In_Translucency3_g157480 = Out_Translucency4_g157479;
				float In_Transmission3_g157480 = Out_Transmission4_g157479;
				float In_Thickness3_g157480 = Out_Thickness4_g157479;
				float In_Diffusion3_g157480 = Out_Diffusion4_g157479;
				{
				Data3_g157480.Dummy = In_Dummy3_g157480;
				Data3_g157480.Albedo = In_Albedo3_g157480;
				Data3_g157480.NormalTS = In_NormalTS3_g157480;
				Data3_g157480.NormalWS = In_NormalWS3_g157480;
				Data3_g157480.Shader = In_Shader3_g157480;
				Data3_g157480.Emissive= In_Emissive3_g157480;
				Data3_g157480.MultiMask = In_MultiMask3_g157480;
				Data3_g157480.Grayscale = In_Grayscale3_g157480;
				Data3_g157480.Luminosity = In_Luminosity3_g157480;
				Data3_g157480.AlphaClip = In_AlphaClip3_g157480;
				Data3_g157480.AlphaFade = In_AlphaFade3_g157480;
				Data3_g157480.Translucency = In_Translucency3_g157480;
				Data3_g157480.Transmission = In_Transmission3_g157480;
				Data3_g157480.Thickness = In_Thickness3_g157480;
				Data3_g157480.Diffusion = In_Diffusion3_g157480;
				}
				TVEVisualData Data4_g157487 = Data3_g157480;
				float Out_Dummy4_g157487 = 0;
				float3 Out_Albedo4_g157487 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157487 = float2( 0,0 );
				float3 Out_NormalWS4_g157487 = float3( 0,0,0 );
				float4 Out_Shader4_g157487 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157487 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157487 = 0;
				float Out_Grayscale4_g157487 = 0;
				float Out_Luminosity4_g157487 = 0;
				float Out_AlphaClip4_g157487 = 0;
				float Out_AlphaFade4_g157487 = 0;
				float3 Out_Translucency4_g157487 = float3( 0,0,0 );
				float Out_Transmission4_g157487 = 0;
				float Out_Thickness4_g157487 = 0;
				float Out_Diffusion4_g157487 = 0;
				{
				Out_Dummy4_g157487 = Data4_g157487.Dummy;
				Out_Albedo4_g157487 = Data4_g157487.Albedo;
				Out_NormalTS4_g157487 = Data4_g157487.NormalTS;
				Out_NormalWS4_g157487 = Data4_g157487.NormalWS;
				Out_Shader4_g157487 = Data4_g157487.Shader;
				Out_Emissive4_g157487= Data4_g157487.Emissive;
				Out_MultiMask4_g157487 = Data4_g157487.MultiMask;
				Out_Grayscale4_g157487 = Data4_g157487.Grayscale;
				Out_Luminosity4_g157487= Data4_g157487.Luminosity;
				Out_AlphaClip4_g157487 = Data4_g157487.AlphaClip;
				Out_AlphaFade4_g157487 = Data4_g157487.AlphaFade;
				Out_Translucency4_g157487 = Data4_g157487.Translucency;
				Out_Transmission4_g157487 = Data4_g157487.Transmission;
				Out_Thickness4_g157487 = Data4_g157487.Thickness;
				Out_Diffusion4_g157487 = Data4_g157487.Diffusion;
				}
				half3 Visual_Albedo127_g157486 = Out_Albedo4_g157487;
				float vertexToFrag203_g157486 = IN.ase_texcoord10.z;
				float clampResult208_g157486 = clamp( vertexToFrag203_g157486 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g157486 = ( Visual_Albedo127_g157486 + ( ( Visual_Albedo127_g157486 * Visual_Albedo127_g157486 * 200.0 * _motion_highlight_color ) * clampResult208_g157486 ) );
				#else
				float3 staticSwitch209_g157486 = Visual_Albedo127_g157486;
				#endif
				half3 Final_Albedo160_g157486 = staticSwitch209_g157486;
				float3 In_Albedo3_g157489 = Final_Albedo160_g157486;
				float2 In_NormalTS3_g157489 = Out_NormalTS4_g157487;
				float3 In_NormalWS3_g157489 = Out_NormalWS4_g157487;
				float4 In_Shader3_g157489 = Out_Shader4_g157487;
				float4 In_Emissive3_g157489 = Out_Emissive4_g157487;
				float In_Grayscale3_g157489 = Out_Grayscale4_g157487;
				float In_Luminosity3_g157489 = Out_Luminosity4_g157487;
				float In_MultiMask3_g157489 = Out_MultiMask4_g157487;
				float In_AlphaClip3_g157489 = Out_AlphaClip4_g157487;
				float In_AlphaFade3_g157489 = Out_AlphaFade4_g157487;
				float3 In_Translucency3_g157489 = Out_Translucency4_g157487;
				float In_Transmission3_g157489 = Out_Transmission4_g157487;
				float In_Thickness3_g157489 = Out_Thickness4_g157487;
				float In_Diffusion3_g157489 = Out_Diffusion4_g157487;
				{
				Data3_g157489.Dummy = In_Dummy3_g157489;
				Data3_g157489.Albedo = In_Albedo3_g157489;
				Data3_g157489.NormalTS = In_NormalTS3_g157489;
				Data3_g157489.NormalWS = In_NormalWS3_g157489;
				Data3_g157489.Shader = In_Shader3_g157489;
				Data3_g157489.Emissive= In_Emissive3_g157489;
				Data3_g157489.MultiMask = In_MultiMask3_g157489;
				Data3_g157489.Grayscale = In_Grayscale3_g157489;
				Data3_g157489.Luminosity = In_Luminosity3_g157489;
				Data3_g157489.AlphaClip = In_AlphaClip3_g157489;
				Data3_g157489.AlphaFade = In_AlphaFade3_g157489;
				Data3_g157489.Translucency = In_Translucency3_g157489;
				Data3_g157489.Transmission = In_Transmission3_g157489;
				Data3_g157489.Thickness = In_Thickness3_g157489;
				Data3_g157489.Diffusion = In_Diffusion3_g157489;
				}
				TVEVisualData Data4_g157834 = Data3_g157489;
				float Out_Dummy4_g157834 = 0;
				float3 Out_Albedo4_g157834 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157834 = float2( 0,0 );
				float3 Out_NormalWS4_g157834 = float3( 0,0,0 );
				float4 Out_Shader4_g157834 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157834 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157834 = 0;
				float Out_Grayscale4_g157834 = 0;
				float Out_Luminosity4_g157834 = 0;
				float Out_AlphaClip4_g157834 = 0;
				float Out_AlphaFade4_g157834 = 0;
				float3 Out_Translucency4_g157834 = float3( 0,0,0 );
				float Out_Transmission4_g157834 = 0;
				float Out_Thickness4_g157834 = 0;
				float Out_Diffusion4_g157834 = 0;
				{
				Out_Dummy4_g157834 = Data4_g157834.Dummy;
				Out_Albedo4_g157834 = Data4_g157834.Albedo;
				Out_NormalTS4_g157834 = Data4_g157834.NormalTS;
				Out_NormalWS4_g157834 = Data4_g157834.NormalWS;
				Out_Shader4_g157834 = Data4_g157834.Shader;
				Out_Emissive4_g157834= Data4_g157834.Emissive;
				Out_MultiMask4_g157834 = Data4_g157834.MultiMask;
				Out_Grayscale4_g157834 = Data4_g157834.Grayscale;
				Out_Luminosity4_g157834= Data4_g157834.Luminosity;
				Out_AlphaClip4_g157834 = Data4_g157834.AlphaClip;
				Out_AlphaFade4_g157834 = Data4_g157834.AlphaFade;
				Out_Translucency4_g157834 = Data4_g157834.Translucency;
				Out_Transmission4_g157834 = Data4_g157834.Transmission;
				Out_Thickness4_g157834 = Data4_g157834.Thickness;
				Out_Diffusion4_g157834 = Data4_g157834.Diffusion;
				}
				half3 Visual_Albedo127_g157833 = Out_Albedo4_g157834;
				float3 temp_output_622_0_g157833 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler238_g157837 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157840 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157840 = ( temp_output_6_0_g157840 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157840 = temp_output_6_0_g157840;
				#endif
				half4 Overlay_Coords639_g157833 = staticSwitch14_g157840;
				float4 temp_output_37_0_g157837 = Overlay_Coords639_g157833;
				half4 Coords238_g157837 = temp_output_37_0_g157837;
				TVEModelData Data15_g157841 = Data16_g157339;
				float Out_Dummy15_g157841 = 0;
				float3 Out_PositionOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157841 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157841 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157841 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157841 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157841 = float3( 0,0,0 );
				float4 Out_VertexData15_g157841 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157841 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157841 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157841 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157841 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157841 = Data15_g157841.Dummy;
				Out_PositionOS15_g157841 = Data15_g157841.PositionOS;
				Out_PositionWS15_g157841 = Data15_g157841.PositionWS;
				Out_PositionWO15_g157841 = Data15_g157841.PositionWO;
				Out_PositionRawOS15_g157841 = Data15_g157841.PositionRawOS;
				Out_PositionAddOS15_g157841 = Data15_g157841.PositionAddOS;
				Out_PivotOS15_g157841 = Data15_g157841.PivotOS;
				Out_PivotWS15_g157841 = Data15_g157841.PivotWS;
				Out_PivotWO15_g157841 = Data15_g157841.PivotWO;
				Out_NormalOS15_g157841 = Data15_g157841.NormalOS;
				Out_NormalWS15_g157841 = Data15_g157841.NormalWS;
				Out_NormalRawOS15_g157841 = Data15_g157841.NormalRawOS;
				Out_NormalRawWS15_g157841 = Data15_g157841.NormalRawWS;
				Out_TangentOS15_g157841 = Data15_g157841.TangentOS;
				Out_ViewDirWS15_g157841 = Data15_g157841.ViewDirWS;
				Out_VertexData15_g157841 = Data15_g157841.VertexData;
				Out_MotionData15_g157841 = Data15_g157841.MotionData;
				Out_BoundsData15_g157841 = Data15_g157841.BoundsData;
				Out_RotationData15_g157841 = Data15_g157841.RotationData;
				Out_FragmentData15_g157841 = Data15_g157841.FragmentData;
				}
				half3 Model_PositionWO602_g157833 = Out_PositionWO15_g157841;
				float3 temp_output_279_0_g157837 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157837 = temp_output_279_0_g157837;
				half4 localSamplePlanar2D238_g157837 = SamplePlanar2D( Texture238_g157837 , Sampler238_g157837 , Coords238_g157837 , WorldPosition238_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler246_g157837 = sampler_Linear_Repeat;
				half4 Coords246_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition246_g157837 = temp_output_279_0_g157837;
				half3 Model_NormalWS712_g157833 = Out_NormalWS15_g157841;
				float3 temp_output_280_0_g157837 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157837 = temp_output_280_0_g157837;
				half4 localSamplePlanar3D246_g157837 = SamplePlanar3D( Texture246_g157837 , Sampler246_g157837 , Coords246_g157837 , WorldPosition246_g157837 , WorldNormal246_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler234_g157837 = sampler_Linear_Repeat;
				float4 Coords234_g157837 = temp_output_37_0_g157837;
				float3 WorldPosition234_g157837 = temp_output_279_0_g157837;
				float4 localSampleStochastic2D234_g157837 = SampleStochastic2D( Texture234_g157837 , Sampler234_g157837 , Coords234_g157837 , WorldPosition234_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler263_g157837 = sampler_Linear_Repeat;
				half4 Coords263_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition263_g157837 = temp_output_279_0_g157837;
				half3 WorldNormal263_g157837 = temp_output_280_0_g157837;
				half4 localSampleStochastic3D263_g157837 = SampleStochastic3D( Texture263_g157837 , Sampler263_g157837 , Coords263_g157837 , WorldPosition263_g157837 , WorldNormal263_g157837 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g157833 = localSamplePlanar3D246_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g157833 = localSampleStochastic2D234_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g157833 = localSampleStochastic3D263_g157837;
				#else
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#endif
				half3 Overlay_Albedo526_g157833 = (staticSwitch676_g157833).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g157833 = ( temp_output_622_0_g157833 * Overlay_Albedo526_g157833 );
				#else
				float3 staticSwitch578_g157833 = temp_output_622_0_g157833;
				#endif
				float3 temp_output_6_0_g157856 = staticSwitch578_g157833;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157856 = ( temp_output_6_0_g157856 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g157856 = temp_output_6_0_g157856;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157843) = _OverlayMaskTex;
				SamplerState Sampler276_g157843 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157844 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157844 = ( temp_output_6_0_g157844 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157844 = temp_output_6_0_g157844;
				#endif
				half4 Local_MaskCoords886_g157833 = staticSwitch14_g157844;
				float4 temp_output_37_0_g157843 = Local_MaskCoords886_g157833;
				half4 Coords276_g157843 = temp_output_37_0_g157843;
				half2 TexCoord276_g157843 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157843 = SampleMain( Texture276_g157843 , Sampler276_g157843 , Coords276_g157843 , TexCoord276_g157843 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157843) = _OverlayMaskTex;
				SamplerState Sampler275_g157843 = sampler_Linear_Repeat;
				half4 Coords275_g157843 = temp_output_37_0_g157843;
				float2 appendResult289_g157843 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157843 = appendResult289_g157843;
				#else
				float2 staticSwitch288_g157843 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157843 = staticSwitch288_g157843;
				half4 localSampleExtra275_g157843 = SampleExtra( Texture275_g157843 , Sampler275_g157843 , Coords275_g157843 , TexCoord275_g157843 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g157833 = localSampleExtra275_g157843;
				#else
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#endif
				half4 Local_MaskTex885_g157833 = staticSwitch894_g157833;
				float clampResult17_g157858 = clamp( (Local_MaskTex885_g157833).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157859 = _OverlayMaskRemap.x;
				float temp_output_10_0_g157859 = ( _OverlayMaskRemap.y - temp_output_7_0_g157859 );
				float lerpResult898_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157858 - temp_output_7_0_g157859 ) / ( temp_output_10_0_g157859 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g157833 = lerpResult898_g157833;
				#else
				float staticSwitch904_g157833 = 1.0;
				#endif
				half Overlay_TexMask906_g157833 = staticSwitch904_g157833;
				float3 temp_output_739_21_g157833 = Out_NormalWS4_g157834;
				half3 Visual_NormalWS749_g157833 = temp_output_739_21_g157833;
				float clampResult17_g157853 = clamp( saturate( (Visual_NormalWS749_g157833).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157852 = _OverlayProjRemap.x;
				float temp_output_10_0_g157852 = ( _OverlayProjRemap.y - temp_output_7_0_g157852 );
				float lerpResult842_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157853 - temp_output_7_0_g157852 ) / ( temp_output_10_0_g157852 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g157833 = lerpResult842_g157833;
				#else
				float staticSwitch734_g157833 = 1.0;
				#endif
				half Overlay_MaskProj457_g157833 = staticSwitch734_g157833;
				float temp_output_739_15_g157833 = Out_Luminosity4_g157834;
				half Visual_Luminosity654_g157833 = temp_output_739_15_g157833;
				float clampResult17_g157855 = clamp( Visual_Luminosity654_g157833 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157854 = _OverlayLumaRemap.x;
				float temp_output_10_0_g157854 = ( _OverlayLumaRemap.y - temp_output_7_0_g157854 );
				float lerpResult587_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157855 - temp_output_7_0_g157854 ) / ( temp_output_10_0_g157854 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g157833 = lerpResult587_g157833;
				half4 Model_VertexMasks791_g157833 = Out_VertexData15_g157841;
				float4 break792_g157833 = Model_VertexMasks791_g157833;
				float4 break33_g157845 = _overlay_vert_mode;
				float temp_output_30_0_g157845 = ( break792_g157833.x * break33_g157845.x );
				float temp_output_29_0_g157845 = ( break792_g157833.y * break33_g157845.y );
				float temp_output_31_0_g157845 = ( break792_g157833.z * break33_g157845.z );
				float temp_output_28_0_g157845 = ( temp_output_30_0_g157845 + temp_output_29_0_g157845 + temp_output_31_0_g157845 + ( break792_g157833.w * break33_g157845.w ) );
				float clampResult17_g157846 = clamp( temp_output_28_0_g157845 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157848 = _OverlayMeshRemap.x;
				float temp_output_10_0_g157848 = ( _OverlayMeshRemap.y - temp_output_7_0_g157848 );
				float lerpResult879_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157846 - temp_output_7_0_g157848 ) / ( temp_output_10_0_g157848 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g157857 = lerpResult879_g157833;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157857 = ( temp_output_6_0_g157857 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157857 = temp_output_6_0_g157857;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g157833 = staticSwitch14_g157857;
				#else
				float staticSwitch800_g157833 = 1.0;
				#endif
				half Overlay_VertMask801_g157833 = staticSwitch800_g157833;
				half Overlay_MaskNoise427_g157833 = 1.0;
				TVEGlobalData Data15_g157835 = Data204_g157340;
				float Out_Dummy15_g157835 = 0;
				float4 Out_CoatParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157835 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157835 = Data15_g157835.Dummy;
				Out_CoatParams15_g157835 = Data15_g157835.CoatParams;
				Out_PaintParams15_g157835 = Data15_g157835.PaintParams;
				Out_GlowParams15_g157835 = Data15_g157835.GlowParams;
				Out_AtmoParams15_g157835= Data15_g157835.AtmoParams;
				Out_FormParams15_g157835 = Data15_g157835.FormParams;
				Out_LandParams15_g157835 = Data15_g157835.LandParams;
				Out_WindParams15_g157835 = Data15_g157835.WindParams;
				Out_PushParams15_g157835 = Data15_g157835.PushParams;
				}
				half4 Global_AtmoParams516_g157833 = Out_AtmoParams15_g157835;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g157833 = (Global_AtmoParams516_g157833).z;
				#else
				float staticSwitch705_g157833 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g157833 = staticSwitch705_g157833;
				half Custom_Mask646_g157833 = 1.0;
				float temp_output_7_0_g157851 = 0.1;
				float temp_output_10_0_g157851 = ( 0.2 - temp_output_7_0_g157851 );
				half Overlay_Mask494_g157833 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g157833 * Overlay_MaskProj457_g157833 * Overlay_MaskLuma438_g157833 * Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 * Custom_Mask646_g157833 ) - temp_output_7_0_g157851 ) / ( temp_output_10_0_g157851 + 0.0001 ) ) );
				float3 lerpResult467_g157833 = lerp( Visual_Albedo127_g157833 , staticSwitch14_g157856 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g157833 = lerpResult467_g157833;
				#else
				float3 staticSwitch577_g157833 = Visual_Albedo127_g157833;
				#endif
				half3 Final_Albedo493_g157833 = staticSwitch577_g157833;
				float3 In_Albedo3_g157836 = Final_Albedo493_g157833;
				half2 Visual_NormalTS535_g157833 = Out_NormalTS4_g157834;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157842) = _OverlayNormalTex;
				SamplerState Sampler238_g157842 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157842 = Overlay_Coords639_g157833;
				half4 Coords238_g157842 = temp_output_37_0_g157842;
				float3 temp_output_279_0_g157842 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157842 = temp_output_279_0_g157842;
				half4 localSamplePlanar2D238_g157842 = SamplePlanar2D( Texture238_g157842 , Sampler238_g157842 , Coords238_g157842 , WorldPosition238_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157842) = _OverlayNormalTex;
				SamplerState Sampler246_g157842 = sampler_Linear_Repeat;
				half4 Coords246_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition246_g157842 = temp_output_279_0_g157842;
				float3 temp_output_280_0_g157842 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157842 = temp_output_280_0_g157842;
				half4 localSamplePlanar3D246_g157842 = SamplePlanar3D( Texture246_g157842 , Sampler246_g157842 , Coords246_g157842 , WorldPosition246_g157842 , WorldNormal246_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157842) = _OverlayNormalTex;
				SamplerState Sampler234_g157842 = sampler_Linear_Repeat;
				float4 Coords234_g157842 = temp_output_37_0_g157842;
				float3 WorldPosition234_g157842 = temp_output_279_0_g157842;
				float4 localSampleStochastic2D234_g157842 = SampleStochastic2D( Texture234_g157842 , Sampler234_g157842 , Coords234_g157842 , WorldPosition234_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157842) = _OverlayNormalTex;
				SamplerState Sampler263_g157842 = sampler_Linear_Repeat;
				half4 Coords263_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition263_g157842 = temp_output_279_0_g157842;
				half3 WorldNormal263_g157842 = temp_output_280_0_g157842;
				half4 localSampleStochastic3D263_g157842 = SampleStochastic3D( Texture263_g157842 , Sampler263_g157842 , Coords263_g157842 , WorldPosition263_g157842 , WorldNormal263_g157842 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g157833 = localSamplePlanar3D246_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g157833 = localSampleStochastic2D234_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g157833 = localSampleStochastic3D263_g157842;
				#else
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#endif
				half4 Normal_Packed45_g157839 = staticSwitch686_g157833;
				float2 appendResult58_g157839 = (float2(( (Normal_Packed45_g157839).x * (Normal_Packed45_g157839).w ) , (Normal_Packed45_g157839).y));
				half2 Normal_Default50_g157839 = appendResult58_g157839;
				half2 Normal_ASTC41_g157839 = (Normal_Packed45_g157839).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157839 = Normal_ASTC41_g157839;
				#else
				float2 staticSwitch38_g157839 = Normal_Default50_g157839;
				#endif
				half2 Normal_NO_DTX544_g157839 = (Normal_Packed45_g157839).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157839 = Normal_NO_DTX544_g157839;
				#else
				float2 staticSwitch37_g157839 = staticSwitch38_g157839;
				#endif
				half2 Normal_Planar45_g157838 = (staticSwitch37_g157839*2.0 + -1.0);
				float2 break71_g157838 = Normal_Planar45_g157838;
				float3 appendResult72_g157838 = (float3(break71_g157838.x , 0.0 , break71_g157838.y));
				half2 Overlay_Normal528_g157833 = (mul( ase_worldToTangent, appendResult72_g157838 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g157833 = Overlay_Normal528_g157833;
				#else
				float2 staticSwitch579_g157833 = Visual_NormalTS535_g157833;
				#endif
				float2 lerpResult551_g157833 = lerp( Visual_NormalTS535_g157833 , ( staticSwitch579_g157833 * _OverlayNormalValue ) , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g157833 = lerpResult551_g157833;
				#else
				float2 staticSwitch583_g157833 = Visual_NormalTS535_g157833;
				#endif
				half2 Final_NormalTS499_g157833 = staticSwitch583_g157833;
				float2 In_NormalTS3_g157836 = Final_NormalTS499_g157833;
				float3 In_NormalWS3_g157836 = temp_output_739_21_g157833;
				half4 Visual_Masks536_g157833 = Out_Shader4_g157834;
				float4 appendResult585_g157833 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g157833 = lerp( Visual_Masks536_g157833 , appendResult585_g157833 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g157833 = lerpResult584_g157833;
				#else
				float4 staticSwitch586_g157833 = Visual_Masks536_g157833;
				#endif
				half4 Final_Masks482_g157833 = staticSwitch586_g157833;
				float4 In_Shader3_g157836 = Final_Masks482_g157833;
				float4 In_Emissive3_g157836 = Out_Emissive4_g157834;
				float temp_output_739_12_g157833 = Out_Grayscale4_g157834;
				float In_Grayscale3_g157836 = temp_output_739_12_g157833;
				float In_Luminosity3_g157836 = temp_output_739_15_g157833;
				float In_MultiMask3_g157836 = Out_MultiMask4_g157834;
				float In_AlphaClip3_g157836 = Out_AlphaClip4_g157834;
				float In_AlphaFade3_g157836 = Out_AlphaFade4_g157834;
				float3 In_Translucency3_g157836 = Out_Translucency4_g157834;
				half Visual_Transmission699_g157833 = Out_Transmission4_g157834;
				float lerpResult746_g157833 = lerp( Visual_Transmission699_g157833 , ( Visual_Transmission699_g157833 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g157833 = lerpResult746_g157833;
				#else
				float staticSwitch703_g157833 = Visual_Transmission699_g157833;
				#endif
				half Final_Transmission702_g157833 = staticSwitch703_g157833;
				float In_Transmission3_g157836 = Final_Transmission702_g157833;
				float In_Thickness3_g157836 = Out_Thickness4_g157834;
				float In_Diffusion3_g157836 = Out_Diffusion4_g157834;
				{
				Data3_g157836.Dummy = In_Dummy3_g157836;
				Data3_g157836.Albedo = In_Albedo3_g157836;
				Data3_g157836.NormalTS = In_NormalTS3_g157836;
				Data3_g157836.NormalWS = In_NormalWS3_g157836;
				Data3_g157836.Shader = In_Shader3_g157836;
				Data3_g157836.Emissive= In_Emissive3_g157836;
				Data3_g157836.MultiMask = In_MultiMask3_g157836;
				Data3_g157836.Grayscale = In_Grayscale3_g157836;
				Data3_g157836.Luminosity = In_Luminosity3_g157836;
				Data3_g157836.AlphaClip = In_AlphaClip3_g157836;
				Data3_g157836.AlphaFade = In_AlphaFade3_g157836;
				Data3_g157836.Translucency = In_Translucency3_g157836;
				Data3_g157836.Transmission = In_Transmission3_g157836;
				Data3_g157836.Thickness = In_Thickness3_g157836;
				Data3_g157836.Diffusion = In_Diffusion3_g157836;
				}
				TVEVisualData Data4_g157871 = Data3_g157836;
				float Out_Dummy4_g157871 = 0;
				float3 Out_Albedo4_g157871 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157871 = float2( 0,0 );
				float3 Out_NormalWS4_g157871 = float3( 0,0,0 );
				float4 Out_Shader4_g157871 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157871 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157871 = 0;
				float Out_Grayscale4_g157871 = 0;
				float Out_Luminosity4_g157871 = 0;
				float Out_AlphaClip4_g157871 = 0;
				float Out_AlphaFade4_g157871 = 0;
				float3 Out_Translucency4_g157871 = float3( 0,0,0 );
				float Out_Transmission4_g157871 = 0;
				float Out_Thickness4_g157871 = 0;
				float Out_Diffusion4_g157871 = 0;
				{
				Out_Dummy4_g157871 = Data4_g157871.Dummy;
				Out_Albedo4_g157871 = Data4_g157871.Albedo;
				Out_NormalTS4_g157871 = Data4_g157871.NormalTS;
				Out_NormalWS4_g157871 = Data4_g157871.NormalWS;
				Out_Shader4_g157871 = Data4_g157871.Shader;
				Out_Emissive4_g157871= Data4_g157871.Emissive;
				Out_MultiMask4_g157871 = Data4_g157871.MultiMask;
				Out_Grayscale4_g157871 = Data4_g157871.Grayscale;
				Out_Luminosity4_g157871= Data4_g157871.Luminosity;
				Out_AlphaClip4_g157871 = Data4_g157871.AlphaClip;
				Out_AlphaFade4_g157871 = Data4_g157871.AlphaFade;
				Out_Translucency4_g157871 = Data4_g157871.Translucency;
				Out_Transmission4_g157871 = Data4_g157871.Transmission;
				Out_Thickness4_g157871 = Data4_g157871.Thickness;
				Out_Diffusion4_g157871 = Data4_g157871.Diffusion;
				}
				float3 temp_output_297_0_g157860 = Out_Albedo4_g157871;
				float3 In_Albedo3_g157872 = temp_output_297_0_g157860;
				float2 In_NormalTS3_g157872 = Out_NormalTS4_g157871;
				float3 In_NormalWS3_g157872 = Out_NormalWS4_g157871;
				float4 In_Shader3_g157872 = Out_Shader4_g157871;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g157860 = Out_Emissive4_g157871;
				TVEModelData Data15_g157861 = Data16_g157339;
				float Out_Dummy15_g157861 = 0;
				float3 Out_PositionOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157861 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157861 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157861 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157861 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157861 = float3( 0,0,0 );
				float4 Out_VertexData15_g157861 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157861 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157861 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157861 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157861 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157861 = Data15_g157861.Dummy;
				Out_PositionOS15_g157861 = Data15_g157861.PositionOS;
				Out_PositionWS15_g157861 = Data15_g157861.PositionWS;
				Out_PositionWO15_g157861 = Data15_g157861.PositionWO;
				Out_PositionRawOS15_g157861 = Data15_g157861.PositionRawOS;
				Out_PositionAddOS15_g157861 = Data15_g157861.PositionAddOS;
				Out_PivotOS15_g157861 = Data15_g157861.PivotOS;
				Out_PivotWS15_g157861 = Data15_g157861.PivotWS;
				Out_PivotWO15_g157861 = Data15_g157861.PivotWO;
				Out_NormalOS15_g157861 = Data15_g157861.NormalOS;
				Out_NormalWS15_g157861 = Data15_g157861.NormalWS;
				Out_NormalRawOS15_g157861 = Data15_g157861.NormalRawOS;
				Out_NormalRawWS15_g157861 = Data15_g157861.NormalRawWS;
				Out_TangentOS15_g157861 = Data15_g157861.TangentOS;
				Out_ViewDirWS15_g157861 = Data15_g157861.ViewDirWS;
				Out_VertexData15_g157861 = Data15_g157861.VertexData;
				Out_MotionData15_g157861 = Data15_g157861.MotionData;
				Out_BoundsData15_g157861 = Data15_g157861.BoundsData;
				Out_RotationData15_g157861 = Data15_g157861.RotationData;
				Out_FragmentData15_g157861 = Data15_g157861.FragmentData;
				}
				half4 Model_VertexMasks216_g157860 = Out_VertexData15_g157861;
				float4 break251_g157860 = Model_VertexMasks216_g157860;
				float4 break33_g157865 = _emissive_vert_mode;
				float temp_output_30_0_g157865 = ( break251_g157860.x * break33_g157865.x );
				float temp_output_29_0_g157865 = ( break251_g157860.y * break33_g157865.y );
				float temp_output_31_0_g157865 = ( break251_g157860.z * break33_g157865.z );
				float temp_output_28_0_g157865 = ( temp_output_30_0_g157865 + temp_output_29_0_g157865 + temp_output_31_0_g157865 + ( break251_g157860.w * break33_g157865.w ) );
				float clampResult17_g157864 = clamp( temp_output_28_0_g157865 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157868 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g157868 = ( _EmissiveMeshRemap.y - temp_output_7_0_g157868 );
				float lerpResult303_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157864 - temp_output_7_0_g157868 ) / ( temp_output_10_0_g157868 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g157874 = lerpResult303_g157860;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157874 = ( temp_output_6_0_g157874 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157874 = temp_output_6_0_g157874;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g157860 = staticSwitch14_g157874;
				#else
				float staticSwitch242_g157860 = 1.0;
				#endif
				half Emissive_MeshMask221_g157860 = staticSwitch242_g157860;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157863) = _EmissiveMaskTex;
				SamplerState Sampler276_g157863 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157869 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157869 = ( temp_output_6_0_g157869 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157869 = temp_output_6_0_g157869;
				#endif
				half4 Emissive_Coords167_g157860 = staticSwitch14_g157869;
				float4 temp_output_37_0_g157863 = Emissive_Coords167_g157860;
				half4 Coords276_g157863 = temp_output_37_0_g157863;
				half2 TexCoord276_g157863 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g157863 = SampleMain( Texture276_g157863 , Sampler276_g157863 , Coords276_g157863 , TexCoord276_g157863 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157863) = _EmissiveMaskTex;
				SamplerState Sampler275_g157863 = sampler_Linear_Repeat;
				half4 Coords275_g157863 = temp_output_37_0_g157863;
				float2 appendResult289_g157863 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157863 = appendResult289_g157863;
				#else
				float2 staticSwitch288_g157863 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g157863 = staticSwitch288_g157863;
				half4 localSampleExtra275_g157863 = SampleExtra( Texture275_g157863 , Sampler275_g157863 , Coords275_g157863 , TexCoord275_g157863 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g157860 = localSampleExtra275_g157863;
				#else
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#endif
				half4 Emissive_MaskTex201_g157860 = staticSwitch176_g157860;
				float clampResult17_g157867 = clamp( (Emissive_MaskTex201_g157860).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g157866 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g157866 = ( _EmissiveMaskRemap.y - temp_output_7_0_g157866 );
				float lerpResult302_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157867 - temp_output_7_0_g157866 ) / ( temp_output_10_0_g157866 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g157860 = lerpResult302_g157860;
				#else
				float staticSwitch190_g157860 = 1.0;
				#endif
				half Emissive_Mask103_g157860 = staticSwitch190_g157860;
				float temp_output_279_0_g157860 = ( Emissive_MeshMask221_g157860 * Emissive_Mask103_g157860 );
				float3 appendResult293_g157860 = (float3(temp_output_279_0_g157860 , temp_output_279_0_g157860 , temp_output_279_0_g157860));
				half3 Local_EmissiveColor278_g157860 = appendResult293_g157860;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g157862 = Data204_g157340;
				float Out_Dummy15_g157862 = 0;
				float4 Out_CoatParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157862 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157862 = Data15_g157862.Dummy;
				Out_CoatParams15_g157862 = Data15_g157862.CoatParams;
				Out_PaintParams15_g157862 = Data15_g157862.PaintParams;
				Out_GlowParams15_g157862 = Data15_g157862.GlowParams;
				Out_AtmoParams15_g157862= Data15_g157862.AtmoParams;
				Out_FormParams15_g157862 = Data15_g157862.FormParams;
				Out_LandParams15_g157862 = Data15_g157862.LandParams;
				Out_WindParams15_g157862 = Data15_g157862.WindParams;
				Out_PushParams15_g157862 = Data15_g157862.PushParams;
				}
				half4 Global_GlowParams179_g157860 = Out_GlowParams15_g157862;
				float3 lerpResult299_g157860 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g157860).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g157860 = lerpResult299_g157860;
				#else
				float3 staticSwitch228_g157860 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g157860 = staticSwitch228_g157860;
				half3 Local_EmissiveValue88_g157860 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g157860 );
				half3 Emissive_Blend260_g157860 = ( ( (Visual_Emissive255_g157860).xyz * Local_EmissiveColor278_g157860 ) * Local_EmissiveValue88_g157860 );
				float3 temp_output_3_0_g157870 = Emissive_Blend260_g157860;
				float temp_output_15_0_g157870 = _emissive_power_value;
				float3 temp_output_23_0_g157870 = ( temp_output_3_0_g157870 * temp_output_15_0_g157870 );
				float4 appendResult295_g157860 = (float4(temp_output_23_0_g157870 , Emissive_Mask103_g157860));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g157860 = appendResult295_g157860;
				#else
				float4 staticSwitch129_g157860 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g157860 = staticSwitch129_g157860;
				float4 In_Emissive3_g157872 = Final_Emissive184_g157860;
				float In_Grayscale3_g157872 = Out_Grayscale4_g157871;
				float In_Luminosity3_g157872 = Out_Luminosity4_g157871;
				float temp_output_297_11_g157860 = Out_MultiMask4_g157871;
				float In_MultiMask3_g157872 = temp_output_297_11_g157860;
				float In_AlphaClip3_g157872 = Out_AlphaClip4_g157871;
				float In_AlphaFade3_g157872 = Out_AlphaFade4_g157871;
				float3 In_Translucency3_g157872 = Out_Translucency4_g157871;
				float In_Transmission3_g157872 = Out_Transmission4_g157871;
				float In_Thickness3_g157872 = Out_Thickness4_g157871;
				float In_Diffusion3_g157872 = Out_Diffusion4_g157871;
				{
				Data3_g157872.Dummy = In_Dummy3_g157872;
				Data3_g157872.Albedo = In_Albedo3_g157872;
				Data3_g157872.NormalTS = In_NormalTS3_g157872;
				Data3_g157872.NormalWS = In_NormalWS3_g157872;
				Data3_g157872.Shader = In_Shader3_g157872;
				Data3_g157872.Emissive= In_Emissive3_g157872;
				Data3_g157872.MultiMask = In_MultiMask3_g157872;
				Data3_g157872.Grayscale = In_Grayscale3_g157872;
				Data3_g157872.Luminosity = In_Luminosity3_g157872;
				Data3_g157872.AlphaClip = In_AlphaClip3_g157872;
				Data3_g157872.AlphaFade = In_AlphaFade3_g157872;
				Data3_g157872.Translucency = In_Translucency3_g157872;
				Data3_g157872.Transmission = In_Transmission3_g157872;
				Data3_g157872.Thickness = In_Thickness3_g157872;
				Data3_g157872.Diffusion = In_Diffusion3_g157872;
				}
				TVEVisualData Data4_g157882 = Data3_g157872;
				float Out_Dummy4_g157882 = 0;
				float3 Out_Albedo4_g157882 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157882 = float2( 0,0 );
				float3 Out_NormalWS4_g157882 = float3( 0,0,0 );
				float4 Out_Shader4_g157882 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157882 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157882 = 0;
				float Out_Grayscale4_g157882 = 0;
				float Out_Luminosity4_g157882 = 0;
				float Out_AlphaClip4_g157882 = 0;
				float Out_AlphaFade4_g157882 = 0;
				float3 Out_Translucency4_g157882 = float3( 0,0,0 );
				float Out_Transmission4_g157882 = 0;
				float Out_Thickness4_g157882 = 0;
				float Out_Diffusion4_g157882 = 0;
				{
				Out_Dummy4_g157882 = Data4_g157882.Dummy;
				Out_Albedo4_g157882 = Data4_g157882.Albedo;
				Out_NormalTS4_g157882 = Data4_g157882.NormalTS;
				Out_NormalWS4_g157882 = Data4_g157882.NormalWS;
				Out_Shader4_g157882 = Data4_g157882.Shader;
				Out_Emissive4_g157882= Data4_g157882.Emissive;
				Out_MultiMask4_g157882 = Data4_g157882.MultiMask;
				Out_Grayscale4_g157882 = Data4_g157882.Grayscale;
				Out_Luminosity4_g157882= Data4_g157882.Luminosity;
				Out_AlphaClip4_g157882 = Data4_g157882.AlphaClip;
				Out_AlphaFade4_g157882 = Data4_g157882.AlphaFade;
				Out_Translucency4_g157882 = Data4_g157882.Translucency;
				Out_Transmission4_g157882 = Data4_g157882.Transmission;
				Out_Thickness4_g157882 = Data4_g157882.Thickness;
				Out_Diffusion4_g157882 = Data4_g157882.Diffusion;
				}
				half3 Visual_Albedo199_g157881 = Out_Albedo4_g157882;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g157881 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g157881 );
				half Visual_Transmission138_g157881 = Out_Transmission4_g157882;
				half Subsurface_Value268_g157881 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g157885 = Data204_g157340;
				float Out_Dummy15_g157885 = 0;
				float4 Out_CoatParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157885 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157885 = Data15_g157885.Dummy;
				Out_CoatParams15_g157885 = Data15_g157885.CoatParams;
				Out_PaintParams15_g157885 = Data15_g157885.PaintParams;
				Out_GlowParams15_g157885 = Data15_g157885.GlowParams;
				Out_AtmoParams15_g157885= Data15_g157885.AtmoParams;
				Out_FormParams15_g157885 = Data15_g157885.FormParams;
				Out_LandParams15_g157885 = Data15_g157885.LandParams;
				Out_WindParams15_g157885 = Data15_g157885.WindParams;
				Out_PushParams15_g157885 = Data15_g157885.PushParams;
				}
				half4 Global_GlowParams373_g157881 = Out_GlowParams15_g157885;
				float lerpResult403_g157881 = lerp( 1.0 , saturate( (Global_GlowParams373_g157881).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g157881 = lerpResult403_g157881;
				#else
				float staticSwitch367_g157881 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g157881 = staticSwitch367_g157881;
				float temp_output_301_11_g157881 = Out_MultiMask4_g157882;
				half Visual_MultiMask292_g157881 = temp_output_301_11_g157881;
				float lerpResult293_g157881 = lerp( 1.0 , Visual_MultiMask292_g157881 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g157881 = lerpResult293_g157881;
				half Custom_Mask363_g157881 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g157881 = ( Visual_Transmission138_g157881 * Subsurface_Value268_g157881 * Subsurface_GlobalMask369_g157881 * Subsurface_MultiMask296_g157881 * Custom_Mask363_g157881 );
				#else
				float staticSwitch345_g157881 = 0.0;
				#endif
				half Final_Transmission269_g157881 = staticSwitch345_g157881;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g157881 = ( Subsurface_Color264_g157881 * Final_Transmission269_g157881 * 10.0 );
				#else
				float3 staticSwitch348_g157881 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g157881 = staticSwitch348_g157881;
				TVEModelData Data15_g157884 = Data16_g157339;
				float Out_Dummy15_g157884 = 0;
				float3 Out_PositionOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157884 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157884 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157884 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157884 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157884 = float3( 0,0,0 );
				float4 Out_VertexData15_g157884 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157884 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157884 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157884 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157884 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157884 = Data15_g157884.Dummy;
				Out_PositionOS15_g157884 = Data15_g157884.PositionOS;
				Out_PositionWS15_g157884 = Data15_g157884.PositionWS;
				Out_PositionWO15_g157884 = Data15_g157884.PositionWO;
				Out_PositionRawOS15_g157884 = Data15_g157884.PositionRawOS;
				Out_PositionAddOS15_g157884 = Data15_g157884.PositionAddOS;
				Out_PivotOS15_g157884 = Data15_g157884.PivotOS;
				Out_PivotWS15_g157884 = Data15_g157884.PivotWS;
				Out_PivotWO15_g157884 = Data15_g157884.PivotWO;
				Out_NormalOS15_g157884 = Data15_g157884.NormalOS;
				Out_NormalWS15_g157884 = Data15_g157884.NormalWS;
				Out_NormalRawOS15_g157884 = Data15_g157884.NormalRawOS;
				Out_NormalRawWS15_g157884 = Data15_g157884.NormalRawWS;
				Out_TangentOS15_g157884 = Data15_g157884.TangentOS;
				Out_ViewDirWS15_g157884 = Data15_g157884.ViewDirWS;
				Out_VertexData15_g157884 = Data15_g157884.VertexData;
				Out_MotionData15_g157884 = Data15_g157884.MotionData;
				Out_BoundsData15_g157884 = Data15_g157884.BoundsData;
				Out_RotationData15_g157884 = Data15_g157884.RotationData;
				Out_FragmentData15_g157884 = Data15_g157884.FragmentData;
				}
				half3 Model_ViewDirWS392_g157881 = Out_ViewDirWS15_g157884;
				float dotResult324_g157881 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g157881 );
				float saferPower323_g157881 = abs( saturate( dotResult324_g157881 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g157881 = 0.0;
				#else
				float staticSwitch330_g157881 = ( pow( saferPower323_g157881 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g157881 = staticSwitch330_g157881;
				float3 temp_output_6_0_g157886 = ( Final_Translucency254_g157881 * Mask_Subsurface_View320_g157881 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157886 = ( temp_output_6_0_g157886 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g157886 = temp_output_6_0_g157886;
				#endif
				half3 Subsurface_Approximation333_g157881 = staticSwitch14_g157886;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g157881 = ( Visual_Albedo199_g157881 + Subsurface_Approximation333_g157881 );
				#else
				float3 staticSwitch353_g157881 = Visual_Albedo199_g157881;
				#endif
				half3 Final_Albedo312_g157881 = staticSwitch353_g157881;
				float3 In_Albedo3_g157883 = Final_Albedo312_g157881;
				float2 In_NormalTS3_g157883 = Out_NormalTS4_g157882;
				float3 In_NormalWS3_g157883 = Out_NormalWS4_g157882;
				float4 In_Shader3_g157883 = Out_Shader4_g157882;
				float4 In_Emissive3_g157883 = Out_Emissive4_g157882;
				float In_Grayscale3_g157883 = Out_Grayscale4_g157882;
				float In_Luminosity3_g157883 = Out_Luminosity4_g157882;
				float In_MultiMask3_g157883 = temp_output_301_11_g157881;
				float In_AlphaClip3_g157883 = Out_AlphaClip4_g157882;
				float In_AlphaFade3_g157883 = Out_AlphaFade4_g157882;
				float3 In_Translucency3_g157883 = Final_Translucency254_g157881;
				float In_Transmission3_g157883 = Final_Transmission269_g157881;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g157881 = 0.0;
				#else
				float staticSwitch351_g157881 = 1.0;
				#endif
				half Final_Thickness275_g157881 = staticSwitch351_g157881;
				float In_Thickness3_g157883 = Final_Thickness275_g157881;
				float Final_Diffusion340_g157881 = _SubsurfaceDiffusion;
				float In_Diffusion3_g157883 = Final_Diffusion340_g157881;
				{
				Data3_g157883.Dummy = In_Dummy3_g157883;
				Data3_g157883.Albedo = In_Albedo3_g157883;
				Data3_g157883.NormalTS = In_NormalTS3_g157883;
				Data3_g157883.NormalWS = In_NormalWS3_g157883;
				Data3_g157883.Shader = In_Shader3_g157883;
				Data3_g157883.Emissive= In_Emissive3_g157883;
				Data3_g157883.MultiMask = In_MultiMask3_g157883;
				Data3_g157883.Grayscale = In_Grayscale3_g157883;
				Data3_g157883.Luminosity = In_Luminosity3_g157883;
				Data3_g157883.AlphaClip = In_AlphaClip3_g157883;
				Data3_g157883.AlphaFade = In_AlphaFade3_g157883;
				Data3_g157883.Translucency = In_Translucency3_g157883;
				Data3_g157883.Transmission = In_Transmission3_g157883;
				Data3_g157883.Thickness = In_Thickness3_g157883;
				Data3_g157883.Diffusion = In_Diffusion3_g157883;
				}
				TVEVisualData Data4_g157896 = Data3_g157883;
				float Out_Dummy4_g157896 = 0;
				float3 Out_Albedo4_g157896 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157896 = float2( 0,0 );
				float3 Out_NormalWS4_g157896 = float3( 0,0,0 );
				float4 Out_Shader4_g157896 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157896 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157896 = 0;
				float Out_Grayscale4_g157896 = 0;
				float Out_Luminosity4_g157896 = 0;
				float Out_AlphaClip4_g157896 = 0;
				float Out_AlphaFade4_g157896 = 0;
				float3 Out_Translucency4_g157896 = float3( 0,0,0 );
				float Out_Transmission4_g157896 = 0;
				float Out_Thickness4_g157896 = 0;
				float Out_Diffusion4_g157896 = 0;
				{
				Out_Dummy4_g157896 = Data4_g157896.Dummy;
				Out_Albedo4_g157896 = Data4_g157896.Albedo;
				Out_NormalTS4_g157896 = Data4_g157896.NormalTS;
				Out_NormalWS4_g157896 = Data4_g157896.NormalWS;
				Out_Shader4_g157896 = Data4_g157896.Shader;
				Out_Emissive4_g157896= Data4_g157896.Emissive;
				Out_MultiMask4_g157896 = Data4_g157896.MultiMask;
				Out_Grayscale4_g157896 = Data4_g157896.Grayscale;
				Out_Luminosity4_g157896= Data4_g157896.Luminosity;
				Out_AlphaClip4_g157896 = Data4_g157896.AlphaClip;
				Out_AlphaFade4_g157896 = Data4_g157896.AlphaFade;
				Out_Translucency4_g157896 = Data4_g157896.Translucency;
				Out_Transmission4_g157896 = Data4_g157896.Transmission;
				Out_Thickness4_g157896 = Data4_g157896.Thickness;
				Out_Diffusion4_g157896 = Data4_g157896.Diffusion;
				}
				half3 Input_Albedo24_g157895 = Out_Albedo4_g157896;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g157895 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g157895 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g157895 = staticSwitch22_g157895;
				float4 break24_g157890 = Out_Shader4_g157896;
				half Metallic95_g157890 = break24_g157890.x;
				half Input_Metallic25_g157895 = Metallic95_g157890;
				half OneMinusReflectivity31_g157895 = ( (ColorSpaceDielectricSpec23_g157895).w - ( (ColorSpaceDielectricSpec23_g157895).w * Input_Metallic25_g157895 ) );
				
				float3 appendResult23_g157890 = (float3(Out_NormalTS4_g157896 , 1.0));
				float3 temp_output_13_0_g157894 = appendResult23_g157890;
				float3 temp_output_33_0_g157894 = ( temp_output_13_0_g157894 * _render_normal );
				float3 switchResult12_g157894 = (((ase_vface>0)?(temp_output_13_0_g157894):(temp_output_33_0_g157894)));
				
				float3 lerpResult28_g157895 = lerp( (ColorSpaceDielectricSpec23_g157895).xyz , Input_Albedo24_g157895 , Input_Metallic25_g157895);
				half RenderSpec102_g157890 = _RenderSpecular;
				
				float localCustomAlphaClip19_g157897 = ( 0.0 );
				float temp_output_3_0_g157897 = Out_AlphaClip4_g157896;
				float Alpha19_g157897 = temp_output_3_0_g157897;
				float temp_output_15_0_g157897 = 0.0;
				float Treshold19_g157897 = temp_output_15_0_g157897;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#else
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g157895 * OneMinusReflectivity31_g157895 );
				o.Normal = switchResult12_g157894;
				o.Emission = (Out_Emissive4_g157896).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 0;
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g157895 * RenderSpec102_g157890 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g157890.y;
					o.Smoothness = break24_g157890.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g157897 * Out_AlphaFade4_g157896 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Deferred"
			Tags { "LightMode"="Deferred" }

			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_prepassfinal
			#ifndef UNITY_PASS_DEFERRED
				#define UNITY_PASS_DEFERRED
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				float4 lmap : TEXCOORD2;
				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						half3 sh : TEXCOORD3;
					#endif
				#else
					#ifdef DIRLIGHTMAP_OFF
						float4 lmapFadePos : TEXCOORD4;
					#endif
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				float4 ase_texcoord14 : TEXCOORD14;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef LIGHTMAP_ON
			float4 unity_LightmapFade;
			#endif
			fixed4 unity_Ambient;
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _IsLiteShader;
			uniform half _IsStandardShader;
			uniform half _IsGeneralShader;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = v.vertex.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g154892 = ase_worldPos;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float4x4 break19_g154894 = unity_ObjectToWorld;
				float3 appendResult20_g154894 = (float3(break19_g154894[ 0 ][ 3 ] , break19_g154894[ 1 ][ 3 ] , break19_g154894[ 2 ][ 3 ]));
				half3 ObjectData20_g154896 = appendResult20_g154894;
				half3 WorldData19_g154896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154896 = WorldData19_g154896;
				#else
				float3 staticSwitch14_g154896 = ObjectData20_g154896;
				#endif
				float3 temp_output_124_0_g154894 = staticSwitch14_g154896;
				float3 temp_output_239_7_g154892 = temp_output_124_0_g154894;
				float4x4 break19_g154898 = unity_ObjectToWorld;
				float3 appendResult20_g154898 = (float3(break19_g154898[ 0 ][ 3 ] , break19_g154898[ 1 ][ 3 ] , break19_g154898[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 temp_output_122_0_g154898 = PivotOS149_g154892;
				float3 PivotsOnly105_g154898 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g154898 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g154900 = ( appendResult20_g154898 + PivotsOnly105_g154898 );
				half3 WorldData19_g154900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154900 = WorldData19_g154900;
				#else
				float3 staticSwitch14_g154900 = ObjectData20_g154900;
				#endif
				float3 temp_output_124_0_g154898 = staticSwitch14_g154900;
				float3 temp_output_237_7_g154892 = temp_output_124_0_g154898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#else
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#endif
				float3 vertexToFrag76_g154892 = staticSwitch236_g154892;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = v.normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = v.tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = v.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( v.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( v.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( v.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( v.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ), 0.0 );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157893 = Data16_g157339;
				float Out_Dummy15_g157893 = 0;
				float3 Out_PositionOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157893 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157893 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157893 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157893 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157893 = float3( 0,0,0 );
				float4 Out_VertexData15_g157893 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157893 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157893 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157893 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157893 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157893 = Data15_g157893.Dummy;
				Out_PositionOS15_g157893 = Data15_g157893.PositionOS;
				Out_PositionWS15_g157893 = Data15_g157893.PositionWS;
				Out_PositionWO15_g157893 = Data15_g157893.PositionWO;
				Out_PositionRawOS15_g157893 = Data15_g157893.PositionRawOS;
				Out_PositionAddOS15_g157893 = Data15_g157893.PositionAddOS;
				Out_PivotOS15_g157893 = Data15_g157893.PivotOS;
				Out_PivotWS15_g157893 = Data15_g157893.PivotWS;
				Out_PivotWO15_g157893 = Data15_g157893.PivotWO;
				Out_NormalOS15_g157893 = Data15_g157893.NormalOS;
				Out_NormalWS15_g157893 = Data15_g157893.NormalWS;
				Out_NormalRawOS15_g157893 = Data15_g157893.NormalRawOS;
				Out_NormalRawWS15_g157893 = Data15_g157893.NormalRawWS;
				Out_TangentOS15_g157893 = Data15_g157893.TangentOS;
				Out_ViewDirWS15_g157893 = Data15_g157893.ViewDirWS;
				Out_VertexData15_g157893 = Data15_g157893.VertexData;
				Out_MotionData15_g157893 = Data15_g157893.MotionData;
				Out_BoundsData15_g157893 = Data15_g157893.BoundsData;
				Out_RotationData15_g157893 = Data15_g157893.RotationData;
				Out_FragmentData15_g157893 = Data15_g157893.FragmentData;
				}
				float3 temp_output_31_0_g157890 = Out_PositionOS15_g157893;
				
				float4 temp_output_6_0_g157905 = Out_TangentOS15_g157893;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157905 = ( temp_output_6_0_g157905 + ( Dummy_Data978 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157905 = temp_output_6_0_g157905;
				#endif
				
				o.ase_texcoord12.xyz = vertexToFrag73_g154892;
				o.ase_texcoord13.xyz = vertexToFrag76_g154892;
				TVEModelData Data15_g157488 = Data16_g157339;
				float Out_Dummy15_g157488 = 0;
				float3 Out_PositionOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157488 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157488 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157488 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157488 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157488 = float3( 0,0,0 );
				float4 Out_VertexData15_g157488 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157488 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157488 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157488 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157488 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157488 = Data15_g157488.Dummy;
				Out_PositionOS15_g157488 = Data15_g157488.PositionOS;
				Out_PositionWS15_g157488 = Data15_g157488.PositionWS;
				Out_PositionWO15_g157488 = Data15_g157488.PositionWO;
				Out_PositionRawOS15_g157488 = Data15_g157488.PositionRawOS;
				Out_PositionAddOS15_g157488 = Data15_g157488.PositionAddOS;
				Out_PivotOS15_g157488 = Data15_g157488.PivotOS;
				Out_PivotWS15_g157488 = Data15_g157488.PivotWS;
				Out_PivotWO15_g157488 = Data15_g157488.PivotWO;
				Out_NormalOS15_g157488 = Data15_g157488.NormalOS;
				Out_NormalWS15_g157488 = Data15_g157488.NormalWS;
				Out_NormalRawOS15_g157488 = Data15_g157488.NormalRawOS;
				Out_NormalRawWS15_g157488 = Data15_g157488.NormalRawWS;
				Out_TangentOS15_g157488 = Data15_g157488.TangentOS;
				Out_ViewDirWS15_g157488 = Data15_g157488.ViewDirWS;
				Out_VertexData15_g157488 = Data15_g157488.VertexData;
				Out_MotionData15_g157488 = Data15_g157488.MotionData;
				Out_BoundsData15_g157488 = Data15_g157488.BoundsData;
				Out_RotationData15_g157488 = Data15_g157488.RotationData;
				Out_FragmentData15_g157488 = Data15_g157488.FragmentData;
				}
				half4 Model_FragmentData196_g157486 = Out_FragmentData15_g157488;
				float vertexToFrag203_g157486 = (Model_FragmentData196_g157486).w;
				o.ase_texcoord9.z = vertexToFrag203_g157486;
				
				o.ase_texcoord8 = v.ase_texcoord;
				o.ase_texcoord9.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord10 = v.texcoord1.xyzw;
				o.ase_texcoord11 = v.vertex;
				o.ase_texcoord14 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord9.w = 0;
				o.ase_texcoord12.w = 0;
				o.ase_texcoord13.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g157890 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g157893;
				v.tangent = staticSwitch14_g157905;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
					o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#else
					o.lmap.zw = 0;
				#endif
				#ifdef LIGHTMAP_ON
					o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#ifdef DIRLIGHTMAP_OFF
						o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;
						o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);
					#endif
				#else
					o.lmap.xy = 0;
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			void frag (v2f IN , bool ase_vface : SV_IsFrontFace
				, out half4 outGBuffer0 : SV_Target0
				, out half4 outGBuffer1 : SV_Target1
				, out half4 outGBuffer2 : SV_Target2
				, out half4 outEmission : SV_Target3
				#if defined(SHADOWS_SHADOWMASK) && (UNITY_ALLOWED_MRT_COUNT > 4)
				, out half4 outShadowMask : SV_Target4
				#endif
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
			)
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				half atten = 1;

				float localBreakData4_g157896 = ( 0.0 );
				float localCompData3_g157883 = ( 0.0 );
				TVEVisualData Data3_g157883 = (TVEVisualData)0;
				half Dummy145_g157881 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g157883 = Dummy145_g157881;
				float localBreakData4_g157882 = ( 0.0 );
				float localCompData3_g157872 = ( 0.0 );
				TVEVisualData Data3_g157872 = (TVEVisualData)0;
				half Dummy145_g157860 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g157872 = Dummy145_g157860;
				float localBreakData4_g157871 = ( 0.0 );
				float localCompData3_g157836 = ( 0.0 );
				TVEVisualData Data3_g157836 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord8.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g157833 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g157836 = Dummy594_g157833.r;
				float localBreakData4_g157834 = ( 0.0 );
				float localCompData3_g157489 = ( 0.0 );
				TVEVisualData Data3_g157489 = (TVEVisualData)0;
				float In_Dummy3_g157489 = 0.0;
				float localBreakData4_g157487 = ( 0.0 );
				float localCompData3_g157480 = ( 0.0 );
				TVEVisualData Data3_g157480 = (TVEVisualData)0;
				half Dummy220_g157476 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g157480 = Dummy220_g157476;
				float localBreakData4_g157479 = ( 0.0 );
				float localCompData3_g157468 = ( 0.0 );
				TVEVisualData Data3_g157468 = (TVEVisualData)0;
				half Dummy202_g157466 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g157468 = Dummy202_g157466;
				float localBreakData4_g157467 = ( 0.0 );
				float localCompData3_g157454 = ( 0.0 );
				TVEVisualData Data3_g157454 = (TVEVisualData)0;
				half4 Dummy944_g157436 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g157454 = Dummy944_g157436.x;
				float localBreakData4_g157453 = ( 0.0 );
				float localCompData3_g157416 = ( 0.0 );
				TVEVisualData Data3_g157416 = (TVEVisualData)0;
				half4 Dummy946_g157405 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g157416 = Dummy946_g157405.x;
				float localBreakData4_g157419 = ( 0.0 );
				float localCompData3_g157401 = ( 0.0 );
				TVEVisualData Data3_g157401 = (TVEVisualData)0;
				half4 Dummy130_g157391 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g157401 = Dummy130_g157391.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157402) = _MainAlbedoTex;
				SamplerState Sampler276_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g157391 = _main_coord_value;
				float4 temp_output_37_0_g157402 = Local_Coords180_g157391;
				half4 Coords276_g157402 = temp_output_37_0_g157402;
				half2 TexCoord276_g157402 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157402 = SampleMain( Texture276_g157402 , Sampler276_g157402 , Coords276_g157402 , TexCoord276_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157402) = _MainAlbedoTex;
				SamplerState Sampler275_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157402 = temp_output_37_0_g157402;
				float2 appendResult289_g157402 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157402 = appendResult289_g157402;
				#else
				float2 staticSwitch288_g157402 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157402 = staticSwitch288_g157402;
				half4 localSampleExtra275_g157402 = SampleExtra( Texture275_g157402 , Sampler275_g157402 , Coords275_g157402 , TexCoord275_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157402) = _MainAlbedoTex;
				SamplerState Sampler238_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157402 = temp_output_37_0_g157402;
				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = IN.ase_texcoord11.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 vertexToFrag73_g154892 = IN.ase_texcoord12.xyz;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float3 vertexToFrag76_g154892 = IN.ase_texcoord13.xyz;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(IN.ase_texcoord14.x , 0.0 , IN.ase_texcoord14.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = IN.ase_normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = IN.ase_tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = IN.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( IN.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( IN.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( IN.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( IN.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = IN.ase_texcoord8.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ) );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157392 = Data16_g157339;
				float Out_Dummy15_g157392 = 0;
				float3 Out_PositionOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157392 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157392 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157392 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157392 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157392 = float3( 0,0,0 );
				float4 Out_VertexData15_g157392 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157392 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157392 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157392 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157392 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157392 = Data15_g157392.Dummy;
				Out_PositionOS15_g157392 = Data15_g157392.PositionOS;
				Out_PositionWS15_g157392 = Data15_g157392.PositionWS;
				Out_PositionWO15_g157392 = Data15_g157392.PositionWO;
				Out_PositionRawOS15_g157392 = Data15_g157392.PositionRawOS;
				Out_PositionAddOS15_g157392 = Data15_g157392.PositionAddOS;
				Out_PivotOS15_g157392 = Data15_g157392.PivotOS;
				Out_PivotWS15_g157392 = Data15_g157392.PivotWS;
				Out_PivotWO15_g157392 = Data15_g157392.PivotWO;
				Out_NormalOS15_g157392 = Data15_g157392.NormalOS;
				Out_NormalWS15_g157392 = Data15_g157392.NormalWS;
				Out_NormalRawOS15_g157392 = Data15_g157392.NormalRawOS;
				Out_NormalRawWS15_g157392 = Data15_g157392.NormalRawWS;
				Out_TangentOS15_g157392 = Data15_g157392.TangentOS;
				Out_ViewDirWS15_g157392 = Data15_g157392.ViewDirWS;
				Out_VertexData15_g157392 = Data15_g157392.VertexData;
				Out_MotionData15_g157392 = Data15_g157392.MotionData;
				Out_BoundsData15_g157392 = Data15_g157392.BoundsData;
				Out_RotationData15_g157392 = Data15_g157392.RotationData;
				Out_FragmentData15_g157392 = Data15_g157392.FragmentData;
				}
				half3 Model_PositionWO222_g157391 = Out_PositionWO15_g157392;
				float3 temp_output_279_0_g157402 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157402 = temp_output_279_0_g157402;
				half4 localSamplePlanar2D238_g157402 = SamplePlanar2D( Texture238_g157402 , Sampler238_g157402 , Coords238_g157402 , WorldPosition238_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157402) = _MainAlbedoTex;
				SamplerState Sampler246_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition246_g157402 = temp_output_279_0_g157402;
				half3 Model_NormalWS226_g157391 = Out_NormalWS15_g157392;
				float3 temp_output_280_0_g157402 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157402 = temp_output_280_0_g157402;
				half4 localSamplePlanar3D246_g157402 = SamplePlanar3D( Texture246_g157402 , Sampler246_g157402 , Coords246_g157402 , WorldPosition246_g157402 , WorldNormal246_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157402) = _MainAlbedoTex;
				SamplerState Sampler234_g157402 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157402 = temp_output_37_0_g157402;
				float3 WorldPosition234_g157402 = temp_output_279_0_g157402;
				float4 localSampleStochastic2D234_g157402 = SampleStochastic2D( Texture234_g157402 , Sampler234_g157402 , Coords234_g157402 , WorldPosition234_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157402) = _MainAlbedoTex;
				SamplerState Sampler263_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition263_g157402 = temp_output_279_0_g157402;
				half3 WorldNormal263_g157402 = temp_output_280_0_g157402;
				half4 localSampleStochastic3D263_g157402 = SampleStochastic3D( Texture263_g157402 , Sampler263_g157402 , Coords263_g157402 , WorldPosition263_g157402 , WorldNormal263_g157402 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g157391 = localSampleExtra275_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g157391 = localSamplePlanar2D238_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g157391 = localSamplePlanar3D246_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g157391 = localSampleStochastic2D234_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g157391 = localSampleStochastic3D263_g157402;
				#else
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#endif
				half4 Local_AlbedoTex185_g157391 = staticSwitch184_g157391;
				float3 lerpResult53_g157391 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g157391).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g157391 = lerpResult53_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157404) = _MainShaderTex;
				SamplerState Sampler276_g157404 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157404 = Local_Coords180_g157391;
				half4 Coords276_g157404 = temp_output_37_0_g157404;
				half2 TexCoord276_g157404 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157404 = SampleMain( Texture276_g157404 , Sampler276_g157404 , Coords276_g157404 , TexCoord276_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157404) = _MainShaderTex;
				SamplerState Sampler275_g157404 = sampler_Linear_Repeat;
				half4 Coords275_g157404 = temp_output_37_0_g157404;
				float2 appendResult289_g157404 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157404 = appendResult289_g157404;
				#else
				float2 staticSwitch288_g157404 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157404 = staticSwitch288_g157404;
				half4 localSampleExtra275_g157404 = SampleExtra( Texture275_g157404 , Sampler275_g157404 , Coords275_g157404 , TexCoord275_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157404) = _MainShaderTex;
				SamplerState Sampler238_g157404 = sampler_Linear_Repeat;
				half4 Coords238_g157404 = temp_output_37_0_g157404;
				float3 temp_output_279_0_g157404 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157404 = temp_output_279_0_g157404;
				half4 localSamplePlanar2D238_g157404 = SamplePlanar2D( Texture238_g157404 , Sampler238_g157404 , Coords238_g157404 , WorldPosition238_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157404) = _MainShaderTex;
				SamplerState Sampler246_g157404 = sampler_Linear_Repeat;
				half4 Coords246_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition246_g157404 = temp_output_279_0_g157404;
				float3 temp_output_280_0_g157404 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157404 = temp_output_280_0_g157404;
				half4 localSamplePlanar3D246_g157404 = SamplePlanar3D( Texture246_g157404 , Sampler246_g157404 , Coords246_g157404 , WorldPosition246_g157404 , WorldNormal246_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157404) = _MainShaderTex;
				SamplerState Sampler234_g157404 = sampler_Linear_Repeat;
				float4 Coords234_g157404 = temp_output_37_0_g157404;
				float3 WorldPosition234_g157404 = temp_output_279_0_g157404;
				float4 localSampleStochastic2D234_g157404 = SampleStochastic2D( Texture234_g157404 , Sampler234_g157404 , Coords234_g157404 , WorldPosition234_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157404) = _MainShaderTex;
				SamplerState Sampler263_g157404 = sampler_Linear_Repeat;
				half4 Coords263_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition263_g157404 = temp_output_279_0_g157404;
				half3 WorldNormal263_g157404 = temp_output_280_0_g157404;
				half4 localSampleStochastic3D263_g157404 = SampleStochastic3D( Texture263_g157404 , Sampler263_g157404 , Coords263_g157404 , WorldPosition263_g157404 , WorldNormal263_g157404 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g157391 = localSampleExtra275_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g157391 = localSamplePlanar2D238_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g157391 = localSamplePlanar3D246_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g157391 = localSampleStochastic2D234_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g157391 = localSampleStochastic3D263_g157404;
				#else
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#endif
				half4 Local_MasksTex199_g157391 = staticSwitch198_g157391;
				float lerpResult23_g157391 = lerp( 1.0 , (Local_MasksTex199_g157391).y , _MainOcclusionValue);
				float4 appendResult73_g157391 = (float4(( (Local_MasksTex199_g157391).x * _MainMetallicValue ) , lerpResult23_g157391 , (Local_MasksTex199_g157391).z , ( (Local_MasksTex199_g157391).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g157391 = appendResult73_g157391;
				float clampResult17_g157397 = clamp( (Local_Masks109_g157391).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157398 = _MainMultiRemap.x;
				float temp_output_10_0_g157398 = ( _MainMultiRemap.y - temp_output_7_0_g157398 );
				half Local_MultiMask78_g157391 = saturate( ( ( clampResult17_g157397 - temp_output_7_0_g157398 ) / ( temp_output_10_0_g157398 + 0.0001 ) ) );
				float lerpResult58_g157391 = lerp( 1.0 , Local_MultiMask78_g157391 , _MainColorMode);
				float4 lerpResult62_g157391 = lerp( _MainColorTwo , _MainColor , lerpResult58_g157391);
				half3 Local_ColorRGB93_g157391 = (lerpResult62_g157391).rgb;
				half3 Local_Albedo139_g157391 = ( Local_AlbedoRGB107_g157391 * Local_ColorRGB93_g157391 );
				float3 In_Albedo3_g157401 = Local_Albedo139_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157403) = _MainNormalTex;
				SamplerState Sampler276_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g157403 = Local_Coords180_g157391;
				half4 Coords276_g157403 = temp_output_37_0_g157403;
				half2 TexCoord276_g157403 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157403 = SampleMain( Texture276_g157403 , Sampler276_g157403 , Coords276_g157403 , TexCoord276_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157403) = _MainNormalTex;
				SamplerState Sampler275_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157403 = temp_output_37_0_g157403;
				float2 appendResult289_g157403 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157403 = appendResult289_g157403;
				#else
				float2 staticSwitch288_g157403 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157403 = staticSwitch288_g157403;
				half4 localSampleExtra275_g157403 = SampleExtra( Texture275_g157403 , Sampler275_g157403 , Coords275_g157403 , TexCoord275_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157403) = _MainNormalTex;
				SamplerState Sampler238_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157403 = temp_output_37_0_g157403;
				float3 temp_output_279_0_g157403 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157403 = temp_output_279_0_g157403;
				half4 localSamplePlanar2D238_g157403 = SamplePlanar2D( Texture238_g157403 , Sampler238_g157403 , Coords238_g157403 , WorldPosition238_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157403) = _MainNormalTex;
				SamplerState Sampler246_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition246_g157403 = temp_output_279_0_g157403;
				float3 temp_output_280_0_g157403 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157403 = temp_output_280_0_g157403;
				half4 localSamplePlanar3D246_g157403 = SamplePlanar3D( Texture246_g157403 , Sampler246_g157403 , Coords246_g157403 , WorldPosition246_g157403 , WorldNormal246_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157403) = _MainNormalTex;
				SamplerState Sampler234_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157403 = temp_output_37_0_g157403;
				float3 WorldPosition234_g157403 = temp_output_279_0_g157403;
				float4 localSampleStochastic2D234_g157403 = SampleStochastic2D( Texture234_g157403 , Sampler234_g157403 , Coords234_g157403 , WorldPosition234_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157403) = _MainNormalTex;
				SamplerState Sampler263_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition263_g157403 = temp_output_279_0_g157403;
				half3 WorldNormal263_g157403 = temp_output_280_0_g157403;
				half4 localSampleStochastic3D263_g157403 = SampleStochastic3D( Texture263_g157403 , Sampler263_g157403 , Coords263_g157403 , WorldPosition263_g157403 , WorldNormal263_g157403 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g157391 = localSampleExtra275_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g157391 = localSamplePlanar2D238_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g157391 = localSamplePlanar3D246_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g157391 = localSampleStochastic2D234_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g157391 = localSampleStochastic3D263_g157403;
				#else
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#endif
				half4 Local_NormaTex191_g157391 = staticSwitch193_g157391;
				half4 Normal_Packed45_g157393 = Local_NormaTex191_g157391;
				float2 appendResult58_g157393 = (float2(( (Normal_Packed45_g157393).x * (Normal_Packed45_g157393).w ) , (Normal_Packed45_g157393).y));
				half2 Normal_Default50_g157393 = appendResult58_g157393;
				half2 Normal_ASTC41_g157393 = (Normal_Packed45_g157393).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157393 = Normal_ASTC41_g157393;
				#else
				float2 staticSwitch38_g157393 = Normal_Default50_g157393;
				#endif
				half2 Normal_NO_DTX544_g157393 = (Normal_Packed45_g157393).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157393 = Normal_NO_DTX544_g157393;
				#else
				float2 staticSwitch37_g157393 = staticSwitch38_g157393;
				#endif
				float2 temp_output_26_0_g157391 = ( (staticSwitch37_g157393*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g157394 = temp_output_26_0_g157391;
				float2 break71_g157394 = Normal_Planar45_g157394;
				float3 appendResult72_g157394 = (float3(break71_g157394.x , 0.0 , break71_g157394.y));
				float2 temp_output_205_0_g157391 = (mul( ase_worldToTangent, appendResult72_g157394 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#else
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#endif
				half2 Local_NormalTS108_g157391 = staticSwitch204_g157391;
				float2 In_NormalTS3_g157401 = Local_NormalTS108_g157391;
				float3 appendResult68_g157395 = (float3(Local_NormalTS108_g157391 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g157395 = appendResult68_g157395;
				float3 worldNormal74_g157395 = normalize( float3(dot(tanToWorld0,tanNormal74_g157395), dot(tanToWorld1,tanNormal74_g157395), dot(tanToWorld2,tanNormal74_g157395)) );
				half3 Local_NormalWS250_g157391 = worldNormal74_g157395;
				float3 In_NormalWS3_g157401 = Local_NormalWS250_g157391;
				float4 In_Shader3_g157401 = Local_Masks109_g157391;
				float4 In_Emissive3_g157401 = half4(1,1,1,1);
				float3 temp_output_3_0_g157396 = Local_Albedo139_g157391;
				float dotResult20_g157396 = dot( temp_output_3_0_g157396 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g157391 = dotResult20_g157396;
				float In_Grayscale3_g157401 = Local_Grayscale110_g157391;
				float clampResult144_g157391 = clamp( saturate( ( Local_Grayscale110_g157391 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g157391 = clampResult144_g157391;
				float In_Luminosity3_g157401 = Local_Luminosity145_g157391;
				float In_MultiMask3_g157401 = Local_MultiMask78_g157391;
				float temp_output_187_0_g157391 = (Local_AlbedoTex185_g157391).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g157391 = ( temp_output_187_0_g157391 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g157391 = temp_output_187_0_g157391;
				#endif
				half Local_AlphaClip111_g157391 = staticSwitch236_g157391;
				float In_AlphaClip3_g157401 = Local_AlphaClip111_g157391;
				half Local_AlphaFade246_g157391 = (lerpResult62_g157391).a;
				float In_AlphaFade3_g157401 = Local_AlphaFade246_g157391;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g157401 = temp_cast_22;
				float In_Transmission3_g157401 = 1.0;
				float In_Thickness3_g157401 = 0.0;
				float In_Diffusion3_g157401 = 0.0;
				{
				Data3_g157401.Dummy = In_Dummy3_g157401;
				Data3_g157401.Albedo = In_Albedo3_g157401;
				Data3_g157401.NormalTS = In_NormalTS3_g157401;
				Data3_g157401.NormalWS = In_NormalWS3_g157401;
				Data3_g157401.Shader = In_Shader3_g157401;
				Data3_g157401.Emissive= In_Emissive3_g157401;
				Data3_g157401.MultiMask = In_MultiMask3_g157401;
				Data3_g157401.Grayscale = In_Grayscale3_g157401;
				Data3_g157401.Luminosity = In_Luminosity3_g157401;
				Data3_g157401.AlphaClip = In_AlphaClip3_g157401;
				Data3_g157401.AlphaFade = In_AlphaFade3_g157401;
				Data3_g157401.Translucency = In_Translucency3_g157401;
				Data3_g157401.Transmission = In_Transmission3_g157401;
				Data3_g157401.Thickness = In_Thickness3_g157401;
				Data3_g157401.Diffusion = In_Diffusion3_g157401;
				}
				TVEVisualData Data4_g157419 = Data3_g157401;
				float Out_Dummy4_g157419 = 0;
				float3 Out_Albedo4_g157419 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157419 = float2( 0,0 );
				float3 Out_NormalWS4_g157419 = float3( 0,0,0 );
				float4 Out_Shader4_g157419 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157419 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157419 = 0;
				float Out_Grayscale4_g157419 = 0;
				float Out_Luminosity4_g157419 = 0;
				float Out_AlphaClip4_g157419 = 0;
				float Out_AlphaFade4_g157419 = 0;
				float3 Out_Translucency4_g157419 = float3( 0,0,0 );
				float Out_Transmission4_g157419 = 0;
				float Out_Thickness4_g157419 = 0;
				float Out_Diffusion4_g157419 = 0;
				{
				Out_Dummy4_g157419 = Data4_g157419.Dummy;
				Out_Albedo4_g157419 = Data4_g157419.Albedo;
				Out_NormalTS4_g157419 = Data4_g157419.NormalTS;
				Out_NormalWS4_g157419 = Data4_g157419.NormalWS;
				Out_Shader4_g157419 = Data4_g157419.Shader;
				Out_Emissive4_g157419= Data4_g157419.Emissive;
				Out_MultiMask4_g157419 = Data4_g157419.MultiMask;
				Out_Grayscale4_g157419 = Data4_g157419.Grayscale;
				Out_Luminosity4_g157419= Data4_g157419.Luminosity;
				Out_AlphaClip4_g157419 = Data4_g157419.AlphaClip;
				Out_AlphaFade4_g157419 = Data4_g157419.AlphaFade;
				Out_Translucency4_g157419 = Data4_g157419.Translucency;
				Out_Transmission4_g157419 = Data4_g157419.Transmission;
				Out_Thickness4_g157419 = Data4_g157419.Thickness;
				Out_Diffusion4_g157419 = Data4_g157419.Diffusion;
				}
				half3 Visual_Albedo527_g157405 = Out_Albedo4_g157419;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157406) = _SecondAlbedoTex;
				SamplerState Sampler276_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157405 = _second_coord_value;
				float4 temp_output_37_0_g157406 = Local_LayerCoords790_g157405;
				half4 Coords276_g157406 = temp_output_37_0_g157406;
				half2 TexCoord276_g157406 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157406 = SampleMain( Texture276_g157406 , Sampler276_g157406 , Coords276_g157406 , TexCoord276_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157406) = _SecondAlbedoTex;
				SamplerState Sampler275_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157406 = temp_output_37_0_g157406;
				float2 appendResult289_g157406 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157406 = appendResult289_g157406;
				#else
				float2 staticSwitch288_g157406 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157406 = staticSwitch288_g157406;
				half4 localSampleExtra275_g157406 = SampleExtra( Texture275_g157406 , Sampler275_g157406 , Coords275_g157406 , TexCoord275_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157406) = _SecondAlbedoTex;
				SamplerState Sampler238_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157406 = temp_output_37_0_g157406;
				TVEModelData Data15_g157417 = Data16_g157339;
				float Out_Dummy15_g157417 = 0;
				float3 Out_PositionOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157417 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157417 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157417 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157417 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157417 = float3( 0,0,0 );
				float4 Out_VertexData15_g157417 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157417 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157417 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157417 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157417 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157417 = Data15_g157417.Dummy;
				Out_PositionOS15_g157417 = Data15_g157417.PositionOS;
				Out_PositionWS15_g157417 = Data15_g157417.PositionWS;
				Out_PositionWO15_g157417 = Data15_g157417.PositionWO;
				Out_PositionRawOS15_g157417 = Data15_g157417.PositionRawOS;
				Out_PositionAddOS15_g157417 = Data15_g157417.PositionAddOS;
				Out_PivotOS15_g157417 = Data15_g157417.PivotOS;
				Out_PivotWS15_g157417 = Data15_g157417.PivotWS;
				Out_PivotWO15_g157417 = Data15_g157417.PivotWO;
				Out_NormalOS15_g157417 = Data15_g157417.NormalOS;
				Out_NormalWS15_g157417 = Data15_g157417.NormalWS;
				Out_NormalRawOS15_g157417 = Data15_g157417.NormalRawOS;
				Out_NormalRawWS15_g157417 = Data15_g157417.NormalRawWS;
				Out_TangentOS15_g157417 = Data15_g157417.TangentOS;
				Out_ViewDirWS15_g157417 = Data15_g157417.ViewDirWS;
				Out_VertexData15_g157417 = Data15_g157417.VertexData;
				Out_MotionData15_g157417 = Data15_g157417.MotionData;
				Out_BoundsData15_g157417 = Data15_g157417.BoundsData;
				Out_RotationData15_g157417 = Data15_g157417.RotationData;
				Out_FragmentData15_g157417 = Data15_g157417.FragmentData;
				}
				half3 Model_PositionWO636_g157405 = Out_PositionWO15_g157417;
				float3 temp_output_279_0_g157406 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157406 = temp_output_279_0_g157406;
				half4 localSamplePlanar2D238_g157406 = SamplePlanar2D( Texture238_g157406 , Sampler238_g157406 , Coords238_g157406 , WorldPosition238_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157406) = _SecondAlbedoTex;
				SamplerState Sampler246_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition246_g157406 = temp_output_279_0_g157406;
				half3 Model_NormalWS869_g157405 = Out_NormalWS15_g157417;
				float3 temp_output_280_0_g157406 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157406 = temp_output_280_0_g157406;
				half4 localSamplePlanar3D246_g157406 = SamplePlanar3D( Texture246_g157406 , Sampler246_g157406 , Coords246_g157406 , WorldPosition246_g157406 , WorldNormal246_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157406) = _SecondAlbedoTex;
				SamplerState Sampler234_g157406 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157406 = temp_output_37_0_g157406;
				float3 WorldPosition234_g157406 = temp_output_279_0_g157406;
				float4 localSampleStochastic2D234_g157406 = SampleStochastic2D( Texture234_g157406 , Sampler234_g157406 , Coords234_g157406 , WorldPosition234_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157406) = _SecondAlbedoTex;
				SamplerState Sampler263_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition263_g157406 = temp_output_279_0_g157406;
				half3 WorldNormal263_g157406 = temp_output_280_0_g157406;
				half4 localSampleStochastic3D263_g157406 = SampleStochastic3D( Texture263_g157406 , Sampler263_g157406 , Coords263_g157406 , WorldPosition263_g157406 , WorldNormal263_g157406 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157405 = localSampleExtra275_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157405 = localSamplePlanar2D238_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157405 = localSamplePlanar3D246_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157405 = localSampleStochastic2D234_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157405 = localSampleStochastic3D263_g157406;
				#else
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#endif
				half4 Local_AlbedoTex777_g157405 = staticSwitch693_g157405;
				float3 lerpResult716_g157405 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157405).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g157405 = lerpResult716_g157405;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157408) = _SecondShaderTex;
				SamplerState Sampler276_g157408 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157408 = Local_LayerCoords790_g157405;
				half4 Coords276_g157408 = temp_output_37_0_g157408;
				half2 TexCoord276_g157408 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157408 = SampleMain( Texture276_g157408 , Sampler276_g157408 , Coords276_g157408 , TexCoord276_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157408) = _SecondShaderTex;
				SamplerState Sampler275_g157408 = sampler_Linear_Repeat;
				half4 Coords275_g157408 = temp_output_37_0_g157408;
				float2 appendResult289_g157408 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157408 = appendResult289_g157408;
				#else
				float2 staticSwitch288_g157408 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157408 = staticSwitch288_g157408;
				half4 localSampleExtra275_g157408 = SampleExtra( Texture275_g157408 , Sampler275_g157408 , Coords275_g157408 , TexCoord275_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157408) = _SecondShaderTex;
				SamplerState Sampler238_g157408 = sampler_Linear_Repeat;
				half4 Coords238_g157408 = temp_output_37_0_g157408;
				float3 temp_output_279_0_g157408 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157408 = temp_output_279_0_g157408;
				half4 localSamplePlanar2D238_g157408 = SamplePlanar2D( Texture238_g157408 , Sampler238_g157408 , Coords238_g157408 , WorldPosition238_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157408) = _SecondShaderTex;
				SamplerState Sampler246_g157408 = sampler_Linear_Repeat;
				half4 Coords246_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition246_g157408 = temp_output_279_0_g157408;
				float3 temp_output_280_0_g157408 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157408 = temp_output_280_0_g157408;
				half4 localSamplePlanar3D246_g157408 = SamplePlanar3D( Texture246_g157408 , Sampler246_g157408 , Coords246_g157408 , WorldPosition246_g157408 , WorldNormal246_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157408) = _SecondShaderTex;
				SamplerState Sampler234_g157408 = sampler_Linear_Repeat;
				float4 Coords234_g157408 = temp_output_37_0_g157408;
				float3 WorldPosition234_g157408 = temp_output_279_0_g157408;
				float4 localSampleStochastic2D234_g157408 = SampleStochastic2D( Texture234_g157408 , Sampler234_g157408 , Coords234_g157408 , WorldPosition234_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157408) = _SecondShaderTex;
				SamplerState Sampler263_g157408 = sampler_Linear_Repeat;
				half4 Coords263_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition263_g157408 = temp_output_279_0_g157408;
				half3 WorldNormal263_g157408 = temp_output_280_0_g157408;
				half4 localSampleStochastic3D263_g157408 = SampleStochastic3D( Texture263_g157408 , Sampler263_g157408 , Coords263_g157408 , WorldPosition263_g157408 , WorldNormal263_g157408 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157405 = localSampleExtra275_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157405 = localSamplePlanar2D238_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157405 = localSamplePlanar3D246_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157405 = localSampleStochastic2D234_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157405 = localSampleStochastic3D263_g157408;
				#else
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#endif
				half4 Local_ShaderTex775_g157405 = staticSwitch722_g157405;
				float lerpResult739_g157405 = lerp( 1.0 , (Local_ShaderTex775_g157405).y , _SecondOcclusionValue);
				float4 appendResult749_g157405 = (float4(( (Local_ShaderTex775_g157405).x * _SecondMetallicValue ) , lerpResult739_g157405 , (Local_ShaderTex775_g157405).z , ( (Local_ShaderTex775_g157405).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g157405 = appendResult749_g157405;
				float clampResult17_g157412 = clamp( (Local_Masks750_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157413 = _SecondMultiRemap.x;
				float temp_output_10_0_g157413 = ( _SecondMultiRemap.y - temp_output_7_0_g157413 );
				float temp_output_765_0_g157405 = saturate( ( ( clampResult17_g157412 - temp_output_7_0_g157413 ) / ( temp_output_10_0_g157413 + 0.0001 ) ) );
				half Local_MultiMask767_g157405 = temp_output_765_0_g157405;
				float lerpResult705_g157405 = lerp( 1.0 , Local_MultiMask767_g157405 , _SecondColorMode);
				float4 lerpResult706_g157405 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g157405);
				half3 Local_ColorRGB774_g157405 = (lerpResult706_g157405).rgb;
				half3 Local_Albedo768_g157405 = ( Local_AlbedoRGB771_g157405 * Local_ColorRGB774_g157405 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157432 = 2.0;
				#else
				float staticSwitch1_g157432 = 4.594794;
				#endif
				float3 lerpResult985_g157405 = lerp( Local_Albedo768_g157405 , ( Visual_Albedo527_g157405 * Local_Albedo768_g157405 * staticSwitch1_g157432 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157409) = _SecondMaskTex;
				SamplerState Sampler276_g157409 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g157405 = _second_mask_coord_value;
				float4 temp_output_37_0_g157409 = Local_BlendCoords813_g157405;
				half4 Coords276_g157409 = temp_output_37_0_g157409;
				half2 TexCoord276_g157409 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157409 = SampleMain( Texture276_g157409 , Sampler276_g157409 , Coords276_g157409 , TexCoord276_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157409) = _SecondMaskTex;
				SamplerState Sampler275_g157409 = sampler_Linear_Repeat;
				half4 Coords275_g157409 = temp_output_37_0_g157409;
				float2 appendResult289_g157409 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157409 = appendResult289_g157409;
				#else
				float2 staticSwitch288_g157409 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157409 = staticSwitch288_g157409;
				half4 localSampleExtra275_g157409 = SampleExtra( Texture275_g157409 , Sampler275_g157409 , Coords275_g157409 , TexCoord275_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157409) = _SecondMaskTex;
				SamplerState Sampler238_g157409 = sampler_Linear_Repeat;
				half4 Coords238_g157409 = temp_output_37_0_g157409;
				float3 temp_output_279_0_g157409 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157409 = temp_output_279_0_g157409;
				half4 localSamplePlanar2D238_g157409 = SamplePlanar2D( Texture238_g157409 , Sampler238_g157409 , Coords238_g157409 , WorldPosition238_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157409) = _SecondMaskTex;
				SamplerState Sampler246_g157409 = sampler_Linear_Repeat;
				half4 Coords246_g157409 = temp_output_37_0_g157409;
				half3 WorldPosition246_g157409 = temp_output_279_0_g157409;
				float3 temp_output_280_0_g157409 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157409 = temp_output_280_0_g157409;
				half4 localSamplePlanar3D246_g157409 = SamplePlanar3D( Texture246_g157409 , Sampler246_g157409 , Coords246_g157409 , WorldPosition246_g157409 , WorldNormal246_g157409 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157405 = localSampleExtra275_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157405 = localSamplePlanar2D238_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157405 = localSamplePlanar3D246_g157409;
				#else
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#endif
				half4 Local_MaskTex861_g157405 = staticSwitch817_g157405;
				float clampResult17_g157423 = clamp( (Local_MaskTex861_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157422 = _SecondMaskRemap.x;
				float temp_output_10_0_g157422 = ( _SecondMaskRemap.y - temp_output_7_0_g157422 );
				float lerpResult1015_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157423 - temp_output_7_0_g157422 ) / ( temp_output_10_0_g157422 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g157405 = lerpResult1015_g157405;
				#else
				float staticSwitch893_g157405 = 1.0;
				#endif
				half Blend_TexMask429_g157405 = staticSwitch893_g157405;
				half3 Visual_NormalWS951_g157405 = Out_NormalWS4_g157419;
				float clampResult17_g157424 = clamp( saturate( (Visual_NormalWS951_g157405).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157425 = _SecondProjRemap.x;
				float temp_output_10_0_g157425 = ( _SecondProjRemap.y - temp_output_7_0_g157425 );
				float lerpResult996_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157424 - temp_output_7_0_g157425 ) / ( temp_output_10_0_g157425 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g157405 = lerpResult996_g157405;
				#else
				float staticSwitch878_g157405 = 1.0;
				#endif
				half Blend_ProjMask434_g157405 = staticSwitch878_g157405;
				half4 Model_VertexMasks964_g157405 = Out_VertexData15_g157417;
				float4 break965_g157405 = Model_VertexMasks964_g157405;
				float4 break33_g157426 = _second_vert_mode;
				float temp_output_30_0_g157426 = ( break965_g157405.x * break33_g157426.x );
				float temp_output_29_0_g157426 = ( break965_g157405.y * break33_g157426.y );
				float temp_output_31_0_g157426 = ( break965_g157405.z * break33_g157426.z );
				float temp_output_28_0_g157426 = ( temp_output_30_0_g157426 + temp_output_29_0_g157426 + temp_output_31_0_g157426 + ( break965_g157405.w * break33_g157426.w ) );
				float clampResult17_g157420 = clamp( temp_output_28_0_g157426 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157421 = _SecondMeshRemap.x;
				float temp_output_10_0_g157421 = ( _SecondMeshRemap.y - temp_output_7_0_g157421 );
				float lerpResult1017_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157420 - temp_output_7_0_g157421 ) / ( temp_output_10_0_g157421 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g157434 = lerpResult1017_g157405;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157434 = ( temp_output_6_0_g157434 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157434 = temp_output_6_0_g157434;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g157405 = staticSwitch14_g157434;
				#else
				float staticSwitch917_g157405 = 1.0;
				#endif
				half Blend_VertMask918_g157405 = staticSwitch917_g157405;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				{
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				}
				TVEGlobalData Data15_g157418 = Data204_g157340;
				float Out_Dummy15_g157418 = 0;
				float4 Out_CoatParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157418 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157418 = Data15_g157418.Dummy;
				Out_CoatParams15_g157418 = Data15_g157418.CoatParams;
				Out_PaintParams15_g157418 = Data15_g157418.PaintParams;
				Out_GlowParams15_g157418 = Data15_g157418.GlowParams;
				Out_AtmoParams15_g157418= Data15_g157418.AtmoParams;
				Out_FormParams15_g157418 = Data15_g157418.FormParams;
				Out_LandParams15_g157418 = Data15_g157418.LandParams;
				Out_WindParams15_g157418 = Data15_g157418.WindParams;
				Out_PushParams15_g157418 = Data15_g157418.PushParams;
				}
				half4 Global_CoatParams975_g157405 = Out_CoatParams15_g157418;
				float lerpResult1013_g157405 = lerp( 1.0 , (Global_CoatParams975_g157405).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g157405 = lerpResult1013_g157405;
				#else
				float staticSwitch971_g157405 = 1.0;
				#endif
				half Blend_GlobalMask972_g157405 = staticSwitch971_g157405;
				float temp_output_432_0_g157405 = ( _SecondIntensityValue * Blend_TexMask429_g157405 * Blend_ProjMask434_g157405 * Blend_VertMask918_g157405 * Blend_GlobalMask972_g157405 );
				float clampResult17_g157428 = clamp( temp_output_432_0_g157405 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157427 = _SecondBlendRemap.x;
				float temp_output_10_0_g157427 = ( _SecondBlendRemap.y - temp_output_7_0_g157427 );
				half Blend_Mask412_g157405 = ( saturate( ( ( clampResult17_g157428 - temp_output_7_0_g157427 ) / ( temp_output_10_0_g157427 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g157405 = lerp( Visual_Albedo527_g157405 , lerpResult985_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g157405 = lerpResult403_g157405;
				#else
				float3 staticSwitch415_g157405 = Visual_Albedo527_g157405;
				#endif
				half3 Final_Albedo601_g157405 = staticSwitch415_g157405;
				float3 In_Albedo3_g157416 = Final_Albedo601_g157405;
				half2 Visual_NormalTS529_g157405 = Out_NormalTS4_g157419;
				float2 lerpResult40_g157430 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157405 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157407) = _SecondNormalTex;
				SamplerState Sampler276_g157407 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157407 = Local_LayerCoords790_g157405;
				half4 Coords276_g157407 = temp_output_37_0_g157407;
				half2 TexCoord276_g157407 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157407 = SampleMain( Texture276_g157407 , Sampler276_g157407 , Coords276_g157407 , TexCoord276_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157407) = _SecondNormalTex;
				SamplerState Sampler275_g157407 = sampler_Linear_Repeat;
				half4 Coords275_g157407 = temp_output_37_0_g157407;
				float2 appendResult289_g157407 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157407 = appendResult289_g157407;
				#else
				float2 staticSwitch288_g157407 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157407 = staticSwitch288_g157407;
				half4 localSampleExtra275_g157407 = SampleExtra( Texture275_g157407 , Sampler275_g157407 , Coords275_g157407 , TexCoord275_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157407) = _SecondNormalTex;
				SamplerState Sampler238_g157407 = sampler_Linear_Repeat;
				half4 Coords238_g157407 = temp_output_37_0_g157407;
				float3 temp_output_279_0_g157407 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157407 = temp_output_279_0_g157407;
				half4 localSamplePlanar2D238_g157407 = SamplePlanar2D( Texture238_g157407 , Sampler238_g157407 , Coords238_g157407 , WorldPosition238_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157407) = _SecondNormalTex;
				SamplerState Sampler246_g157407 = sampler_Linear_Repeat;
				half4 Coords246_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition246_g157407 = temp_output_279_0_g157407;
				float3 temp_output_280_0_g157407 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157407 = temp_output_280_0_g157407;
				half4 localSamplePlanar3D246_g157407 = SamplePlanar3D( Texture246_g157407 , Sampler246_g157407 , Coords246_g157407 , WorldPosition246_g157407 , WorldNormal246_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157407) = _SecondNormalTex;
				SamplerState Sampler234_g157407 = sampler_Linear_Repeat;
				float4 Coords234_g157407 = temp_output_37_0_g157407;
				float3 WorldPosition234_g157407 = temp_output_279_0_g157407;
				float4 localSampleStochastic2D234_g157407 = SampleStochastic2D( Texture234_g157407 , Sampler234_g157407 , Coords234_g157407 , WorldPosition234_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157407) = _SecondNormalTex;
				SamplerState Sampler263_g157407 = sampler_Linear_Repeat;
				half4 Coords263_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition263_g157407 = temp_output_279_0_g157407;
				half3 WorldNormal263_g157407 = temp_output_280_0_g157407;
				half4 localSampleStochastic3D263_g157407 = SampleStochastic3D( Texture263_g157407 , Sampler263_g157407 , Coords263_g157407 , WorldPosition263_g157407 , WorldNormal263_g157407 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157405 = localSampleExtra275_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157405 = localSamplePlanar2D238_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157405 = localSamplePlanar3D246_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157405 = localSampleStochastic2D234_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157405 = localSampleStochastic3D263_g157407;
				#else
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#endif
				half4 Local_NormalTex776_g157405 = staticSwitch698_g157405;
				half4 Normal_Packed45_g157410 = Local_NormalTex776_g157405;
				float2 appendResult58_g157410 = (float2(( (Normal_Packed45_g157410).x * (Normal_Packed45_g157410).w ) , (Normal_Packed45_g157410).y));
				half2 Normal_Default50_g157410 = appendResult58_g157410;
				half2 Normal_ASTC41_g157410 = (Normal_Packed45_g157410).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157410 = Normal_ASTC41_g157410;
				#else
				float2 staticSwitch38_g157410 = Normal_Default50_g157410;
				#endif
				half2 Normal_NO_DTX544_g157410 = (Normal_Packed45_g157410).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157410 = Normal_NO_DTX544_g157410;
				#else
				float2 staticSwitch37_g157410 = staticSwitch38_g157410;
				#endif
				float2 temp_output_724_0_g157405 = ( (staticSwitch37_g157410*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g157411 = temp_output_724_0_g157405;
				float2 break71_g157411 = Normal_Planar45_g157411;
				float3 appendResult72_g157411 = (float3(break71_g157411.x , 0.0 , break71_g157411.y));
				float2 temp_output_858_0_g157405 = (mul( ase_worldToTangent, appendResult72_g157411 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#endif
				half2 Local_NormalTS729_g157405 = staticSwitch727_g157405;
				float2 temp_output_36_0_g157430 = ( lerpResult40_g157430 + Local_NormalTS729_g157405 );
				float2 lerpResult405_g157405 = lerp( Visual_NormalTS529_g157405 , temp_output_36_0_g157430 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g157405 = lerpResult405_g157405;
				#else
				float2 staticSwitch418_g157405 = Visual_NormalTS529_g157405;
				#endif
				half2 Final_NormalTS612_g157405 = staticSwitch418_g157405;
				float2 In_NormalTS3_g157416 = Final_NormalTS612_g157405;
				float3 appendResult68_g157431 = (float3(Final_NormalTS612_g157405 , 1.0));
				float3 tanNormal74_g157431 = appendResult68_g157431;
				float3 worldNormal74_g157431 = normalize( float3(dot(tanToWorld0,tanNormal74_g157431), dot(tanToWorld1,tanNormal74_g157431), dot(tanToWorld2,tanNormal74_g157431)) );
				half3 Final_NormalWS950_g157405 = worldNormal74_g157431;
				float3 In_NormalWS3_g157416 = Final_NormalWS950_g157405;
				half4 Visual_Shader531_g157405 = Out_Shader4_g157419;
				float4 lerpResult994_g157405 = lerp( Local_Masks750_g157405 , ( Visual_Shader531_g157405 * Local_Masks750_g157405 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g157405 = lerp( Visual_Shader531_g157405 , lerpResult994_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g157405 = lerpResult440_g157405;
				#else
				float4 staticSwitch451_g157405 = Visual_Shader531_g157405;
				#endif
				half4 Final_Masks613_g157405 = staticSwitch451_g157405;
				float4 In_Shader3_g157416 = Final_Masks613_g157405;
				float4 In_Emissive3_g157416 = Out_Emissive4_g157419;
				float3 temp_output_3_0_g157433 = Final_Albedo601_g157405;
				float dotResult20_g157433 = dot( temp_output_3_0_g157433 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157405 = dotResult20_g157433;
				float In_Grayscale3_g157416 = Final_Grayscale615_g157405;
				float clampResult651_g157405 = clamp( saturate( ( Final_Grayscale615_g157405 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157405 = clampResult651_g157405;
				float In_Luminosity3_g157416 = Final_Luminosity652_g157405;
				half Visual_MultiMask547_g157405 = Out_MultiMask4_g157419;
				float lerpResult477_g157405 = lerp( Visual_MultiMask547_g157405 , Local_MultiMask767_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch482_g157405 = lerpResult477_g157405;
				#else
				float staticSwitch482_g157405 = Visual_MultiMask547_g157405;
				#endif
				half Final_MultiMask572_g157405 = staticSwitch482_g157405;
				float In_MultiMask3_g157416 = Final_MultiMask572_g157405;
				half Visual_AlphaClip559_g157405 = Out_AlphaClip4_g157419;
				float temp_output_718_0_g157405 = (Local_AlbedoTex777_g157405).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g157405 = ( temp_output_718_0_g157405 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g157405 = temp_output_718_0_g157405;
				#endif
				half Local_AlphaClip772_g157405 = staticSwitch932_g157405;
				float lerpResult448_g157405 = lerp( Visual_AlphaClip559_g157405 , Local_AlphaClip772_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch564_g157405 = lerpResult448_g157405;
				#else
				float staticSwitch564_g157405 = Visual_AlphaClip559_g157405;
				#endif
				half Final_AlphaClip602_g157405 = staticSwitch564_g157405;
				float In_AlphaClip3_g157416 = Final_AlphaClip602_g157405;
				half Visual_AlphaFade588_g157405 = Out_AlphaFade4_g157419;
				half Local_AlphaFade773_g157405 = (lerpResult706_g157405).a;
				float lerpResult604_g157405 = lerp( Visual_AlphaFade588_g157405 , Local_AlphaFade773_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch608_g157405 = lerpResult604_g157405;
				#else
				float staticSwitch608_g157405 = Visual_AlphaFade588_g157405;
				#endif
				half Final_AlphaFade611_g157405 = staticSwitch608_g157405;
				float In_AlphaFade3_g157416 = Final_AlphaFade611_g157405;
				float3 In_Translucency3_g157416 = Out_Translucency4_g157419;
				float In_Transmission3_g157416 = Out_Transmission4_g157419;
				float In_Thickness3_g157416 = Out_Thickness4_g157419;
				float In_Diffusion3_g157416 = Out_Diffusion4_g157419;
				{
				Data3_g157416.Dummy = In_Dummy3_g157416;
				Data3_g157416.Albedo = In_Albedo3_g157416;
				Data3_g157416.NormalTS = In_NormalTS3_g157416;
				Data3_g157416.NormalWS = In_NormalWS3_g157416;
				Data3_g157416.Shader = In_Shader3_g157416;
				Data3_g157416.Emissive= In_Emissive3_g157416;
				Data3_g157416.MultiMask = In_MultiMask3_g157416;
				Data3_g157416.Grayscale = In_Grayscale3_g157416;
				Data3_g157416.Luminosity = In_Luminosity3_g157416;
				Data3_g157416.AlphaClip = In_AlphaClip3_g157416;
				Data3_g157416.AlphaFade = In_AlphaFade3_g157416;
				Data3_g157416.Translucency = In_Translucency3_g157416;
				Data3_g157416.Transmission = In_Transmission3_g157416;
				Data3_g157416.Thickness = In_Thickness3_g157416;
				Data3_g157416.Diffusion = In_Diffusion3_g157416;
				}
				TVEVisualData Data4_g157453 = Data3_g157416;
				float Out_Dummy4_g157453 = 0;
				float3 Out_Albedo4_g157453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157453 = float2( 0,0 );
				float3 Out_NormalWS4_g157453 = float3( 0,0,0 );
				float4 Out_Shader4_g157453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157453 = 0;
				float Out_Grayscale4_g157453 = 0;
				float Out_Luminosity4_g157453 = 0;
				float Out_AlphaClip4_g157453 = 0;
				float Out_AlphaFade4_g157453 = 0;
				float3 Out_Translucency4_g157453 = float3( 0,0,0 );
				float Out_Transmission4_g157453 = 0;
				float Out_Thickness4_g157453 = 0;
				float Out_Diffusion4_g157453 = 0;
				{
				Out_Dummy4_g157453 = Data4_g157453.Dummy;
				Out_Albedo4_g157453 = Data4_g157453.Albedo;
				Out_NormalTS4_g157453 = Data4_g157453.NormalTS;
				Out_NormalWS4_g157453 = Data4_g157453.NormalWS;
				Out_Shader4_g157453 = Data4_g157453.Shader;
				Out_Emissive4_g157453= Data4_g157453.Emissive;
				Out_MultiMask4_g157453 = Data4_g157453.MultiMask;
				Out_Grayscale4_g157453 = Data4_g157453.Grayscale;
				Out_Luminosity4_g157453= Data4_g157453.Luminosity;
				Out_AlphaClip4_g157453 = Data4_g157453.AlphaClip;
				Out_AlphaFade4_g157453 = Data4_g157453.AlphaFade;
				Out_Translucency4_g157453 = Data4_g157453.Translucency;
				Out_Transmission4_g157453 = Data4_g157453.Transmission;
				Out_Thickness4_g157453 = Data4_g157453.Thickness;
				Out_Diffusion4_g157453 = Data4_g157453.Diffusion;
				}
				half3 Visual_Albedo527_g157436 = Out_Albedo4_g157453;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler276_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157436 = _third_coord_value;
				float4 temp_output_37_0_g157437 = Local_LayerCoords790_g157436;
				half4 Coords276_g157437 = temp_output_37_0_g157437;
				half2 TexCoord276_g157437 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157437 = SampleMain( Texture276_g157437 , Sampler276_g157437 , Coords276_g157437 , TexCoord276_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler275_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157437 = temp_output_37_0_g157437;
				float2 appendResult289_g157437 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157437 = appendResult289_g157437;
				#else
				float2 staticSwitch288_g157437 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157437 = staticSwitch288_g157437;
				half4 localSampleExtra275_g157437 = SampleExtra( Texture275_g157437 , Sampler275_g157437 , Coords275_g157437 , TexCoord275_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler238_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157437 = temp_output_37_0_g157437;
				TVEModelData Data15_g157452 = Data16_g157339;
				float Out_Dummy15_g157452 = 0;
				float3 Out_PositionOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157452 = float3( 0,0,0 );
				float4 Out_VertexData15_g157452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157452 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157452 = Data15_g157452.Dummy;
				Out_PositionOS15_g157452 = Data15_g157452.PositionOS;
				Out_PositionWS15_g157452 = Data15_g157452.PositionWS;
				Out_PositionWO15_g157452 = Data15_g157452.PositionWO;
				Out_PositionRawOS15_g157452 = Data15_g157452.PositionRawOS;
				Out_PositionAddOS15_g157452 = Data15_g157452.PositionAddOS;
				Out_PivotOS15_g157452 = Data15_g157452.PivotOS;
				Out_PivotWS15_g157452 = Data15_g157452.PivotWS;
				Out_PivotWO15_g157452 = Data15_g157452.PivotWO;
				Out_NormalOS15_g157452 = Data15_g157452.NormalOS;
				Out_NormalWS15_g157452 = Data15_g157452.NormalWS;
				Out_NormalRawOS15_g157452 = Data15_g157452.NormalRawOS;
				Out_NormalRawWS15_g157452 = Data15_g157452.NormalRawWS;
				Out_TangentOS15_g157452 = Data15_g157452.TangentOS;
				Out_ViewDirWS15_g157452 = Data15_g157452.ViewDirWS;
				Out_VertexData15_g157452 = Data15_g157452.VertexData;
				Out_MotionData15_g157452 = Data15_g157452.MotionData;
				Out_BoundsData15_g157452 = Data15_g157452.BoundsData;
				Out_RotationData15_g157452 = Data15_g157452.RotationData;
				Out_FragmentData15_g157452 = Data15_g157452.FragmentData;
				}
				half3 Model_PositionWO636_g157436 = Out_PositionWO15_g157452;
				float3 temp_output_279_0_g157437 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157437 = temp_output_279_0_g157437;
				half4 localSamplePlanar2D238_g157437 = SamplePlanar2D( Texture238_g157437 , Sampler238_g157437 , Coords238_g157437 , WorldPosition238_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler246_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition246_g157437 = temp_output_279_0_g157437;
				half3 Model_NormalWS869_g157436 = Out_NormalWS15_g157452;
				float3 temp_output_280_0_g157437 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157437 = temp_output_280_0_g157437;
				half4 localSamplePlanar3D246_g157437 = SamplePlanar3D( Texture246_g157437 , Sampler246_g157437 , Coords246_g157437 , WorldPosition246_g157437 , WorldNormal246_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler234_g157437 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157437 = temp_output_37_0_g157437;
				float3 WorldPosition234_g157437 = temp_output_279_0_g157437;
				float4 localSampleStochastic2D234_g157437 = SampleStochastic2D( Texture234_g157437 , Sampler234_g157437 , Coords234_g157437 , WorldPosition234_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler263_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition263_g157437 = temp_output_279_0_g157437;
				half3 WorldNormal263_g157437 = temp_output_280_0_g157437;
				half4 localSampleStochastic3D263_g157437 = SampleStochastic3D( Texture263_g157437 , Sampler263_g157437 , Coords263_g157437 , WorldPosition263_g157437 , WorldNormal263_g157437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157436 = localSampleExtra275_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157436 = localSamplePlanar2D238_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157436 = localSamplePlanar3D246_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157436 = localSampleStochastic2D234_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157436 = localSampleStochastic3D263_g157437;
				#else
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#endif
				half4 Local_AlbedoTex777_g157436 = staticSwitch693_g157436;
				float3 lerpResult716_g157436 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157436).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g157436 = lerpResult716_g157436;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157439) = _ThirdShaderTex;
				SamplerState Sampler276_g157439 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157439 = Local_LayerCoords790_g157436;
				half4 Coords276_g157439 = temp_output_37_0_g157439;
				half2 TexCoord276_g157439 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157439 = SampleMain( Texture276_g157439 , Sampler276_g157439 , Coords276_g157439 , TexCoord276_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157439) = _ThirdShaderTex;
				SamplerState Sampler275_g157439 = sampler_Linear_Repeat;
				half4 Coords275_g157439 = temp_output_37_0_g157439;
				float2 appendResult289_g157439 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157439 = appendResult289_g157439;
				#else
				float2 staticSwitch288_g157439 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157439 = staticSwitch288_g157439;
				half4 localSampleExtra275_g157439 = SampleExtra( Texture275_g157439 , Sampler275_g157439 , Coords275_g157439 , TexCoord275_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157439) = _ThirdShaderTex;
				SamplerState Sampler238_g157439 = sampler_Linear_Repeat;
				half4 Coords238_g157439 = temp_output_37_0_g157439;
				float3 temp_output_279_0_g157439 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157439 = temp_output_279_0_g157439;
				half4 localSamplePlanar2D238_g157439 = SamplePlanar2D( Texture238_g157439 , Sampler238_g157439 , Coords238_g157439 , WorldPosition238_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157439) = _ThirdShaderTex;
				SamplerState Sampler246_g157439 = sampler_Linear_Repeat;
				half4 Coords246_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition246_g157439 = temp_output_279_0_g157439;
				float3 temp_output_280_0_g157439 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157439 = temp_output_280_0_g157439;
				half4 localSamplePlanar3D246_g157439 = SamplePlanar3D( Texture246_g157439 , Sampler246_g157439 , Coords246_g157439 , WorldPosition246_g157439 , WorldNormal246_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157439) = _ThirdShaderTex;
				SamplerState Sampler234_g157439 = sampler_Linear_Repeat;
				float4 Coords234_g157439 = temp_output_37_0_g157439;
				float3 WorldPosition234_g157439 = temp_output_279_0_g157439;
				float4 localSampleStochastic2D234_g157439 = SampleStochastic2D( Texture234_g157439 , Sampler234_g157439 , Coords234_g157439 , WorldPosition234_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157439) = _ThirdShaderTex;
				SamplerState Sampler263_g157439 = sampler_Linear_Repeat;
				half4 Coords263_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition263_g157439 = temp_output_279_0_g157439;
				half3 WorldNormal263_g157439 = temp_output_280_0_g157439;
				half4 localSampleStochastic3D263_g157439 = SampleStochastic3D( Texture263_g157439 , Sampler263_g157439 , Coords263_g157439 , WorldPosition263_g157439 , WorldNormal263_g157439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157436 = localSampleExtra275_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157436 = localSamplePlanar2D238_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157436 = localSamplePlanar3D246_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157436 = localSampleStochastic2D234_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157436 = localSampleStochastic3D263_g157439;
				#else
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#endif
				half4 Local_ShaderTex775_g157436 = staticSwitch722_g157436;
				float lerpResult739_g157436 = lerp( 1.0 , (Local_ShaderTex775_g157436).y , _ThirdOcclusionValue);
				float4 appendResult749_g157436 = (float4(( (Local_ShaderTex775_g157436).x * _ThirdMetallicValue ) , lerpResult739_g157436 , (Local_ShaderTex775_g157436).z , ( (Local_ShaderTex775_g157436).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g157436 = appendResult749_g157436;
				float clampResult17_g157442 = clamp( (Local_Masks750_g157436).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157443 = _ThirdMultiRemap.x;
				float temp_output_10_0_g157443 = ( _ThirdMultiRemap.y - temp_output_7_0_g157443 );
				float temp_output_765_0_g157436 = saturate( ( ( clampResult17_g157442 - temp_output_7_0_g157443 ) / ( temp_output_10_0_g157443 + 0.0001 ) ) );
				half Local_MultiMask767_g157436 = temp_output_765_0_g157436;
				float lerpResult705_g157436 = lerp( 1.0 , Local_MultiMask767_g157436 , _ThirdColorMode);
				float4 lerpResult706_g157436 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g157436);
				half3 Local_ColorRGB774_g157436 = (lerpResult706_g157436).rgb;
				half3 Local_Albedo768_g157436 = ( Local_AlbedoRGB771_g157436 * Local_ColorRGB774_g157436 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157461 = 2.0;
				#else
				float staticSwitch1_g157461 = 4.594794;
				#endif
				float3 lerpResult985_g157436 = lerp( Local_Albedo768_g157436 , ( Visual_Albedo527_g157436 * Local_Albedo768_g157436 * staticSwitch1_g157461 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157464) = _ThirdMaskTex;
				SamplerState Sampler276_g157464 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g157436 = _third_mask_coord_value;
				float4 temp_output_37_0_g157464 = Local_MaskCoords813_g157436;
				half4 Coords276_g157464 = temp_output_37_0_g157464;
				half2 TexCoord276_g157464 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157464 = SampleMain( Texture276_g157464 , Sampler276_g157464 , Coords276_g157464 , TexCoord276_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157464) = _ThirdMaskTex;
				SamplerState Sampler275_g157464 = sampler_Linear_Repeat;
				half4 Coords275_g157464 = temp_output_37_0_g157464;
				float2 appendResult289_g157464 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157464 = appendResult289_g157464;
				#else
				float2 staticSwitch288_g157464 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157464 = staticSwitch288_g157464;
				half4 localSampleExtra275_g157464 = SampleExtra( Texture275_g157464 , Sampler275_g157464 , Coords275_g157464 , TexCoord275_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157464) = _ThirdMaskTex;
				SamplerState Sampler238_g157464 = sampler_Linear_Repeat;
				half4 Coords238_g157464 = temp_output_37_0_g157464;
				float3 temp_output_279_0_g157464 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157464 = temp_output_279_0_g157464;
				half4 localSamplePlanar2D238_g157464 = SamplePlanar2D( Texture238_g157464 , Sampler238_g157464 , Coords238_g157464 , WorldPosition238_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157464) = _ThirdMaskTex;
				SamplerState Sampler246_g157464 = sampler_Linear_Repeat;
				half4 Coords246_g157464 = temp_output_37_0_g157464;
				half3 WorldPosition246_g157464 = temp_output_279_0_g157464;
				float3 temp_output_280_0_g157464 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157464 = temp_output_280_0_g157464;
				half4 localSamplePlanar3D246_g157464 = SamplePlanar3D( Texture246_g157464 , Sampler246_g157464 , Coords246_g157464 , WorldPosition246_g157464 , WorldNormal246_g157464 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157436 = localSampleExtra275_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157436 = localSamplePlanar2D238_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157436 = localSamplePlanar3D246_g157464;
				#else
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#endif
				half4 Local_MaskTex861_g157436 = staticSwitch817_g157436;
				float clampResult17_g157447 = clamp( (Local_MaskTex861_g157436).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g157448 = _ThirdMaskRemap.x;
				float temp_output_10_0_g157448 = ( _ThirdMaskRemap.y - temp_output_7_0_g157448 );
				float lerpResult1028_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157447 - temp_output_7_0_g157448 ) / ( temp_output_10_0_g157448 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g157436 = lerpResult1028_g157436;
				#else
				float staticSwitch892_g157436 = 1.0;
				#endif
				half Detail_TexMask429_g157436 = staticSwitch892_g157436;
				half4 Model_VertexMasks960_g157436 = Out_VertexData15_g157452;
				float4 break961_g157436 = Model_VertexMasks960_g157436;
				float4 break33_g157451 = _third_vert_mode;
				float temp_output_30_0_g157451 = ( break961_g157436.x * break33_g157451.x );
				float temp_output_29_0_g157451 = ( break961_g157436.y * break33_g157451.y );
				float temp_output_31_0_g157451 = ( break961_g157436.z * break33_g157451.z );
				float temp_output_28_0_g157451 = ( temp_output_30_0_g157451 + temp_output_29_0_g157451 + temp_output_31_0_g157451 + ( break961_g157436.w * break33_g157451.w ) );
				float clampResult17_g157445 = clamp( temp_output_28_0_g157451 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157446 = _ThirdMeshRemap.x;
				float temp_output_10_0_g157446 = ( _ThirdMeshRemap.y - temp_output_7_0_g157446 );
				float lerpResult1026_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157445 - temp_output_7_0_g157446 ) / ( temp_output_10_0_g157446 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g157463 = lerpResult1026_g157436;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157463 = ( temp_output_6_0_g157463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157463 = temp_output_6_0_g157463;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g157436 = staticSwitch14_g157463;
				#else
				float staticSwitch917_g157436 = 1.0;
				#endif
				half Blend_VertMask913_g157436 = staticSwitch917_g157436;
				half3 Visual_NormalWS953_g157436 = Out_NormalWS4_g157453;
				float clampResult17_g157449 = clamp( saturate( (Visual_NormalWS953_g157436).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157450 = _ThirdProjRemap.x;
				float temp_output_10_0_g157450 = ( _ThirdProjRemap.y - temp_output_7_0_g157450 );
				float lerpResult1004_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157449 - temp_output_7_0_g157450 ) / ( temp_output_10_0_g157450 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g157436 = lerpResult1004_g157436;
				#else
				float staticSwitch908_g157436 = 1.0;
				#endif
				half Blend_ProjMask912_g157436 = staticSwitch908_g157436;
				TVEGlobalData Data15_g157455 = Data204_g157340;
				float Out_Dummy15_g157455 = 0;
				float4 Out_CoatParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157455 = Data15_g157455.Dummy;
				Out_CoatParams15_g157455 = Data15_g157455.CoatParams;
				Out_PaintParams15_g157455 = Data15_g157455.PaintParams;
				Out_GlowParams15_g157455 = Data15_g157455.GlowParams;
				Out_AtmoParams15_g157455= Data15_g157455.AtmoParams;
				Out_FormParams15_g157455 = Data15_g157455.FormParams;
				Out_LandParams15_g157455 = Data15_g157455.LandParams;
				Out_WindParams15_g157455 = Data15_g157455.WindParams;
				Out_PushParams15_g157455 = Data15_g157455.PushParams;
				}
				half4 Global_CoatParams972_g157436 = Out_CoatParams15_g157455;
				float lerpResult1023_g157436 = lerp( 1.0 , (Global_CoatParams972_g157436).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g157436 = lerpResult1023_g157436;
				#else
				float staticSwitch965_g157436 = 1.0;
				#endif
				half Blend_GlobalMask968_g157436 = staticSwitch965_g157436;
				float temp_output_432_0_g157436 = ( _ThirdIntensityValue * Detail_TexMask429_g157436 * Blend_VertMask913_g157436 * Blend_ProjMask912_g157436 * Blend_GlobalMask968_g157436 );
				float clampResult17_g157457 = clamp( temp_output_432_0_g157436 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157456 = _ThirdBlendRemap.x;
				float temp_output_10_0_g157456 = ( _ThirdBlendRemap.y - temp_output_7_0_g157456 );
				half Detail_Mask412_g157436 = ( saturate( ( ( clampResult17_g157457 - temp_output_7_0_g157456 ) / ( temp_output_10_0_g157456 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g157436 = lerp( Visual_Albedo527_g157436 , lerpResult985_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g157436 = lerpResult989_g157436;
				#else
				float3 staticSwitch415_g157436 = Visual_Albedo527_g157436;
				#endif
				half3 Final_Albedo601_g157436 = staticSwitch415_g157436;
				float3 In_Albedo3_g157454 = Final_Albedo601_g157436;
				half2 Visual_NormalTS529_g157436 = Out_NormalTS4_g157453;
				float2 lerpResult40_g157459 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157436 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157438) = _ThirdNormalTex;
				SamplerState Sampler276_g157438 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157438 = Local_LayerCoords790_g157436;
				half4 Coords276_g157438 = temp_output_37_0_g157438;
				half2 TexCoord276_g157438 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157438 = SampleMain( Texture276_g157438 , Sampler276_g157438 , Coords276_g157438 , TexCoord276_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157438) = _ThirdNormalTex;
				SamplerState Sampler275_g157438 = sampler_Linear_Repeat;
				half4 Coords275_g157438 = temp_output_37_0_g157438;
				float2 appendResult289_g157438 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157438 = appendResult289_g157438;
				#else
				float2 staticSwitch288_g157438 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157438 = staticSwitch288_g157438;
				half4 localSampleExtra275_g157438 = SampleExtra( Texture275_g157438 , Sampler275_g157438 , Coords275_g157438 , TexCoord275_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157438) = _ThirdNormalTex;
				SamplerState Sampler238_g157438 = sampler_Linear_Repeat;
				half4 Coords238_g157438 = temp_output_37_0_g157438;
				float3 temp_output_279_0_g157438 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157438 = temp_output_279_0_g157438;
				half4 localSamplePlanar2D238_g157438 = SamplePlanar2D( Texture238_g157438 , Sampler238_g157438 , Coords238_g157438 , WorldPosition238_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157438) = _ThirdNormalTex;
				SamplerState Sampler246_g157438 = sampler_Linear_Repeat;
				half4 Coords246_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition246_g157438 = temp_output_279_0_g157438;
				float3 temp_output_280_0_g157438 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157438 = temp_output_280_0_g157438;
				half4 localSamplePlanar3D246_g157438 = SamplePlanar3D( Texture246_g157438 , Sampler246_g157438 , Coords246_g157438 , WorldPosition246_g157438 , WorldNormal246_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157438) = _ThirdNormalTex;
				SamplerState Sampler234_g157438 = sampler_Linear_Repeat;
				float4 Coords234_g157438 = temp_output_37_0_g157438;
				float3 WorldPosition234_g157438 = temp_output_279_0_g157438;
				float4 localSampleStochastic2D234_g157438 = SampleStochastic2D( Texture234_g157438 , Sampler234_g157438 , Coords234_g157438 , WorldPosition234_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157438) = _ThirdNormalTex;
				SamplerState Sampler263_g157438 = sampler_Linear_Repeat;
				half4 Coords263_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition263_g157438 = temp_output_279_0_g157438;
				half3 WorldNormal263_g157438 = temp_output_280_0_g157438;
				half4 localSampleStochastic3D263_g157438 = SampleStochastic3D( Texture263_g157438 , Sampler263_g157438 , Coords263_g157438 , WorldPosition263_g157438 , WorldNormal263_g157438 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157436 = localSampleExtra275_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157436 = localSamplePlanar2D238_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157436 = localSamplePlanar3D246_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157436 = localSampleStochastic2D234_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157436 = localSampleStochastic3D263_g157438;
				#else
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#endif
				half4 Local_NormalTex776_g157436 = staticSwitch698_g157436;
				half4 Normal_Packed45_g157440 = Local_NormalTex776_g157436;
				float2 appendResult58_g157440 = (float2(( (Normal_Packed45_g157440).x * (Normal_Packed45_g157440).w ) , (Normal_Packed45_g157440).y));
				half2 Normal_Default50_g157440 = appendResult58_g157440;
				half2 Normal_ASTC41_g157440 = (Normal_Packed45_g157440).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157440 = Normal_ASTC41_g157440;
				#else
				float2 staticSwitch38_g157440 = Normal_Default50_g157440;
				#endif
				half2 Normal_NO_DTX544_g157440 = (Normal_Packed45_g157440).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157440 = Normal_NO_DTX544_g157440;
				#else
				float2 staticSwitch37_g157440 = staticSwitch38_g157440;
				#endif
				float2 temp_output_724_0_g157436 = ( (staticSwitch37_g157440*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g157441 = temp_output_724_0_g157436;
				float2 break71_g157441 = Normal_Planar45_g157441;
				float3 appendResult72_g157441 = (float3(break71_g157441.x , 0.0 , break71_g157441.y));
				float2 temp_output_858_0_g157436 = (mul( ase_worldToTangent, appendResult72_g157441 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#endif
				half2 Local_NormalTS729_g157436 = staticSwitch727_g157436;
				float2 temp_output_36_0_g157459 = ( lerpResult40_g157459 + Local_NormalTS729_g157436 );
				float2 lerpResult405_g157436 = lerp( Visual_NormalTS529_g157436 , temp_output_36_0_g157459 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g157436 = lerpResult405_g157436;
				#else
				float2 staticSwitch418_g157436 = Visual_NormalTS529_g157436;
				#endif
				half2 Final_NormalTS612_g157436 = staticSwitch418_g157436;
				float2 In_NormalTS3_g157454 = Final_NormalTS612_g157436;
				float3 appendResult68_g157460 = (float3(Final_NormalTS612_g157436 , 1.0));
				float3 tanNormal74_g157460 = appendResult68_g157460;
				float3 worldNormal74_g157460 = normalize( float3(dot(tanToWorld0,tanNormal74_g157460), dot(tanToWorld1,tanNormal74_g157460), dot(tanToWorld2,tanNormal74_g157460)) );
				half3 Final_NormalWS956_g157436 = worldNormal74_g157460;
				float3 In_NormalWS3_g157454 = Final_NormalWS956_g157436;
				half4 Visual_Shader531_g157436 = Out_Shader4_g157453;
				float4 lerpResult1000_g157436 = lerp( Local_Masks750_g157436 , ( Visual_Shader531_g157436 * Local_Masks750_g157436 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g157436 = lerp( Visual_Shader531_g157436 , lerpResult1000_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g157436 = lerpResult998_g157436;
				#else
				float4 staticSwitch451_g157436 = Visual_Shader531_g157436;
				#endif
				half4 Final_Masks613_g157436 = staticSwitch451_g157436;
				float4 In_Shader3_g157454 = Final_Masks613_g157436;
				float4 In_Emissive3_g157454 = Out_Emissive4_g157453;
				float3 temp_output_3_0_g157462 = Final_Albedo601_g157436;
				float dotResult20_g157462 = dot( temp_output_3_0_g157462 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157436 = dotResult20_g157462;
				float In_Grayscale3_g157454 = Final_Grayscale615_g157436;
				float clampResult651_g157436 = clamp( saturate( ( Final_Grayscale615_g157436 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157436 = clampResult651_g157436;
				float In_Luminosity3_g157454 = Final_Luminosity652_g157436;
				half Visual_MultiMask547_g157436 = Out_MultiMask4_g157453;
				float lerpResult477_g157436 = lerp( Visual_MultiMask547_g157436 , Local_MultiMask767_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch482_g157436 = lerpResult477_g157436;
				#else
				float staticSwitch482_g157436 = Visual_MultiMask547_g157436;
				#endif
				half Final_MultiMask572_g157436 = staticSwitch482_g157436;
				float In_MultiMask3_g157454 = Final_MultiMask572_g157436;
				half Visual_AlphaClip559_g157436 = Out_AlphaClip4_g157453;
				float temp_output_718_0_g157436 = (Local_AlbedoTex777_g157436).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g157436 = ( temp_output_718_0_g157436 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g157436 = temp_output_718_0_g157436;
				#endif
				half Local_AlphaClip772_g157436 = staticSwitch924_g157436;
				float lerpResult448_g157436 = lerp( Visual_AlphaClip559_g157436 , Local_AlphaClip772_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch564_g157436 = lerpResult448_g157436;
				#else
				float staticSwitch564_g157436 = Visual_AlphaClip559_g157436;
				#endif
				half Final_AlphaClip602_g157436 = staticSwitch564_g157436;
				float In_AlphaClip3_g157454 = Final_AlphaClip602_g157436;
				half Visual_AlphaFade588_g157436 = Out_AlphaFade4_g157453;
				half Local_AlphaFade773_g157436 = (lerpResult706_g157436).a;
				float lerpResult604_g157436 = lerp( Visual_AlphaFade588_g157436 , Local_AlphaFade773_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch608_g157436 = lerpResult604_g157436;
				#else
				float staticSwitch608_g157436 = Visual_AlphaFade588_g157436;
				#endif
				half Final_AlphaFade611_g157436 = staticSwitch608_g157436;
				float In_AlphaFade3_g157454 = Final_AlphaFade611_g157436;
				float3 In_Translucency3_g157454 = Out_Translucency4_g157453;
				float In_Transmission3_g157454 = Out_Transmission4_g157453;
				float In_Thickness3_g157454 = Out_Thickness4_g157453;
				float In_Diffusion3_g157454 = Out_Diffusion4_g157453;
				{
				Data3_g157454.Dummy = In_Dummy3_g157454;
				Data3_g157454.Albedo = In_Albedo3_g157454;
				Data3_g157454.NormalTS = In_NormalTS3_g157454;
				Data3_g157454.NormalWS = In_NormalWS3_g157454;
				Data3_g157454.Shader = In_Shader3_g157454;
				Data3_g157454.Emissive= In_Emissive3_g157454;
				Data3_g157454.MultiMask = In_MultiMask3_g157454;
				Data3_g157454.Grayscale = In_Grayscale3_g157454;
				Data3_g157454.Luminosity = In_Luminosity3_g157454;
				Data3_g157454.AlphaClip = In_AlphaClip3_g157454;
				Data3_g157454.AlphaFade = In_AlphaFade3_g157454;
				Data3_g157454.Translucency = In_Translucency3_g157454;
				Data3_g157454.Transmission = In_Transmission3_g157454;
				Data3_g157454.Thickness = In_Thickness3_g157454;
				Data3_g157454.Diffusion = In_Diffusion3_g157454;
				}
				TVEVisualData Data4_g157467 = Data3_g157454;
				float Out_Dummy4_g157467 = 0;
				float3 Out_Albedo4_g157467 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157467 = float2( 0,0 );
				float3 Out_NormalWS4_g157467 = float3( 0,0,0 );
				float4 Out_Shader4_g157467 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157467 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157467 = 0;
				float Out_Grayscale4_g157467 = 0;
				float Out_Luminosity4_g157467 = 0;
				float Out_AlphaClip4_g157467 = 0;
				float Out_AlphaFade4_g157467 = 0;
				float3 Out_Translucency4_g157467 = float3( 0,0,0 );
				float Out_Transmission4_g157467 = 0;
				float Out_Thickness4_g157467 = 0;
				float Out_Diffusion4_g157467 = 0;
				{
				Out_Dummy4_g157467 = Data4_g157467.Dummy;
				Out_Albedo4_g157467 = Data4_g157467.Albedo;
				Out_NormalTS4_g157467 = Data4_g157467.NormalTS;
				Out_NormalWS4_g157467 = Data4_g157467.NormalWS;
				Out_Shader4_g157467 = Data4_g157467.Shader;
				Out_Emissive4_g157467= Data4_g157467.Emissive;
				Out_MultiMask4_g157467 = Data4_g157467.MultiMask;
				Out_Grayscale4_g157467 = Data4_g157467.Grayscale;
				Out_Luminosity4_g157467= Data4_g157467.Luminosity;
				Out_AlphaClip4_g157467 = Data4_g157467.AlphaClip;
				Out_AlphaFade4_g157467 = Data4_g157467.AlphaFade;
				Out_Translucency4_g157467 = Data4_g157467.Translucency;
				Out_Transmission4_g157467 = Data4_g157467.Transmission;
				Out_Thickness4_g157467 = Data4_g157467.Thickness;
				Out_Diffusion4_g157467 = Data4_g157467.Diffusion;
				}
				half3 Visual_Albedo127_g157466 = Out_Albedo4_g157467;
				TVEModelData Data15_g157469 = Data16_g157339;
				float Out_Dummy15_g157469 = 0;
				float3 Out_PositionOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157469 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157469 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157469 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157469 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157469 = float3( 0,0,0 );
				float4 Out_VertexData15_g157469 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157469 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157469 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157469 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157469 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157469 = Data15_g157469.Dummy;
				Out_PositionOS15_g157469 = Data15_g157469.PositionOS;
				Out_PositionWS15_g157469 = Data15_g157469.PositionWS;
				Out_PositionWO15_g157469 = Data15_g157469.PositionWO;
				Out_PositionRawOS15_g157469 = Data15_g157469.PositionRawOS;
				Out_PositionAddOS15_g157469 = Data15_g157469.PositionAddOS;
				Out_PivotOS15_g157469 = Data15_g157469.PivotOS;
				Out_PivotWS15_g157469 = Data15_g157469.PivotWS;
				Out_PivotWO15_g157469 = Data15_g157469.PivotWO;
				Out_NormalOS15_g157469 = Data15_g157469.NormalOS;
				Out_NormalWS15_g157469 = Data15_g157469.NormalWS;
				Out_NormalRawOS15_g157469 = Data15_g157469.NormalRawOS;
				Out_NormalRawWS15_g157469 = Data15_g157469.NormalRawWS;
				Out_TangentOS15_g157469 = Data15_g157469.TangentOS;
				Out_ViewDirWS15_g157469 = Data15_g157469.ViewDirWS;
				Out_VertexData15_g157469 = Data15_g157469.VertexData;
				Out_MotionData15_g157469 = Data15_g157469.MotionData;
				Out_BoundsData15_g157469 = Data15_g157469.BoundsData;
				Out_RotationData15_g157469 = Data15_g157469.RotationData;
				Out_FragmentData15_g157469 = Data15_g157469.FragmentData;
				}
				half4 Model_VertexData206_g157466 = Out_VertexData15_g157469;
				float4 break208_g157466 = Model_VertexData206_g157466;
				float4 break33_g157474 = _occlusion_vert_mode;
				float temp_output_30_0_g157474 = ( break208_g157466.x * break33_g157474.x );
				float temp_output_29_0_g157474 = ( break208_g157466.y * break33_g157474.y );
				float temp_output_31_0_g157474 = ( break208_g157466.z * break33_g157474.z );
				float temp_output_28_0_g157474 = ( temp_output_30_0_g157474 + temp_output_29_0_g157474 + temp_output_31_0_g157474 + ( break208_g157466.w * break33_g157474.w ) );
				float temp_output_194_0_g157466 = temp_output_28_0_g157474;
				float clampResult17_g157472 = clamp( temp_output_194_0_g157466 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157471 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g157471 = ( _OcclusionMeshRemap.y - temp_output_7_0_g157471 );
				float temp_output_6_0_g157473 = saturate( ( ( clampResult17_g157472 - temp_output_7_0_g157471 ) / ( temp_output_10_0_g157471 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157473 = ( temp_output_6_0_g157473 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157473 = temp_output_6_0_g157473;
				#endif
				half Occlusion_Mask82_g157466 = staticSwitch14_g157473;
				float3 lerpResult75_g157466 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g157466);
				float3 lerpResult186_g157466 = lerp( Visual_Albedo127_g157466 , ( Visual_Albedo127_g157466 * lerpResult75_g157466 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g157466 = lerpResult186_g157466;
				#else
				float3 staticSwitch171_g157466 = Visual_Albedo127_g157466;
				#endif
				half3 Final_Albedo160_g157466 = staticSwitch171_g157466;
				float3 In_Albedo3_g157468 = Final_Albedo160_g157466;
				float2 In_NormalTS3_g157468 = Out_NormalTS4_g157467;
				float3 In_NormalWS3_g157468 = Out_NormalWS4_g157467;
				float4 In_Shader3_g157468 = Out_Shader4_g157467;
				float4 In_Emissive3_g157468 = Out_Emissive4_g157467;
				float3 temp_output_3_0_g157470 = Final_Albedo160_g157466;
				float dotResult20_g157470 = dot( temp_output_3_0_g157470 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157466 = dotResult20_g157470;
				float In_Grayscale3_g157468 = Final_Grayscale164_g157466;
				float clampResult180_g157466 = clamp( saturate( ( Final_Grayscale164_g157466 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g157466 = clampResult180_g157466;
				float In_Luminosity3_g157468 = Final_Shading181_g157466;
				float In_MultiMask3_g157468 = Out_MultiMask4_g157467;
				float In_AlphaClip3_g157468 = Out_AlphaClip4_g157467;
				float In_AlphaFade3_g157468 = Out_AlphaFade4_g157467;
				float3 In_Translucency3_g157468 = Out_Translucency4_g157467;
				float In_Transmission3_g157468 = Out_Transmission4_g157467;
				float In_Thickness3_g157468 = Out_Thickness4_g157467;
				float In_Diffusion3_g157468 = Out_Diffusion4_g157467;
				{
				Data3_g157468.Dummy = In_Dummy3_g157468;
				Data3_g157468.Albedo = In_Albedo3_g157468;
				Data3_g157468.NormalTS = In_NormalTS3_g157468;
				Data3_g157468.NormalWS = In_NormalWS3_g157468;
				Data3_g157468.Shader = In_Shader3_g157468;
				Data3_g157468.Emissive= In_Emissive3_g157468;
				Data3_g157468.MultiMask = In_MultiMask3_g157468;
				Data3_g157468.Grayscale = In_Grayscale3_g157468;
				Data3_g157468.Luminosity = In_Luminosity3_g157468;
				Data3_g157468.AlphaClip = In_AlphaClip3_g157468;
				Data3_g157468.AlphaFade = In_AlphaFade3_g157468;
				Data3_g157468.Translucency = In_Translucency3_g157468;
				Data3_g157468.Transmission = In_Transmission3_g157468;
				Data3_g157468.Thickness = In_Thickness3_g157468;
				Data3_g157468.Diffusion = In_Diffusion3_g157468;
				}
				TVEVisualData Data4_g157479 = Data3_g157468;
				float Out_Dummy4_g157479 = 0;
				float3 Out_Albedo4_g157479 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157479 = float2( 0,0 );
				float3 Out_NormalWS4_g157479 = float3( 0,0,0 );
				float4 Out_Shader4_g157479 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157479 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157479 = 0;
				float Out_Grayscale4_g157479 = 0;
				float Out_Luminosity4_g157479 = 0;
				float Out_AlphaClip4_g157479 = 0;
				float Out_AlphaFade4_g157479 = 0;
				float3 Out_Translucency4_g157479 = float3( 0,0,0 );
				float Out_Transmission4_g157479 = 0;
				float Out_Thickness4_g157479 = 0;
				float Out_Diffusion4_g157479 = 0;
				{
				Out_Dummy4_g157479 = Data4_g157479.Dummy;
				Out_Albedo4_g157479 = Data4_g157479.Albedo;
				Out_NormalTS4_g157479 = Data4_g157479.NormalTS;
				Out_NormalWS4_g157479 = Data4_g157479.NormalWS;
				Out_Shader4_g157479 = Data4_g157479.Shader;
				Out_Emissive4_g157479= Data4_g157479.Emissive;
				Out_MultiMask4_g157479 = Data4_g157479.MultiMask;
				Out_Grayscale4_g157479 = Data4_g157479.Grayscale;
				Out_Luminosity4_g157479= Data4_g157479.Luminosity;
				Out_AlphaClip4_g157479 = Data4_g157479.AlphaClip;
				Out_AlphaFade4_g157479 = Data4_g157479.AlphaFade;
				Out_Translucency4_g157479 = Data4_g157479.Translucency;
				Out_Transmission4_g157479 = Data4_g157479.Transmission;
				Out_Thickness4_g157479 = Data4_g157479.Thickness;
				Out_Diffusion4_g157479 = Data4_g157479.Diffusion;
				}
				half3 Visual_Albedo127_g157476 = Out_Albedo4_g157479;
				float temp_output_162_11_g157476 = Out_MultiMask4_g157479;
				half Visual_MultiMask196_g157476 = temp_output_162_11_g157476;
				float lerpResult190_g157476 = lerp( 1.0 , Visual_MultiMask196_g157476 , _GradientMultiValue);
				half Gradient_MultiMask194_g157476 = lerpResult190_g157476;
				TVEModelData Data15_g157477 = Data16_g157339;
				float Out_Dummy15_g157477 = 0;
				float3 Out_PositionOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157477 = float3( 0,0,0 );
				float4 Out_VertexData15_g157477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157477 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157477 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157477 = Data15_g157477.Dummy;
				Out_PositionOS15_g157477 = Data15_g157477.PositionOS;
				Out_PositionWS15_g157477 = Data15_g157477.PositionWS;
				Out_PositionWO15_g157477 = Data15_g157477.PositionWO;
				Out_PositionRawOS15_g157477 = Data15_g157477.PositionRawOS;
				Out_PositionAddOS15_g157477 = Data15_g157477.PositionAddOS;
				Out_PivotOS15_g157477 = Data15_g157477.PivotOS;
				Out_PivotWS15_g157477 = Data15_g157477.PivotWS;
				Out_PivotWO15_g157477 = Data15_g157477.PivotWO;
				Out_NormalOS15_g157477 = Data15_g157477.NormalOS;
				Out_NormalWS15_g157477 = Data15_g157477.NormalWS;
				Out_NormalRawOS15_g157477 = Data15_g157477.NormalRawOS;
				Out_NormalRawWS15_g157477 = Data15_g157477.NormalRawWS;
				Out_TangentOS15_g157477 = Data15_g157477.TangentOS;
				Out_ViewDirWS15_g157477 = Data15_g157477.ViewDirWS;
				Out_VertexData15_g157477 = Data15_g157477.VertexData;
				Out_MotionData15_g157477 = Data15_g157477.MotionData;
				Out_BoundsData15_g157477 = Data15_g157477.BoundsData;
				Out_RotationData15_g157477 = Data15_g157477.RotationData;
				Out_FragmentData15_g157477 = Data15_g157477.FragmentData;
				}
				half4 Model_VertexData224_g157476 = Out_VertexData15_g157477;
				float4 break226_g157476 = Model_VertexData224_g157476;
				float4 break33_g157478 = _gradient_vert_mode;
				float temp_output_30_0_g157478 = ( break226_g157476.x * break33_g157478.x );
				float temp_output_29_0_g157478 = ( break226_g157476.y * break33_g157478.y );
				float temp_output_31_0_g157478 = ( break226_g157476.z * break33_g157478.z );
				float temp_output_28_0_g157478 = ( temp_output_30_0_g157478 + temp_output_29_0_g157478 + temp_output_31_0_g157478 + ( break226_g157476.w * break33_g157478.w ) );
				float temp_output_211_0_g157476 = temp_output_28_0_g157478;
				float clampResult17_g157483 = clamp( temp_output_211_0_g157476 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157484 = _GradientMeshRemap.x;
				float temp_output_10_0_g157484 = ( _GradientMeshRemap.y - temp_output_7_0_g157484 );
				float temp_output_6_0_g157485 = saturate( ( ( clampResult17_g157483 - temp_output_7_0_g157484 ) / ( temp_output_10_0_g157484 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157485 = ( temp_output_6_0_g157485 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157485 = temp_output_6_0_g157485;
				#endif
				half Gradient_VertMask82_g157476 = staticSwitch14_g157485;
				half Gradient_Mask200_g157476 = ( Gradient_MultiMask194_g157476 * Gradient_VertMask82_g157476 );
				float3 lerpResult75_g157476 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g157476);
				float3 lerpResult186_g157476 = lerp( Visual_Albedo127_g157476 , ( Visual_Albedo127_g157476 * lerpResult75_g157476 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g157476 = lerpResult186_g157476;
				#else
				float3 staticSwitch171_g157476 = Visual_Albedo127_g157476;
				#endif
				half3 Final_Albedo160_g157476 = staticSwitch171_g157476;
				float3 In_Albedo3_g157480 = Final_Albedo160_g157476;
				float2 In_NormalTS3_g157480 = Out_NormalTS4_g157479;
				float3 In_NormalWS3_g157480 = Out_NormalWS4_g157479;
				float4 In_Shader3_g157480 = Out_Shader4_g157479;
				float4 In_Emissive3_g157480 = Out_Emissive4_g157479;
				float3 temp_output_3_0_g157481 = Final_Albedo160_g157476;
				float dotResult20_g157481 = dot( temp_output_3_0_g157481 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157476 = dotResult20_g157481;
				float In_Grayscale3_g157480 = Final_Grayscale164_g157476;
				float clampResult180_g157476 = clamp( saturate( ( Final_Grayscale164_g157476 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g157476 = clampResult180_g157476;
				float In_Luminosity3_g157480 = Final_Luminosity181_g157476;
				float In_MultiMask3_g157480 = temp_output_162_11_g157476;
				float In_AlphaClip3_g157480 = Out_AlphaClip4_g157479;
				float In_AlphaFade3_g157480 = Out_AlphaFade4_g157479;
				float3 In_Translucency3_g157480 = Out_Translucency4_g157479;
				float In_Transmission3_g157480 = Out_Transmission4_g157479;
				float In_Thickness3_g157480 = Out_Thickness4_g157479;
				float In_Diffusion3_g157480 = Out_Diffusion4_g157479;
				{
				Data3_g157480.Dummy = In_Dummy3_g157480;
				Data3_g157480.Albedo = In_Albedo3_g157480;
				Data3_g157480.NormalTS = In_NormalTS3_g157480;
				Data3_g157480.NormalWS = In_NormalWS3_g157480;
				Data3_g157480.Shader = In_Shader3_g157480;
				Data3_g157480.Emissive= In_Emissive3_g157480;
				Data3_g157480.MultiMask = In_MultiMask3_g157480;
				Data3_g157480.Grayscale = In_Grayscale3_g157480;
				Data3_g157480.Luminosity = In_Luminosity3_g157480;
				Data3_g157480.AlphaClip = In_AlphaClip3_g157480;
				Data3_g157480.AlphaFade = In_AlphaFade3_g157480;
				Data3_g157480.Translucency = In_Translucency3_g157480;
				Data3_g157480.Transmission = In_Transmission3_g157480;
				Data3_g157480.Thickness = In_Thickness3_g157480;
				Data3_g157480.Diffusion = In_Diffusion3_g157480;
				}
				TVEVisualData Data4_g157487 = Data3_g157480;
				float Out_Dummy4_g157487 = 0;
				float3 Out_Albedo4_g157487 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157487 = float2( 0,0 );
				float3 Out_NormalWS4_g157487 = float3( 0,0,0 );
				float4 Out_Shader4_g157487 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157487 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157487 = 0;
				float Out_Grayscale4_g157487 = 0;
				float Out_Luminosity4_g157487 = 0;
				float Out_AlphaClip4_g157487 = 0;
				float Out_AlphaFade4_g157487 = 0;
				float3 Out_Translucency4_g157487 = float3( 0,0,0 );
				float Out_Transmission4_g157487 = 0;
				float Out_Thickness4_g157487 = 0;
				float Out_Diffusion4_g157487 = 0;
				{
				Out_Dummy4_g157487 = Data4_g157487.Dummy;
				Out_Albedo4_g157487 = Data4_g157487.Albedo;
				Out_NormalTS4_g157487 = Data4_g157487.NormalTS;
				Out_NormalWS4_g157487 = Data4_g157487.NormalWS;
				Out_Shader4_g157487 = Data4_g157487.Shader;
				Out_Emissive4_g157487= Data4_g157487.Emissive;
				Out_MultiMask4_g157487 = Data4_g157487.MultiMask;
				Out_Grayscale4_g157487 = Data4_g157487.Grayscale;
				Out_Luminosity4_g157487= Data4_g157487.Luminosity;
				Out_AlphaClip4_g157487 = Data4_g157487.AlphaClip;
				Out_AlphaFade4_g157487 = Data4_g157487.AlphaFade;
				Out_Translucency4_g157487 = Data4_g157487.Translucency;
				Out_Transmission4_g157487 = Data4_g157487.Transmission;
				Out_Thickness4_g157487 = Data4_g157487.Thickness;
				Out_Diffusion4_g157487 = Data4_g157487.Diffusion;
				}
				half3 Visual_Albedo127_g157486 = Out_Albedo4_g157487;
				float vertexToFrag203_g157486 = IN.ase_texcoord9.z;
				float clampResult208_g157486 = clamp( vertexToFrag203_g157486 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g157486 = ( Visual_Albedo127_g157486 + ( ( Visual_Albedo127_g157486 * Visual_Albedo127_g157486 * 200.0 * _motion_highlight_color ) * clampResult208_g157486 ) );
				#else
				float3 staticSwitch209_g157486 = Visual_Albedo127_g157486;
				#endif
				half3 Final_Albedo160_g157486 = staticSwitch209_g157486;
				float3 In_Albedo3_g157489 = Final_Albedo160_g157486;
				float2 In_NormalTS3_g157489 = Out_NormalTS4_g157487;
				float3 In_NormalWS3_g157489 = Out_NormalWS4_g157487;
				float4 In_Shader3_g157489 = Out_Shader4_g157487;
				float4 In_Emissive3_g157489 = Out_Emissive4_g157487;
				float In_Grayscale3_g157489 = Out_Grayscale4_g157487;
				float In_Luminosity3_g157489 = Out_Luminosity4_g157487;
				float In_MultiMask3_g157489 = Out_MultiMask4_g157487;
				float In_AlphaClip3_g157489 = Out_AlphaClip4_g157487;
				float In_AlphaFade3_g157489 = Out_AlphaFade4_g157487;
				float3 In_Translucency3_g157489 = Out_Translucency4_g157487;
				float In_Transmission3_g157489 = Out_Transmission4_g157487;
				float In_Thickness3_g157489 = Out_Thickness4_g157487;
				float In_Diffusion3_g157489 = Out_Diffusion4_g157487;
				{
				Data3_g157489.Dummy = In_Dummy3_g157489;
				Data3_g157489.Albedo = In_Albedo3_g157489;
				Data3_g157489.NormalTS = In_NormalTS3_g157489;
				Data3_g157489.NormalWS = In_NormalWS3_g157489;
				Data3_g157489.Shader = In_Shader3_g157489;
				Data3_g157489.Emissive= In_Emissive3_g157489;
				Data3_g157489.MultiMask = In_MultiMask3_g157489;
				Data3_g157489.Grayscale = In_Grayscale3_g157489;
				Data3_g157489.Luminosity = In_Luminosity3_g157489;
				Data3_g157489.AlphaClip = In_AlphaClip3_g157489;
				Data3_g157489.AlphaFade = In_AlphaFade3_g157489;
				Data3_g157489.Translucency = In_Translucency3_g157489;
				Data3_g157489.Transmission = In_Transmission3_g157489;
				Data3_g157489.Thickness = In_Thickness3_g157489;
				Data3_g157489.Diffusion = In_Diffusion3_g157489;
				}
				TVEVisualData Data4_g157834 = Data3_g157489;
				float Out_Dummy4_g157834 = 0;
				float3 Out_Albedo4_g157834 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157834 = float2( 0,0 );
				float3 Out_NormalWS4_g157834 = float3( 0,0,0 );
				float4 Out_Shader4_g157834 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157834 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157834 = 0;
				float Out_Grayscale4_g157834 = 0;
				float Out_Luminosity4_g157834 = 0;
				float Out_AlphaClip4_g157834 = 0;
				float Out_AlphaFade4_g157834 = 0;
				float3 Out_Translucency4_g157834 = float3( 0,0,0 );
				float Out_Transmission4_g157834 = 0;
				float Out_Thickness4_g157834 = 0;
				float Out_Diffusion4_g157834 = 0;
				{
				Out_Dummy4_g157834 = Data4_g157834.Dummy;
				Out_Albedo4_g157834 = Data4_g157834.Albedo;
				Out_NormalTS4_g157834 = Data4_g157834.NormalTS;
				Out_NormalWS4_g157834 = Data4_g157834.NormalWS;
				Out_Shader4_g157834 = Data4_g157834.Shader;
				Out_Emissive4_g157834= Data4_g157834.Emissive;
				Out_MultiMask4_g157834 = Data4_g157834.MultiMask;
				Out_Grayscale4_g157834 = Data4_g157834.Grayscale;
				Out_Luminosity4_g157834= Data4_g157834.Luminosity;
				Out_AlphaClip4_g157834 = Data4_g157834.AlphaClip;
				Out_AlphaFade4_g157834 = Data4_g157834.AlphaFade;
				Out_Translucency4_g157834 = Data4_g157834.Translucency;
				Out_Transmission4_g157834 = Data4_g157834.Transmission;
				Out_Thickness4_g157834 = Data4_g157834.Thickness;
				Out_Diffusion4_g157834 = Data4_g157834.Diffusion;
				}
				half3 Visual_Albedo127_g157833 = Out_Albedo4_g157834;
				float3 temp_output_622_0_g157833 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler238_g157837 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157840 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157840 = ( temp_output_6_0_g157840 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157840 = temp_output_6_0_g157840;
				#endif
				half4 Overlay_Coords639_g157833 = staticSwitch14_g157840;
				float4 temp_output_37_0_g157837 = Overlay_Coords639_g157833;
				half4 Coords238_g157837 = temp_output_37_0_g157837;
				TVEModelData Data15_g157841 = Data16_g157339;
				float Out_Dummy15_g157841 = 0;
				float3 Out_PositionOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157841 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157841 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157841 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157841 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157841 = float3( 0,0,0 );
				float4 Out_VertexData15_g157841 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157841 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157841 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157841 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157841 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157841 = Data15_g157841.Dummy;
				Out_PositionOS15_g157841 = Data15_g157841.PositionOS;
				Out_PositionWS15_g157841 = Data15_g157841.PositionWS;
				Out_PositionWO15_g157841 = Data15_g157841.PositionWO;
				Out_PositionRawOS15_g157841 = Data15_g157841.PositionRawOS;
				Out_PositionAddOS15_g157841 = Data15_g157841.PositionAddOS;
				Out_PivotOS15_g157841 = Data15_g157841.PivotOS;
				Out_PivotWS15_g157841 = Data15_g157841.PivotWS;
				Out_PivotWO15_g157841 = Data15_g157841.PivotWO;
				Out_NormalOS15_g157841 = Data15_g157841.NormalOS;
				Out_NormalWS15_g157841 = Data15_g157841.NormalWS;
				Out_NormalRawOS15_g157841 = Data15_g157841.NormalRawOS;
				Out_NormalRawWS15_g157841 = Data15_g157841.NormalRawWS;
				Out_TangentOS15_g157841 = Data15_g157841.TangentOS;
				Out_ViewDirWS15_g157841 = Data15_g157841.ViewDirWS;
				Out_VertexData15_g157841 = Data15_g157841.VertexData;
				Out_MotionData15_g157841 = Data15_g157841.MotionData;
				Out_BoundsData15_g157841 = Data15_g157841.BoundsData;
				Out_RotationData15_g157841 = Data15_g157841.RotationData;
				Out_FragmentData15_g157841 = Data15_g157841.FragmentData;
				}
				half3 Model_PositionWO602_g157833 = Out_PositionWO15_g157841;
				float3 temp_output_279_0_g157837 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157837 = temp_output_279_0_g157837;
				half4 localSamplePlanar2D238_g157837 = SamplePlanar2D( Texture238_g157837 , Sampler238_g157837 , Coords238_g157837 , WorldPosition238_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler246_g157837 = sampler_Linear_Repeat;
				half4 Coords246_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition246_g157837 = temp_output_279_0_g157837;
				half3 Model_NormalWS712_g157833 = Out_NormalWS15_g157841;
				float3 temp_output_280_0_g157837 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157837 = temp_output_280_0_g157837;
				half4 localSamplePlanar3D246_g157837 = SamplePlanar3D( Texture246_g157837 , Sampler246_g157837 , Coords246_g157837 , WorldPosition246_g157837 , WorldNormal246_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler234_g157837 = sampler_Linear_Repeat;
				float4 Coords234_g157837 = temp_output_37_0_g157837;
				float3 WorldPosition234_g157837 = temp_output_279_0_g157837;
				float4 localSampleStochastic2D234_g157837 = SampleStochastic2D( Texture234_g157837 , Sampler234_g157837 , Coords234_g157837 , WorldPosition234_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler263_g157837 = sampler_Linear_Repeat;
				half4 Coords263_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition263_g157837 = temp_output_279_0_g157837;
				half3 WorldNormal263_g157837 = temp_output_280_0_g157837;
				half4 localSampleStochastic3D263_g157837 = SampleStochastic3D( Texture263_g157837 , Sampler263_g157837 , Coords263_g157837 , WorldPosition263_g157837 , WorldNormal263_g157837 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g157833 = localSamplePlanar3D246_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g157833 = localSampleStochastic2D234_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g157833 = localSampleStochastic3D263_g157837;
				#else
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#endif
				half3 Overlay_Albedo526_g157833 = (staticSwitch676_g157833).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g157833 = ( temp_output_622_0_g157833 * Overlay_Albedo526_g157833 );
				#else
				float3 staticSwitch578_g157833 = temp_output_622_0_g157833;
				#endif
				float3 temp_output_6_0_g157856 = staticSwitch578_g157833;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157856 = ( temp_output_6_0_g157856 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g157856 = temp_output_6_0_g157856;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157843) = _OverlayMaskTex;
				SamplerState Sampler276_g157843 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157844 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157844 = ( temp_output_6_0_g157844 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157844 = temp_output_6_0_g157844;
				#endif
				half4 Local_MaskCoords886_g157833 = staticSwitch14_g157844;
				float4 temp_output_37_0_g157843 = Local_MaskCoords886_g157833;
				half4 Coords276_g157843 = temp_output_37_0_g157843;
				half2 TexCoord276_g157843 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157843 = SampleMain( Texture276_g157843 , Sampler276_g157843 , Coords276_g157843 , TexCoord276_g157843 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157843) = _OverlayMaskTex;
				SamplerState Sampler275_g157843 = sampler_Linear_Repeat;
				half4 Coords275_g157843 = temp_output_37_0_g157843;
				float2 appendResult289_g157843 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157843 = appendResult289_g157843;
				#else
				float2 staticSwitch288_g157843 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157843 = staticSwitch288_g157843;
				half4 localSampleExtra275_g157843 = SampleExtra( Texture275_g157843 , Sampler275_g157843 , Coords275_g157843 , TexCoord275_g157843 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g157833 = localSampleExtra275_g157843;
				#else
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#endif
				half4 Local_MaskTex885_g157833 = staticSwitch894_g157833;
				float clampResult17_g157858 = clamp( (Local_MaskTex885_g157833).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157859 = _OverlayMaskRemap.x;
				float temp_output_10_0_g157859 = ( _OverlayMaskRemap.y - temp_output_7_0_g157859 );
				float lerpResult898_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157858 - temp_output_7_0_g157859 ) / ( temp_output_10_0_g157859 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g157833 = lerpResult898_g157833;
				#else
				float staticSwitch904_g157833 = 1.0;
				#endif
				half Overlay_TexMask906_g157833 = staticSwitch904_g157833;
				float3 temp_output_739_21_g157833 = Out_NormalWS4_g157834;
				half3 Visual_NormalWS749_g157833 = temp_output_739_21_g157833;
				float clampResult17_g157853 = clamp( saturate( (Visual_NormalWS749_g157833).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157852 = _OverlayProjRemap.x;
				float temp_output_10_0_g157852 = ( _OverlayProjRemap.y - temp_output_7_0_g157852 );
				float lerpResult842_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157853 - temp_output_7_0_g157852 ) / ( temp_output_10_0_g157852 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g157833 = lerpResult842_g157833;
				#else
				float staticSwitch734_g157833 = 1.0;
				#endif
				half Overlay_MaskProj457_g157833 = staticSwitch734_g157833;
				float temp_output_739_15_g157833 = Out_Luminosity4_g157834;
				half Visual_Luminosity654_g157833 = temp_output_739_15_g157833;
				float clampResult17_g157855 = clamp( Visual_Luminosity654_g157833 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157854 = _OverlayLumaRemap.x;
				float temp_output_10_0_g157854 = ( _OverlayLumaRemap.y - temp_output_7_0_g157854 );
				float lerpResult587_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157855 - temp_output_7_0_g157854 ) / ( temp_output_10_0_g157854 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g157833 = lerpResult587_g157833;
				half4 Model_VertexMasks791_g157833 = Out_VertexData15_g157841;
				float4 break792_g157833 = Model_VertexMasks791_g157833;
				float4 break33_g157845 = _overlay_vert_mode;
				float temp_output_30_0_g157845 = ( break792_g157833.x * break33_g157845.x );
				float temp_output_29_0_g157845 = ( break792_g157833.y * break33_g157845.y );
				float temp_output_31_0_g157845 = ( break792_g157833.z * break33_g157845.z );
				float temp_output_28_0_g157845 = ( temp_output_30_0_g157845 + temp_output_29_0_g157845 + temp_output_31_0_g157845 + ( break792_g157833.w * break33_g157845.w ) );
				float clampResult17_g157846 = clamp( temp_output_28_0_g157845 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157848 = _OverlayMeshRemap.x;
				float temp_output_10_0_g157848 = ( _OverlayMeshRemap.y - temp_output_7_0_g157848 );
				float lerpResult879_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157846 - temp_output_7_0_g157848 ) / ( temp_output_10_0_g157848 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g157857 = lerpResult879_g157833;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157857 = ( temp_output_6_0_g157857 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157857 = temp_output_6_0_g157857;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g157833 = staticSwitch14_g157857;
				#else
				float staticSwitch800_g157833 = 1.0;
				#endif
				half Overlay_VertMask801_g157833 = staticSwitch800_g157833;
				half Overlay_MaskNoise427_g157833 = 1.0;
				TVEGlobalData Data15_g157835 = Data204_g157340;
				float Out_Dummy15_g157835 = 0;
				float4 Out_CoatParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157835 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157835 = Data15_g157835.Dummy;
				Out_CoatParams15_g157835 = Data15_g157835.CoatParams;
				Out_PaintParams15_g157835 = Data15_g157835.PaintParams;
				Out_GlowParams15_g157835 = Data15_g157835.GlowParams;
				Out_AtmoParams15_g157835= Data15_g157835.AtmoParams;
				Out_FormParams15_g157835 = Data15_g157835.FormParams;
				Out_LandParams15_g157835 = Data15_g157835.LandParams;
				Out_WindParams15_g157835 = Data15_g157835.WindParams;
				Out_PushParams15_g157835 = Data15_g157835.PushParams;
				}
				half4 Global_AtmoParams516_g157833 = Out_AtmoParams15_g157835;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g157833 = (Global_AtmoParams516_g157833).z;
				#else
				float staticSwitch705_g157833 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g157833 = staticSwitch705_g157833;
				half Custom_Mask646_g157833 = 1.0;
				float temp_output_7_0_g157851 = 0.1;
				float temp_output_10_0_g157851 = ( 0.2 - temp_output_7_0_g157851 );
				half Overlay_Mask494_g157833 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g157833 * Overlay_MaskProj457_g157833 * Overlay_MaskLuma438_g157833 * Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 * Custom_Mask646_g157833 ) - temp_output_7_0_g157851 ) / ( temp_output_10_0_g157851 + 0.0001 ) ) );
				float3 lerpResult467_g157833 = lerp( Visual_Albedo127_g157833 , staticSwitch14_g157856 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g157833 = lerpResult467_g157833;
				#else
				float3 staticSwitch577_g157833 = Visual_Albedo127_g157833;
				#endif
				half3 Final_Albedo493_g157833 = staticSwitch577_g157833;
				float3 In_Albedo3_g157836 = Final_Albedo493_g157833;
				half2 Visual_NormalTS535_g157833 = Out_NormalTS4_g157834;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157842) = _OverlayNormalTex;
				SamplerState Sampler238_g157842 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157842 = Overlay_Coords639_g157833;
				half4 Coords238_g157842 = temp_output_37_0_g157842;
				float3 temp_output_279_0_g157842 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157842 = temp_output_279_0_g157842;
				half4 localSamplePlanar2D238_g157842 = SamplePlanar2D( Texture238_g157842 , Sampler238_g157842 , Coords238_g157842 , WorldPosition238_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157842) = _OverlayNormalTex;
				SamplerState Sampler246_g157842 = sampler_Linear_Repeat;
				half4 Coords246_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition246_g157842 = temp_output_279_0_g157842;
				float3 temp_output_280_0_g157842 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157842 = temp_output_280_0_g157842;
				half4 localSamplePlanar3D246_g157842 = SamplePlanar3D( Texture246_g157842 , Sampler246_g157842 , Coords246_g157842 , WorldPosition246_g157842 , WorldNormal246_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157842) = _OverlayNormalTex;
				SamplerState Sampler234_g157842 = sampler_Linear_Repeat;
				float4 Coords234_g157842 = temp_output_37_0_g157842;
				float3 WorldPosition234_g157842 = temp_output_279_0_g157842;
				float4 localSampleStochastic2D234_g157842 = SampleStochastic2D( Texture234_g157842 , Sampler234_g157842 , Coords234_g157842 , WorldPosition234_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157842) = _OverlayNormalTex;
				SamplerState Sampler263_g157842 = sampler_Linear_Repeat;
				half4 Coords263_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition263_g157842 = temp_output_279_0_g157842;
				half3 WorldNormal263_g157842 = temp_output_280_0_g157842;
				half4 localSampleStochastic3D263_g157842 = SampleStochastic3D( Texture263_g157842 , Sampler263_g157842 , Coords263_g157842 , WorldPosition263_g157842 , WorldNormal263_g157842 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g157833 = localSamplePlanar3D246_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g157833 = localSampleStochastic2D234_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g157833 = localSampleStochastic3D263_g157842;
				#else
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#endif
				half4 Normal_Packed45_g157839 = staticSwitch686_g157833;
				float2 appendResult58_g157839 = (float2(( (Normal_Packed45_g157839).x * (Normal_Packed45_g157839).w ) , (Normal_Packed45_g157839).y));
				half2 Normal_Default50_g157839 = appendResult58_g157839;
				half2 Normal_ASTC41_g157839 = (Normal_Packed45_g157839).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157839 = Normal_ASTC41_g157839;
				#else
				float2 staticSwitch38_g157839 = Normal_Default50_g157839;
				#endif
				half2 Normal_NO_DTX544_g157839 = (Normal_Packed45_g157839).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157839 = Normal_NO_DTX544_g157839;
				#else
				float2 staticSwitch37_g157839 = staticSwitch38_g157839;
				#endif
				half2 Normal_Planar45_g157838 = (staticSwitch37_g157839*2.0 + -1.0);
				float2 break71_g157838 = Normal_Planar45_g157838;
				float3 appendResult72_g157838 = (float3(break71_g157838.x , 0.0 , break71_g157838.y));
				half2 Overlay_Normal528_g157833 = (mul( ase_worldToTangent, appendResult72_g157838 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g157833 = Overlay_Normal528_g157833;
				#else
				float2 staticSwitch579_g157833 = Visual_NormalTS535_g157833;
				#endif
				float2 lerpResult551_g157833 = lerp( Visual_NormalTS535_g157833 , ( staticSwitch579_g157833 * _OverlayNormalValue ) , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g157833 = lerpResult551_g157833;
				#else
				float2 staticSwitch583_g157833 = Visual_NormalTS535_g157833;
				#endif
				half2 Final_NormalTS499_g157833 = staticSwitch583_g157833;
				float2 In_NormalTS3_g157836 = Final_NormalTS499_g157833;
				float3 In_NormalWS3_g157836 = temp_output_739_21_g157833;
				half4 Visual_Masks536_g157833 = Out_Shader4_g157834;
				float4 appendResult585_g157833 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g157833 = lerp( Visual_Masks536_g157833 , appendResult585_g157833 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g157833 = lerpResult584_g157833;
				#else
				float4 staticSwitch586_g157833 = Visual_Masks536_g157833;
				#endif
				half4 Final_Masks482_g157833 = staticSwitch586_g157833;
				float4 In_Shader3_g157836 = Final_Masks482_g157833;
				float4 In_Emissive3_g157836 = Out_Emissive4_g157834;
				float temp_output_739_12_g157833 = Out_Grayscale4_g157834;
				float In_Grayscale3_g157836 = temp_output_739_12_g157833;
				float In_Luminosity3_g157836 = temp_output_739_15_g157833;
				float In_MultiMask3_g157836 = Out_MultiMask4_g157834;
				float In_AlphaClip3_g157836 = Out_AlphaClip4_g157834;
				float In_AlphaFade3_g157836 = Out_AlphaFade4_g157834;
				float3 In_Translucency3_g157836 = Out_Translucency4_g157834;
				half Visual_Transmission699_g157833 = Out_Transmission4_g157834;
				float lerpResult746_g157833 = lerp( Visual_Transmission699_g157833 , ( Visual_Transmission699_g157833 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g157833 = lerpResult746_g157833;
				#else
				float staticSwitch703_g157833 = Visual_Transmission699_g157833;
				#endif
				half Final_Transmission702_g157833 = staticSwitch703_g157833;
				float In_Transmission3_g157836 = Final_Transmission702_g157833;
				float In_Thickness3_g157836 = Out_Thickness4_g157834;
				float In_Diffusion3_g157836 = Out_Diffusion4_g157834;
				{
				Data3_g157836.Dummy = In_Dummy3_g157836;
				Data3_g157836.Albedo = In_Albedo3_g157836;
				Data3_g157836.NormalTS = In_NormalTS3_g157836;
				Data3_g157836.NormalWS = In_NormalWS3_g157836;
				Data3_g157836.Shader = In_Shader3_g157836;
				Data3_g157836.Emissive= In_Emissive3_g157836;
				Data3_g157836.MultiMask = In_MultiMask3_g157836;
				Data3_g157836.Grayscale = In_Grayscale3_g157836;
				Data3_g157836.Luminosity = In_Luminosity3_g157836;
				Data3_g157836.AlphaClip = In_AlphaClip3_g157836;
				Data3_g157836.AlphaFade = In_AlphaFade3_g157836;
				Data3_g157836.Translucency = In_Translucency3_g157836;
				Data3_g157836.Transmission = In_Transmission3_g157836;
				Data3_g157836.Thickness = In_Thickness3_g157836;
				Data3_g157836.Diffusion = In_Diffusion3_g157836;
				}
				TVEVisualData Data4_g157871 = Data3_g157836;
				float Out_Dummy4_g157871 = 0;
				float3 Out_Albedo4_g157871 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157871 = float2( 0,0 );
				float3 Out_NormalWS4_g157871 = float3( 0,0,0 );
				float4 Out_Shader4_g157871 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157871 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157871 = 0;
				float Out_Grayscale4_g157871 = 0;
				float Out_Luminosity4_g157871 = 0;
				float Out_AlphaClip4_g157871 = 0;
				float Out_AlphaFade4_g157871 = 0;
				float3 Out_Translucency4_g157871 = float3( 0,0,0 );
				float Out_Transmission4_g157871 = 0;
				float Out_Thickness4_g157871 = 0;
				float Out_Diffusion4_g157871 = 0;
				{
				Out_Dummy4_g157871 = Data4_g157871.Dummy;
				Out_Albedo4_g157871 = Data4_g157871.Albedo;
				Out_NormalTS4_g157871 = Data4_g157871.NormalTS;
				Out_NormalWS4_g157871 = Data4_g157871.NormalWS;
				Out_Shader4_g157871 = Data4_g157871.Shader;
				Out_Emissive4_g157871= Data4_g157871.Emissive;
				Out_MultiMask4_g157871 = Data4_g157871.MultiMask;
				Out_Grayscale4_g157871 = Data4_g157871.Grayscale;
				Out_Luminosity4_g157871= Data4_g157871.Luminosity;
				Out_AlphaClip4_g157871 = Data4_g157871.AlphaClip;
				Out_AlphaFade4_g157871 = Data4_g157871.AlphaFade;
				Out_Translucency4_g157871 = Data4_g157871.Translucency;
				Out_Transmission4_g157871 = Data4_g157871.Transmission;
				Out_Thickness4_g157871 = Data4_g157871.Thickness;
				Out_Diffusion4_g157871 = Data4_g157871.Diffusion;
				}
				float3 temp_output_297_0_g157860 = Out_Albedo4_g157871;
				float3 In_Albedo3_g157872 = temp_output_297_0_g157860;
				float2 In_NormalTS3_g157872 = Out_NormalTS4_g157871;
				float3 In_NormalWS3_g157872 = Out_NormalWS4_g157871;
				float4 In_Shader3_g157872 = Out_Shader4_g157871;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g157860 = Out_Emissive4_g157871;
				TVEModelData Data15_g157861 = Data16_g157339;
				float Out_Dummy15_g157861 = 0;
				float3 Out_PositionOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157861 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157861 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157861 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157861 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157861 = float3( 0,0,0 );
				float4 Out_VertexData15_g157861 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157861 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157861 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157861 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157861 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157861 = Data15_g157861.Dummy;
				Out_PositionOS15_g157861 = Data15_g157861.PositionOS;
				Out_PositionWS15_g157861 = Data15_g157861.PositionWS;
				Out_PositionWO15_g157861 = Data15_g157861.PositionWO;
				Out_PositionRawOS15_g157861 = Data15_g157861.PositionRawOS;
				Out_PositionAddOS15_g157861 = Data15_g157861.PositionAddOS;
				Out_PivotOS15_g157861 = Data15_g157861.PivotOS;
				Out_PivotWS15_g157861 = Data15_g157861.PivotWS;
				Out_PivotWO15_g157861 = Data15_g157861.PivotWO;
				Out_NormalOS15_g157861 = Data15_g157861.NormalOS;
				Out_NormalWS15_g157861 = Data15_g157861.NormalWS;
				Out_NormalRawOS15_g157861 = Data15_g157861.NormalRawOS;
				Out_NormalRawWS15_g157861 = Data15_g157861.NormalRawWS;
				Out_TangentOS15_g157861 = Data15_g157861.TangentOS;
				Out_ViewDirWS15_g157861 = Data15_g157861.ViewDirWS;
				Out_VertexData15_g157861 = Data15_g157861.VertexData;
				Out_MotionData15_g157861 = Data15_g157861.MotionData;
				Out_BoundsData15_g157861 = Data15_g157861.BoundsData;
				Out_RotationData15_g157861 = Data15_g157861.RotationData;
				Out_FragmentData15_g157861 = Data15_g157861.FragmentData;
				}
				half4 Model_VertexMasks216_g157860 = Out_VertexData15_g157861;
				float4 break251_g157860 = Model_VertexMasks216_g157860;
				float4 break33_g157865 = _emissive_vert_mode;
				float temp_output_30_0_g157865 = ( break251_g157860.x * break33_g157865.x );
				float temp_output_29_0_g157865 = ( break251_g157860.y * break33_g157865.y );
				float temp_output_31_0_g157865 = ( break251_g157860.z * break33_g157865.z );
				float temp_output_28_0_g157865 = ( temp_output_30_0_g157865 + temp_output_29_0_g157865 + temp_output_31_0_g157865 + ( break251_g157860.w * break33_g157865.w ) );
				float clampResult17_g157864 = clamp( temp_output_28_0_g157865 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157868 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g157868 = ( _EmissiveMeshRemap.y - temp_output_7_0_g157868 );
				float lerpResult303_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157864 - temp_output_7_0_g157868 ) / ( temp_output_10_0_g157868 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g157874 = lerpResult303_g157860;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157874 = ( temp_output_6_0_g157874 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157874 = temp_output_6_0_g157874;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g157860 = staticSwitch14_g157874;
				#else
				float staticSwitch242_g157860 = 1.0;
				#endif
				half Emissive_MeshMask221_g157860 = staticSwitch242_g157860;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157863) = _EmissiveMaskTex;
				SamplerState Sampler276_g157863 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157869 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157869 = ( temp_output_6_0_g157869 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157869 = temp_output_6_0_g157869;
				#endif
				half4 Emissive_Coords167_g157860 = staticSwitch14_g157869;
				float4 temp_output_37_0_g157863 = Emissive_Coords167_g157860;
				half4 Coords276_g157863 = temp_output_37_0_g157863;
				half2 TexCoord276_g157863 = IN.ase_texcoord8.xy;
				half4 localSampleMain276_g157863 = SampleMain( Texture276_g157863 , Sampler276_g157863 , Coords276_g157863 , TexCoord276_g157863 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157863) = _EmissiveMaskTex;
				SamplerState Sampler275_g157863 = sampler_Linear_Repeat;
				half4 Coords275_g157863 = temp_output_37_0_g157863;
				float2 appendResult289_g157863 = (float2(IN.ase_texcoord10.z , IN.ase_texcoord10.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157863 = appendResult289_g157863;
				#else
				float2 staticSwitch288_g157863 = IN.ase_texcoord9.xy;
				#endif
				half2 TexCoord275_g157863 = staticSwitch288_g157863;
				half4 localSampleExtra275_g157863 = SampleExtra( Texture275_g157863 , Sampler275_g157863 , Coords275_g157863 , TexCoord275_g157863 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g157860 = localSampleExtra275_g157863;
				#else
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#endif
				half4 Emissive_MaskTex201_g157860 = staticSwitch176_g157860;
				float clampResult17_g157867 = clamp( (Emissive_MaskTex201_g157860).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g157866 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g157866 = ( _EmissiveMaskRemap.y - temp_output_7_0_g157866 );
				float lerpResult302_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157867 - temp_output_7_0_g157866 ) / ( temp_output_10_0_g157866 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g157860 = lerpResult302_g157860;
				#else
				float staticSwitch190_g157860 = 1.0;
				#endif
				half Emissive_Mask103_g157860 = staticSwitch190_g157860;
				float temp_output_279_0_g157860 = ( Emissive_MeshMask221_g157860 * Emissive_Mask103_g157860 );
				float3 appendResult293_g157860 = (float3(temp_output_279_0_g157860 , temp_output_279_0_g157860 , temp_output_279_0_g157860));
				half3 Local_EmissiveColor278_g157860 = appendResult293_g157860;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g157862 = Data204_g157340;
				float Out_Dummy15_g157862 = 0;
				float4 Out_CoatParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157862 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157862 = Data15_g157862.Dummy;
				Out_CoatParams15_g157862 = Data15_g157862.CoatParams;
				Out_PaintParams15_g157862 = Data15_g157862.PaintParams;
				Out_GlowParams15_g157862 = Data15_g157862.GlowParams;
				Out_AtmoParams15_g157862= Data15_g157862.AtmoParams;
				Out_FormParams15_g157862 = Data15_g157862.FormParams;
				Out_LandParams15_g157862 = Data15_g157862.LandParams;
				Out_WindParams15_g157862 = Data15_g157862.WindParams;
				Out_PushParams15_g157862 = Data15_g157862.PushParams;
				}
				half4 Global_GlowParams179_g157860 = Out_GlowParams15_g157862;
				float3 lerpResult299_g157860 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g157860).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g157860 = lerpResult299_g157860;
				#else
				float3 staticSwitch228_g157860 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g157860 = staticSwitch228_g157860;
				half3 Local_EmissiveValue88_g157860 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g157860 );
				half3 Emissive_Blend260_g157860 = ( ( (Visual_Emissive255_g157860).xyz * Local_EmissiveColor278_g157860 ) * Local_EmissiveValue88_g157860 );
				float3 temp_output_3_0_g157870 = Emissive_Blend260_g157860;
				float temp_output_15_0_g157870 = _emissive_power_value;
				float3 temp_output_23_0_g157870 = ( temp_output_3_0_g157870 * temp_output_15_0_g157870 );
				float4 appendResult295_g157860 = (float4(temp_output_23_0_g157870 , Emissive_Mask103_g157860));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g157860 = appendResult295_g157860;
				#else
				float4 staticSwitch129_g157860 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g157860 = staticSwitch129_g157860;
				float4 In_Emissive3_g157872 = Final_Emissive184_g157860;
				float In_Grayscale3_g157872 = Out_Grayscale4_g157871;
				float In_Luminosity3_g157872 = Out_Luminosity4_g157871;
				float temp_output_297_11_g157860 = Out_MultiMask4_g157871;
				float In_MultiMask3_g157872 = temp_output_297_11_g157860;
				float In_AlphaClip3_g157872 = Out_AlphaClip4_g157871;
				float In_AlphaFade3_g157872 = Out_AlphaFade4_g157871;
				float3 In_Translucency3_g157872 = Out_Translucency4_g157871;
				float In_Transmission3_g157872 = Out_Transmission4_g157871;
				float In_Thickness3_g157872 = Out_Thickness4_g157871;
				float In_Diffusion3_g157872 = Out_Diffusion4_g157871;
				{
				Data3_g157872.Dummy = In_Dummy3_g157872;
				Data3_g157872.Albedo = In_Albedo3_g157872;
				Data3_g157872.NormalTS = In_NormalTS3_g157872;
				Data3_g157872.NormalWS = In_NormalWS3_g157872;
				Data3_g157872.Shader = In_Shader3_g157872;
				Data3_g157872.Emissive= In_Emissive3_g157872;
				Data3_g157872.MultiMask = In_MultiMask3_g157872;
				Data3_g157872.Grayscale = In_Grayscale3_g157872;
				Data3_g157872.Luminosity = In_Luminosity3_g157872;
				Data3_g157872.AlphaClip = In_AlphaClip3_g157872;
				Data3_g157872.AlphaFade = In_AlphaFade3_g157872;
				Data3_g157872.Translucency = In_Translucency3_g157872;
				Data3_g157872.Transmission = In_Transmission3_g157872;
				Data3_g157872.Thickness = In_Thickness3_g157872;
				Data3_g157872.Diffusion = In_Diffusion3_g157872;
				}
				TVEVisualData Data4_g157882 = Data3_g157872;
				float Out_Dummy4_g157882 = 0;
				float3 Out_Albedo4_g157882 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157882 = float2( 0,0 );
				float3 Out_NormalWS4_g157882 = float3( 0,0,0 );
				float4 Out_Shader4_g157882 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157882 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157882 = 0;
				float Out_Grayscale4_g157882 = 0;
				float Out_Luminosity4_g157882 = 0;
				float Out_AlphaClip4_g157882 = 0;
				float Out_AlphaFade4_g157882 = 0;
				float3 Out_Translucency4_g157882 = float3( 0,0,0 );
				float Out_Transmission4_g157882 = 0;
				float Out_Thickness4_g157882 = 0;
				float Out_Diffusion4_g157882 = 0;
				{
				Out_Dummy4_g157882 = Data4_g157882.Dummy;
				Out_Albedo4_g157882 = Data4_g157882.Albedo;
				Out_NormalTS4_g157882 = Data4_g157882.NormalTS;
				Out_NormalWS4_g157882 = Data4_g157882.NormalWS;
				Out_Shader4_g157882 = Data4_g157882.Shader;
				Out_Emissive4_g157882= Data4_g157882.Emissive;
				Out_MultiMask4_g157882 = Data4_g157882.MultiMask;
				Out_Grayscale4_g157882 = Data4_g157882.Grayscale;
				Out_Luminosity4_g157882= Data4_g157882.Luminosity;
				Out_AlphaClip4_g157882 = Data4_g157882.AlphaClip;
				Out_AlphaFade4_g157882 = Data4_g157882.AlphaFade;
				Out_Translucency4_g157882 = Data4_g157882.Translucency;
				Out_Transmission4_g157882 = Data4_g157882.Transmission;
				Out_Thickness4_g157882 = Data4_g157882.Thickness;
				Out_Diffusion4_g157882 = Data4_g157882.Diffusion;
				}
				half3 Visual_Albedo199_g157881 = Out_Albedo4_g157882;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g157881 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g157881 );
				half Visual_Transmission138_g157881 = Out_Transmission4_g157882;
				half Subsurface_Value268_g157881 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g157885 = Data204_g157340;
				float Out_Dummy15_g157885 = 0;
				float4 Out_CoatParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157885 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157885 = Data15_g157885.Dummy;
				Out_CoatParams15_g157885 = Data15_g157885.CoatParams;
				Out_PaintParams15_g157885 = Data15_g157885.PaintParams;
				Out_GlowParams15_g157885 = Data15_g157885.GlowParams;
				Out_AtmoParams15_g157885= Data15_g157885.AtmoParams;
				Out_FormParams15_g157885 = Data15_g157885.FormParams;
				Out_LandParams15_g157885 = Data15_g157885.LandParams;
				Out_WindParams15_g157885 = Data15_g157885.WindParams;
				Out_PushParams15_g157885 = Data15_g157885.PushParams;
				}
				half4 Global_GlowParams373_g157881 = Out_GlowParams15_g157885;
				float lerpResult403_g157881 = lerp( 1.0 , saturate( (Global_GlowParams373_g157881).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g157881 = lerpResult403_g157881;
				#else
				float staticSwitch367_g157881 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g157881 = staticSwitch367_g157881;
				float temp_output_301_11_g157881 = Out_MultiMask4_g157882;
				half Visual_MultiMask292_g157881 = temp_output_301_11_g157881;
				float lerpResult293_g157881 = lerp( 1.0 , Visual_MultiMask292_g157881 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g157881 = lerpResult293_g157881;
				half Custom_Mask363_g157881 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g157881 = ( Visual_Transmission138_g157881 * Subsurface_Value268_g157881 * Subsurface_GlobalMask369_g157881 * Subsurface_MultiMask296_g157881 * Custom_Mask363_g157881 );
				#else
				float staticSwitch345_g157881 = 0.0;
				#endif
				half Final_Transmission269_g157881 = staticSwitch345_g157881;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g157881 = ( Subsurface_Color264_g157881 * Final_Transmission269_g157881 * 10.0 );
				#else
				float3 staticSwitch348_g157881 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g157881 = staticSwitch348_g157881;
				TVEModelData Data15_g157884 = Data16_g157339;
				float Out_Dummy15_g157884 = 0;
				float3 Out_PositionOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157884 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157884 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157884 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157884 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157884 = float3( 0,0,0 );
				float4 Out_VertexData15_g157884 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157884 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157884 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157884 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157884 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157884 = Data15_g157884.Dummy;
				Out_PositionOS15_g157884 = Data15_g157884.PositionOS;
				Out_PositionWS15_g157884 = Data15_g157884.PositionWS;
				Out_PositionWO15_g157884 = Data15_g157884.PositionWO;
				Out_PositionRawOS15_g157884 = Data15_g157884.PositionRawOS;
				Out_PositionAddOS15_g157884 = Data15_g157884.PositionAddOS;
				Out_PivotOS15_g157884 = Data15_g157884.PivotOS;
				Out_PivotWS15_g157884 = Data15_g157884.PivotWS;
				Out_PivotWO15_g157884 = Data15_g157884.PivotWO;
				Out_NormalOS15_g157884 = Data15_g157884.NormalOS;
				Out_NormalWS15_g157884 = Data15_g157884.NormalWS;
				Out_NormalRawOS15_g157884 = Data15_g157884.NormalRawOS;
				Out_NormalRawWS15_g157884 = Data15_g157884.NormalRawWS;
				Out_TangentOS15_g157884 = Data15_g157884.TangentOS;
				Out_ViewDirWS15_g157884 = Data15_g157884.ViewDirWS;
				Out_VertexData15_g157884 = Data15_g157884.VertexData;
				Out_MotionData15_g157884 = Data15_g157884.MotionData;
				Out_BoundsData15_g157884 = Data15_g157884.BoundsData;
				Out_RotationData15_g157884 = Data15_g157884.RotationData;
				Out_FragmentData15_g157884 = Data15_g157884.FragmentData;
				}
				half3 Model_ViewDirWS392_g157881 = Out_ViewDirWS15_g157884;
				float dotResult324_g157881 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g157881 );
				float saferPower323_g157881 = abs( saturate( dotResult324_g157881 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g157881 = 0.0;
				#else
				float staticSwitch330_g157881 = ( pow( saferPower323_g157881 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g157881 = staticSwitch330_g157881;
				float3 temp_output_6_0_g157886 = ( Final_Translucency254_g157881 * Mask_Subsurface_View320_g157881 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157886 = ( temp_output_6_0_g157886 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g157886 = temp_output_6_0_g157886;
				#endif
				half3 Subsurface_Approximation333_g157881 = staticSwitch14_g157886;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g157881 = ( Visual_Albedo199_g157881 + Subsurface_Approximation333_g157881 );
				#else
				float3 staticSwitch353_g157881 = Visual_Albedo199_g157881;
				#endif
				half3 Final_Albedo312_g157881 = staticSwitch353_g157881;
				float3 In_Albedo3_g157883 = Final_Albedo312_g157881;
				float2 In_NormalTS3_g157883 = Out_NormalTS4_g157882;
				float3 In_NormalWS3_g157883 = Out_NormalWS4_g157882;
				float4 In_Shader3_g157883 = Out_Shader4_g157882;
				float4 In_Emissive3_g157883 = Out_Emissive4_g157882;
				float In_Grayscale3_g157883 = Out_Grayscale4_g157882;
				float In_Luminosity3_g157883 = Out_Luminosity4_g157882;
				float In_MultiMask3_g157883 = temp_output_301_11_g157881;
				float In_AlphaClip3_g157883 = Out_AlphaClip4_g157882;
				float In_AlphaFade3_g157883 = Out_AlphaFade4_g157882;
				float3 In_Translucency3_g157883 = Final_Translucency254_g157881;
				float In_Transmission3_g157883 = Final_Transmission269_g157881;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g157881 = 0.0;
				#else
				float staticSwitch351_g157881 = 1.0;
				#endif
				half Final_Thickness275_g157881 = staticSwitch351_g157881;
				float In_Thickness3_g157883 = Final_Thickness275_g157881;
				float Final_Diffusion340_g157881 = _SubsurfaceDiffusion;
				float In_Diffusion3_g157883 = Final_Diffusion340_g157881;
				{
				Data3_g157883.Dummy = In_Dummy3_g157883;
				Data3_g157883.Albedo = In_Albedo3_g157883;
				Data3_g157883.NormalTS = In_NormalTS3_g157883;
				Data3_g157883.NormalWS = In_NormalWS3_g157883;
				Data3_g157883.Shader = In_Shader3_g157883;
				Data3_g157883.Emissive= In_Emissive3_g157883;
				Data3_g157883.MultiMask = In_MultiMask3_g157883;
				Data3_g157883.Grayscale = In_Grayscale3_g157883;
				Data3_g157883.Luminosity = In_Luminosity3_g157883;
				Data3_g157883.AlphaClip = In_AlphaClip3_g157883;
				Data3_g157883.AlphaFade = In_AlphaFade3_g157883;
				Data3_g157883.Translucency = In_Translucency3_g157883;
				Data3_g157883.Transmission = In_Transmission3_g157883;
				Data3_g157883.Thickness = In_Thickness3_g157883;
				Data3_g157883.Diffusion = In_Diffusion3_g157883;
				}
				TVEVisualData Data4_g157896 = Data3_g157883;
				float Out_Dummy4_g157896 = 0;
				float3 Out_Albedo4_g157896 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157896 = float2( 0,0 );
				float3 Out_NormalWS4_g157896 = float3( 0,0,0 );
				float4 Out_Shader4_g157896 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157896 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157896 = 0;
				float Out_Grayscale4_g157896 = 0;
				float Out_Luminosity4_g157896 = 0;
				float Out_AlphaClip4_g157896 = 0;
				float Out_AlphaFade4_g157896 = 0;
				float3 Out_Translucency4_g157896 = float3( 0,0,0 );
				float Out_Transmission4_g157896 = 0;
				float Out_Thickness4_g157896 = 0;
				float Out_Diffusion4_g157896 = 0;
				{
				Out_Dummy4_g157896 = Data4_g157896.Dummy;
				Out_Albedo4_g157896 = Data4_g157896.Albedo;
				Out_NormalTS4_g157896 = Data4_g157896.NormalTS;
				Out_NormalWS4_g157896 = Data4_g157896.NormalWS;
				Out_Shader4_g157896 = Data4_g157896.Shader;
				Out_Emissive4_g157896= Data4_g157896.Emissive;
				Out_MultiMask4_g157896 = Data4_g157896.MultiMask;
				Out_Grayscale4_g157896 = Data4_g157896.Grayscale;
				Out_Luminosity4_g157896= Data4_g157896.Luminosity;
				Out_AlphaClip4_g157896 = Data4_g157896.AlphaClip;
				Out_AlphaFade4_g157896 = Data4_g157896.AlphaFade;
				Out_Translucency4_g157896 = Data4_g157896.Translucency;
				Out_Transmission4_g157896 = Data4_g157896.Transmission;
				Out_Thickness4_g157896 = Data4_g157896.Thickness;
				Out_Diffusion4_g157896 = Data4_g157896.Diffusion;
				}
				half3 Input_Albedo24_g157895 = Out_Albedo4_g157896;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g157895 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g157895 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g157895 = staticSwitch22_g157895;
				float4 break24_g157890 = Out_Shader4_g157896;
				half Metallic95_g157890 = break24_g157890.x;
				half Input_Metallic25_g157895 = Metallic95_g157890;
				half OneMinusReflectivity31_g157895 = ( (ColorSpaceDielectricSpec23_g157895).w - ( (ColorSpaceDielectricSpec23_g157895).w * Input_Metallic25_g157895 ) );
				
				float3 appendResult23_g157890 = (float3(Out_NormalTS4_g157896 , 1.0));
				float3 temp_output_13_0_g157894 = appendResult23_g157890;
				float3 temp_output_33_0_g157894 = ( temp_output_13_0_g157894 * _render_normal );
				float3 switchResult12_g157894 = (((ase_vface>0)?(temp_output_13_0_g157894):(temp_output_33_0_g157894)));
				
				float3 lerpResult28_g157895 = lerp( (ColorSpaceDielectricSpec23_g157895).xyz , Input_Albedo24_g157895 , Input_Metallic25_g157895);
				half RenderSpec102_g157890 = _RenderSpecular;
				
				float localCustomAlphaClip19_g157897 = ( 0.0 );
				float temp_output_3_0_g157897 = Out_AlphaClip4_g157896;
				float Alpha19_g157897 = temp_output_3_0_g157897;
				float temp_output_15_0_g157897 = 0.0;
				float Treshold19_g157897 = temp_output_15_0_g157897;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#else
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g157895 * OneMinusReflectivity31_g157895 );
				o.Normal = switchResult12_g157894;
				o.Emission = (Out_Emissive4_g157896).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 1;
					o.Gloss = 1;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g157895 * RenderSpec102_g157890 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g157890.y;
					o.Smoothness = break24_g157890.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g157897 * Out_AlphaFade4_g157896 ) );
				float AlphaClipThreshold = 0.5;
				float3 BakedGI = 0;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = 0;
				gi.light.dir = half3(0,1,0);

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						outEmission = LightingBlinnPhong_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#else
						outEmission = LightingLambert_Deferred( o, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						outEmission = LightingStandardSpecular_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#else
						outEmission = LightingStandard_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#endif
				#endif

				#if defined(SHADOWS_SHADOWMASK) && (UNITY_ALLOWED_MRT_COUNT > 4)
					outShadowMask = UnityGetRawBakedOcclusions (IN.lmap.xy, float3(0, 0, 0));
				#endif
				#ifndef UNITY_HDR_ON
					outEmission.rgb = exp2(-outEmission.rgb);
				#endif
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float3 ase_normal : NORMAL;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _IsLiteShader;
			uniform half _IsStandardShader;
			uniform half _IsGeneralShader;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = v.vertex.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g154892 = ase_worldPos;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float4x4 break19_g154894 = unity_ObjectToWorld;
				float3 appendResult20_g154894 = (float3(break19_g154894[ 0 ][ 3 ] , break19_g154894[ 1 ][ 3 ] , break19_g154894[ 2 ][ 3 ]));
				half3 ObjectData20_g154896 = appendResult20_g154894;
				half3 WorldData19_g154896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154896 = WorldData19_g154896;
				#else
				float3 staticSwitch14_g154896 = ObjectData20_g154896;
				#endif
				float3 temp_output_124_0_g154894 = staticSwitch14_g154896;
				float3 temp_output_239_7_g154892 = temp_output_124_0_g154894;
				float4x4 break19_g154898 = unity_ObjectToWorld;
				float3 appendResult20_g154898 = (float3(break19_g154898[ 0 ][ 3 ] , break19_g154898[ 1 ][ 3 ] , break19_g154898[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 temp_output_122_0_g154898 = PivotOS149_g154892;
				float3 PivotsOnly105_g154898 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g154898 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g154900 = ( appendResult20_g154898 + PivotsOnly105_g154898 );
				half3 WorldData19_g154900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154900 = WorldData19_g154900;
				#else
				float3 staticSwitch14_g154900 = ObjectData20_g154900;
				#endif
				float3 temp_output_124_0_g154898 = staticSwitch14_g154900;
				float3 temp_output_237_7_g154892 = temp_output_124_0_g154898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#else
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#endif
				float3 vertexToFrag76_g154892 = staticSwitch236_g154892;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = v.normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = v.tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = v.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( v.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( v.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( v.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( v.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ), 0.0 );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157893 = Data16_g157339;
				float Out_Dummy15_g157893 = 0;
				float3 Out_PositionOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157893 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157893 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157893 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157893 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157893 = float3( 0,0,0 );
				float4 Out_VertexData15_g157893 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157893 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157893 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157893 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157893 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157893 = Data15_g157893.Dummy;
				Out_PositionOS15_g157893 = Data15_g157893.PositionOS;
				Out_PositionWS15_g157893 = Data15_g157893.PositionWS;
				Out_PositionWO15_g157893 = Data15_g157893.PositionWO;
				Out_PositionRawOS15_g157893 = Data15_g157893.PositionRawOS;
				Out_PositionAddOS15_g157893 = Data15_g157893.PositionAddOS;
				Out_PivotOS15_g157893 = Data15_g157893.PivotOS;
				Out_PivotWS15_g157893 = Data15_g157893.PivotWS;
				Out_PivotWO15_g157893 = Data15_g157893.PivotWO;
				Out_NormalOS15_g157893 = Data15_g157893.NormalOS;
				Out_NormalWS15_g157893 = Data15_g157893.NormalWS;
				Out_NormalRawOS15_g157893 = Data15_g157893.NormalRawOS;
				Out_NormalRawWS15_g157893 = Data15_g157893.NormalRawWS;
				Out_TangentOS15_g157893 = Data15_g157893.TangentOS;
				Out_ViewDirWS15_g157893 = Data15_g157893.ViewDirWS;
				Out_VertexData15_g157893 = Data15_g157893.VertexData;
				Out_MotionData15_g157893 = Data15_g157893.MotionData;
				Out_BoundsData15_g157893 = Data15_g157893.BoundsData;
				Out_RotationData15_g157893 = Data15_g157893.RotationData;
				Out_FragmentData15_g157893 = Data15_g157893.FragmentData;
				}
				float3 temp_output_31_0_g157890 = Out_PositionOS15_g157893;
				
				float4 temp_output_6_0_g157905 = Out_TangentOS15_g157893;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157905 = ( temp_output_6_0_g157905 + ( Dummy_Data978 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157905 = temp_output_6_0_g157905;
				#endif
				
				o.ase_texcoord7.xyz = vertexToFrag73_g154892;
				o.ase_texcoord8.xyz = vertexToFrag76_g154892;
				o.ase_texcoord10.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord11.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord12.xyz = ase_worldBitangent;
				TVEModelData Data15_g157488 = Data16_g157339;
				float Out_Dummy15_g157488 = 0;
				float3 Out_PositionOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157488 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157488 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157488 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157488 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157488 = float3( 0,0,0 );
				float4 Out_VertexData15_g157488 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157488 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157488 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157488 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157488 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157488 = Data15_g157488.Dummy;
				Out_PositionOS15_g157488 = Data15_g157488.PositionOS;
				Out_PositionWS15_g157488 = Data15_g157488.PositionWS;
				Out_PositionWO15_g157488 = Data15_g157488.PositionWO;
				Out_PositionRawOS15_g157488 = Data15_g157488.PositionRawOS;
				Out_PositionAddOS15_g157488 = Data15_g157488.PositionAddOS;
				Out_PivotOS15_g157488 = Data15_g157488.PivotOS;
				Out_PivotWS15_g157488 = Data15_g157488.PivotWS;
				Out_PivotWO15_g157488 = Data15_g157488.PivotWO;
				Out_NormalOS15_g157488 = Data15_g157488.NormalOS;
				Out_NormalWS15_g157488 = Data15_g157488.NormalWS;
				Out_NormalRawOS15_g157488 = Data15_g157488.NormalRawOS;
				Out_NormalRawWS15_g157488 = Data15_g157488.NormalRawWS;
				Out_TangentOS15_g157488 = Data15_g157488.TangentOS;
				Out_ViewDirWS15_g157488 = Data15_g157488.ViewDirWS;
				Out_VertexData15_g157488 = Data15_g157488.VertexData;
				Out_MotionData15_g157488 = Data15_g157488.MotionData;
				Out_BoundsData15_g157488 = Data15_g157488.BoundsData;
				Out_RotationData15_g157488 = Data15_g157488.RotationData;
				Out_FragmentData15_g157488 = Data15_g157488.FragmentData;
				}
				half4 Model_FragmentData196_g157486 = Out_FragmentData15_g157488;
				float vertexToFrag203_g157486 = (Model_FragmentData196_g157486).w;
				o.ase_texcoord4.z = vertexToFrag203_g157486;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord5 = v.texcoord1.xyzw;
				o.ase_texcoord6 = v.vertex;
				o.ase_texcoord9 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord10.w = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g157890 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g157893;
				v.tangent = staticSwitch14_g157905;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g157896 = ( 0.0 );
				float localCompData3_g157883 = ( 0.0 );
				TVEVisualData Data3_g157883 = (TVEVisualData)0;
				half Dummy145_g157881 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g157883 = Dummy145_g157881;
				float localBreakData4_g157882 = ( 0.0 );
				float localCompData3_g157872 = ( 0.0 );
				TVEVisualData Data3_g157872 = (TVEVisualData)0;
				half Dummy145_g157860 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g157872 = Dummy145_g157860;
				float localBreakData4_g157871 = ( 0.0 );
				float localCompData3_g157836 = ( 0.0 );
				TVEVisualData Data3_g157836 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord3.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g157833 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g157836 = Dummy594_g157833.r;
				float localBreakData4_g157834 = ( 0.0 );
				float localCompData3_g157489 = ( 0.0 );
				TVEVisualData Data3_g157489 = (TVEVisualData)0;
				float In_Dummy3_g157489 = 0.0;
				float localBreakData4_g157487 = ( 0.0 );
				float localCompData3_g157480 = ( 0.0 );
				TVEVisualData Data3_g157480 = (TVEVisualData)0;
				half Dummy220_g157476 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g157480 = Dummy220_g157476;
				float localBreakData4_g157479 = ( 0.0 );
				float localCompData3_g157468 = ( 0.0 );
				TVEVisualData Data3_g157468 = (TVEVisualData)0;
				half Dummy202_g157466 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g157468 = Dummy202_g157466;
				float localBreakData4_g157467 = ( 0.0 );
				float localCompData3_g157454 = ( 0.0 );
				TVEVisualData Data3_g157454 = (TVEVisualData)0;
				half4 Dummy944_g157436 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g157454 = Dummy944_g157436.x;
				float localBreakData4_g157453 = ( 0.0 );
				float localCompData3_g157416 = ( 0.0 );
				TVEVisualData Data3_g157416 = (TVEVisualData)0;
				half4 Dummy946_g157405 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g157416 = Dummy946_g157405.x;
				float localBreakData4_g157419 = ( 0.0 );
				float localCompData3_g157401 = ( 0.0 );
				TVEVisualData Data3_g157401 = (TVEVisualData)0;
				half4 Dummy130_g157391 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g157401 = Dummy130_g157391.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157402) = _MainAlbedoTex;
				SamplerState Sampler276_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g157391 = _main_coord_value;
				float4 temp_output_37_0_g157402 = Local_Coords180_g157391;
				half4 Coords276_g157402 = temp_output_37_0_g157402;
				half2 TexCoord276_g157402 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157402 = SampleMain( Texture276_g157402 , Sampler276_g157402 , Coords276_g157402 , TexCoord276_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157402) = _MainAlbedoTex;
				SamplerState Sampler275_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157402 = temp_output_37_0_g157402;
				float2 appendResult289_g157402 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157402 = appendResult289_g157402;
				#else
				float2 staticSwitch288_g157402 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157402 = staticSwitch288_g157402;
				half4 localSampleExtra275_g157402 = SampleExtra( Texture275_g157402 , Sampler275_g157402 , Coords275_g157402 , TexCoord275_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157402) = _MainAlbedoTex;
				SamplerState Sampler238_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157402 = temp_output_37_0_g157402;
				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = IN.ase_texcoord6.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 vertexToFrag73_g154892 = IN.ase_texcoord7.xyz;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float3 vertexToFrag76_g154892 = IN.ase_texcoord8.xyz;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(IN.ase_texcoord9.x , 0.0 , IN.ase_texcoord9.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = IN.ase_normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = IN.ase_texcoord10.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = IN.ase_tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = IN.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( IN.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( IN.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( IN.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( IN.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = IN.ase_texcoord3.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ) );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157392 = Data16_g157339;
				float Out_Dummy15_g157392 = 0;
				float3 Out_PositionOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157392 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157392 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157392 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157392 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157392 = float3( 0,0,0 );
				float4 Out_VertexData15_g157392 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157392 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157392 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157392 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157392 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157392 = Data15_g157392.Dummy;
				Out_PositionOS15_g157392 = Data15_g157392.PositionOS;
				Out_PositionWS15_g157392 = Data15_g157392.PositionWS;
				Out_PositionWO15_g157392 = Data15_g157392.PositionWO;
				Out_PositionRawOS15_g157392 = Data15_g157392.PositionRawOS;
				Out_PositionAddOS15_g157392 = Data15_g157392.PositionAddOS;
				Out_PivotOS15_g157392 = Data15_g157392.PivotOS;
				Out_PivotWS15_g157392 = Data15_g157392.PivotWS;
				Out_PivotWO15_g157392 = Data15_g157392.PivotWO;
				Out_NormalOS15_g157392 = Data15_g157392.NormalOS;
				Out_NormalWS15_g157392 = Data15_g157392.NormalWS;
				Out_NormalRawOS15_g157392 = Data15_g157392.NormalRawOS;
				Out_NormalRawWS15_g157392 = Data15_g157392.NormalRawWS;
				Out_TangentOS15_g157392 = Data15_g157392.TangentOS;
				Out_ViewDirWS15_g157392 = Data15_g157392.ViewDirWS;
				Out_VertexData15_g157392 = Data15_g157392.VertexData;
				Out_MotionData15_g157392 = Data15_g157392.MotionData;
				Out_BoundsData15_g157392 = Data15_g157392.BoundsData;
				Out_RotationData15_g157392 = Data15_g157392.RotationData;
				Out_FragmentData15_g157392 = Data15_g157392.FragmentData;
				}
				half3 Model_PositionWO222_g157391 = Out_PositionWO15_g157392;
				float3 temp_output_279_0_g157402 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157402 = temp_output_279_0_g157402;
				half4 localSamplePlanar2D238_g157402 = SamplePlanar2D( Texture238_g157402 , Sampler238_g157402 , Coords238_g157402 , WorldPosition238_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157402) = _MainAlbedoTex;
				SamplerState Sampler246_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition246_g157402 = temp_output_279_0_g157402;
				half3 Model_NormalWS226_g157391 = Out_NormalWS15_g157392;
				float3 temp_output_280_0_g157402 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157402 = temp_output_280_0_g157402;
				half4 localSamplePlanar3D246_g157402 = SamplePlanar3D( Texture246_g157402 , Sampler246_g157402 , Coords246_g157402 , WorldPosition246_g157402 , WorldNormal246_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157402) = _MainAlbedoTex;
				SamplerState Sampler234_g157402 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157402 = temp_output_37_0_g157402;
				float3 WorldPosition234_g157402 = temp_output_279_0_g157402;
				float4 localSampleStochastic2D234_g157402 = SampleStochastic2D( Texture234_g157402 , Sampler234_g157402 , Coords234_g157402 , WorldPosition234_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157402) = _MainAlbedoTex;
				SamplerState Sampler263_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition263_g157402 = temp_output_279_0_g157402;
				half3 WorldNormal263_g157402 = temp_output_280_0_g157402;
				half4 localSampleStochastic3D263_g157402 = SampleStochastic3D( Texture263_g157402 , Sampler263_g157402 , Coords263_g157402 , WorldPosition263_g157402 , WorldNormal263_g157402 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g157391 = localSampleExtra275_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g157391 = localSamplePlanar2D238_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g157391 = localSamplePlanar3D246_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g157391 = localSampleStochastic2D234_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g157391 = localSampleStochastic3D263_g157402;
				#else
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#endif
				half4 Local_AlbedoTex185_g157391 = staticSwitch184_g157391;
				float3 lerpResult53_g157391 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g157391).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g157391 = lerpResult53_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157404) = _MainShaderTex;
				SamplerState Sampler276_g157404 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157404 = Local_Coords180_g157391;
				half4 Coords276_g157404 = temp_output_37_0_g157404;
				half2 TexCoord276_g157404 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157404 = SampleMain( Texture276_g157404 , Sampler276_g157404 , Coords276_g157404 , TexCoord276_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157404) = _MainShaderTex;
				SamplerState Sampler275_g157404 = sampler_Linear_Repeat;
				half4 Coords275_g157404 = temp_output_37_0_g157404;
				float2 appendResult289_g157404 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157404 = appendResult289_g157404;
				#else
				float2 staticSwitch288_g157404 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157404 = staticSwitch288_g157404;
				half4 localSampleExtra275_g157404 = SampleExtra( Texture275_g157404 , Sampler275_g157404 , Coords275_g157404 , TexCoord275_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157404) = _MainShaderTex;
				SamplerState Sampler238_g157404 = sampler_Linear_Repeat;
				half4 Coords238_g157404 = temp_output_37_0_g157404;
				float3 temp_output_279_0_g157404 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157404 = temp_output_279_0_g157404;
				half4 localSamplePlanar2D238_g157404 = SamplePlanar2D( Texture238_g157404 , Sampler238_g157404 , Coords238_g157404 , WorldPosition238_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157404) = _MainShaderTex;
				SamplerState Sampler246_g157404 = sampler_Linear_Repeat;
				half4 Coords246_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition246_g157404 = temp_output_279_0_g157404;
				float3 temp_output_280_0_g157404 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157404 = temp_output_280_0_g157404;
				half4 localSamplePlanar3D246_g157404 = SamplePlanar3D( Texture246_g157404 , Sampler246_g157404 , Coords246_g157404 , WorldPosition246_g157404 , WorldNormal246_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157404) = _MainShaderTex;
				SamplerState Sampler234_g157404 = sampler_Linear_Repeat;
				float4 Coords234_g157404 = temp_output_37_0_g157404;
				float3 WorldPosition234_g157404 = temp_output_279_0_g157404;
				float4 localSampleStochastic2D234_g157404 = SampleStochastic2D( Texture234_g157404 , Sampler234_g157404 , Coords234_g157404 , WorldPosition234_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157404) = _MainShaderTex;
				SamplerState Sampler263_g157404 = sampler_Linear_Repeat;
				half4 Coords263_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition263_g157404 = temp_output_279_0_g157404;
				half3 WorldNormal263_g157404 = temp_output_280_0_g157404;
				half4 localSampleStochastic3D263_g157404 = SampleStochastic3D( Texture263_g157404 , Sampler263_g157404 , Coords263_g157404 , WorldPosition263_g157404 , WorldNormal263_g157404 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g157391 = localSampleExtra275_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g157391 = localSamplePlanar2D238_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g157391 = localSamplePlanar3D246_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g157391 = localSampleStochastic2D234_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g157391 = localSampleStochastic3D263_g157404;
				#else
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#endif
				half4 Local_MasksTex199_g157391 = staticSwitch198_g157391;
				float lerpResult23_g157391 = lerp( 1.0 , (Local_MasksTex199_g157391).y , _MainOcclusionValue);
				float4 appendResult73_g157391 = (float4(( (Local_MasksTex199_g157391).x * _MainMetallicValue ) , lerpResult23_g157391 , (Local_MasksTex199_g157391).z , ( (Local_MasksTex199_g157391).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g157391 = appendResult73_g157391;
				float clampResult17_g157397 = clamp( (Local_Masks109_g157391).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157398 = _MainMultiRemap.x;
				float temp_output_10_0_g157398 = ( _MainMultiRemap.y - temp_output_7_0_g157398 );
				half Local_MultiMask78_g157391 = saturate( ( ( clampResult17_g157397 - temp_output_7_0_g157398 ) / ( temp_output_10_0_g157398 + 0.0001 ) ) );
				float lerpResult58_g157391 = lerp( 1.0 , Local_MultiMask78_g157391 , _MainColorMode);
				float4 lerpResult62_g157391 = lerp( _MainColorTwo , _MainColor , lerpResult58_g157391);
				half3 Local_ColorRGB93_g157391 = (lerpResult62_g157391).rgb;
				half3 Local_Albedo139_g157391 = ( Local_AlbedoRGB107_g157391 * Local_ColorRGB93_g157391 );
				float3 In_Albedo3_g157401 = Local_Albedo139_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157403) = _MainNormalTex;
				SamplerState Sampler276_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g157403 = Local_Coords180_g157391;
				half4 Coords276_g157403 = temp_output_37_0_g157403;
				half2 TexCoord276_g157403 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157403 = SampleMain( Texture276_g157403 , Sampler276_g157403 , Coords276_g157403 , TexCoord276_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157403) = _MainNormalTex;
				SamplerState Sampler275_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157403 = temp_output_37_0_g157403;
				float2 appendResult289_g157403 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157403 = appendResult289_g157403;
				#else
				float2 staticSwitch288_g157403 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157403 = staticSwitch288_g157403;
				half4 localSampleExtra275_g157403 = SampleExtra( Texture275_g157403 , Sampler275_g157403 , Coords275_g157403 , TexCoord275_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157403) = _MainNormalTex;
				SamplerState Sampler238_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157403 = temp_output_37_0_g157403;
				float3 temp_output_279_0_g157403 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157403 = temp_output_279_0_g157403;
				half4 localSamplePlanar2D238_g157403 = SamplePlanar2D( Texture238_g157403 , Sampler238_g157403 , Coords238_g157403 , WorldPosition238_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157403) = _MainNormalTex;
				SamplerState Sampler246_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition246_g157403 = temp_output_279_0_g157403;
				float3 temp_output_280_0_g157403 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157403 = temp_output_280_0_g157403;
				half4 localSamplePlanar3D246_g157403 = SamplePlanar3D( Texture246_g157403 , Sampler246_g157403 , Coords246_g157403 , WorldPosition246_g157403 , WorldNormal246_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157403) = _MainNormalTex;
				SamplerState Sampler234_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157403 = temp_output_37_0_g157403;
				float3 WorldPosition234_g157403 = temp_output_279_0_g157403;
				float4 localSampleStochastic2D234_g157403 = SampleStochastic2D( Texture234_g157403 , Sampler234_g157403 , Coords234_g157403 , WorldPosition234_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157403) = _MainNormalTex;
				SamplerState Sampler263_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition263_g157403 = temp_output_279_0_g157403;
				half3 WorldNormal263_g157403 = temp_output_280_0_g157403;
				half4 localSampleStochastic3D263_g157403 = SampleStochastic3D( Texture263_g157403 , Sampler263_g157403 , Coords263_g157403 , WorldPosition263_g157403 , WorldNormal263_g157403 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g157391 = localSampleExtra275_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g157391 = localSamplePlanar2D238_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g157391 = localSamplePlanar3D246_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g157391 = localSampleStochastic2D234_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g157391 = localSampleStochastic3D263_g157403;
				#else
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#endif
				half4 Local_NormaTex191_g157391 = staticSwitch193_g157391;
				half4 Normal_Packed45_g157393 = Local_NormaTex191_g157391;
				float2 appendResult58_g157393 = (float2(( (Normal_Packed45_g157393).x * (Normal_Packed45_g157393).w ) , (Normal_Packed45_g157393).y));
				half2 Normal_Default50_g157393 = appendResult58_g157393;
				half2 Normal_ASTC41_g157393 = (Normal_Packed45_g157393).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157393 = Normal_ASTC41_g157393;
				#else
				float2 staticSwitch38_g157393 = Normal_Default50_g157393;
				#endif
				half2 Normal_NO_DTX544_g157393 = (Normal_Packed45_g157393).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157393 = Normal_NO_DTX544_g157393;
				#else
				float2 staticSwitch37_g157393 = staticSwitch38_g157393;
				#endif
				float2 temp_output_26_0_g157391 = ( (staticSwitch37_g157393*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord11.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord12.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g157394 = temp_output_26_0_g157391;
				float2 break71_g157394 = Normal_Planar45_g157394;
				float3 appendResult72_g157394 = (float3(break71_g157394.x , 0.0 , break71_g157394.y));
				float2 temp_output_205_0_g157391 = (mul( ase_worldToTangent, appendResult72_g157394 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#else
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#endif
				half2 Local_NormalTS108_g157391 = staticSwitch204_g157391;
				float2 In_NormalTS3_g157401 = Local_NormalTS108_g157391;
				float3 appendResult68_g157395 = (float3(Local_NormalTS108_g157391 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g157395 = appendResult68_g157395;
				float3 worldNormal74_g157395 = normalize( float3(dot(tanToWorld0,tanNormal74_g157395), dot(tanToWorld1,tanNormal74_g157395), dot(tanToWorld2,tanNormal74_g157395)) );
				half3 Local_NormalWS250_g157391 = worldNormal74_g157395;
				float3 In_NormalWS3_g157401 = Local_NormalWS250_g157391;
				float4 In_Shader3_g157401 = Local_Masks109_g157391;
				float4 In_Emissive3_g157401 = half4(1,1,1,1);
				float3 temp_output_3_0_g157396 = Local_Albedo139_g157391;
				float dotResult20_g157396 = dot( temp_output_3_0_g157396 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g157391 = dotResult20_g157396;
				float In_Grayscale3_g157401 = Local_Grayscale110_g157391;
				float clampResult144_g157391 = clamp( saturate( ( Local_Grayscale110_g157391 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g157391 = clampResult144_g157391;
				float In_Luminosity3_g157401 = Local_Luminosity145_g157391;
				float In_MultiMask3_g157401 = Local_MultiMask78_g157391;
				float temp_output_187_0_g157391 = (Local_AlbedoTex185_g157391).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g157391 = ( temp_output_187_0_g157391 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g157391 = temp_output_187_0_g157391;
				#endif
				half Local_AlphaClip111_g157391 = staticSwitch236_g157391;
				float In_AlphaClip3_g157401 = Local_AlphaClip111_g157391;
				half Local_AlphaFade246_g157391 = (lerpResult62_g157391).a;
				float In_AlphaFade3_g157401 = Local_AlphaFade246_g157391;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g157401 = temp_cast_22;
				float In_Transmission3_g157401 = 1.0;
				float In_Thickness3_g157401 = 0.0;
				float In_Diffusion3_g157401 = 0.0;
				{
				Data3_g157401.Dummy = In_Dummy3_g157401;
				Data3_g157401.Albedo = In_Albedo3_g157401;
				Data3_g157401.NormalTS = In_NormalTS3_g157401;
				Data3_g157401.NormalWS = In_NormalWS3_g157401;
				Data3_g157401.Shader = In_Shader3_g157401;
				Data3_g157401.Emissive= In_Emissive3_g157401;
				Data3_g157401.MultiMask = In_MultiMask3_g157401;
				Data3_g157401.Grayscale = In_Grayscale3_g157401;
				Data3_g157401.Luminosity = In_Luminosity3_g157401;
				Data3_g157401.AlphaClip = In_AlphaClip3_g157401;
				Data3_g157401.AlphaFade = In_AlphaFade3_g157401;
				Data3_g157401.Translucency = In_Translucency3_g157401;
				Data3_g157401.Transmission = In_Transmission3_g157401;
				Data3_g157401.Thickness = In_Thickness3_g157401;
				Data3_g157401.Diffusion = In_Diffusion3_g157401;
				}
				TVEVisualData Data4_g157419 = Data3_g157401;
				float Out_Dummy4_g157419 = 0;
				float3 Out_Albedo4_g157419 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157419 = float2( 0,0 );
				float3 Out_NormalWS4_g157419 = float3( 0,0,0 );
				float4 Out_Shader4_g157419 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157419 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157419 = 0;
				float Out_Grayscale4_g157419 = 0;
				float Out_Luminosity4_g157419 = 0;
				float Out_AlphaClip4_g157419 = 0;
				float Out_AlphaFade4_g157419 = 0;
				float3 Out_Translucency4_g157419 = float3( 0,0,0 );
				float Out_Transmission4_g157419 = 0;
				float Out_Thickness4_g157419 = 0;
				float Out_Diffusion4_g157419 = 0;
				{
				Out_Dummy4_g157419 = Data4_g157419.Dummy;
				Out_Albedo4_g157419 = Data4_g157419.Albedo;
				Out_NormalTS4_g157419 = Data4_g157419.NormalTS;
				Out_NormalWS4_g157419 = Data4_g157419.NormalWS;
				Out_Shader4_g157419 = Data4_g157419.Shader;
				Out_Emissive4_g157419= Data4_g157419.Emissive;
				Out_MultiMask4_g157419 = Data4_g157419.MultiMask;
				Out_Grayscale4_g157419 = Data4_g157419.Grayscale;
				Out_Luminosity4_g157419= Data4_g157419.Luminosity;
				Out_AlphaClip4_g157419 = Data4_g157419.AlphaClip;
				Out_AlphaFade4_g157419 = Data4_g157419.AlphaFade;
				Out_Translucency4_g157419 = Data4_g157419.Translucency;
				Out_Transmission4_g157419 = Data4_g157419.Transmission;
				Out_Thickness4_g157419 = Data4_g157419.Thickness;
				Out_Diffusion4_g157419 = Data4_g157419.Diffusion;
				}
				half3 Visual_Albedo527_g157405 = Out_Albedo4_g157419;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157406) = _SecondAlbedoTex;
				SamplerState Sampler276_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157405 = _second_coord_value;
				float4 temp_output_37_0_g157406 = Local_LayerCoords790_g157405;
				half4 Coords276_g157406 = temp_output_37_0_g157406;
				half2 TexCoord276_g157406 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157406 = SampleMain( Texture276_g157406 , Sampler276_g157406 , Coords276_g157406 , TexCoord276_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157406) = _SecondAlbedoTex;
				SamplerState Sampler275_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157406 = temp_output_37_0_g157406;
				float2 appendResult289_g157406 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157406 = appendResult289_g157406;
				#else
				float2 staticSwitch288_g157406 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157406 = staticSwitch288_g157406;
				half4 localSampleExtra275_g157406 = SampleExtra( Texture275_g157406 , Sampler275_g157406 , Coords275_g157406 , TexCoord275_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157406) = _SecondAlbedoTex;
				SamplerState Sampler238_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157406 = temp_output_37_0_g157406;
				TVEModelData Data15_g157417 = Data16_g157339;
				float Out_Dummy15_g157417 = 0;
				float3 Out_PositionOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157417 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157417 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157417 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157417 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157417 = float3( 0,0,0 );
				float4 Out_VertexData15_g157417 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157417 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157417 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157417 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157417 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157417 = Data15_g157417.Dummy;
				Out_PositionOS15_g157417 = Data15_g157417.PositionOS;
				Out_PositionWS15_g157417 = Data15_g157417.PositionWS;
				Out_PositionWO15_g157417 = Data15_g157417.PositionWO;
				Out_PositionRawOS15_g157417 = Data15_g157417.PositionRawOS;
				Out_PositionAddOS15_g157417 = Data15_g157417.PositionAddOS;
				Out_PivotOS15_g157417 = Data15_g157417.PivotOS;
				Out_PivotWS15_g157417 = Data15_g157417.PivotWS;
				Out_PivotWO15_g157417 = Data15_g157417.PivotWO;
				Out_NormalOS15_g157417 = Data15_g157417.NormalOS;
				Out_NormalWS15_g157417 = Data15_g157417.NormalWS;
				Out_NormalRawOS15_g157417 = Data15_g157417.NormalRawOS;
				Out_NormalRawWS15_g157417 = Data15_g157417.NormalRawWS;
				Out_TangentOS15_g157417 = Data15_g157417.TangentOS;
				Out_ViewDirWS15_g157417 = Data15_g157417.ViewDirWS;
				Out_VertexData15_g157417 = Data15_g157417.VertexData;
				Out_MotionData15_g157417 = Data15_g157417.MotionData;
				Out_BoundsData15_g157417 = Data15_g157417.BoundsData;
				Out_RotationData15_g157417 = Data15_g157417.RotationData;
				Out_FragmentData15_g157417 = Data15_g157417.FragmentData;
				}
				half3 Model_PositionWO636_g157405 = Out_PositionWO15_g157417;
				float3 temp_output_279_0_g157406 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157406 = temp_output_279_0_g157406;
				half4 localSamplePlanar2D238_g157406 = SamplePlanar2D( Texture238_g157406 , Sampler238_g157406 , Coords238_g157406 , WorldPosition238_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157406) = _SecondAlbedoTex;
				SamplerState Sampler246_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition246_g157406 = temp_output_279_0_g157406;
				half3 Model_NormalWS869_g157405 = Out_NormalWS15_g157417;
				float3 temp_output_280_0_g157406 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157406 = temp_output_280_0_g157406;
				half4 localSamplePlanar3D246_g157406 = SamplePlanar3D( Texture246_g157406 , Sampler246_g157406 , Coords246_g157406 , WorldPosition246_g157406 , WorldNormal246_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157406) = _SecondAlbedoTex;
				SamplerState Sampler234_g157406 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157406 = temp_output_37_0_g157406;
				float3 WorldPosition234_g157406 = temp_output_279_0_g157406;
				float4 localSampleStochastic2D234_g157406 = SampleStochastic2D( Texture234_g157406 , Sampler234_g157406 , Coords234_g157406 , WorldPosition234_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157406) = _SecondAlbedoTex;
				SamplerState Sampler263_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition263_g157406 = temp_output_279_0_g157406;
				half3 WorldNormal263_g157406 = temp_output_280_0_g157406;
				half4 localSampleStochastic3D263_g157406 = SampleStochastic3D( Texture263_g157406 , Sampler263_g157406 , Coords263_g157406 , WorldPosition263_g157406 , WorldNormal263_g157406 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157405 = localSampleExtra275_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157405 = localSamplePlanar2D238_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157405 = localSamplePlanar3D246_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157405 = localSampleStochastic2D234_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157405 = localSampleStochastic3D263_g157406;
				#else
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#endif
				half4 Local_AlbedoTex777_g157405 = staticSwitch693_g157405;
				float3 lerpResult716_g157405 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157405).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g157405 = lerpResult716_g157405;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157408) = _SecondShaderTex;
				SamplerState Sampler276_g157408 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157408 = Local_LayerCoords790_g157405;
				half4 Coords276_g157408 = temp_output_37_0_g157408;
				half2 TexCoord276_g157408 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157408 = SampleMain( Texture276_g157408 , Sampler276_g157408 , Coords276_g157408 , TexCoord276_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157408) = _SecondShaderTex;
				SamplerState Sampler275_g157408 = sampler_Linear_Repeat;
				half4 Coords275_g157408 = temp_output_37_0_g157408;
				float2 appendResult289_g157408 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157408 = appendResult289_g157408;
				#else
				float2 staticSwitch288_g157408 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157408 = staticSwitch288_g157408;
				half4 localSampleExtra275_g157408 = SampleExtra( Texture275_g157408 , Sampler275_g157408 , Coords275_g157408 , TexCoord275_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157408) = _SecondShaderTex;
				SamplerState Sampler238_g157408 = sampler_Linear_Repeat;
				half4 Coords238_g157408 = temp_output_37_0_g157408;
				float3 temp_output_279_0_g157408 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157408 = temp_output_279_0_g157408;
				half4 localSamplePlanar2D238_g157408 = SamplePlanar2D( Texture238_g157408 , Sampler238_g157408 , Coords238_g157408 , WorldPosition238_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157408) = _SecondShaderTex;
				SamplerState Sampler246_g157408 = sampler_Linear_Repeat;
				half4 Coords246_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition246_g157408 = temp_output_279_0_g157408;
				float3 temp_output_280_0_g157408 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157408 = temp_output_280_0_g157408;
				half4 localSamplePlanar3D246_g157408 = SamplePlanar3D( Texture246_g157408 , Sampler246_g157408 , Coords246_g157408 , WorldPosition246_g157408 , WorldNormal246_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157408) = _SecondShaderTex;
				SamplerState Sampler234_g157408 = sampler_Linear_Repeat;
				float4 Coords234_g157408 = temp_output_37_0_g157408;
				float3 WorldPosition234_g157408 = temp_output_279_0_g157408;
				float4 localSampleStochastic2D234_g157408 = SampleStochastic2D( Texture234_g157408 , Sampler234_g157408 , Coords234_g157408 , WorldPosition234_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157408) = _SecondShaderTex;
				SamplerState Sampler263_g157408 = sampler_Linear_Repeat;
				half4 Coords263_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition263_g157408 = temp_output_279_0_g157408;
				half3 WorldNormal263_g157408 = temp_output_280_0_g157408;
				half4 localSampleStochastic3D263_g157408 = SampleStochastic3D( Texture263_g157408 , Sampler263_g157408 , Coords263_g157408 , WorldPosition263_g157408 , WorldNormal263_g157408 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157405 = localSampleExtra275_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157405 = localSamplePlanar2D238_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157405 = localSamplePlanar3D246_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157405 = localSampleStochastic2D234_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157405 = localSampleStochastic3D263_g157408;
				#else
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#endif
				half4 Local_ShaderTex775_g157405 = staticSwitch722_g157405;
				float lerpResult739_g157405 = lerp( 1.0 , (Local_ShaderTex775_g157405).y , _SecondOcclusionValue);
				float4 appendResult749_g157405 = (float4(( (Local_ShaderTex775_g157405).x * _SecondMetallicValue ) , lerpResult739_g157405 , (Local_ShaderTex775_g157405).z , ( (Local_ShaderTex775_g157405).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g157405 = appendResult749_g157405;
				float clampResult17_g157412 = clamp( (Local_Masks750_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157413 = _SecondMultiRemap.x;
				float temp_output_10_0_g157413 = ( _SecondMultiRemap.y - temp_output_7_0_g157413 );
				float temp_output_765_0_g157405 = saturate( ( ( clampResult17_g157412 - temp_output_7_0_g157413 ) / ( temp_output_10_0_g157413 + 0.0001 ) ) );
				half Local_MultiMask767_g157405 = temp_output_765_0_g157405;
				float lerpResult705_g157405 = lerp( 1.0 , Local_MultiMask767_g157405 , _SecondColorMode);
				float4 lerpResult706_g157405 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g157405);
				half3 Local_ColorRGB774_g157405 = (lerpResult706_g157405).rgb;
				half3 Local_Albedo768_g157405 = ( Local_AlbedoRGB771_g157405 * Local_ColorRGB774_g157405 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157432 = 2.0;
				#else
				float staticSwitch1_g157432 = 4.594794;
				#endif
				float3 lerpResult985_g157405 = lerp( Local_Albedo768_g157405 , ( Visual_Albedo527_g157405 * Local_Albedo768_g157405 * staticSwitch1_g157432 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157409) = _SecondMaskTex;
				SamplerState Sampler276_g157409 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g157405 = _second_mask_coord_value;
				float4 temp_output_37_0_g157409 = Local_BlendCoords813_g157405;
				half4 Coords276_g157409 = temp_output_37_0_g157409;
				half2 TexCoord276_g157409 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157409 = SampleMain( Texture276_g157409 , Sampler276_g157409 , Coords276_g157409 , TexCoord276_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157409) = _SecondMaskTex;
				SamplerState Sampler275_g157409 = sampler_Linear_Repeat;
				half4 Coords275_g157409 = temp_output_37_0_g157409;
				float2 appendResult289_g157409 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157409 = appendResult289_g157409;
				#else
				float2 staticSwitch288_g157409 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157409 = staticSwitch288_g157409;
				half4 localSampleExtra275_g157409 = SampleExtra( Texture275_g157409 , Sampler275_g157409 , Coords275_g157409 , TexCoord275_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157409) = _SecondMaskTex;
				SamplerState Sampler238_g157409 = sampler_Linear_Repeat;
				half4 Coords238_g157409 = temp_output_37_0_g157409;
				float3 temp_output_279_0_g157409 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157409 = temp_output_279_0_g157409;
				half4 localSamplePlanar2D238_g157409 = SamplePlanar2D( Texture238_g157409 , Sampler238_g157409 , Coords238_g157409 , WorldPosition238_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157409) = _SecondMaskTex;
				SamplerState Sampler246_g157409 = sampler_Linear_Repeat;
				half4 Coords246_g157409 = temp_output_37_0_g157409;
				half3 WorldPosition246_g157409 = temp_output_279_0_g157409;
				float3 temp_output_280_0_g157409 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157409 = temp_output_280_0_g157409;
				half4 localSamplePlanar3D246_g157409 = SamplePlanar3D( Texture246_g157409 , Sampler246_g157409 , Coords246_g157409 , WorldPosition246_g157409 , WorldNormal246_g157409 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157405 = localSampleExtra275_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157405 = localSamplePlanar2D238_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157405 = localSamplePlanar3D246_g157409;
				#else
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#endif
				half4 Local_MaskTex861_g157405 = staticSwitch817_g157405;
				float clampResult17_g157423 = clamp( (Local_MaskTex861_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157422 = _SecondMaskRemap.x;
				float temp_output_10_0_g157422 = ( _SecondMaskRemap.y - temp_output_7_0_g157422 );
				float lerpResult1015_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157423 - temp_output_7_0_g157422 ) / ( temp_output_10_0_g157422 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g157405 = lerpResult1015_g157405;
				#else
				float staticSwitch893_g157405 = 1.0;
				#endif
				half Blend_TexMask429_g157405 = staticSwitch893_g157405;
				half3 Visual_NormalWS951_g157405 = Out_NormalWS4_g157419;
				float clampResult17_g157424 = clamp( saturate( (Visual_NormalWS951_g157405).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157425 = _SecondProjRemap.x;
				float temp_output_10_0_g157425 = ( _SecondProjRemap.y - temp_output_7_0_g157425 );
				float lerpResult996_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157424 - temp_output_7_0_g157425 ) / ( temp_output_10_0_g157425 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g157405 = lerpResult996_g157405;
				#else
				float staticSwitch878_g157405 = 1.0;
				#endif
				half Blend_ProjMask434_g157405 = staticSwitch878_g157405;
				half4 Model_VertexMasks964_g157405 = Out_VertexData15_g157417;
				float4 break965_g157405 = Model_VertexMasks964_g157405;
				float4 break33_g157426 = _second_vert_mode;
				float temp_output_30_0_g157426 = ( break965_g157405.x * break33_g157426.x );
				float temp_output_29_0_g157426 = ( break965_g157405.y * break33_g157426.y );
				float temp_output_31_0_g157426 = ( break965_g157405.z * break33_g157426.z );
				float temp_output_28_0_g157426 = ( temp_output_30_0_g157426 + temp_output_29_0_g157426 + temp_output_31_0_g157426 + ( break965_g157405.w * break33_g157426.w ) );
				float clampResult17_g157420 = clamp( temp_output_28_0_g157426 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157421 = _SecondMeshRemap.x;
				float temp_output_10_0_g157421 = ( _SecondMeshRemap.y - temp_output_7_0_g157421 );
				float lerpResult1017_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157420 - temp_output_7_0_g157421 ) / ( temp_output_10_0_g157421 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g157434 = lerpResult1017_g157405;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157434 = ( temp_output_6_0_g157434 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157434 = temp_output_6_0_g157434;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g157405 = staticSwitch14_g157434;
				#else
				float staticSwitch917_g157405 = 1.0;
				#endif
				half Blend_VertMask918_g157405 = staticSwitch917_g157405;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				{
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				}
				TVEGlobalData Data15_g157418 = Data204_g157340;
				float Out_Dummy15_g157418 = 0;
				float4 Out_CoatParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157418 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157418 = Data15_g157418.Dummy;
				Out_CoatParams15_g157418 = Data15_g157418.CoatParams;
				Out_PaintParams15_g157418 = Data15_g157418.PaintParams;
				Out_GlowParams15_g157418 = Data15_g157418.GlowParams;
				Out_AtmoParams15_g157418= Data15_g157418.AtmoParams;
				Out_FormParams15_g157418 = Data15_g157418.FormParams;
				Out_LandParams15_g157418 = Data15_g157418.LandParams;
				Out_WindParams15_g157418 = Data15_g157418.WindParams;
				Out_PushParams15_g157418 = Data15_g157418.PushParams;
				}
				half4 Global_CoatParams975_g157405 = Out_CoatParams15_g157418;
				float lerpResult1013_g157405 = lerp( 1.0 , (Global_CoatParams975_g157405).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g157405 = lerpResult1013_g157405;
				#else
				float staticSwitch971_g157405 = 1.0;
				#endif
				half Blend_GlobalMask972_g157405 = staticSwitch971_g157405;
				float temp_output_432_0_g157405 = ( _SecondIntensityValue * Blend_TexMask429_g157405 * Blend_ProjMask434_g157405 * Blend_VertMask918_g157405 * Blend_GlobalMask972_g157405 );
				float clampResult17_g157428 = clamp( temp_output_432_0_g157405 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157427 = _SecondBlendRemap.x;
				float temp_output_10_0_g157427 = ( _SecondBlendRemap.y - temp_output_7_0_g157427 );
				half Blend_Mask412_g157405 = ( saturate( ( ( clampResult17_g157428 - temp_output_7_0_g157427 ) / ( temp_output_10_0_g157427 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g157405 = lerp( Visual_Albedo527_g157405 , lerpResult985_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g157405 = lerpResult403_g157405;
				#else
				float3 staticSwitch415_g157405 = Visual_Albedo527_g157405;
				#endif
				half3 Final_Albedo601_g157405 = staticSwitch415_g157405;
				float3 In_Albedo3_g157416 = Final_Albedo601_g157405;
				half2 Visual_NormalTS529_g157405 = Out_NormalTS4_g157419;
				float2 lerpResult40_g157430 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157405 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157407) = _SecondNormalTex;
				SamplerState Sampler276_g157407 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157407 = Local_LayerCoords790_g157405;
				half4 Coords276_g157407 = temp_output_37_0_g157407;
				half2 TexCoord276_g157407 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157407 = SampleMain( Texture276_g157407 , Sampler276_g157407 , Coords276_g157407 , TexCoord276_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157407) = _SecondNormalTex;
				SamplerState Sampler275_g157407 = sampler_Linear_Repeat;
				half4 Coords275_g157407 = temp_output_37_0_g157407;
				float2 appendResult289_g157407 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157407 = appendResult289_g157407;
				#else
				float2 staticSwitch288_g157407 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157407 = staticSwitch288_g157407;
				half4 localSampleExtra275_g157407 = SampleExtra( Texture275_g157407 , Sampler275_g157407 , Coords275_g157407 , TexCoord275_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157407) = _SecondNormalTex;
				SamplerState Sampler238_g157407 = sampler_Linear_Repeat;
				half4 Coords238_g157407 = temp_output_37_0_g157407;
				float3 temp_output_279_0_g157407 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157407 = temp_output_279_0_g157407;
				half4 localSamplePlanar2D238_g157407 = SamplePlanar2D( Texture238_g157407 , Sampler238_g157407 , Coords238_g157407 , WorldPosition238_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157407) = _SecondNormalTex;
				SamplerState Sampler246_g157407 = sampler_Linear_Repeat;
				half4 Coords246_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition246_g157407 = temp_output_279_0_g157407;
				float3 temp_output_280_0_g157407 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157407 = temp_output_280_0_g157407;
				half4 localSamplePlanar3D246_g157407 = SamplePlanar3D( Texture246_g157407 , Sampler246_g157407 , Coords246_g157407 , WorldPosition246_g157407 , WorldNormal246_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157407) = _SecondNormalTex;
				SamplerState Sampler234_g157407 = sampler_Linear_Repeat;
				float4 Coords234_g157407 = temp_output_37_0_g157407;
				float3 WorldPosition234_g157407 = temp_output_279_0_g157407;
				float4 localSampleStochastic2D234_g157407 = SampleStochastic2D( Texture234_g157407 , Sampler234_g157407 , Coords234_g157407 , WorldPosition234_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157407) = _SecondNormalTex;
				SamplerState Sampler263_g157407 = sampler_Linear_Repeat;
				half4 Coords263_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition263_g157407 = temp_output_279_0_g157407;
				half3 WorldNormal263_g157407 = temp_output_280_0_g157407;
				half4 localSampleStochastic3D263_g157407 = SampleStochastic3D( Texture263_g157407 , Sampler263_g157407 , Coords263_g157407 , WorldPosition263_g157407 , WorldNormal263_g157407 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157405 = localSampleExtra275_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157405 = localSamplePlanar2D238_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157405 = localSamplePlanar3D246_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157405 = localSampleStochastic2D234_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157405 = localSampleStochastic3D263_g157407;
				#else
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#endif
				half4 Local_NormalTex776_g157405 = staticSwitch698_g157405;
				half4 Normal_Packed45_g157410 = Local_NormalTex776_g157405;
				float2 appendResult58_g157410 = (float2(( (Normal_Packed45_g157410).x * (Normal_Packed45_g157410).w ) , (Normal_Packed45_g157410).y));
				half2 Normal_Default50_g157410 = appendResult58_g157410;
				half2 Normal_ASTC41_g157410 = (Normal_Packed45_g157410).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157410 = Normal_ASTC41_g157410;
				#else
				float2 staticSwitch38_g157410 = Normal_Default50_g157410;
				#endif
				half2 Normal_NO_DTX544_g157410 = (Normal_Packed45_g157410).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157410 = Normal_NO_DTX544_g157410;
				#else
				float2 staticSwitch37_g157410 = staticSwitch38_g157410;
				#endif
				float2 temp_output_724_0_g157405 = ( (staticSwitch37_g157410*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g157411 = temp_output_724_0_g157405;
				float2 break71_g157411 = Normal_Planar45_g157411;
				float3 appendResult72_g157411 = (float3(break71_g157411.x , 0.0 , break71_g157411.y));
				float2 temp_output_858_0_g157405 = (mul( ase_worldToTangent, appendResult72_g157411 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#endif
				half2 Local_NormalTS729_g157405 = staticSwitch727_g157405;
				float2 temp_output_36_0_g157430 = ( lerpResult40_g157430 + Local_NormalTS729_g157405 );
				float2 lerpResult405_g157405 = lerp( Visual_NormalTS529_g157405 , temp_output_36_0_g157430 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g157405 = lerpResult405_g157405;
				#else
				float2 staticSwitch418_g157405 = Visual_NormalTS529_g157405;
				#endif
				half2 Final_NormalTS612_g157405 = staticSwitch418_g157405;
				float2 In_NormalTS3_g157416 = Final_NormalTS612_g157405;
				float3 appendResult68_g157431 = (float3(Final_NormalTS612_g157405 , 1.0));
				float3 tanNormal74_g157431 = appendResult68_g157431;
				float3 worldNormal74_g157431 = normalize( float3(dot(tanToWorld0,tanNormal74_g157431), dot(tanToWorld1,tanNormal74_g157431), dot(tanToWorld2,tanNormal74_g157431)) );
				half3 Final_NormalWS950_g157405 = worldNormal74_g157431;
				float3 In_NormalWS3_g157416 = Final_NormalWS950_g157405;
				half4 Visual_Shader531_g157405 = Out_Shader4_g157419;
				float4 lerpResult994_g157405 = lerp( Local_Masks750_g157405 , ( Visual_Shader531_g157405 * Local_Masks750_g157405 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g157405 = lerp( Visual_Shader531_g157405 , lerpResult994_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g157405 = lerpResult440_g157405;
				#else
				float4 staticSwitch451_g157405 = Visual_Shader531_g157405;
				#endif
				half4 Final_Masks613_g157405 = staticSwitch451_g157405;
				float4 In_Shader3_g157416 = Final_Masks613_g157405;
				float4 In_Emissive3_g157416 = Out_Emissive4_g157419;
				float3 temp_output_3_0_g157433 = Final_Albedo601_g157405;
				float dotResult20_g157433 = dot( temp_output_3_0_g157433 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157405 = dotResult20_g157433;
				float In_Grayscale3_g157416 = Final_Grayscale615_g157405;
				float clampResult651_g157405 = clamp( saturate( ( Final_Grayscale615_g157405 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157405 = clampResult651_g157405;
				float In_Luminosity3_g157416 = Final_Luminosity652_g157405;
				half Visual_MultiMask547_g157405 = Out_MultiMask4_g157419;
				float lerpResult477_g157405 = lerp( Visual_MultiMask547_g157405 , Local_MultiMask767_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch482_g157405 = lerpResult477_g157405;
				#else
				float staticSwitch482_g157405 = Visual_MultiMask547_g157405;
				#endif
				half Final_MultiMask572_g157405 = staticSwitch482_g157405;
				float In_MultiMask3_g157416 = Final_MultiMask572_g157405;
				half Visual_AlphaClip559_g157405 = Out_AlphaClip4_g157419;
				float temp_output_718_0_g157405 = (Local_AlbedoTex777_g157405).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g157405 = ( temp_output_718_0_g157405 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g157405 = temp_output_718_0_g157405;
				#endif
				half Local_AlphaClip772_g157405 = staticSwitch932_g157405;
				float lerpResult448_g157405 = lerp( Visual_AlphaClip559_g157405 , Local_AlphaClip772_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch564_g157405 = lerpResult448_g157405;
				#else
				float staticSwitch564_g157405 = Visual_AlphaClip559_g157405;
				#endif
				half Final_AlphaClip602_g157405 = staticSwitch564_g157405;
				float In_AlphaClip3_g157416 = Final_AlphaClip602_g157405;
				half Visual_AlphaFade588_g157405 = Out_AlphaFade4_g157419;
				half Local_AlphaFade773_g157405 = (lerpResult706_g157405).a;
				float lerpResult604_g157405 = lerp( Visual_AlphaFade588_g157405 , Local_AlphaFade773_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch608_g157405 = lerpResult604_g157405;
				#else
				float staticSwitch608_g157405 = Visual_AlphaFade588_g157405;
				#endif
				half Final_AlphaFade611_g157405 = staticSwitch608_g157405;
				float In_AlphaFade3_g157416 = Final_AlphaFade611_g157405;
				float3 In_Translucency3_g157416 = Out_Translucency4_g157419;
				float In_Transmission3_g157416 = Out_Transmission4_g157419;
				float In_Thickness3_g157416 = Out_Thickness4_g157419;
				float In_Diffusion3_g157416 = Out_Diffusion4_g157419;
				{
				Data3_g157416.Dummy = In_Dummy3_g157416;
				Data3_g157416.Albedo = In_Albedo3_g157416;
				Data3_g157416.NormalTS = In_NormalTS3_g157416;
				Data3_g157416.NormalWS = In_NormalWS3_g157416;
				Data3_g157416.Shader = In_Shader3_g157416;
				Data3_g157416.Emissive= In_Emissive3_g157416;
				Data3_g157416.MultiMask = In_MultiMask3_g157416;
				Data3_g157416.Grayscale = In_Grayscale3_g157416;
				Data3_g157416.Luminosity = In_Luminosity3_g157416;
				Data3_g157416.AlphaClip = In_AlphaClip3_g157416;
				Data3_g157416.AlphaFade = In_AlphaFade3_g157416;
				Data3_g157416.Translucency = In_Translucency3_g157416;
				Data3_g157416.Transmission = In_Transmission3_g157416;
				Data3_g157416.Thickness = In_Thickness3_g157416;
				Data3_g157416.Diffusion = In_Diffusion3_g157416;
				}
				TVEVisualData Data4_g157453 = Data3_g157416;
				float Out_Dummy4_g157453 = 0;
				float3 Out_Albedo4_g157453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157453 = float2( 0,0 );
				float3 Out_NormalWS4_g157453 = float3( 0,0,0 );
				float4 Out_Shader4_g157453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157453 = 0;
				float Out_Grayscale4_g157453 = 0;
				float Out_Luminosity4_g157453 = 0;
				float Out_AlphaClip4_g157453 = 0;
				float Out_AlphaFade4_g157453 = 0;
				float3 Out_Translucency4_g157453 = float3( 0,0,0 );
				float Out_Transmission4_g157453 = 0;
				float Out_Thickness4_g157453 = 0;
				float Out_Diffusion4_g157453 = 0;
				{
				Out_Dummy4_g157453 = Data4_g157453.Dummy;
				Out_Albedo4_g157453 = Data4_g157453.Albedo;
				Out_NormalTS4_g157453 = Data4_g157453.NormalTS;
				Out_NormalWS4_g157453 = Data4_g157453.NormalWS;
				Out_Shader4_g157453 = Data4_g157453.Shader;
				Out_Emissive4_g157453= Data4_g157453.Emissive;
				Out_MultiMask4_g157453 = Data4_g157453.MultiMask;
				Out_Grayscale4_g157453 = Data4_g157453.Grayscale;
				Out_Luminosity4_g157453= Data4_g157453.Luminosity;
				Out_AlphaClip4_g157453 = Data4_g157453.AlphaClip;
				Out_AlphaFade4_g157453 = Data4_g157453.AlphaFade;
				Out_Translucency4_g157453 = Data4_g157453.Translucency;
				Out_Transmission4_g157453 = Data4_g157453.Transmission;
				Out_Thickness4_g157453 = Data4_g157453.Thickness;
				Out_Diffusion4_g157453 = Data4_g157453.Diffusion;
				}
				half3 Visual_Albedo527_g157436 = Out_Albedo4_g157453;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler276_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157436 = _third_coord_value;
				float4 temp_output_37_0_g157437 = Local_LayerCoords790_g157436;
				half4 Coords276_g157437 = temp_output_37_0_g157437;
				half2 TexCoord276_g157437 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157437 = SampleMain( Texture276_g157437 , Sampler276_g157437 , Coords276_g157437 , TexCoord276_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler275_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157437 = temp_output_37_0_g157437;
				float2 appendResult289_g157437 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157437 = appendResult289_g157437;
				#else
				float2 staticSwitch288_g157437 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157437 = staticSwitch288_g157437;
				half4 localSampleExtra275_g157437 = SampleExtra( Texture275_g157437 , Sampler275_g157437 , Coords275_g157437 , TexCoord275_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler238_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157437 = temp_output_37_0_g157437;
				TVEModelData Data15_g157452 = Data16_g157339;
				float Out_Dummy15_g157452 = 0;
				float3 Out_PositionOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157452 = float3( 0,0,0 );
				float4 Out_VertexData15_g157452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157452 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157452 = Data15_g157452.Dummy;
				Out_PositionOS15_g157452 = Data15_g157452.PositionOS;
				Out_PositionWS15_g157452 = Data15_g157452.PositionWS;
				Out_PositionWO15_g157452 = Data15_g157452.PositionWO;
				Out_PositionRawOS15_g157452 = Data15_g157452.PositionRawOS;
				Out_PositionAddOS15_g157452 = Data15_g157452.PositionAddOS;
				Out_PivotOS15_g157452 = Data15_g157452.PivotOS;
				Out_PivotWS15_g157452 = Data15_g157452.PivotWS;
				Out_PivotWO15_g157452 = Data15_g157452.PivotWO;
				Out_NormalOS15_g157452 = Data15_g157452.NormalOS;
				Out_NormalWS15_g157452 = Data15_g157452.NormalWS;
				Out_NormalRawOS15_g157452 = Data15_g157452.NormalRawOS;
				Out_NormalRawWS15_g157452 = Data15_g157452.NormalRawWS;
				Out_TangentOS15_g157452 = Data15_g157452.TangentOS;
				Out_ViewDirWS15_g157452 = Data15_g157452.ViewDirWS;
				Out_VertexData15_g157452 = Data15_g157452.VertexData;
				Out_MotionData15_g157452 = Data15_g157452.MotionData;
				Out_BoundsData15_g157452 = Data15_g157452.BoundsData;
				Out_RotationData15_g157452 = Data15_g157452.RotationData;
				Out_FragmentData15_g157452 = Data15_g157452.FragmentData;
				}
				half3 Model_PositionWO636_g157436 = Out_PositionWO15_g157452;
				float3 temp_output_279_0_g157437 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157437 = temp_output_279_0_g157437;
				half4 localSamplePlanar2D238_g157437 = SamplePlanar2D( Texture238_g157437 , Sampler238_g157437 , Coords238_g157437 , WorldPosition238_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler246_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition246_g157437 = temp_output_279_0_g157437;
				half3 Model_NormalWS869_g157436 = Out_NormalWS15_g157452;
				float3 temp_output_280_0_g157437 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157437 = temp_output_280_0_g157437;
				half4 localSamplePlanar3D246_g157437 = SamplePlanar3D( Texture246_g157437 , Sampler246_g157437 , Coords246_g157437 , WorldPosition246_g157437 , WorldNormal246_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler234_g157437 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157437 = temp_output_37_0_g157437;
				float3 WorldPosition234_g157437 = temp_output_279_0_g157437;
				float4 localSampleStochastic2D234_g157437 = SampleStochastic2D( Texture234_g157437 , Sampler234_g157437 , Coords234_g157437 , WorldPosition234_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler263_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition263_g157437 = temp_output_279_0_g157437;
				half3 WorldNormal263_g157437 = temp_output_280_0_g157437;
				half4 localSampleStochastic3D263_g157437 = SampleStochastic3D( Texture263_g157437 , Sampler263_g157437 , Coords263_g157437 , WorldPosition263_g157437 , WorldNormal263_g157437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157436 = localSampleExtra275_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157436 = localSamplePlanar2D238_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157436 = localSamplePlanar3D246_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157436 = localSampleStochastic2D234_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157436 = localSampleStochastic3D263_g157437;
				#else
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#endif
				half4 Local_AlbedoTex777_g157436 = staticSwitch693_g157436;
				float3 lerpResult716_g157436 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157436).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g157436 = lerpResult716_g157436;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157439) = _ThirdShaderTex;
				SamplerState Sampler276_g157439 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157439 = Local_LayerCoords790_g157436;
				half4 Coords276_g157439 = temp_output_37_0_g157439;
				half2 TexCoord276_g157439 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157439 = SampleMain( Texture276_g157439 , Sampler276_g157439 , Coords276_g157439 , TexCoord276_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157439) = _ThirdShaderTex;
				SamplerState Sampler275_g157439 = sampler_Linear_Repeat;
				half4 Coords275_g157439 = temp_output_37_0_g157439;
				float2 appendResult289_g157439 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157439 = appendResult289_g157439;
				#else
				float2 staticSwitch288_g157439 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157439 = staticSwitch288_g157439;
				half4 localSampleExtra275_g157439 = SampleExtra( Texture275_g157439 , Sampler275_g157439 , Coords275_g157439 , TexCoord275_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157439) = _ThirdShaderTex;
				SamplerState Sampler238_g157439 = sampler_Linear_Repeat;
				half4 Coords238_g157439 = temp_output_37_0_g157439;
				float3 temp_output_279_0_g157439 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157439 = temp_output_279_0_g157439;
				half4 localSamplePlanar2D238_g157439 = SamplePlanar2D( Texture238_g157439 , Sampler238_g157439 , Coords238_g157439 , WorldPosition238_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157439) = _ThirdShaderTex;
				SamplerState Sampler246_g157439 = sampler_Linear_Repeat;
				half4 Coords246_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition246_g157439 = temp_output_279_0_g157439;
				float3 temp_output_280_0_g157439 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157439 = temp_output_280_0_g157439;
				half4 localSamplePlanar3D246_g157439 = SamplePlanar3D( Texture246_g157439 , Sampler246_g157439 , Coords246_g157439 , WorldPosition246_g157439 , WorldNormal246_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157439) = _ThirdShaderTex;
				SamplerState Sampler234_g157439 = sampler_Linear_Repeat;
				float4 Coords234_g157439 = temp_output_37_0_g157439;
				float3 WorldPosition234_g157439 = temp_output_279_0_g157439;
				float4 localSampleStochastic2D234_g157439 = SampleStochastic2D( Texture234_g157439 , Sampler234_g157439 , Coords234_g157439 , WorldPosition234_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157439) = _ThirdShaderTex;
				SamplerState Sampler263_g157439 = sampler_Linear_Repeat;
				half4 Coords263_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition263_g157439 = temp_output_279_0_g157439;
				half3 WorldNormal263_g157439 = temp_output_280_0_g157439;
				half4 localSampleStochastic3D263_g157439 = SampleStochastic3D( Texture263_g157439 , Sampler263_g157439 , Coords263_g157439 , WorldPosition263_g157439 , WorldNormal263_g157439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157436 = localSampleExtra275_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157436 = localSamplePlanar2D238_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157436 = localSamplePlanar3D246_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157436 = localSampleStochastic2D234_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157436 = localSampleStochastic3D263_g157439;
				#else
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#endif
				half4 Local_ShaderTex775_g157436 = staticSwitch722_g157436;
				float lerpResult739_g157436 = lerp( 1.0 , (Local_ShaderTex775_g157436).y , _ThirdOcclusionValue);
				float4 appendResult749_g157436 = (float4(( (Local_ShaderTex775_g157436).x * _ThirdMetallicValue ) , lerpResult739_g157436 , (Local_ShaderTex775_g157436).z , ( (Local_ShaderTex775_g157436).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g157436 = appendResult749_g157436;
				float clampResult17_g157442 = clamp( (Local_Masks750_g157436).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157443 = _ThirdMultiRemap.x;
				float temp_output_10_0_g157443 = ( _ThirdMultiRemap.y - temp_output_7_0_g157443 );
				float temp_output_765_0_g157436 = saturate( ( ( clampResult17_g157442 - temp_output_7_0_g157443 ) / ( temp_output_10_0_g157443 + 0.0001 ) ) );
				half Local_MultiMask767_g157436 = temp_output_765_0_g157436;
				float lerpResult705_g157436 = lerp( 1.0 , Local_MultiMask767_g157436 , _ThirdColorMode);
				float4 lerpResult706_g157436 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g157436);
				half3 Local_ColorRGB774_g157436 = (lerpResult706_g157436).rgb;
				half3 Local_Albedo768_g157436 = ( Local_AlbedoRGB771_g157436 * Local_ColorRGB774_g157436 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157461 = 2.0;
				#else
				float staticSwitch1_g157461 = 4.594794;
				#endif
				float3 lerpResult985_g157436 = lerp( Local_Albedo768_g157436 , ( Visual_Albedo527_g157436 * Local_Albedo768_g157436 * staticSwitch1_g157461 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157464) = _ThirdMaskTex;
				SamplerState Sampler276_g157464 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g157436 = _third_mask_coord_value;
				float4 temp_output_37_0_g157464 = Local_MaskCoords813_g157436;
				half4 Coords276_g157464 = temp_output_37_0_g157464;
				half2 TexCoord276_g157464 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157464 = SampleMain( Texture276_g157464 , Sampler276_g157464 , Coords276_g157464 , TexCoord276_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157464) = _ThirdMaskTex;
				SamplerState Sampler275_g157464 = sampler_Linear_Repeat;
				half4 Coords275_g157464 = temp_output_37_0_g157464;
				float2 appendResult289_g157464 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157464 = appendResult289_g157464;
				#else
				float2 staticSwitch288_g157464 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157464 = staticSwitch288_g157464;
				half4 localSampleExtra275_g157464 = SampleExtra( Texture275_g157464 , Sampler275_g157464 , Coords275_g157464 , TexCoord275_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157464) = _ThirdMaskTex;
				SamplerState Sampler238_g157464 = sampler_Linear_Repeat;
				half4 Coords238_g157464 = temp_output_37_0_g157464;
				float3 temp_output_279_0_g157464 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157464 = temp_output_279_0_g157464;
				half4 localSamplePlanar2D238_g157464 = SamplePlanar2D( Texture238_g157464 , Sampler238_g157464 , Coords238_g157464 , WorldPosition238_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157464) = _ThirdMaskTex;
				SamplerState Sampler246_g157464 = sampler_Linear_Repeat;
				half4 Coords246_g157464 = temp_output_37_0_g157464;
				half3 WorldPosition246_g157464 = temp_output_279_0_g157464;
				float3 temp_output_280_0_g157464 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157464 = temp_output_280_0_g157464;
				half4 localSamplePlanar3D246_g157464 = SamplePlanar3D( Texture246_g157464 , Sampler246_g157464 , Coords246_g157464 , WorldPosition246_g157464 , WorldNormal246_g157464 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157436 = localSampleExtra275_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157436 = localSamplePlanar2D238_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157436 = localSamplePlanar3D246_g157464;
				#else
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#endif
				half4 Local_MaskTex861_g157436 = staticSwitch817_g157436;
				float clampResult17_g157447 = clamp( (Local_MaskTex861_g157436).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g157448 = _ThirdMaskRemap.x;
				float temp_output_10_0_g157448 = ( _ThirdMaskRemap.y - temp_output_7_0_g157448 );
				float lerpResult1028_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157447 - temp_output_7_0_g157448 ) / ( temp_output_10_0_g157448 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g157436 = lerpResult1028_g157436;
				#else
				float staticSwitch892_g157436 = 1.0;
				#endif
				half Detail_TexMask429_g157436 = staticSwitch892_g157436;
				half4 Model_VertexMasks960_g157436 = Out_VertexData15_g157452;
				float4 break961_g157436 = Model_VertexMasks960_g157436;
				float4 break33_g157451 = _third_vert_mode;
				float temp_output_30_0_g157451 = ( break961_g157436.x * break33_g157451.x );
				float temp_output_29_0_g157451 = ( break961_g157436.y * break33_g157451.y );
				float temp_output_31_0_g157451 = ( break961_g157436.z * break33_g157451.z );
				float temp_output_28_0_g157451 = ( temp_output_30_0_g157451 + temp_output_29_0_g157451 + temp_output_31_0_g157451 + ( break961_g157436.w * break33_g157451.w ) );
				float clampResult17_g157445 = clamp( temp_output_28_0_g157451 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157446 = _ThirdMeshRemap.x;
				float temp_output_10_0_g157446 = ( _ThirdMeshRemap.y - temp_output_7_0_g157446 );
				float lerpResult1026_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157445 - temp_output_7_0_g157446 ) / ( temp_output_10_0_g157446 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g157463 = lerpResult1026_g157436;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157463 = ( temp_output_6_0_g157463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157463 = temp_output_6_0_g157463;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g157436 = staticSwitch14_g157463;
				#else
				float staticSwitch917_g157436 = 1.0;
				#endif
				half Blend_VertMask913_g157436 = staticSwitch917_g157436;
				half3 Visual_NormalWS953_g157436 = Out_NormalWS4_g157453;
				float clampResult17_g157449 = clamp( saturate( (Visual_NormalWS953_g157436).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157450 = _ThirdProjRemap.x;
				float temp_output_10_0_g157450 = ( _ThirdProjRemap.y - temp_output_7_0_g157450 );
				float lerpResult1004_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157449 - temp_output_7_0_g157450 ) / ( temp_output_10_0_g157450 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g157436 = lerpResult1004_g157436;
				#else
				float staticSwitch908_g157436 = 1.0;
				#endif
				half Blend_ProjMask912_g157436 = staticSwitch908_g157436;
				TVEGlobalData Data15_g157455 = Data204_g157340;
				float Out_Dummy15_g157455 = 0;
				float4 Out_CoatParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157455 = Data15_g157455.Dummy;
				Out_CoatParams15_g157455 = Data15_g157455.CoatParams;
				Out_PaintParams15_g157455 = Data15_g157455.PaintParams;
				Out_GlowParams15_g157455 = Data15_g157455.GlowParams;
				Out_AtmoParams15_g157455= Data15_g157455.AtmoParams;
				Out_FormParams15_g157455 = Data15_g157455.FormParams;
				Out_LandParams15_g157455 = Data15_g157455.LandParams;
				Out_WindParams15_g157455 = Data15_g157455.WindParams;
				Out_PushParams15_g157455 = Data15_g157455.PushParams;
				}
				half4 Global_CoatParams972_g157436 = Out_CoatParams15_g157455;
				float lerpResult1023_g157436 = lerp( 1.0 , (Global_CoatParams972_g157436).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g157436 = lerpResult1023_g157436;
				#else
				float staticSwitch965_g157436 = 1.0;
				#endif
				half Blend_GlobalMask968_g157436 = staticSwitch965_g157436;
				float temp_output_432_0_g157436 = ( _ThirdIntensityValue * Detail_TexMask429_g157436 * Blend_VertMask913_g157436 * Blend_ProjMask912_g157436 * Blend_GlobalMask968_g157436 );
				float clampResult17_g157457 = clamp( temp_output_432_0_g157436 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157456 = _ThirdBlendRemap.x;
				float temp_output_10_0_g157456 = ( _ThirdBlendRemap.y - temp_output_7_0_g157456 );
				half Detail_Mask412_g157436 = ( saturate( ( ( clampResult17_g157457 - temp_output_7_0_g157456 ) / ( temp_output_10_0_g157456 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g157436 = lerp( Visual_Albedo527_g157436 , lerpResult985_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g157436 = lerpResult989_g157436;
				#else
				float3 staticSwitch415_g157436 = Visual_Albedo527_g157436;
				#endif
				half3 Final_Albedo601_g157436 = staticSwitch415_g157436;
				float3 In_Albedo3_g157454 = Final_Albedo601_g157436;
				half2 Visual_NormalTS529_g157436 = Out_NormalTS4_g157453;
				float2 lerpResult40_g157459 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157436 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157438) = _ThirdNormalTex;
				SamplerState Sampler276_g157438 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157438 = Local_LayerCoords790_g157436;
				half4 Coords276_g157438 = temp_output_37_0_g157438;
				half2 TexCoord276_g157438 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157438 = SampleMain( Texture276_g157438 , Sampler276_g157438 , Coords276_g157438 , TexCoord276_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157438) = _ThirdNormalTex;
				SamplerState Sampler275_g157438 = sampler_Linear_Repeat;
				half4 Coords275_g157438 = temp_output_37_0_g157438;
				float2 appendResult289_g157438 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157438 = appendResult289_g157438;
				#else
				float2 staticSwitch288_g157438 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157438 = staticSwitch288_g157438;
				half4 localSampleExtra275_g157438 = SampleExtra( Texture275_g157438 , Sampler275_g157438 , Coords275_g157438 , TexCoord275_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157438) = _ThirdNormalTex;
				SamplerState Sampler238_g157438 = sampler_Linear_Repeat;
				half4 Coords238_g157438 = temp_output_37_0_g157438;
				float3 temp_output_279_0_g157438 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157438 = temp_output_279_0_g157438;
				half4 localSamplePlanar2D238_g157438 = SamplePlanar2D( Texture238_g157438 , Sampler238_g157438 , Coords238_g157438 , WorldPosition238_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157438) = _ThirdNormalTex;
				SamplerState Sampler246_g157438 = sampler_Linear_Repeat;
				half4 Coords246_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition246_g157438 = temp_output_279_0_g157438;
				float3 temp_output_280_0_g157438 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157438 = temp_output_280_0_g157438;
				half4 localSamplePlanar3D246_g157438 = SamplePlanar3D( Texture246_g157438 , Sampler246_g157438 , Coords246_g157438 , WorldPosition246_g157438 , WorldNormal246_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157438) = _ThirdNormalTex;
				SamplerState Sampler234_g157438 = sampler_Linear_Repeat;
				float4 Coords234_g157438 = temp_output_37_0_g157438;
				float3 WorldPosition234_g157438 = temp_output_279_0_g157438;
				float4 localSampleStochastic2D234_g157438 = SampleStochastic2D( Texture234_g157438 , Sampler234_g157438 , Coords234_g157438 , WorldPosition234_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157438) = _ThirdNormalTex;
				SamplerState Sampler263_g157438 = sampler_Linear_Repeat;
				half4 Coords263_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition263_g157438 = temp_output_279_0_g157438;
				half3 WorldNormal263_g157438 = temp_output_280_0_g157438;
				half4 localSampleStochastic3D263_g157438 = SampleStochastic3D( Texture263_g157438 , Sampler263_g157438 , Coords263_g157438 , WorldPosition263_g157438 , WorldNormal263_g157438 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157436 = localSampleExtra275_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157436 = localSamplePlanar2D238_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157436 = localSamplePlanar3D246_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157436 = localSampleStochastic2D234_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157436 = localSampleStochastic3D263_g157438;
				#else
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#endif
				half4 Local_NormalTex776_g157436 = staticSwitch698_g157436;
				half4 Normal_Packed45_g157440 = Local_NormalTex776_g157436;
				float2 appendResult58_g157440 = (float2(( (Normal_Packed45_g157440).x * (Normal_Packed45_g157440).w ) , (Normal_Packed45_g157440).y));
				half2 Normal_Default50_g157440 = appendResult58_g157440;
				half2 Normal_ASTC41_g157440 = (Normal_Packed45_g157440).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157440 = Normal_ASTC41_g157440;
				#else
				float2 staticSwitch38_g157440 = Normal_Default50_g157440;
				#endif
				half2 Normal_NO_DTX544_g157440 = (Normal_Packed45_g157440).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157440 = Normal_NO_DTX544_g157440;
				#else
				float2 staticSwitch37_g157440 = staticSwitch38_g157440;
				#endif
				float2 temp_output_724_0_g157436 = ( (staticSwitch37_g157440*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g157441 = temp_output_724_0_g157436;
				float2 break71_g157441 = Normal_Planar45_g157441;
				float3 appendResult72_g157441 = (float3(break71_g157441.x , 0.0 , break71_g157441.y));
				float2 temp_output_858_0_g157436 = (mul( ase_worldToTangent, appendResult72_g157441 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#endif
				half2 Local_NormalTS729_g157436 = staticSwitch727_g157436;
				float2 temp_output_36_0_g157459 = ( lerpResult40_g157459 + Local_NormalTS729_g157436 );
				float2 lerpResult405_g157436 = lerp( Visual_NormalTS529_g157436 , temp_output_36_0_g157459 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g157436 = lerpResult405_g157436;
				#else
				float2 staticSwitch418_g157436 = Visual_NormalTS529_g157436;
				#endif
				half2 Final_NormalTS612_g157436 = staticSwitch418_g157436;
				float2 In_NormalTS3_g157454 = Final_NormalTS612_g157436;
				float3 appendResult68_g157460 = (float3(Final_NormalTS612_g157436 , 1.0));
				float3 tanNormal74_g157460 = appendResult68_g157460;
				float3 worldNormal74_g157460 = normalize( float3(dot(tanToWorld0,tanNormal74_g157460), dot(tanToWorld1,tanNormal74_g157460), dot(tanToWorld2,tanNormal74_g157460)) );
				half3 Final_NormalWS956_g157436 = worldNormal74_g157460;
				float3 In_NormalWS3_g157454 = Final_NormalWS956_g157436;
				half4 Visual_Shader531_g157436 = Out_Shader4_g157453;
				float4 lerpResult1000_g157436 = lerp( Local_Masks750_g157436 , ( Visual_Shader531_g157436 * Local_Masks750_g157436 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g157436 = lerp( Visual_Shader531_g157436 , lerpResult1000_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g157436 = lerpResult998_g157436;
				#else
				float4 staticSwitch451_g157436 = Visual_Shader531_g157436;
				#endif
				half4 Final_Masks613_g157436 = staticSwitch451_g157436;
				float4 In_Shader3_g157454 = Final_Masks613_g157436;
				float4 In_Emissive3_g157454 = Out_Emissive4_g157453;
				float3 temp_output_3_0_g157462 = Final_Albedo601_g157436;
				float dotResult20_g157462 = dot( temp_output_3_0_g157462 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157436 = dotResult20_g157462;
				float In_Grayscale3_g157454 = Final_Grayscale615_g157436;
				float clampResult651_g157436 = clamp( saturate( ( Final_Grayscale615_g157436 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157436 = clampResult651_g157436;
				float In_Luminosity3_g157454 = Final_Luminosity652_g157436;
				half Visual_MultiMask547_g157436 = Out_MultiMask4_g157453;
				float lerpResult477_g157436 = lerp( Visual_MultiMask547_g157436 , Local_MultiMask767_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch482_g157436 = lerpResult477_g157436;
				#else
				float staticSwitch482_g157436 = Visual_MultiMask547_g157436;
				#endif
				half Final_MultiMask572_g157436 = staticSwitch482_g157436;
				float In_MultiMask3_g157454 = Final_MultiMask572_g157436;
				half Visual_AlphaClip559_g157436 = Out_AlphaClip4_g157453;
				float temp_output_718_0_g157436 = (Local_AlbedoTex777_g157436).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g157436 = ( temp_output_718_0_g157436 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g157436 = temp_output_718_0_g157436;
				#endif
				half Local_AlphaClip772_g157436 = staticSwitch924_g157436;
				float lerpResult448_g157436 = lerp( Visual_AlphaClip559_g157436 , Local_AlphaClip772_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch564_g157436 = lerpResult448_g157436;
				#else
				float staticSwitch564_g157436 = Visual_AlphaClip559_g157436;
				#endif
				half Final_AlphaClip602_g157436 = staticSwitch564_g157436;
				float In_AlphaClip3_g157454 = Final_AlphaClip602_g157436;
				half Visual_AlphaFade588_g157436 = Out_AlphaFade4_g157453;
				half Local_AlphaFade773_g157436 = (lerpResult706_g157436).a;
				float lerpResult604_g157436 = lerp( Visual_AlphaFade588_g157436 , Local_AlphaFade773_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch608_g157436 = lerpResult604_g157436;
				#else
				float staticSwitch608_g157436 = Visual_AlphaFade588_g157436;
				#endif
				half Final_AlphaFade611_g157436 = staticSwitch608_g157436;
				float In_AlphaFade3_g157454 = Final_AlphaFade611_g157436;
				float3 In_Translucency3_g157454 = Out_Translucency4_g157453;
				float In_Transmission3_g157454 = Out_Transmission4_g157453;
				float In_Thickness3_g157454 = Out_Thickness4_g157453;
				float In_Diffusion3_g157454 = Out_Diffusion4_g157453;
				{
				Data3_g157454.Dummy = In_Dummy3_g157454;
				Data3_g157454.Albedo = In_Albedo3_g157454;
				Data3_g157454.NormalTS = In_NormalTS3_g157454;
				Data3_g157454.NormalWS = In_NormalWS3_g157454;
				Data3_g157454.Shader = In_Shader3_g157454;
				Data3_g157454.Emissive= In_Emissive3_g157454;
				Data3_g157454.MultiMask = In_MultiMask3_g157454;
				Data3_g157454.Grayscale = In_Grayscale3_g157454;
				Data3_g157454.Luminosity = In_Luminosity3_g157454;
				Data3_g157454.AlphaClip = In_AlphaClip3_g157454;
				Data3_g157454.AlphaFade = In_AlphaFade3_g157454;
				Data3_g157454.Translucency = In_Translucency3_g157454;
				Data3_g157454.Transmission = In_Transmission3_g157454;
				Data3_g157454.Thickness = In_Thickness3_g157454;
				Data3_g157454.Diffusion = In_Diffusion3_g157454;
				}
				TVEVisualData Data4_g157467 = Data3_g157454;
				float Out_Dummy4_g157467 = 0;
				float3 Out_Albedo4_g157467 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157467 = float2( 0,0 );
				float3 Out_NormalWS4_g157467 = float3( 0,0,0 );
				float4 Out_Shader4_g157467 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157467 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157467 = 0;
				float Out_Grayscale4_g157467 = 0;
				float Out_Luminosity4_g157467 = 0;
				float Out_AlphaClip4_g157467 = 0;
				float Out_AlphaFade4_g157467 = 0;
				float3 Out_Translucency4_g157467 = float3( 0,0,0 );
				float Out_Transmission4_g157467 = 0;
				float Out_Thickness4_g157467 = 0;
				float Out_Diffusion4_g157467 = 0;
				{
				Out_Dummy4_g157467 = Data4_g157467.Dummy;
				Out_Albedo4_g157467 = Data4_g157467.Albedo;
				Out_NormalTS4_g157467 = Data4_g157467.NormalTS;
				Out_NormalWS4_g157467 = Data4_g157467.NormalWS;
				Out_Shader4_g157467 = Data4_g157467.Shader;
				Out_Emissive4_g157467= Data4_g157467.Emissive;
				Out_MultiMask4_g157467 = Data4_g157467.MultiMask;
				Out_Grayscale4_g157467 = Data4_g157467.Grayscale;
				Out_Luminosity4_g157467= Data4_g157467.Luminosity;
				Out_AlphaClip4_g157467 = Data4_g157467.AlphaClip;
				Out_AlphaFade4_g157467 = Data4_g157467.AlphaFade;
				Out_Translucency4_g157467 = Data4_g157467.Translucency;
				Out_Transmission4_g157467 = Data4_g157467.Transmission;
				Out_Thickness4_g157467 = Data4_g157467.Thickness;
				Out_Diffusion4_g157467 = Data4_g157467.Diffusion;
				}
				half3 Visual_Albedo127_g157466 = Out_Albedo4_g157467;
				TVEModelData Data15_g157469 = Data16_g157339;
				float Out_Dummy15_g157469 = 0;
				float3 Out_PositionOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157469 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157469 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157469 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157469 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157469 = float3( 0,0,0 );
				float4 Out_VertexData15_g157469 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157469 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157469 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157469 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157469 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157469 = Data15_g157469.Dummy;
				Out_PositionOS15_g157469 = Data15_g157469.PositionOS;
				Out_PositionWS15_g157469 = Data15_g157469.PositionWS;
				Out_PositionWO15_g157469 = Data15_g157469.PositionWO;
				Out_PositionRawOS15_g157469 = Data15_g157469.PositionRawOS;
				Out_PositionAddOS15_g157469 = Data15_g157469.PositionAddOS;
				Out_PivotOS15_g157469 = Data15_g157469.PivotOS;
				Out_PivotWS15_g157469 = Data15_g157469.PivotWS;
				Out_PivotWO15_g157469 = Data15_g157469.PivotWO;
				Out_NormalOS15_g157469 = Data15_g157469.NormalOS;
				Out_NormalWS15_g157469 = Data15_g157469.NormalWS;
				Out_NormalRawOS15_g157469 = Data15_g157469.NormalRawOS;
				Out_NormalRawWS15_g157469 = Data15_g157469.NormalRawWS;
				Out_TangentOS15_g157469 = Data15_g157469.TangentOS;
				Out_ViewDirWS15_g157469 = Data15_g157469.ViewDirWS;
				Out_VertexData15_g157469 = Data15_g157469.VertexData;
				Out_MotionData15_g157469 = Data15_g157469.MotionData;
				Out_BoundsData15_g157469 = Data15_g157469.BoundsData;
				Out_RotationData15_g157469 = Data15_g157469.RotationData;
				Out_FragmentData15_g157469 = Data15_g157469.FragmentData;
				}
				half4 Model_VertexData206_g157466 = Out_VertexData15_g157469;
				float4 break208_g157466 = Model_VertexData206_g157466;
				float4 break33_g157474 = _occlusion_vert_mode;
				float temp_output_30_0_g157474 = ( break208_g157466.x * break33_g157474.x );
				float temp_output_29_0_g157474 = ( break208_g157466.y * break33_g157474.y );
				float temp_output_31_0_g157474 = ( break208_g157466.z * break33_g157474.z );
				float temp_output_28_0_g157474 = ( temp_output_30_0_g157474 + temp_output_29_0_g157474 + temp_output_31_0_g157474 + ( break208_g157466.w * break33_g157474.w ) );
				float temp_output_194_0_g157466 = temp_output_28_0_g157474;
				float clampResult17_g157472 = clamp( temp_output_194_0_g157466 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157471 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g157471 = ( _OcclusionMeshRemap.y - temp_output_7_0_g157471 );
				float temp_output_6_0_g157473 = saturate( ( ( clampResult17_g157472 - temp_output_7_0_g157471 ) / ( temp_output_10_0_g157471 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157473 = ( temp_output_6_0_g157473 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157473 = temp_output_6_0_g157473;
				#endif
				half Occlusion_Mask82_g157466 = staticSwitch14_g157473;
				float3 lerpResult75_g157466 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g157466);
				float3 lerpResult186_g157466 = lerp( Visual_Albedo127_g157466 , ( Visual_Albedo127_g157466 * lerpResult75_g157466 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g157466 = lerpResult186_g157466;
				#else
				float3 staticSwitch171_g157466 = Visual_Albedo127_g157466;
				#endif
				half3 Final_Albedo160_g157466 = staticSwitch171_g157466;
				float3 In_Albedo3_g157468 = Final_Albedo160_g157466;
				float2 In_NormalTS3_g157468 = Out_NormalTS4_g157467;
				float3 In_NormalWS3_g157468 = Out_NormalWS4_g157467;
				float4 In_Shader3_g157468 = Out_Shader4_g157467;
				float4 In_Emissive3_g157468 = Out_Emissive4_g157467;
				float3 temp_output_3_0_g157470 = Final_Albedo160_g157466;
				float dotResult20_g157470 = dot( temp_output_3_0_g157470 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157466 = dotResult20_g157470;
				float In_Grayscale3_g157468 = Final_Grayscale164_g157466;
				float clampResult180_g157466 = clamp( saturate( ( Final_Grayscale164_g157466 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g157466 = clampResult180_g157466;
				float In_Luminosity3_g157468 = Final_Shading181_g157466;
				float In_MultiMask3_g157468 = Out_MultiMask4_g157467;
				float In_AlphaClip3_g157468 = Out_AlphaClip4_g157467;
				float In_AlphaFade3_g157468 = Out_AlphaFade4_g157467;
				float3 In_Translucency3_g157468 = Out_Translucency4_g157467;
				float In_Transmission3_g157468 = Out_Transmission4_g157467;
				float In_Thickness3_g157468 = Out_Thickness4_g157467;
				float In_Diffusion3_g157468 = Out_Diffusion4_g157467;
				{
				Data3_g157468.Dummy = In_Dummy3_g157468;
				Data3_g157468.Albedo = In_Albedo3_g157468;
				Data3_g157468.NormalTS = In_NormalTS3_g157468;
				Data3_g157468.NormalWS = In_NormalWS3_g157468;
				Data3_g157468.Shader = In_Shader3_g157468;
				Data3_g157468.Emissive= In_Emissive3_g157468;
				Data3_g157468.MultiMask = In_MultiMask3_g157468;
				Data3_g157468.Grayscale = In_Grayscale3_g157468;
				Data3_g157468.Luminosity = In_Luminosity3_g157468;
				Data3_g157468.AlphaClip = In_AlphaClip3_g157468;
				Data3_g157468.AlphaFade = In_AlphaFade3_g157468;
				Data3_g157468.Translucency = In_Translucency3_g157468;
				Data3_g157468.Transmission = In_Transmission3_g157468;
				Data3_g157468.Thickness = In_Thickness3_g157468;
				Data3_g157468.Diffusion = In_Diffusion3_g157468;
				}
				TVEVisualData Data4_g157479 = Data3_g157468;
				float Out_Dummy4_g157479 = 0;
				float3 Out_Albedo4_g157479 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157479 = float2( 0,0 );
				float3 Out_NormalWS4_g157479 = float3( 0,0,0 );
				float4 Out_Shader4_g157479 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157479 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157479 = 0;
				float Out_Grayscale4_g157479 = 0;
				float Out_Luminosity4_g157479 = 0;
				float Out_AlphaClip4_g157479 = 0;
				float Out_AlphaFade4_g157479 = 0;
				float3 Out_Translucency4_g157479 = float3( 0,0,0 );
				float Out_Transmission4_g157479 = 0;
				float Out_Thickness4_g157479 = 0;
				float Out_Diffusion4_g157479 = 0;
				{
				Out_Dummy4_g157479 = Data4_g157479.Dummy;
				Out_Albedo4_g157479 = Data4_g157479.Albedo;
				Out_NormalTS4_g157479 = Data4_g157479.NormalTS;
				Out_NormalWS4_g157479 = Data4_g157479.NormalWS;
				Out_Shader4_g157479 = Data4_g157479.Shader;
				Out_Emissive4_g157479= Data4_g157479.Emissive;
				Out_MultiMask4_g157479 = Data4_g157479.MultiMask;
				Out_Grayscale4_g157479 = Data4_g157479.Grayscale;
				Out_Luminosity4_g157479= Data4_g157479.Luminosity;
				Out_AlphaClip4_g157479 = Data4_g157479.AlphaClip;
				Out_AlphaFade4_g157479 = Data4_g157479.AlphaFade;
				Out_Translucency4_g157479 = Data4_g157479.Translucency;
				Out_Transmission4_g157479 = Data4_g157479.Transmission;
				Out_Thickness4_g157479 = Data4_g157479.Thickness;
				Out_Diffusion4_g157479 = Data4_g157479.Diffusion;
				}
				half3 Visual_Albedo127_g157476 = Out_Albedo4_g157479;
				float temp_output_162_11_g157476 = Out_MultiMask4_g157479;
				half Visual_MultiMask196_g157476 = temp_output_162_11_g157476;
				float lerpResult190_g157476 = lerp( 1.0 , Visual_MultiMask196_g157476 , _GradientMultiValue);
				half Gradient_MultiMask194_g157476 = lerpResult190_g157476;
				TVEModelData Data15_g157477 = Data16_g157339;
				float Out_Dummy15_g157477 = 0;
				float3 Out_PositionOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157477 = float3( 0,0,0 );
				float4 Out_VertexData15_g157477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157477 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157477 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157477 = Data15_g157477.Dummy;
				Out_PositionOS15_g157477 = Data15_g157477.PositionOS;
				Out_PositionWS15_g157477 = Data15_g157477.PositionWS;
				Out_PositionWO15_g157477 = Data15_g157477.PositionWO;
				Out_PositionRawOS15_g157477 = Data15_g157477.PositionRawOS;
				Out_PositionAddOS15_g157477 = Data15_g157477.PositionAddOS;
				Out_PivotOS15_g157477 = Data15_g157477.PivotOS;
				Out_PivotWS15_g157477 = Data15_g157477.PivotWS;
				Out_PivotWO15_g157477 = Data15_g157477.PivotWO;
				Out_NormalOS15_g157477 = Data15_g157477.NormalOS;
				Out_NormalWS15_g157477 = Data15_g157477.NormalWS;
				Out_NormalRawOS15_g157477 = Data15_g157477.NormalRawOS;
				Out_NormalRawWS15_g157477 = Data15_g157477.NormalRawWS;
				Out_TangentOS15_g157477 = Data15_g157477.TangentOS;
				Out_ViewDirWS15_g157477 = Data15_g157477.ViewDirWS;
				Out_VertexData15_g157477 = Data15_g157477.VertexData;
				Out_MotionData15_g157477 = Data15_g157477.MotionData;
				Out_BoundsData15_g157477 = Data15_g157477.BoundsData;
				Out_RotationData15_g157477 = Data15_g157477.RotationData;
				Out_FragmentData15_g157477 = Data15_g157477.FragmentData;
				}
				half4 Model_VertexData224_g157476 = Out_VertexData15_g157477;
				float4 break226_g157476 = Model_VertexData224_g157476;
				float4 break33_g157478 = _gradient_vert_mode;
				float temp_output_30_0_g157478 = ( break226_g157476.x * break33_g157478.x );
				float temp_output_29_0_g157478 = ( break226_g157476.y * break33_g157478.y );
				float temp_output_31_0_g157478 = ( break226_g157476.z * break33_g157478.z );
				float temp_output_28_0_g157478 = ( temp_output_30_0_g157478 + temp_output_29_0_g157478 + temp_output_31_0_g157478 + ( break226_g157476.w * break33_g157478.w ) );
				float temp_output_211_0_g157476 = temp_output_28_0_g157478;
				float clampResult17_g157483 = clamp( temp_output_211_0_g157476 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157484 = _GradientMeshRemap.x;
				float temp_output_10_0_g157484 = ( _GradientMeshRemap.y - temp_output_7_0_g157484 );
				float temp_output_6_0_g157485 = saturate( ( ( clampResult17_g157483 - temp_output_7_0_g157484 ) / ( temp_output_10_0_g157484 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157485 = ( temp_output_6_0_g157485 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157485 = temp_output_6_0_g157485;
				#endif
				half Gradient_VertMask82_g157476 = staticSwitch14_g157485;
				half Gradient_Mask200_g157476 = ( Gradient_MultiMask194_g157476 * Gradient_VertMask82_g157476 );
				float3 lerpResult75_g157476 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g157476);
				float3 lerpResult186_g157476 = lerp( Visual_Albedo127_g157476 , ( Visual_Albedo127_g157476 * lerpResult75_g157476 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g157476 = lerpResult186_g157476;
				#else
				float3 staticSwitch171_g157476 = Visual_Albedo127_g157476;
				#endif
				half3 Final_Albedo160_g157476 = staticSwitch171_g157476;
				float3 In_Albedo3_g157480 = Final_Albedo160_g157476;
				float2 In_NormalTS3_g157480 = Out_NormalTS4_g157479;
				float3 In_NormalWS3_g157480 = Out_NormalWS4_g157479;
				float4 In_Shader3_g157480 = Out_Shader4_g157479;
				float4 In_Emissive3_g157480 = Out_Emissive4_g157479;
				float3 temp_output_3_0_g157481 = Final_Albedo160_g157476;
				float dotResult20_g157481 = dot( temp_output_3_0_g157481 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157476 = dotResult20_g157481;
				float In_Grayscale3_g157480 = Final_Grayscale164_g157476;
				float clampResult180_g157476 = clamp( saturate( ( Final_Grayscale164_g157476 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g157476 = clampResult180_g157476;
				float In_Luminosity3_g157480 = Final_Luminosity181_g157476;
				float In_MultiMask3_g157480 = temp_output_162_11_g157476;
				float In_AlphaClip3_g157480 = Out_AlphaClip4_g157479;
				float In_AlphaFade3_g157480 = Out_AlphaFade4_g157479;
				float3 In_Translucency3_g157480 = Out_Translucency4_g157479;
				float In_Transmission3_g157480 = Out_Transmission4_g157479;
				float In_Thickness3_g157480 = Out_Thickness4_g157479;
				float In_Diffusion3_g157480 = Out_Diffusion4_g157479;
				{
				Data3_g157480.Dummy = In_Dummy3_g157480;
				Data3_g157480.Albedo = In_Albedo3_g157480;
				Data3_g157480.NormalTS = In_NormalTS3_g157480;
				Data3_g157480.NormalWS = In_NormalWS3_g157480;
				Data3_g157480.Shader = In_Shader3_g157480;
				Data3_g157480.Emissive= In_Emissive3_g157480;
				Data3_g157480.MultiMask = In_MultiMask3_g157480;
				Data3_g157480.Grayscale = In_Grayscale3_g157480;
				Data3_g157480.Luminosity = In_Luminosity3_g157480;
				Data3_g157480.AlphaClip = In_AlphaClip3_g157480;
				Data3_g157480.AlphaFade = In_AlphaFade3_g157480;
				Data3_g157480.Translucency = In_Translucency3_g157480;
				Data3_g157480.Transmission = In_Transmission3_g157480;
				Data3_g157480.Thickness = In_Thickness3_g157480;
				Data3_g157480.Diffusion = In_Diffusion3_g157480;
				}
				TVEVisualData Data4_g157487 = Data3_g157480;
				float Out_Dummy4_g157487 = 0;
				float3 Out_Albedo4_g157487 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157487 = float2( 0,0 );
				float3 Out_NormalWS4_g157487 = float3( 0,0,0 );
				float4 Out_Shader4_g157487 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157487 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157487 = 0;
				float Out_Grayscale4_g157487 = 0;
				float Out_Luminosity4_g157487 = 0;
				float Out_AlphaClip4_g157487 = 0;
				float Out_AlphaFade4_g157487 = 0;
				float3 Out_Translucency4_g157487 = float3( 0,0,0 );
				float Out_Transmission4_g157487 = 0;
				float Out_Thickness4_g157487 = 0;
				float Out_Diffusion4_g157487 = 0;
				{
				Out_Dummy4_g157487 = Data4_g157487.Dummy;
				Out_Albedo4_g157487 = Data4_g157487.Albedo;
				Out_NormalTS4_g157487 = Data4_g157487.NormalTS;
				Out_NormalWS4_g157487 = Data4_g157487.NormalWS;
				Out_Shader4_g157487 = Data4_g157487.Shader;
				Out_Emissive4_g157487= Data4_g157487.Emissive;
				Out_MultiMask4_g157487 = Data4_g157487.MultiMask;
				Out_Grayscale4_g157487 = Data4_g157487.Grayscale;
				Out_Luminosity4_g157487= Data4_g157487.Luminosity;
				Out_AlphaClip4_g157487 = Data4_g157487.AlphaClip;
				Out_AlphaFade4_g157487 = Data4_g157487.AlphaFade;
				Out_Translucency4_g157487 = Data4_g157487.Translucency;
				Out_Transmission4_g157487 = Data4_g157487.Transmission;
				Out_Thickness4_g157487 = Data4_g157487.Thickness;
				Out_Diffusion4_g157487 = Data4_g157487.Diffusion;
				}
				half3 Visual_Albedo127_g157486 = Out_Albedo4_g157487;
				float vertexToFrag203_g157486 = IN.ase_texcoord4.z;
				float clampResult208_g157486 = clamp( vertexToFrag203_g157486 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g157486 = ( Visual_Albedo127_g157486 + ( ( Visual_Albedo127_g157486 * Visual_Albedo127_g157486 * 200.0 * _motion_highlight_color ) * clampResult208_g157486 ) );
				#else
				float3 staticSwitch209_g157486 = Visual_Albedo127_g157486;
				#endif
				half3 Final_Albedo160_g157486 = staticSwitch209_g157486;
				float3 In_Albedo3_g157489 = Final_Albedo160_g157486;
				float2 In_NormalTS3_g157489 = Out_NormalTS4_g157487;
				float3 In_NormalWS3_g157489 = Out_NormalWS4_g157487;
				float4 In_Shader3_g157489 = Out_Shader4_g157487;
				float4 In_Emissive3_g157489 = Out_Emissive4_g157487;
				float In_Grayscale3_g157489 = Out_Grayscale4_g157487;
				float In_Luminosity3_g157489 = Out_Luminosity4_g157487;
				float In_MultiMask3_g157489 = Out_MultiMask4_g157487;
				float In_AlphaClip3_g157489 = Out_AlphaClip4_g157487;
				float In_AlphaFade3_g157489 = Out_AlphaFade4_g157487;
				float3 In_Translucency3_g157489 = Out_Translucency4_g157487;
				float In_Transmission3_g157489 = Out_Transmission4_g157487;
				float In_Thickness3_g157489 = Out_Thickness4_g157487;
				float In_Diffusion3_g157489 = Out_Diffusion4_g157487;
				{
				Data3_g157489.Dummy = In_Dummy3_g157489;
				Data3_g157489.Albedo = In_Albedo3_g157489;
				Data3_g157489.NormalTS = In_NormalTS3_g157489;
				Data3_g157489.NormalWS = In_NormalWS3_g157489;
				Data3_g157489.Shader = In_Shader3_g157489;
				Data3_g157489.Emissive= In_Emissive3_g157489;
				Data3_g157489.MultiMask = In_MultiMask3_g157489;
				Data3_g157489.Grayscale = In_Grayscale3_g157489;
				Data3_g157489.Luminosity = In_Luminosity3_g157489;
				Data3_g157489.AlphaClip = In_AlphaClip3_g157489;
				Data3_g157489.AlphaFade = In_AlphaFade3_g157489;
				Data3_g157489.Translucency = In_Translucency3_g157489;
				Data3_g157489.Transmission = In_Transmission3_g157489;
				Data3_g157489.Thickness = In_Thickness3_g157489;
				Data3_g157489.Diffusion = In_Diffusion3_g157489;
				}
				TVEVisualData Data4_g157834 = Data3_g157489;
				float Out_Dummy4_g157834 = 0;
				float3 Out_Albedo4_g157834 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157834 = float2( 0,0 );
				float3 Out_NormalWS4_g157834 = float3( 0,0,0 );
				float4 Out_Shader4_g157834 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157834 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157834 = 0;
				float Out_Grayscale4_g157834 = 0;
				float Out_Luminosity4_g157834 = 0;
				float Out_AlphaClip4_g157834 = 0;
				float Out_AlphaFade4_g157834 = 0;
				float3 Out_Translucency4_g157834 = float3( 0,0,0 );
				float Out_Transmission4_g157834 = 0;
				float Out_Thickness4_g157834 = 0;
				float Out_Diffusion4_g157834 = 0;
				{
				Out_Dummy4_g157834 = Data4_g157834.Dummy;
				Out_Albedo4_g157834 = Data4_g157834.Albedo;
				Out_NormalTS4_g157834 = Data4_g157834.NormalTS;
				Out_NormalWS4_g157834 = Data4_g157834.NormalWS;
				Out_Shader4_g157834 = Data4_g157834.Shader;
				Out_Emissive4_g157834= Data4_g157834.Emissive;
				Out_MultiMask4_g157834 = Data4_g157834.MultiMask;
				Out_Grayscale4_g157834 = Data4_g157834.Grayscale;
				Out_Luminosity4_g157834= Data4_g157834.Luminosity;
				Out_AlphaClip4_g157834 = Data4_g157834.AlphaClip;
				Out_AlphaFade4_g157834 = Data4_g157834.AlphaFade;
				Out_Translucency4_g157834 = Data4_g157834.Translucency;
				Out_Transmission4_g157834 = Data4_g157834.Transmission;
				Out_Thickness4_g157834 = Data4_g157834.Thickness;
				Out_Diffusion4_g157834 = Data4_g157834.Diffusion;
				}
				half3 Visual_Albedo127_g157833 = Out_Albedo4_g157834;
				float3 temp_output_622_0_g157833 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler238_g157837 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157840 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157840 = ( temp_output_6_0_g157840 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157840 = temp_output_6_0_g157840;
				#endif
				half4 Overlay_Coords639_g157833 = staticSwitch14_g157840;
				float4 temp_output_37_0_g157837 = Overlay_Coords639_g157833;
				half4 Coords238_g157837 = temp_output_37_0_g157837;
				TVEModelData Data15_g157841 = Data16_g157339;
				float Out_Dummy15_g157841 = 0;
				float3 Out_PositionOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157841 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157841 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157841 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157841 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157841 = float3( 0,0,0 );
				float4 Out_VertexData15_g157841 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157841 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157841 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157841 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157841 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157841 = Data15_g157841.Dummy;
				Out_PositionOS15_g157841 = Data15_g157841.PositionOS;
				Out_PositionWS15_g157841 = Data15_g157841.PositionWS;
				Out_PositionWO15_g157841 = Data15_g157841.PositionWO;
				Out_PositionRawOS15_g157841 = Data15_g157841.PositionRawOS;
				Out_PositionAddOS15_g157841 = Data15_g157841.PositionAddOS;
				Out_PivotOS15_g157841 = Data15_g157841.PivotOS;
				Out_PivotWS15_g157841 = Data15_g157841.PivotWS;
				Out_PivotWO15_g157841 = Data15_g157841.PivotWO;
				Out_NormalOS15_g157841 = Data15_g157841.NormalOS;
				Out_NormalWS15_g157841 = Data15_g157841.NormalWS;
				Out_NormalRawOS15_g157841 = Data15_g157841.NormalRawOS;
				Out_NormalRawWS15_g157841 = Data15_g157841.NormalRawWS;
				Out_TangentOS15_g157841 = Data15_g157841.TangentOS;
				Out_ViewDirWS15_g157841 = Data15_g157841.ViewDirWS;
				Out_VertexData15_g157841 = Data15_g157841.VertexData;
				Out_MotionData15_g157841 = Data15_g157841.MotionData;
				Out_BoundsData15_g157841 = Data15_g157841.BoundsData;
				Out_RotationData15_g157841 = Data15_g157841.RotationData;
				Out_FragmentData15_g157841 = Data15_g157841.FragmentData;
				}
				half3 Model_PositionWO602_g157833 = Out_PositionWO15_g157841;
				float3 temp_output_279_0_g157837 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157837 = temp_output_279_0_g157837;
				half4 localSamplePlanar2D238_g157837 = SamplePlanar2D( Texture238_g157837 , Sampler238_g157837 , Coords238_g157837 , WorldPosition238_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler246_g157837 = sampler_Linear_Repeat;
				half4 Coords246_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition246_g157837 = temp_output_279_0_g157837;
				half3 Model_NormalWS712_g157833 = Out_NormalWS15_g157841;
				float3 temp_output_280_0_g157837 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157837 = temp_output_280_0_g157837;
				half4 localSamplePlanar3D246_g157837 = SamplePlanar3D( Texture246_g157837 , Sampler246_g157837 , Coords246_g157837 , WorldPosition246_g157837 , WorldNormal246_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler234_g157837 = sampler_Linear_Repeat;
				float4 Coords234_g157837 = temp_output_37_0_g157837;
				float3 WorldPosition234_g157837 = temp_output_279_0_g157837;
				float4 localSampleStochastic2D234_g157837 = SampleStochastic2D( Texture234_g157837 , Sampler234_g157837 , Coords234_g157837 , WorldPosition234_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler263_g157837 = sampler_Linear_Repeat;
				half4 Coords263_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition263_g157837 = temp_output_279_0_g157837;
				half3 WorldNormal263_g157837 = temp_output_280_0_g157837;
				half4 localSampleStochastic3D263_g157837 = SampleStochastic3D( Texture263_g157837 , Sampler263_g157837 , Coords263_g157837 , WorldPosition263_g157837 , WorldNormal263_g157837 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g157833 = localSamplePlanar3D246_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g157833 = localSampleStochastic2D234_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g157833 = localSampleStochastic3D263_g157837;
				#else
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#endif
				half3 Overlay_Albedo526_g157833 = (staticSwitch676_g157833).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g157833 = ( temp_output_622_0_g157833 * Overlay_Albedo526_g157833 );
				#else
				float3 staticSwitch578_g157833 = temp_output_622_0_g157833;
				#endif
				float3 temp_output_6_0_g157856 = staticSwitch578_g157833;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157856 = ( temp_output_6_0_g157856 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g157856 = temp_output_6_0_g157856;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157843) = _OverlayMaskTex;
				SamplerState Sampler276_g157843 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157844 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157844 = ( temp_output_6_0_g157844 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157844 = temp_output_6_0_g157844;
				#endif
				half4 Local_MaskCoords886_g157833 = staticSwitch14_g157844;
				float4 temp_output_37_0_g157843 = Local_MaskCoords886_g157833;
				half4 Coords276_g157843 = temp_output_37_0_g157843;
				half2 TexCoord276_g157843 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157843 = SampleMain( Texture276_g157843 , Sampler276_g157843 , Coords276_g157843 , TexCoord276_g157843 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157843) = _OverlayMaskTex;
				SamplerState Sampler275_g157843 = sampler_Linear_Repeat;
				half4 Coords275_g157843 = temp_output_37_0_g157843;
				float2 appendResult289_g157843 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157843 = appendResult289_g157843;
				#else
				float2 staticSwitch288_g157843 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157843 = staticSwitch288_g157843;
				half4 localSampleExtra275_g157843 = SampleExtra( Texture275_g157843 , Sampler275_g157843 , Coords275_g157843 , TexCoord275_g157843 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g157833 = localSampleExtra275_g157843;
				#else
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#endif
				half4 Local_MaskTex885_g157833 = staticSwitch894_g157833;
				float clampResult17_g157858 = clamp( (Local_MaskTex885_g157833).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157859 = _OverlayMaskRemap.x;
				float temp_output_10_0_g157859 = ( _OverlayMaskRemap.y - temp_output_7_0_g157859 );
				float lerpResult898_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157858 - temp_output_7_0_g157859 ) / ( temp_output_10_0_g157859 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g157833 = lerpResult898_g157833;
				#else
				float staticSwitch904_g157833 = 1.0;
				#endif
				half Overlay_TexMask906_g157833 = staticSwitch904_g157833;
				float3 temp_output_739_21_g157833 = Out_NormalWS4_g157834;
				half3 Visual_NormalWS749_g157833 = temp_output_739_21_g157833;
				float clampResult17_g157853 = clamp( saturate( (Visual_NormalWS749_g157833).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157852 = _OverlayProjRemap.x;
				float temp_output_10_0_g157852 = ( _OverlayProjRemap.y - temp_output_7_0_g157852 );
				float lerpResult842_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157853 - temp_output_7_0_g157852 ) / ( temp_output_10_0_g157852 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g157833 = lerpResult842_g157833;
				#else
				float staticSwitch734_g157833 = 1.0;
				#endif
				half Overlay_MaskProj457_g157833 = staticSwitch734_g157833;
				float temp_output_739_15_g157833 = Out_Luminosity4_g157834;
				half Visual_Luminosity654_g157833 = temp_output_739_15_g157833;
				float clampResult17_g157855 = clamp( Visual_Luminosity654_g157833 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157854 = _OverlayLumaRemap.x;
				float temp_output_10_0_g157854 = ( _OverlayLumaRemap.y - temp_output_7_0_g157854 );
				float lerpResult587_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157855 - temp_output_7_0_g157854 ) / ( temp_output_10_0_g157854 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g157833 = lerpResult587_g157833;
				half4 Model_VertexMasks791_g157833 = Out_VertexData15_g157841;
				float4 break792_g157833 = Model_VertexMasks791_g157833;
				float4 break33_g157845 = _overlay_vert_mode;
				float temp_output_30_0_g157845 = ( break792_g157833.x * break33_g157845.x );
				float temp_output_29_0_g157845 = ( break792_g157833.y * break33_g157845.y );
				float temp_output_31_0_g157845 = ( break792_g157833.z * break33_g157845.z );
				float temp_output_28_0_g157845 = ( temp_output_30_0_g157845 + temp_output_29_0_g157845 + temp_output_31_0_g157845 + ( break792_g157833.w * break33_g157845.w ) );
				float clampResult17_g157846 = clamp( temp_output_28_0_g157845 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157848 = _OverlayMeshRemap.x;
				float temp_output_10_0_g157848 = ( _OverlayMeshRemap.y - temp_output_7_0_g157848 );
				float lerpResult879_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157846 - temp_output_7_0_g157848 ) / ( temp_output_10_0_g157848 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g157857 = lerpResult879_g157833;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157857 = ( temp_output_6_0_g157857 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157857 = temp_output_6_0_g157857;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g157833 = staticSwitch14_g157857;
				#else
				float staticSwitch800_g157833 = 1.0;
				#endif
				half Overlay_VertMask801_g157833 = staticSwitch800_g157833;
				half Overlay_MaskNoise427_g157833 = 1.0;
				TVEGlobalData Data15_g157835 = Data204_g157340;
				float Out_Dummy15_g157835 = 0;
				float4 Out_CoatParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157835 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157835 = Data15_g157835.Dummy;
				Out_CoatParams15_g157835 = Data15_g157835.CoatParams;
				Out_PaintParams15_g157835 = Data15_g157835.PaintParams;
				Out_GlowParams15_g157835 = Data15_g157835.GlowParams;
				Out_AtmoParams15_g157835= Data15_g157835.AtmoParams;
				Out_FormParams15_g157835 = Data15_g157835.FormParams;
				Out_LandParams15_g157835 = Data15_g157835.LandParams;
				Out_WindParams15_g157835 = Data15_g157835.WindParams;
				Out_PushParams15_g157835 = Data15_g157835.PushParams;
				}
				half4 Global_AtmoParams516_g157833 = Out_AtmoParams15_g157835;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g157833 = (Global_AtmoParams516_g157833).z;
				#else
				float staticSwitch705_g157833 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g157833 = staticSwitch705_g157833;
				half Custom_Mask646_g157833 = 1.0;
				float temp_output_7_0_g157851 = 0.1;
				float temp_output_10_0_g157851 = ( 0.2 - temp_output_7_0_g157851 );
				half Overlay_Mask494_g157833 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g157833 * Overlay_MaskProj457_g157833 * Overlay_MaskLuma438_g157833 * Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 * Custom_Mask646_g157833 ) - temp_output_7_0_g157851 ) / ( temp_output_10_0_g157851 + 0.0001 ) ) );
				float3 lerpResult467_g157833 = lerp( Visual_Albedo127_g157833 , staticSwitch14_g157856 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g157833 = lerpResult467_g157833;
				#else
				float3 staticSwitch577_g157833 = Visual_Albedo127_g157833;
				#endif
				half3 Final_Albedo493_g157833 = staticSwitch577_g157833;
				float3 In_Albedo3_g157836 = Final_Albedo493_g157833;
				half2 Visual_NormalTS535_g157833 = Out_NormalTS4_g157834;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157842) = _OverlayNormalTex;
				SamplerState Sampler238_g157842 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157842 = Overlay_Coords639_g157833;
				half4 Coords238_g157842 = temp_output_37_0_g157842;
				float3 temp_output_279_0_g157842 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157842 = temp_output_279_0_g157842;
				half4 localSamplePlanar2D238_g157842 = SamplePlanar2D( Texture238_g157842 , Sampler238_g157842 , Coords238_g157842 , WorldPosition238_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157842) = _OverlayNormalTex;
				SamplerState Sampler246_g157842 = sampler_Linear_Repeat;
				half4 Coords246_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition246_g157842 = temp_output_279_0_g157842;
				float3 temp_output_280_0_g157842 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157842 = temp_output_280_0_g157842;
				half4 localSamplePlanar3D246_g157842 = SamplePlanar3D( Texture246_g157842 , Sampler246_g157842 , Coords246_g157842 , WorldPosition246_g157842 , WorldNormal246_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157842) = _OverlayNormalTex;
				SamplerState Sampler234_g157842 = sampler_Linear_Repeat;
				float4 Coords234_g157842 = temp_output_37_0_g157842;
				float3 WorldPosition234_g157842 = temp_output_279_0_g157842;
				float4 localSampleStochastic2D234_g157842 = SampleStochastic2D( Texture234_g157842 , Sampler234_g157842 , Coords234_g157842 , WorldPosition234_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157842) = _OverlayNormalTex;
				SamplerState Sampler263_g157842 = sampler_Linear_Repeat;
				half4 Coords263_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition263_g157842 = temp_output_279_0_g157842;
				half3 WorldNormal263_g157842 = temp_output_280_0_g157842;
				half4 localSampleStochastic3D263_g157842 = SampleStochastic3D( Texture263_g157842 , Sampler263_g157842 , Coords263_g157842 , WorldPosition263_g157842 , WorldNormal263_g157842 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g157833 = localSamplePlanar3D246_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g157833 = localSampleStochastic2D234_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g157833 = localSampleStochastic3D263_g157842;
				#else
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#endif
				half4 Normal_Packed45_g157839 = staticSwitch686_g157833;
				float2 appendResult58_g157839 = (float2(( (Normal_Packed45_g157839).x * (Normal_Packed45_g157839).w ) , (Normal_Packed45_g157839).y));
				half2 Normal_Default50_g157839 = appendResult58_g157839;
				half2 Normal_ASTC41_g157839 = (Normal_Packed45_g157839).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157839 = Normal_ASTC41_g157839;
				#else
				float2 staticSwitch38_g157839 = Normal_Default50_g157839;
				#endif
				half2 Normal_NO_DTX544_g157839 = (Normal_Packed45_g157839).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157839 = Normal_NO_DTX544_g157839;
				#else
				float2 staticSwitch37_g157839 = staticSwitch38_g157839;
				#endif
				half2 Normal_Planar45_g157838 = (staticSwitch37_g157839*2.0 + -1.0);
				float2 break71_g157838 = Normal_Planar45_g157838;
				float3 appendResult72_g157838 = (float3(break71_g157838.x , 0.0 , break71_g157838.y));
				half2 Overlay_Normal528_g157833 = (mul( ase_worldToTangent, appendResult72_g157838 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g157833 = Overlay_Normal528_g157833;
				#else
				float2 staticSwitch579_g157833 = Visual_NormalTS535_g157833;
				#endif
				float2 lerpResult551_g157833 = lerp( Visual_NormalTS535_g157833 , ( staticSwitch579_g157833 * _OverlayNormalValue ) , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g157833 = lerpResult551_g157833;
				#else
				float2 staticSwitch583_g157833 = Visual_NormalTS535_g157833;
				#endif
				half2 Final_NormalTS499_g157833 = staticSwitch583_g157833;
				float2 In_NormalTS3_g157836 = Final_NormalTS499_g157833;
				float3 In_NormalWS3_g157836 = temp_output_739_21_g157833;
				half4 Visual_Masks536_g157833 = Out_Shader4_g157834;
				float4 appendResult585_g157833 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g157833 = lerp( Visual_Masks536_g157833 , appendResult585_g157833 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g157833 = lerpResult584_g157833;
				#else
				float4 staticSwitch586_g157833 = Visual_Masks536_g157833;
				#endif
				half4 Final_Masks482_g157833 = staticSwitch586_g157833;
				float4 In_Shader3_g157836 = Final_Masks482_g157833;
				float4 In_Emissive3_g157836 = Out_Emissive4_g157834;
				float temp_output_739_12_g157833 = Out_Grayscale4_g157834;
				float In_Grayscale3_g157836 = temp_output_739_12_g157833;
				float In_Luminosity3_g157836 = temp_output_739_15_g157833;
				float In_MultiMask3_g157836 = Out_MultiMask4_g157834;
				float In_AlphaClip3_g157836 = Out_AlphaClip4_g157834;
				float In_AlphaFade3_g157836 = Out_AlphaFade4_g157834;
				float3 In_Translucency3_g157836 = Out_Translucency4_g157834;
				half Visual_Transmission699_g157833 = Out_Transmission4_g157834;
				float lerpResult746_g157833 = lerp( Visual_Transmission699_g157833 , ( Visual_Transmission699_g157833 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g157833 = lerpResult746_g157833;
				#else
				float staticSwitch703_g157833 = Visual_Transmission699_g157833;
				#endif
				half Final_Transmission702_g157833 = staticSwitch703_g157833;
				float In_Transmission3_g157836 = Final_Transmission702_g157833;
				float In_Thickness3_g157836 = Out_Thickness4_g157834;
				float In_Diffusion3_g157836 = Out_Diffusion4_g157834;
				{
				Data3_g157836.Dummy = In_Dummy3_g157836;
				Data3_g157836.Albedo = In_Albedo3_g157836;
				Data3_g157836.NormalTS = In_NormalTS3_g157836;
				Data3_g157836.NormalWS = In_NormalWS3_g157836;
				Data3_g157836.Shader = In_Shader3_g157836;
				Data3_g157836.Emissive= In_Emissive3_g157836;
				Data3_g157836.MultiMask = In_MultiMask3_g157836;
				Data3_g157836.Grayscale = In_Grayscale3_g157836;
				Data3_g157836.Luminosity = In_Luminosity3_g157836;
				Data3_g157836.AlphaClip = In_AlphaClip3_g157836;
				Data3_g157836.AlphaFade = In_AlphaFade3_g157836;
				Data3_g157836.Translucency = In_Translucency3_g157836;
				Data3_g157836.Transmission = In_Transmission3_g157836;
				Data3_g157836.Thickness = In_Thickness3_g157836;
				Data3_g157836.Diffusion = In_Diffusion3_g157836;
				}
				TVEVisualData Data4_g157871 = Data3_g157836;
				float Out_Dummy4_g157871 = 0;
				float3 Out_Albedo4_g157871 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157871 = float2( 0,0 );
				float3 Out_NormalWS4_g157871 = float3( 0,0,0 );
				float4 Out_Shader4_g157871 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157871 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157871 = 0;
				float Out_Grayscale4_g157871 = 0;
				float Out_Luminosity4_g157871 = 0;
				float Out_AlphaClip4_g157871 = 0;
				float Out_AlphaFade4_g157871 = 0;
				float3 Out_Translucency4_g157871 = float3( 0,0,0 );
				float Out_Transmission4_g157871 = 0;
				float Out_Thickness4_g157871 = 0;
				float Out_Diffusion4_g157871 = 0;
				{
				Out_Dummy4_g157871 = Data4_g157871.Dummy;
				Out_Albedo4_g157871 = Data4_g157871.Albedo;
				Out_NormalTS4_g157871 = Data4_g157871.NormalTS;
				Out_NormalWS4_g157871 = Data4_g157871.NormalWS;
				Out_Shader4_g157871 = Data4_g157871.Shader;
				Out_Emissive4_g157871= Data4_g157871.Emissive;
				Out_MultiMask4_g157871 = Data4_g157871.MultiMask;
				Out_Grayscale4_g157871 = Data4_g157871.Grayscale;
				Out_Luminosity4_g157871= Data4_g157871.Luminosity;
				Out_AlphaClip4_g157871 = Data4_g157871.AlphaClip;
				Out_AlphaFade4_g157871 = Data4_g157871.AlphaFade;
				Out_Translucency4_g157871 = Data4_g157871.Translucency;
				Out_Transmission4_g157871 = Data4_g157871.Transmission;
				Out_Thickness4_g157871 = Data4_g157871.Thickness;
				Out_Diffusion4_g157871 = Data4_g157871.Diffusion;
				}
				float3 temp_output_297_0_g157860 = Out_Albedo4_g157871;
				float3 In_Albedo3_g157872 = temp_output_297_0_g157860;
				float2 In_NormalTS3_g157872 = Out_NormalTS4_g157871;
				float3 In_NormalWS3_g157872 = Out_NormalWS4_g157871;
				float4 In_Shader3_g157872 = Out_Shader4_g157871;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g157860 = Out_Emissive4_g157871;
				TVEModelData Data15_g157861 = Data16_g157339;
				float Out_Dummy15_g157861 = 0;
				float3 Out_PositionOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157861 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157861 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157861 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157861 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157861 = float3( 0,0,0 );
				float4 Out_VertexData15_g157861 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157861 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157861 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157861 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157861 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157861 = Data15_g157861.Dummy;
				Out_PositionOS15_g157861 = Data15_g157861.PositionOS;
				Out_PositionWS15_g157861 = Data15_g157861.PositionWS;
				Out_PositionWO15_g157861 = Data15_g157861.PositionWO;
				Out_PositionRawOS15_g157861 = Data15_g157861.PositionRawOS;
				Out_PositionAddOS15_g157861 = Data15_g157861.PositionAddOS;
				Out_PivotOS15_g157861 = Data15_g157861.PivotOS;
				Out_PivotWS15_g157861 = Data15_g157861.PivotWS;
				Out_PivotWO15_g157861 = Data15_g157861.PivotWO;
				Out_NormalOS15_g157861 = Data15_g157861.NormalOS;
				Out_NormalWS15_g157861 = Data15_g157861.NormalWS;
				Out_NormalRawOS15_g157861 = Data15_g157861.NormalRawOS;
				Out_NormalRawWS15_g157861 = Data15_g157861.NormalRawWS;
				Out_TangentOS15_g157861 = Data15_g157861.TangentOS;
				Out_ViewDirWS15_g157861 = Data15_g157861.ViewDirWS;
				Out_VertexData15_g157861 = Data15_g157861.VertexData;
				Out_MotionData15_g157861 = Data15_g157861.MotionData;
				Out_BoundsData15_g157861 = Data15_g157861.BoundsData;
				Out_RotationData15_g157861 = Data15_g157861.RotationData;
				Out_FragmentData15_g157861 = Data15_g157861.FragmentData;
				}
				half4 Model_VertexMasks216_g157860 = Out_VertexData15_g157861;
				float4 break251_g157860 = Model_VertexMasks216_g157860;
				float4 break33_g157865 = _emissive_vert_mode;
				float temp_output_30_0_g157865 = ( break251_g157860.x * break33_g157865.x );
				float temp_output_29_0_g157865 = ( break251_g157860.y * break33_g157865.y );
				float temp_output_31_0_g157865 = ( break251_g157860.z * break33_g157865.z );
				float temp_output_28_0_g157865 = ( temp_output_30_0_g157865 + temp_output_29_0_g157865 + temp_output_31_0_g157865 + ( break251_g157860.w * break33_g157865.w ) );
				float clampResult17_g157864 = clamp( temp_output_28_0_g157865 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157868 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g157868 = ( _EmissiveMeshRemap.y - temp_output_7_0_g157868 );
				float lerpResult303_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157864 - temp_output_7_0_g157868 ) / ( temp_output_10_0_g157868 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g157874 = lerpResult303_g157860;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157874 = ( temp_output_6_0_g157874 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157874 = temp_output_6_0_g157874;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g157860 = staticSwitch14_g157874;
				#else
				float staticSwitch242_g157860 = 1.0;
				#endif
				half Emissive_MeshMask221_g157860 = staticSwitch242_g157860;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157863) = _EmissiveMaskTex;
				SamplerState Sampler276_g157863 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157869 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157869 = ( temp_output_6_0_g157869 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157869 = temp_output_6_0_g157869;
				#endif
				half4 Emissive_Coords167_g157860 = staticSwitch14_g157869;
				float4 temp_output_37_0_g157863 = Emissive_Coords167_g157860;
				half4 Coords276_g157863 = temp_output_37_0_g157863;
				half2 TexCoord276_g157863 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g157863 = SampleMain( Texture276_g157863 , Sampler276_g157863 , Coords276_g157863 , TexCoord276_g157863 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157863) = _EmissiveMaskTex;
				SamplerState Sampler275_g157863 = sampler_Linear_Repeat;
				half4 Coords275_g157863 = temp_output_37_0_g157863;
				float2 appendResult289_g157863 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157863 = appendResult289_g157863;
				#else
				float2 staticSwitch288_g157863 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g157863 = staticSwitch288_g157863;
				half4 localSampleExtra275_g157863 = SampleExtra( Texture275_g157863 , Sampler275_g157863 , Coords275_g157863 , TexCoord275_g157863 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g157860 = localSampleExtra275_g157863;
				#else
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#endif
				half4 Emissive_MaskTex201_g157860 = staticSwitch176_g157860;
				float clampResult17_g157867 = clamp( (Emissive_MaskTex201_g157860).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g157866 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g157866 = ( _EmissiveMaskRemap.y - temp_output_7_0_g157866 );
				float lerpResult302_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157867 - temp_output_7_0_g157866 ) / ( temp_output_10_0_g157866 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g157860 = lerpResult302_g157860;
				#else
				float staticSwitch190_g157860 = 1.0;
				#endif
				half Emissive_Mask103_g157860 = staticSwitch190_g157860;
				float temp_output_279_0_g157860 = ( Emissive_MeshMask221_g157860 * Emissive_Mask103_g157860 );
				float3 appendResult293_g157860 = (float3(temp_output_279_0_g157860 , temp_output_279_0_g157860 , temp_output_279_0_g157860));
				half3 Local_EmissiveColor278_g157860 = appendResult293_g157860;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g157862 = Data204_g157340;
				float Out_Dummy15_g157862 = 0;
				float4 Out_CoatParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157862 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157862 = Data15_g157862.Dummy;
				Out_CoatParams15_g157862 = Data15_g157862.CoatParams;
				Out_PaintParams15_g157862 = Data15_g157862.PaintParams;
				Out_GlowParams15_g157862 = Data15_g157862.GlowParams;
				Out_AtmoParams15_g157862= Data15_g157862.AtmoParams;
				Out_FormParams15_g157862 = Data15_g157862.FormParams;
				Out_LandParams15_g157862 = Data15_g157862.LandParams;
				Out_WindParams15_g157862 = Data15_g157862.WindParams;
				Out_PushParams15_g157862 = Data15_g157862.PushParams;
				}
				half4 Global_GlowParams179_g157860 = Out_GlowParams15_g157862;
				float3 lerpResult299_g157860 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g157860).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g157860 = lerpResult299_g157860;
				#else
				float3 staticSwitch228_g157860 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g157860 = staticSwitch228_g157860;
				half3 Local_EmissiveValue88_g157860 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g157860 );
				half3 Emissive_Blend260_g157860 = ( ( (Visual_Emissive255_g157860).xyz * Local_EmissiveColor278_g157860 ) * Local_EmissiveValue88_g157860 );
				float3 temp_output_3_0_g157870 = Emissive_Blend260_g157860;
				float temp_output_15_0_g157870 = _emissive_power_value;
				float3 temp_output_23_0_g157870 = ( temp_output_3_0_g157870 * temp_output_15_0_g157870 );
				float4 appendResult295_g157860 = (float4(temp_output_23_0_g157870 , Emissive_Mask103_g157860));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g157860 = appendResult295_g157860;
				#else
				float4 staticSwitch129_g157860 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g157860 = staticSwitch129_g157860;
				float4 In_Emissive3_g157872 = Final_Emissive184_g157860;
				float In_Grayscale3_g157872 = Out_Grayscale4_g157871;
				float In_Luminosity3_g157872 = Out_Luminosity4_g157871;
				float temp_output_297_11_g157860 = Out_MultiMask4_g157871;
				float In_MultiMask3_g157872 = temp_output_297_11_g157860;
				float In_AlphaClip3_g157872 = Out_AlphaClip4_g157871;
				float In_AlphaFade3_g157872 = Out_AlphaFade4_g157871;
				float3 In_Translucency3_g157872 = Out_Translucency4_g157871;
				float In_Transmission3_g157872 = Out_Transmission4_g157871;
				float In_Thickness3_g157872 = Out_Thickness4_g157871;
				float In_Diffusion3_g157872 = Out_Diffusion4_g157871;
				{
				Data3_g157872.Dummy = In_Dummy3_g157872;
				Data3_g157872.Albedo = In_Albedo3_g157872;
				Data3_g157872.NormalTS = In_NormalTS3_g157872;
				Data3_g157872.NormalWS = In_NormalWS3_g157872;
				Data3_g157872.Shader = In_Shader3_g157872;
				Data3_g157872.Emissive= In_Emissive3_g157872;
				Data3_g157872.MultiMask = In_MultiMask3_g157872;
				Data3_g157872.Grayscale = In_Grayscale3_g157872;
				Data3_g157872.Luminosity = In_Luminosity3_g157872;
				Data3_g157872.AlphaClip = In_AlphaClip3_g157872;
				Data3_g157872.AlphaFade = In_AlphaFade3_g157872;
				Data3_g157872.Translucency = In_Translucency3_g157872;
				Data3_g157872.Transmission = In_Transmission3_g157872;
				Data3_g157872.Thickness = In_Thickness3_g157872;
				Data3_g157872.Diffusion = In_Diffusion3_g157872;
				}
				TVEVisualData Data4_g157882 = Data3_g157872;
				float Out_Dummy4_g157882 = 0;
				float3 Out_Albedo4_g157882 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157882 = float2( 0,0 );
				float3 Out_NormalWS4_g157882 = float3( 0,0,0 );
				float4 Out_Shader4_g157882 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157882 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157882 = 0;
				float Out_Grayscale4_g157882 = 0;
				float Out_Luminosity4_g157882 = 0;
				float Out_AlphaClip4_g157882 = 0;
				float Out_AlphaFade4_g157882 = 0;
				float3 Out_Translucency4_g157882 = float3( 0,0,0 );
				float Out_Transmission4_g157882 = 0;
				float Out_Thickness4_g157882 = 0;
				float Out_Diffusion4_g157882 = 0;
				{
				Out_Dummy4_g157882 = Data4_g157882.Dummy;
				Out_Albedo4_g157882 = Data4_g157882.Albedo;
				Out_NormalTS4_g157882 = Data4_g157882.NormalTS;
				Out_NormalWS4_g157882 = Data4_g157882.NormalWS;
				Out_Shader4_g157882 = Data4_g157882.Shader;
				Out_Emissive4_g157882= Data4_g157882.Emissive;
				Out_MultiMask4_g157882 = Data4_g157882.MultiMask;
				Out_Grayscale4_g157882 = Data4_g157882.Grayscale;
				Out_Luminosity4_g157882= Data4_g157882.Luminosity;
				Out_AlphaClip4_g157882 = Data4_g157882.AlphaClip;
				Out_AlphaFade4_g157882 = Data4_g157882.AlphaFade;
				Out_Translucency4_g157882 = Data4_g157882.Translucency;
				Out_Transmission4_g157882 = Data4_g157882.Transmission;
				Out_Thickness4_g157882 = Data4_g157882.Thickness;
				Out_Diffusion4_g157882 = Data4_g157882.Diffusion;
				}
				half3 Visual_Albedo199_g157881 = Out_Albedo4_g157882;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g157881 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g157881 );
				half Visual_Transmission138_g157881 = Out_Transmission4_g157882;
				half Subsurface_Value268_g157881 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g157885 = Data204_g157340;
				float Out_Dummy15_g157885 = 0;
				float4 Out_CoatParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157885 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157885 = Data15_g157885.Dummy;
				Out_CoatParams15_g157885 = Data15_g157885.CoatParams;
				Out_PaintParams15_g157885 = Data15_g157885.PaintParams;
				Out_GlowParams15_g157885 = Data15_g157885.GlowParams;
				Out_AtmoParams15_g157885= Data15_g157885.AtmoParams;
				Out_FormParams15_g157885 = Data15_g157885.FormParams;
				Out_LandParams15_g157885 = Data15_g157885.LandParams;
				Out_WindParams15_g157885 = Data15_g157885.WindParams;
				Out_PushParams15_g157885 = Data15_g157885.PushParams;
				}
				half4 Global_GlowParams373_g157881 = Out_GlowParams15_g157885;
				float lerpResult403_g157881 = lerp( 1.0 , saturate( (Global_GlowParams373_g157881).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g157881 = lerpResult403_g157881;
				#else
				float staticSwitch367_g157881 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g157881 = staticSwitch367_g157881;
				float temp_output_301_11_g157881 = Out_MultiMask4_g157882;
				half Visual_MultiMask292_g157881 = temp_output_301_11_g157881;
				float lerpResult293_g157881 = lerp( 1.0 , Visual_MultiMask292_g157881 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g157881 = lerpResult293_g157881;
				half Custom_Mask363_g157881 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g157881 = ( Visual_Transmission138_g157881 * Subsurface_Value268_g157881 * Subsurface_GlobalMask369_g157881 * Subsurface_MultiMask296_g157881 * Custom_Mask363_g157881 );
				#else
				float staticSwitch345_g157881 = 0.0;
				#endif
				half Final_Transmission269_g157881 = staticSwitch345_g157881;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g157881 = ( Subsurface_Color264_g157881 * Final_Transmission269_g157881 * 10.0 );
				#else
				float3 staticSwitch348_g157881 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g157881 = staticSwitch348_g157881;
				TVEModelData Data15_g157884 = Data16_g157339;
				float Out_Dummy15_g157884 = 0;
				float3 Out_PositionOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157884 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157884 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157884 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157884 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157884 = float3( 0,0,0 );
				float4 Out_VertexData15_g157884 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157884 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157884 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157884 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157884 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157884 = Data15_g157884.Dummy;
				Out_PositionOS15_g157884 = Data15_g157884.PositionOS;
				Out_PositionWS15_g157884 = Data15_g157884.PositionWS;
				Out_PositionWO15_g157884 = Data15_g157884.PositionWO;
				Out_PositionRawOS15_g157884 = Data15_g157884.PositionRawOS;
				Out_PositionAddOS15_g157884 = Data15_g157884.PositionAddOS;
				Out_PivotOS15_g157884 = Data15_g157884.PivotOS;
				Out_PivotWS15_g157884 = Data15_g157884.PivotWS;
				Out_PivotWO15_g157884 = Data15_g157884.PivotWO;
				Out_NormalOS15_g157884 = Data15_g157884.NormalOS;
				Out_NormalWS15_g157884 = Data15_g157884.NormalWS;
				Out_NormalRawOS15_g157884 = Data15_g157884.NormalRawOS;
				Out_NormalRawWS15_g157884 = Data15_g157884.NormalRawWS;
				Out_TangentOS15_g157884 = Data15_g157884.TangentOS;
				Out_ViewDirWS15_g157884 = Data15_g157884.ViewDirWS;
				Out_VertexData15_g157884 = Data15_g157884.VertexData;
				Out_MotionData15_g157884 = Data15_g157884.MotionData;
				Out_BoundsData15_g157884 = Data15_g157884.BoundsData;
				Out_RotationData15_g157884 = Data15_g157884.RotationData;
				Out_FragmentData15_g157884 = Data15_g157884.FragmentData;
				}
				half3 Model_ViewDirWS392_g157881 = Out_ViewDirWS15_g157884;
				float dotResult324_g157881 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g157881 );
				float saferPower323_g157881 = abs( saturate( dotResult324_g157881 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g157881 = 0.0;
				#else
				float staticSwitch330_g157881 = ( pow( saferPower323_g157881 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g157881 = staticSwitch330_g157881;
				float3 temp_output_6_0_g157886 = ( Final_Translucency254_g157881 * Mask_Subsurface_View320_g157881 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157886 = ( temp_output_6_0_g157886 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g157886 = temp_output_6_0_g157886;
				#endif
				half3 Subsurface_Approximation333_g157881 = staticSwitch14_g157886;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g157881 = ( Visual_Albedo199_g157881 + Subsurface_Approximation333_g157881 );
				#else
				float3 staticSwitch353_g157881 = Visual_Albedo199_g157881;
				#endif
				half3 Final_Albedo312_g157881 = staticSwitch353_g157881;
				float3 In_Albedo3_g157883 = Final_Albedo312_g157881;
				float2 In_NormalTS3_g157883 = Out_NormalTS4_g157882;
				float3 In_NormalWS3_g157883 = Out_NormalWS4_g157882;
				float4 In_Shader3_g157883 = Out_Shader4_g157882;
				float4 In_Emissive3_g157883 = Out_Emissive4_g157882;
				float In_Grayscale3_g157883 = Out_Grayscale4_g157882;
				float In_Luminosity3_g157883 = Out_Luminosity4_g157882;
				float In_MultiMask3_g157883 = temp_output_301_11_g157881;
				float In_AlphaClip3_g157883 = Out_AlphaClip4_g157882;
				float In_AlphaFade3_g157883 = Out_AlphaFade4_g157882;
				float3 In_Translucency3_g157883 = Final_Translucency254_g157881;
				float In_Transmission3_g157883 = Final_Transmission269_g157881;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g157881 = 0.0;
				#else
				float staticSwitch351_g157881 = 1.0;
				#endif
				half Final_Thickness275_g157881 = staticSwitch351_g157881;
				float In_Thickness3_g157883 = Final_Thickness275_g157881;
				float Final_Diffusion340_g157881 = _SubsurfaceDiffusion;
				float In_Diffusion3_g157883 = Final_Diffusion340_g157881;
				{
				Data3_g157883.Dummy = In_Dummy3_g157883;
				Data3_g157883.Albedo = In_Albedo3_g157883;
				Data3_g157883.NormalTS = In_NormalTS3_g157883;
				Data3_g157883.NormalWS = In_NormalWS3_g157883;
				Data3_g157883.Shader = In_Shader3_g157883;
				Data3_g157883.Emissive= In_Emissive3_g157883;
				Data3_g157883.MultiMask = In_MultiMask3_g157883;
				Data3_g157883.Grayscale = In_Grayscale3_g157883;
				Data3_g157883.Luminosity = In_Luminosity3_g157883;
				Data3_g157883.AlphaClip = In_AlphaClip3_g157883;
				Data3_g157883.AlphaFade = In_AlphaFade3_g157883;
				Data3_g157883.Translucency = In_Translucency3_g157883;
				Data3_g157883.Transmission = In_Transmission3_g157883;
				Data3_g157883.Thickness = In_Thickness3_g157883;
				Data3_g157883.Diffusion = In_Diffusion3_g157883;
				}
				TVEVisualData Data4_g157896 = Data3_g157883;
				float Out_Dummy4_g157896 = 0;
				float3 Out_Albedo4_g157896 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157896 = float2( 0,0 );
				float3 Out_NormalWS4_g157896 = float3( 0,0,0 );
				float4 Out_Shader4_g157896 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157896 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157896 = 0;
				float Out_Grayscale4_g157896 = 0;
				float Out_Luminosity4_g157896 = 0;
				float Out_AlphaClip4_g157896 = 0;
				float Out_AlphaFade4_g157896 = 0;
				float3 Out_Translucency4_g157896 = float3( 0,0,0 );
				float Out_Transmission4_g157896 = 0;
				float Out_Thickness4_g157896 = 0;
				float Out_Diffusion4_g157896 = 0;
				{
				Out_Dummy4_g157896 = Data4_g157896.Dummy;
				Out_Albedo4_g157896 = Data4_g157896.Albedo;
				Out_NormalTS4_g157896 = Data4_g157896.NormalTS;
				Out_NormalWS4_g157896 = Data4_g157896.NormalWS;
				Out_Shader4_g157896 = Data4_g157896.Shader;
				Out_Emissive4_g157896= Data4_g157896.Emissive;
				Out_MultiMask4_g157896 = Data4_g157896.MultiMask;
				Out_Grayscale4_g157896 = Data4_g157896.Grayscale;
				Out_Luminosity4_g157896= Data4_g157896.Luminosity;
				Out_AlphaClip4_g157896 = Data4_g157896.AlphaClip;
				Out_AlphaFade4_g157896 = Data4_g157896.AlphaFade;
				Out_Translucency4_g157896 = Data4_g157896.Translucency;
				Out_Transmission4_g157896 = Data4_g157896.Transmission;
				Out_Thickness4_g157896 = Data4_g157896.Thickness;
				Out_Diffusion4_g157896 = Data4_g157896.Diffusion;
				}
				half3 Input_Albedo24_g157895 = Out_Albedo4_g157896;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g157895 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g157895 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g157895 = staticSwitch22_g157895;
				float4 break24_g157890 = Out_Shader4_g157896;
				half Metallic95_g157890 = break24_g157890.x;
				half Input_Metallic25_g157895 = Metallic95_g157890;
				half OneMinusReflectivity31_g157895 = ( (ColorSpaceDielectricSpec23_g157895).w - ( (ColorSpaceDielectricSpec23_g157895).w * Input_Metallic25_g157895 ) );
				
				float localCustomAlphaClip19_g157897 = ( 0.0 );
				float temp_output_3_0_g157897 = Out_AlphaClip4_g157896;
				float Alpha19_g157897 = temp_output_3_0_g157897;
				float temp_output_15_0_g157897 = 0.0;
				float Treshold19_g157897 = temp_output_15_0_g157897;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#else
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g157895 * OneMinusReflectivity31_g157895 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g157896).xyz;
				o.Alpha = saturate( ( Alpha19_g157897 * Out_AlphaFade4_g157896 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float3 ase_normal : NORMAL;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _IsLiteShader;
			uniform half _IsStandardShader;
			uniform half _IsGeneralShader;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = v.vertex.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g154892 = ase_worldPos;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float4x4 break19_g154894 = unity_ObjectToWorld;
				float3 appendResult20_g154894 = (float3(break19_g154894[ 0 ][ 3 ] , break19_g154894[ 1 ][ 3 ] , break19_g154894[ 2 ][ 3 ]));
				half3 ObjectData20_g154896 = appendResult20_g154894;
				half3 WorldData19_g154896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154896 = WorldData19_g154896;
				#else
				float3 staticSwitch14_g154896 = ObjectData20_g154896;
				#endif
				float3 temp_output_124_0_g154894 = staticSwitch14_g154896;
				float3 temp_output_239_7_g154892 = temp_output_124_0_g154894;
				float4x4 break19_g154898 = unity_ObjectToWorld;
				float3 appendResult20_g154898 = (float3(break19_g154898[ 0 ][ 3 ] , break19_g154898[ 1 ][ 3 ] , break19_g154898[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 temp_output_122_0_g154898 = PivotOS149_g154892;
				float3 PivotsOnly105_g154898 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g154898 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g154900 = ( appendResult20_g154898 + PivotsOnly105_g154898 );
				half3 WorldData19_g154900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g154900 = WorldData19_g154900;
				#else
				float3 staticSwitch14_g154900 = ObjectData20_g154900;
				#endif
				float3 temp_output_124_0_g154898 = staticSwitch14_g154900;
				float3 temp_output_237_7_g154892 = temp_output_124_0_g154898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g154892 = temp_output_237_7_g154892;
				#else
				float3 staticSwitch236_g154892 = temp_output_239_7_g154892;
				#endif
				float3 vertexToFrag76_g154892 = staticSwitch236_g154892;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = v.normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = v.tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = v.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( v.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( v.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( v.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( v.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ), 0.0 );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157893 = Data16_g157339;
				float Out_Dummy15_g157893 = 0;
				float3 Out_PositionOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157893 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157893 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157893 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157893 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157893 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157893 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157893 = float3( 0,0,0 );
				float4 Out_VertexData15_g157893 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157893 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157893 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157893 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157893 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157893 = Data15_g157893.Dummy;
				Out_PositionOS15_g157893 = Data15_g157893.PositionOS;
				Out_PositionWS15_g157893 = Data15_g157893.PositionWS;
				Out_PositionWO15_g157893 = Data15_g157893.PositionWO;
				Out_PositionRawOS15_g157893 = Data15_g157893.PositionRawOS;
				Out_PositionAddOS15_g157893 = Data15_g157893.PositionAddOS;
				Out_PivotOS15_g157893 = Data15_g157893.PivotOS;
				Out_PivotWS15_g157893 = Data15_g157893.PivotWS;
				Out_PivotWO15_g157893 = Data15_g157893.PivotWO;
				Out_NormalOS15_g157893 = Data15_g157893.NormalOS;
				Out_NormalWS15_g157893 = Data15_g157893.NormalWS;
				Out_NormalRawOS15_g157893 = Data15_g157893.NormalRawOS;
				Out_NormalRawWS15_g157893 = Data15_g157893.NormalRawWS;
				Out_TangentOS15_g157893 = Data15_g157893.TangentOS;
				Out_ViewDirWS15_g157893 = Data15_g157893.ViewDirWS;
				Out_VertexData15_g157893 = Data15_g157893.VertexData;
				Out_MotionData15_g157893 = Data15_g157893.MotionData;
				Out_BoundsData15_g157893 = Data15_g157893.BoundsData;
				Out_RotationData15_g157893 = Data15_g157893.RotationData;
				Out_FragmentData15_g157893 = Data15_g157893.FragmentData;
				}
				float3 temp_output_31_0_g157890 = Out_PositionOS15_g157893;
				
				float4 temp_output_6_0_g157905 = Out_TangentOS15_g157893;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data978 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157905 = ( temp_output_6_0_g157905 + ( Dummy_Data978 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157905 = temp_output_6_0_g157905;
				#endif
				
				o.ase_texcoord6.xyz = vertexToFrag73_g154892;
				o.ase_texcoord7.xyz = vertexToFrag76_g154892;
				o.ase_texcoord9.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord10.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord11.xyz = ase_worldBitangent;
				TVEModelData Data15_g157488 = Data16_g157339;
				float Out_Dummy15_g157488 = 0;
				float3 Out_PositionOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157488 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157488 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157488 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157488 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157488 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157488 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157488 = float3( 0,0,0 );
				float4 Out_VertexData15_g157488 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157488 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157488 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157488 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157488 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157488 = Data15_g157488.Dummy;
				Out_PositionOS15_g157488 = Data15_g157488.PositionOS;
				Out_PositionWS15_g157488 = Data15_g157488.PositionWS;
				Out_PositionWO15_g157488 = Data15_g157488.PositionWO;
				Out_PositionRawOS15_g157488 = Data15_g157488.PositionRawOS;
				Out_PositionAddOS15_g157488 = Data15_g157488.PositionAddOS;
				Out_PivotOS15_g157488 = Data15_g157488.PivotOS;
				Out_PivotWS15_g157488 = Data15_g157488.PivotWS;
				Out_PivotWO15_g157488 = Data15_g157488.PivotWO;
				Out_NormalOS15_g157488 = Data15_g157488.NormalOS;
				Out_NormalWS15_g157488 = Data15_g157488.NormalWS;
				Out_NormalRawOS15_g157488 = Data15_g157488.NormalRawOS;
				Out_NormalRawWS15_g157488 = Data15_g157488.NormalRawWS;
				Out_TangentOS15_g157488 = Data15_g157488.TangentOS;
				Out_ViewDirWS15_g157488 = Data15_g157488.ViewDirWS;
				Out_VertexData15_g157488 = Data15_g157488.VertexData;
				Out_MotionData15_g157488 = Data15_g157488.MotionData;
				Out_BoundsData15_g157488 = Data15_g157488.BoundsData;
				Out_RotationData15_g157488 = Data15_g157488.RotationData;
				Out_FragmentData15_g157488 = Data15_g157488.FragmentData;
				}
				half4 Model_FragmentData196_g157486 = Out_FragmentData15_g157488;
				float vertexToFrag203_g157486 = (Model_FragmentData196_g157486).w;
				o.ase_texcoord3.z = vertexToFrag203_g157486;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord4 = v.texcoord1.xyzw;
				o.ase_texcoord5 = v.vertex;
				o.ase_texcoord8 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord10.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g157890 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g157893;
				v.tangent = staticSwitch14_g157905;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g157897 = ( 0.0 );
				float localBreakData4_g157896 = ( 0.0 );
				float localCompData3_g157883 = ( 0.0 );
				TVEVisualData Data3_g157883 = (TVEVisualData)0;
				half Dummy145_g157881 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g157883 = Dummy145_g157881;
				float localBreakData4_g157882 = ( 0.0 );
				float localCompData3_g157872 = ( 0.0 );
				TVEVisualData Data3_g157872 = (TVEVisualData)0;
				half Dummy145_g157860 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g157872 = Dummy145_g157860;
				float localBreakData4_g157871 = ( 0.0 );
				float localCompData3_g157836 = ( 0.0 );
				TVEVisualData Data3_g157836 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord2.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g157833 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g157836 = Dummy594_g157833.r;
				float localBreakData4_g157834 = ( 0.0 );
				float localCompData3_g157489 = ( 0.0 );
				TVEVisualData Data3_g157489 = (TVEVisualData)0;
				float In_Dummy3_g157489 = 0.0;
				float localBreakData4_g157487 = ( 0.0 );
				float localCompData3_g157480 = ( 0.0 );
				TVEVisualData Data3_g157480 = (TVEVisualData)0;
				half Dummy220_g157476 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g157480 = Dummy220_g157476;
				float localBreakData4_g157479 = ( 0.0 );
				float localCompData3_g157468 = ( 0.0 );
				TVEVisualData Data3_g157468 = (TVEVisualData)0;
				half Dummy202_g157466 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g157468 = Dummy202_g157466;
				float localBreakData4_g157467 = ( 0.0 );
				float localCompData3_g157454 = ( 0.0 );
				TVEVisualData Data3_g157454 = (TVEVisualData)0;
				half4 Dummy944_g157436 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g157454 = Dummy944_g157436.x;
				float localBreakData4_g157453 = ( 0.0 );
				float localCompData3_g157416 = ( 0.0 );
				TVEVisualData Data3_g157416 = (TVEVisualData)0;
				half4 Dummy946_g157405 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g157416 = Dummy946_g157405.x;
				float localBreakData4_g157419 = ( 0.0 );
				float localCompData3_g157401 = ( 0.0 );
				TVEVisualData Data3_g157401 = (TVEVisualData)0;
				half4 Dummy130_g157391 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g157401 = Dummy130_g157391.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157402) = _MainAlbedoTex;
				SamplerState Sampler276_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g157391 = _main_coord_value;
				float4 temp_output_37_0_g157402 = Local_Coords180_g157391;
				half4 Coords276_g157402 = temp_output_37_0_g157402;
				half2 TexCoord276_g157402 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157402 = SampleMain( Texture276_g157402 , Sampler276_g157402 , Coords276_g157402 , TexCoord276_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157402) = _MainAlbedoTex;
				SamplerState Sampler275_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157402 = temp_output_37_0_g157402;
				float2 appendResult289_g157402 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157402 = appendResult289_g157402;
				#else
				float2 staticSwitch288_g157402 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157402 = staticSwitch288_g157402;
				half4 localSampleExtra275_g157402 = SampleExtra( Texture275_g157402 , Sampler275_g157402 , Coords275_g157402 , TexCoord275_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157402) = _MainAlbedoTex;
				SamplerState Sampler238_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157402 = temp_output_37_0_g157402;
				TVEModelData Data16_g157339 = (TVEModelData)0;
				float In_Dummy16_g157339 = 0.0;
				TVEModelData Data16_g157333 = (TVEModelData)0;
				half Dummy1575_g157331 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g157333 = Dummy1575_g157331;
				TVEModelData Data16_g157326 = (TVEModelData)0;
				float In_Dummy16_g157326 = 0.0;
				TVEModelData Data16_g157287 = (TVEModelData)0;
				half4 Dummy181_g157276 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g157287 = Dummy181_g157276.r;
				TVEModelData Data16_g154908 = (TVEModelData)0;
				float In_Dummy16_g154908 = 0.0;
				TVEModelData Data16_g154906 = (TVEModelData)0;
				half Dummy207_g154892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g154906 = Dummy207_g154892;
				half3 PositionOS131_g154892 = IN.ase_texcoord5.xyz;
				float3 In_PositionOS16_g154906 = PositionOS131_g154892;
				float3 vertexToFrag73_g154892 = IN.ase_texcoord6.xyz;
				half3 PositionWS122_g154892 = vertexToFrag73_g154892;
				float3 In_PositionWS16_g154906 = PositionWS122_g154892;
				float3 vertexToFrag76_g154892 = IN.ase_texcoord7.xyz;
				half3 PivotWS121_g154892 = vertexToFrag76_g154892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g154892 = ( PositionWS122_g154892 - PivotWS121_g154892 );
				#else
				float3 staticSwitch204_g154892 = PositionWS122_g154892;
				#endif
				half3 PositionWO132_g154892 = ( staticSwitch204_g154892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g154906 = PositionWO132_g154892;
				float3 In_PositionRawOS16_g154906 = PositionOS131_g154892;
				float3 In_PositionAddOS16_g154906 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g154902 = (float3(IN.ase_texcoord8.x , 0.0 , IN.ase_texcoord8.y));
				float3 break233_g154892 = PositionOS131_g154892;
				float3 appendResult234_g154892 = (float3(break233_g154892.x , 0.0 , break233_g154892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g154892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g154892 = appendResult60_g154902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g154892 = appendResult234_g154892;
				#else
				float3 staticSwitch229_g154892 = _Vector0;
				#endif
				half3 PivotOS149_g154892 = staticSwitch229_g154892;
				float3 In_PivotOS16_g154906 = PivotOS149_g154892;
				float3 In_PivotWS16_g154906 = PivotWS121_g154892;
				half3 PivotWO133_g154892 = ( PivotWS121_g154892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g154906 = PivotWO133_g154892;
				half3 NormalOS134_g154892 = IN.ase_normal;
				float3 In_NormalOS16_g154906 = NormalOS134_g154892;
				float3 ase_worldNormal = IN.ase_texcoord9.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g154892 = normalizedWorldNormal;
				float3 In_NormalWS16_g154906 = Normal_WS95_g154892;
				float3 In_NormalRawOS16_g154906 = NormalOS134_g154892;
				float3 objToWorldDir298_g154892 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g154892 = objToWorldDir298_g154892;
				float3 In_NormalRawWS16_g154906 = Normal_RawWS136_g154892;
				half4 TangentlOS153_g154892 = IN.ase_tangent;
				float4 In_TangentOS16_g154906 = TangentlOS153_g154892;
				float3 normalizeResult296_g154892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g154892 ) );
				half3 ViewDirWS169_g154892 = normalizeResult296_g154892;
				float3 In_ViewDirWS16_g154906 = ViewDirWS169_g154892;
				half4 VertexMasks171_g154892 = IN.ase_color;
				float4 In_VertexData16_g154906 = VertexMasks171_g154892;
				float4 break33_g154905 = _object_phase_mode;
				float temp_output_30_0_g154905 = ( IN.ase_color.r * break33_g154905.x );
				float temp_output_29_0_g154905 = ( IN.ase_color.g * break33_g154905.y );
				float temp_output_31_0_g154905 = ( IN.ase_color.b * break33_g154905.z );
				float temp_output_28_0_g154905 = ( temp_output_30_0_g154905 + temp_output_29_0_g154905 + temp_output_31_0_g154905 + ( IN.ase_color.a * break33_g154905.w ) );
				float3 break243_g154892 = PivotWO133_g154892;
				float4 appendResult177_g154892 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g154905 + ( break243_g154892.x + break243_g154892.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g154892 = appendResult177_g154892;
				float4 In_MotionData16_g154906 = MotionMasks176_g154892;
				half Object_HeightValue267_g154892 = _ObjectHeightValue;
				half Object_RadiusValue268_g154892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g154892 = saturate( ( (PositionOS131_g154892).y / Object_HeightValue267_g154892 ) );
				half Bounds_SphereMask282_g154892 = saturate( ( length( PositionOS131_g154892 ) / max( Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 ) ) );
				float4 appendResult253_g154892 = (float4(Object_HeightValue267_g154892 , Object_RadiusValue268_g154892 , Bounds_HeightMask274_g154892 , Bounds_SphereMask282_g154892));
				half4 BoundsData254_g154892 = appendResult253_g154892;
				float4 In_BoundsData16_g154906 = BoundsData254_g154892;
				float4 In_RotationData16_g154906 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g154906 = float4( 0,0,0,0 );
				{
				Data16_g154906.Dummy = In_Dummy16_g154906;
				Data16_g154906.PositionOS = In_PositionOS16_g154906;
				Data16_g154906.PositionWS = In_PositionWS16_g154906;
				Data16_g154906.PositionWO = In_PositionWO16_g154906;
				Data16_g154906.PositionRawOS = In_PositionRawOS16_g154906;
				Data16_g154906.PositionAddOS = In_PositionAddOS16_g154906;
				Data16_g154906.PivotOS = In_PivotOS16_g154906;
				Data16_g154906.PivotWS = In_PivotWS16_g154906;
				Data16_g154906.PivotWO = In_PivotWO16_g154906;
				Data16_g154906.NormalOS = In_NormalOS16_g154906;
				Data16_g154906.NormalWS = In_NormalWS16_g154906;
				Data16_g154906.NormalRawOS = In_NormalRawOS16_g154906;
				Data16_g154906.NormalRawWS = In_NormalRawWS16_g154906;
				Data16_g154906.TangentOS = In_TangentOS16_g154906;
				Data16_g154906.ViewDirWS = In_ViewDirWS16_g154906;
				Data16_g154906.VertexData = In_VertexData16_g154906;
				Data16_g154906.MotionData = In_MotionData16_g154906;
				Data16_g154906.BoundsData = In_BoundsData16_g154906;
				Data16_g154906.RotationData = In_RotationData16_g154906;
				Data16_g154906.FragmentData = In_FragmentData16_g154906;
				}
				TVEModelData Data15_g154909 = Data16_g154906;
				float Out_Dummy15_g154909 = 0;
				float3 Out_PositionOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionWO15_g154909 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotOS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWS15_g154909 = float3( 0,0,0 );
				float3 Out_PivotWO15_g154909 = float3( 0,0,0 );
				float3 Out_NormalOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalWS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g154909 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g154909 = float3( 0,0,0 );
				float4 Out_TangentOS15_g154909 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g154909 = float3( 0,0,0 );
				float4 Out_VertexData15_g154909 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g154909 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g154909 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g154909 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g154909 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g154909 = Data15_g154909.Dummy;
				Out_PositionOS15_g154909 = Data15_g154909.PositionOS;
				Out_PositionWS15_g154909 = Data15_g154909.PositionWS;
				Out_PositionWO15_g154909 = Data15_g154909.PositionWO;
				Out_PositionRawOS15_g154909 = Data15_g154909.PositionRawOS;
				Out_PositionAddOS15_g154909 = Data15_g154909.PositionAddOS;
				Out_PivotOS15_g154909 = Data15_g154909.PivotOS;
				Out_PivotWS15_g154909 = Data15_g154909.PivotWS;
				Out_PivotWO15_g154909 = Data15_g154909.PivotWO;
				Out_NormalOS15_g154909 = Data15_g154909.NormalOS;
				Out_NormalWS15_g154909 = Data15_g154909.NormalWS;
				Out_NormalRawOS15_g154909 = Data15_g154909.NormalRawOS;
				Out_NormalRawWS15_g154909 = Data15_g154909.NormalRawWS;
				Out_TangentOS15_g154909 = Data15_g154909.TangentOS;
				Out_ViewDirWS15_g154909 = Data15_g154909.ViewDirWS;
				Out_VertexData15_g154909 = Data15_g154909.VertexData;
				Out_MotionData15_g154909 = Data15_g154909.MotionData;
				Out_BoundsData15_g154909 = Data15_g154909.BoundsData;
				Out_RotationData15_g154909 = Data15_g154909.RotationData;
				Out_FragmentData15_g154909 = Data15_g154909.FragmentData;
				}
				float3 temp_output_218_24_g154907 = Out_PivotOS15_g154909;
				float3 In_PositionOS16_g154908 = ( Out_PositionOS15_g154909 - temp_output_218_24_g154907 );
				float3 In_PositionWS16_g154908 = Out_PositionWS15_g154909;
				float3 In_PositionWO16_g154908 = Out_PositionWO15_g154909;
				float3 In_PositionRawOS16_g154908 = Out_PositionRawOS15_g154909;
				float3 In_PositionAddOS16_g154908 = Out_PositionAddOS15_g154909;
				float3 In_PivotOS16_g154908 = temp_output_218_24_g154907;
				float3 In_PivotWS16_g154908 = Out_PivotWS15_g154909;
				float3 In_PivotWO16_g154908 = Out_PivotWO15_g154909;
				float3 In_NormalOS16_g154908 = Out_NormalOS15_g154909;
				float3 In_NormalWS16_g154908 = Out_NormalWS15_g154909;
				float3 In_NormalRawOS16_g154908 = Out_NormalRawOS15_g154909;
				float3 In_NormalRawWS16_g154908 = Out_NormalRawWS15_g154909;
				float4 In_TangentOS16_g154908 = Out_TangentOS15_g154909;
				float3 In_ViewDirWS16_g154908 = Out_ViewDirWS15_g154909;
				float4 In_VertexData16_g154908 = Out_VertexData15_g154909;
				float4 In_MotionData16_g154908 = Out_MotionData15_g154909;
				float4 In_BoundsData16_g154908 = Out_BoundsData15_g154909;
				float4 In_RotationData16_g154908 = Out_RotationData15_g154909;
				float4 In_FragmentData16_g154908 = Out_FragmentData15_g154909;
				{
				Data16_g154908.Dummy = In_Dummy16_g154908;
				Data16_g154908.PositionOS = In_PositionOS16_g154908;
				Data16_g154908.PositionWS = In_PositionWS16_g154908;
				Data16_g154908.PositionWO = In_PositionWO16_g154908;
				Data16_g154908.PositionRawOS = In_PositionRawOS16_g154908;
				Data16_g154908.PositionAddOS = In_PositionAddOS16_g154908;
				Data16_g154908.PivotOS = In_PivotOS16_g154908;
				Data16_g154908.PivotWS = In_PivotWS16_g154908;
				Data16_g154908.PivotWO = In_PivotWO16_g154908;
				Data16_g154908.NormalOS = In_NormalOS16_g154908;
				Data16_g154908.NormalWS = In_NormalWS16_g154908;
				Data16_g154908.NormalRawOS = In_NormalRawOS16_g154908;
				Data16_g154908.NormalRawWS = In_NormalRawWS16_g154908;
				Data16_g154908.TangentOS = In_TangentOS16_g154908;
				Data16_g154908.ViewDirWS = In_ViewDirWS16_g154908;
				Data16_g154908.VertexData = In_VertexData16_g154908;
				Data16_g154908.MotionData = In_MotionData16_g154908;
				Data16_g154908.BoundsData = In_BoundsData16_g154908;
				Data16_g154908.RotationData = In_RotationData16_g154908;
				Data16_g154908.FragmentData = In_FragmentData16_g154908;
				}
				TVEModelData Data15_g157279 = Data16_g154908;
				float Out_Dummy15_g157279 = 0;
				float3 Out_PositionOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157279 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157279 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157279 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157279 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157279 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157279 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157279 = float3( 0,0,0 );
				float4 Out_VertexData15_g157279 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157279 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157279 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157279 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157279 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157279 = Data15_g157279.Dummy;
				Out_PositionOS15_g157279 = Data15_g157279.PositionOS;
				Out_PositionWS15_g157279 = Data15_g157279.PositionWS;
				Out_PositionWO15_g157279 = Data15_g157279.PositionWO;
				Out_PositionRawOS15_g157279 = Data15_g157279.PositionRawOS;
				Out_PositionAddOS15_g157279 = Data15_g157279.PositionAddOS;
				Out_PivotOS15_g157279 = Data15_g157279.PivotOS;
				Out_PivotWS15_g157279 = Data15_g157279.PivotWS;
				Out_PivotWO15_g157279 = Data15_g157279.PivotWO;
				Out_NormalOS15_g157279 = Data15_g157279.NormalOS;
				Out_NormalWS15_g157279 = Data15_g157279.NormalWS;
				Out_NormalRawOS15_g157279 = Data15_g157279.NormalRawOS;
				Out_NormalRawWS15_g157279 = Data15_g157279.NormalRawWS;
				Out_TangentOS15_g157279 = Data15_g157279.TangentOS;
				Out_ViewDirWS15_g157279 = Data15_g157279.ViewDirWS;
				Out_VertexData15_g157279 = Data15_g157279.VertexData;
				Out_MotionData15_g157279 = Data15_g157279.MotionData;
				Out_BoundsData15_g157279 = Data15_g157279.BoundsData;
				Out_RotationData15_g157279 = Data15_g157279.RotationData;
				Out_FragmentData15_g157279 = Data15_g157279.FragmentData;
				}
				float3 temp_output_1567_0_g157276 = Out_PositionOS15_g157279;
				float3 In_PositionOS16_g157287 = temp_output_1567_0_g157276;
				float3 temp_output_1567_16_g157276 = Out_PositionWS15_g157279;
				float3 In_PositionWS16_g157287 = temp_output_1567_16_g157276;
				float3 temp_output_1567_17_g157276 = Out_PositionWO15_g157279;
				float3 In_PositionWO16_g157287 = temp_output_1567_17_g157276;
				float3 In_PositionRawOS16_g157287 = Out_PositionRawOS15_g157279;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g157276 = Out_VertexData15_g157279;
				half4 Model_VertexMasks518_g157276 = temp_output_1567_29_g157276;
				float4 break1689_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157284 = _motion_small_vert_mode;
				float temp_output_30_0_g157284 = ( break1689_g157276.x * break33_g157284.x );
				float temp_output_29_0_g157284 = ( break1689_g157276.y * break33_g157284.y );
				float temp_output_31_0_g157284 = ( break1689_g157276.z * break33_g157284.z );
				float temp_output_28_0_g157284 = ( temp_output_30_0_g157284 + temp_output_29_0_g157284 + temp_output_31_0_g157284 + ( break1689_g157276.w * break33_g157284.w ) );
				float4 temp_output_1567_30_g157276 = Out_BoundsData15_g157279;
				half4 Model_BoundsData1322_g157276 = temp_output_1567_30_g157276;
				float4 break33_g157289 = _motion_small_proc_mode;
				float temp_output_30_0_g157289 = ( (Model_BoundsData1322_g157276).z * break33_g157289.x );
				float temp_output_29_0_g157289 = ( (Model_BoundsData1322_g157276).w * break33_g157289.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g157276 = ( temp_output_30_0_g157289 + temp_output_29_0_g157289 );
				#else
				float staticSwitch1691_g157276 = temp_output_28_0_g157284;
				#endif
				float enc1805_g157276 = IN.ase_texcoord2.z;
				float2 localDecodeFloatToVector21805_g157276 = DecodeFloatToVector2( enc1805_g157276 );
				float2 break1804_g157276 = localDecodeFloatToVector21805_g157276;
				half Small_Mask_Legacy1806_g157276 = break1804_g157276.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g157276 = Small_Mask_Legacy1806_g157276;
				#else
				float staticSwitch1800_g157276 = staticSwitch1691_g157276;
				#endif
				float clampResult17_g157313 = clamp( staticSwitch1800_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157314 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g157314 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g157314 );
				float temp_output_6_0_g157315 = saturate( ( ( clampResult17_g157313 - temp_output_7_0_g157314 ) / ( temp_output_10_0_g157314 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157315 = ( temp_output_6_0_g157315 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157315 = temp_output_6_0_g157315;
				#endif
				half Small_Mask640_g157276 = staticSwitch14_g157315;
				half3 Model_PositionOS147_g157276 = temp_output_1567_0_g157276;
				float3 normalizeResult1832_g157276 = normalize( Model_PositionOS147_g157276 );
				float4 lerpResult627_g157302 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157302 = (lerpResult627_g157302).xy;
				half3 Model_PositionWO162_g157276 = temp_output_1567_17_g157276;
				float3 temp_output_1567_19_g157276 = Out_PivotWO15_g157279;
				half3 Model_PivotWO402_g157276 = temp_output_1567_19_g157276;
				float3 lerpResult829_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g157276 = Out_MotionData15_g157279;
				half4 Model_MotionMasks489_g157276 = temp_output_1567_27_g157276;
				half3 Base_Position1394_g157276 = ( lerpResult829_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g157302 = Base_Position1394_g157276;
				half Flow_Tillling1397_g157276 = _MotionTillingValue;
				half Input_MotionTilling321_g157302 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157302 = ( -(Input_PositionWO419_g157302).xz * Input_MotionTilling321_g157302 * 0.005 );
				float2 temp_output_3_0_g157304 = Noise_Coord515_g157302;
				float2 temp_output_606_0_g157302 = (Global_WindDirection593_g157302*2.0 + -1.0);
				float2 temp_output_21_0_g157304 = temp_output_606_0_g157302;
				float lerpResult128_g157303 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g157276 = _MotionSpeedValue;
				half Input_MotionSpeed62_g157302 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157302 = ( lerpResult128_g157303 * Input_MotionSpeed62_g157302 );
				half Noise_Speed516_g157302 = ( temp_output_505_0_g157302 * 0.02 );
				float temp_output_15_0_g157304 = Noise_Speed516_g157302;
				float temp_output_23_0_g157304 = frac( temp_output_15_0_g157304 );
				float4 lerpResult39_g157304 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * temp_output_23_0_g157304 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157304 + ( temp_output_21_0_g157304 * frac( ( temp_output_15_0_g157304 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157304 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157302 = lerpResult39_g157304;
				half Flow_Noise1845_g157276 = _MotionNoiseValue;
				half Input_MotionNoise552_g157302 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157302 = lerp( Global_WindDirection593_g157302 , (Noise_Params535_g157302).rg , Input_MotionNoise552_g157302);
				half Global_WindIntensity576_g157302 = (lerpResult627_g157302).z;
				half Flow_Value1858_g157276 = _MotionIntensityValue;
				half Input_MotionValue629_g157302 = Flow_Value1858_g157276;
				float2 lerpResult574_g157302 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157302 , ( Global_WindIntensity576_g157302 * Input_MotionValue629_g157302 ));
				float3 appendResult566_g157302 = (float3(lerpResult574_g157302 , (Noise_Params535_g157302).b));
				float temp_output_136_0_g157305 = _global_wind_layer_value;
				float temp_output_19_0_g157307 = TVE_WindLayers[(int)temp_output_136_0_g157305];
				half3 Input_Position180_g157308 = Input_PositionWO419_g157302;
				float2 temp_output_75_0_g157308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_82_0_g157308 = temp_output_136_0_g157305;
				float2 temp_output_119_0_g157308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157308).xz ) );
				float temp_output_7_0_g157311 = 1.0;
				float temp_output_10_0_g157311 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157311 );
				float temp_output_198_0_g157308 = saturate( ( ( saturate( ( distance( Input_Position180_g157308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157311 ) / temp_output_10_0_g157311 ) );
				float4 lerpResult131_g157308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157308,temp_output_82_0_g157308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157308,temp_output_82_0_g157308), 0.0 ) , temp_output_198_0_g157308);
				float4 temp_output_17_0_g157307 = lerpResult131_g157308;
				float4 temp_output_3_0_g157307 = TVE_WindParams;
				float4 ifLocalVar18_g157307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157307 >= 0.5 )
				ifLocalVar18_g157307 = temp_output_17_0_g157307;
				else
				ifLocalVar18_g157307 = temp_output_3_0_g157307;
				float4 lerpResult22_g157307 = lerp( temp_output_3_0_g157307 , temp_output_17_0_g157307 , temp_output_19_0_g157307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157307 = lerpResult22_g157307;
				#else
				float4 staticSwitch24_g157307 = ifLocalVar18_g157307;
				#endif
				float4 temp_output_610_0_g157302 = staticSwitch24_g157307;
				float3 lerpResult623_g157302 = lerp( appendResult566_g157302 , (temp_output_610_0_g157302).rgb , (temp_output_610_0_g157302).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157302 = lerpResult623_g157302;
				#else
				float3 staticSwitch612_g157302 = appendResult566_g157302;
				#endif
				float3 temp_output_1797_567_g157276 = staticSwitch612_g157302;
				float2 break83_g157277 = ((temp_output_1797_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157277 = (float3(break83_g157277.x , 0.0 , break83_g157277.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157277 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g157291 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g157291 = (lerpResult627_g157291).xy;
				float3 lerpResult1411_g157276 = lerp( Model_PositionWO162_g157276 , Model_PivotWO402_g157276 , _MotionSmallPivotValue);
				half3 Small_Position1421_g157276 = ( lerpResult1411_g157276 + ( (Model_MotionMasks489_g157276).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g157291 = Small_Position1421_g157276;
				half Input_MotionTilling321_g157291 = ( Flow_Tillling1397_g157276 + 0.2 );
				half2 Noise_Coord515_g157291 = ( -(Input_PositionWO419_g157291).xz * Input_MotionTilling321_g157291 * 0.005 );
				float2 temp_output_3_0_g157293 = Noise_Coord515_g157291;
				float2 temp_output_606_0_g157291 = (Global_WindDirection593_g157291*2.0 + -1.0);
				float2 temp_output_21_0_g157293 = temp_output_606_0_g157291;
				float lerpResult128_g157292 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157291 = Flow_Speed1398_g157276;
				float temp_output_505_0_g157291 = ( lerpResult128_g157292 * Input_MotionSpeed62_g157291 );
				half Noise_Speed516_g157291 = ( temp_output_505_0_g157291 * 0.02 );
				float temp_output_15_0_g157293 = Noise_Speed516_g157291;
				float temp_output_23_0_g157293 = frac( temp_output_15_0_g157293 );
				float4 lerpResult39_g157293 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * temp_output_23_0_g157293 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g157293 + ( temp_output_21_0_g157293 * frac( ( temp_output_15_0_g157293 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g157293 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g157291 = lerpResult39_g157293;
				half Input_MotionNoise552_g157291 = Flow_Noise1845_g157276;
				float2 lerpResult560_g157291 = lerp( Global_WindDirection593_g157291 , (Noise_Params535_g157291).rg , Input_MotionNoise552_g157291);
				half Global_WindIntensity576_g157291 = (lerpResult627_g157291).z;
				half Input_MotionValue629_g157291 = Flow_Value1858_g157276;
				float2 lerpResult574_g157291 = lerp( float2( 0.5,0.5 ) , lerpResult560_g157291 , ( Global_WindIntensity576_g157291 * Input_MotionValue629_g157291 ));
				float3 appendResult566_g157291 = (float3(lerpResult574_g157291 , (Noise_Params535_g157291).b));
				float temp_output_136_0_g157294 = _global_wind_layer_value;
				float temp_output_19_0_g157296 = TVE_WindLayers[(int)temp_output_136_0_g157294];
				half3 Input_Position180_g157297 = Input_PositionWO419_g157291;
				float2 temp_output_75_0_g157297 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_82_0_g157297 = temp_output_136_0_g157294;
				float2 temp_output_119_0_g157297 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g157297).xz ) );
				float temp_output_7_0_g157300 = 1.0;
				float temp_output_10_0_g157300 = ( TVE_RenderNearFadeValue - temp_output_7_0_g157300 );
				float temp_output_198_0_g157297 = saturate( ( ( saturate( ( distance( Input_Position180_g157297 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g157300 ) / temp_output_10_0_g157300 ) );
				float4 lerpResult131_g157297 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g157297,temp_output_82_0_g157297), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g157297,temp_output_82_0_g157297), 0.0 ) , temp_output_198_0_g157297);
				float4 temp_output_17_0_g157296 = lerpResult131_g157297;
				float4 temp_output_3_0_g157296 = TVE_WindParams;
				float4 ifLocalVar18_g157296 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g157296 >= 0.5 )
				ifLocalVar18_g157296 = temp_output_17_0_g157296;
				else
				ifLocalVar18_g157296 = temp_output_3_0_g157296;
				float4 lerpResult22_g157296 = lerp( temp_output_3_0_g157296 , temp_output_17_0_g157296 , temp_output_19_0_g157296);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g157296 = lerpResult22_g157296;
				#else
				float4 staticSwitch24_g157296 = ifLocalVar18_g157296;
				#endif
				float4 temp_output_610_0_g157291 = staticSwitch24_g157296;
				float3 lerpResult623_g157291 = lerp( appendResult566_g157291 , (temp_output_610_0_g157291).rgb , (temp_output_610_0_g157291).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g157291 = lerpResult623_g157291;
				#else
				float3 staticSwitch612_g157291 = appendResult566_g157291;
				#endif
				float3 temp_output_1798_567_g157276 = staticSwitch612_g157291;
				float2 break83_g157278 = ((temp_output_1798_567_g157276).xy*2.0 + -1.0);
				float3 appendResult79_g157278 = (float3(break83_g157278.x , 0.0 , break83_g157278.y));
				half2 Small_Direction1489_g157276 = (( mul( unity_WorldToObject, float4( appendResult79_g157278 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g157276 = Small_Direction1489_g157276;
				#else
				float2 staticSwitch1485_g157276 = Base_Direction893_g157276;
				#endif
				half2 Wind_Direction1486_g157276 = staticSwitch1485_g157276;
				float2 break1828_g157276 = -Wind_Direction1486_g157276;
				float3 appendResult1830_g157276 = (float3(break1828_g157276.x , 0.0 , break1828_g157276.y));
				float dotResult1831_g157276 = dot( normalizeResult1832_g157276 , appendResult1830_g157276 );
				float lerpResult1826_g157276 = lerp( 1.0 , (dotResult1831_g157276*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g157276 = lerpResult1826_g157276;
				float2 break1433_g157276 = Small_Direction1489_g157276;
				float3 appendResult1434_g157276 = (float3(break1433_g157276.x , length( Small_Direction1489_g157276 ) , break1433_g157276.y));
				half Small_Noise1427_g157276 = abs( (temp_output_1798_567_g157276).z );
				float3 appendResult1786_g157276 = (float3(Small_Noise1427_g157276 , (Small_Noise1427_g157276*0.4 + -0.2) , Small_Noise1427_g157276));
				half3 Small_Motion789_g157276 = ( _MotionSmallIntensityValue * Small_Mask640_g157276 * Motion_FrontMask1142_g157276 * appendResult1434_g157276 * appendResult1786_g157276 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g157276 = Small_Motion789_g157276;
				#else
				float3 staticSwitch495_g157276 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157285 = _motion_tiny_vert_mode;
				float temp_output_30_0_g157285 = ( break1710_g157276.x * break33_g157285.x );
				float temp_output_29_0_g157285 = ( break1710_g157276.y * break33_g157285.y );
				float temp_output_31_0_g157285 = ( break1710_g157276.z * break33_g157285.z );
				float temp_output_28_0_g157285 = ( temp_output_30_0_g157285 + temp_output_29_0_g157285 + temp_output_31_0_g157285 + ( break1710_g157276.w * break33_g157285.w ) );
				float4 break33_g157290 = _motion_tiny_proc_mode;
				float temp_output_30_0_g157290 = ( (Model_BoundsData1322_g157276).z * break33_g157290.x );
				float temp_output_29_0_g157290 = ( (Model_BoundsData1322_g157276).w * break33_g157290.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g157276 = ( temp_output_30_0_g157290 + temp_output_29_0_g157290 );
				#else
				float staticSwitch1712_g157276 = temp_output_28_0_g157285;
				#endif
				half Tiny_Mask_Legacy1807_g157276 = break1804_g157276.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g157276 = Tiny_Mask_Legacy1807_g157276;
				#else
				float staticSwitch1810_g157276 = staticSwitch1712_g157276;
				#endif
				float clampResult17_g157316 = clamp( staticSwitch1810_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157317 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g157317 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g157317 );
				float temp_output_6_0_g157318 = saturate( ( ( clampResult17_g157316 - temp_output_7_0_g157317 ) / ( temp_output_10_0_g157317 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157318 = ( temp_output_6_0_g157318 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157318 = temp_output_6_0_g157318;
				#endif
				half Tiny_Mask218_g157276 = staticSwitch14_g157318;
				half3 Input_Position500_g157319 = Model_PositionWO162_g157276;
				half Input_MotionTilling321_g157319 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g157319 = 0.0;
				float lerpResult128_g157321 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g157319 = _MotionTinySpeedValue;
				float4 tex2DNode460_g157319 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g157319).xz * Input_MotionTilling321_g157319 * 0.03 ) + Input_MotionPhase330_g157319 + ( lerpResult128_g157321 * Input_MotionSpeed62_g157319 * 0.01 ) ) );
				float3 appendResult462_g157319 = (float3(tex2DNode460_g157319.r , tex2DNode460_g157319.g , tex2DNode460_g157319.b));
				half3 Flutter_Texture489_g157319 = (appendResult462_g157319*2.0 + -1.0);
				half3 Tiny_Direction859_g157276 = Flutter_Texture489_g157319;
				half Base_Noise1159_g157276 = abs( (temp_output_1797_567_g157276).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g157276 = Small_Noise1427_g157276;
				#else
				float staticSwitch1453_g157276 = Base_Noise1159_g157276;
				#endif
				half Wind_Noise1475_g157276 = staticSwitch1453_g157276;
				half3 Model_PositionWS1819_g157276 = temp_output_1567_16_g157276;
				half Motion_FadeMask1820_g157276 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g157276 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g157276 = ( _MotionTinyIntensityValue * Tiny_Mask218_g157276 * Tiny_Direction859_g157276 * length( Wind_Direction1486_g157276 ) * Wind_Noise1475_g157276 * Motion_FrontMask1142_g157276 * Motion_FadeMask1820_g157276 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g157276 = Tiny_Motion1451_g157276;
				#else
				float3 staticSwitch414_g157276 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g157276 = ( staticSwitch495_g157276 + staticSwitch414_g157276 );
				float3 In_PositionAddOS16_g157287 = Final_PositionADD1569_g157276;
				float3 temp_output_1567_24_g157276 = Out_PivotOS15_g157279;
				float3 In_PivotOS16_g157287 = temp_output_1567_24_g157276;
				float3 In_PivotWS16_g157287 = Out_PivotWS15_g157279;
				float3 In_PivotWO16_g157287 = temp_output_1567_19_g157276;
				float3 temp_output_1567_20_g157276 = Out_NormalOS15_g157279;
				float3 In_NormalOS16_g157287 = temp_output_1567_20_g157276;
				float3 In_NormalWS16_g157287 = Out_NormalWS15_g157279;
				float3 In_NormalRawOS16_g157287 = Out_NormalRawOS15_g157279;
				float3 In_NormalRawWS16_g157287 = Out_NormalRawWS15_g157279;
				float4 In_TangentOS16_g157287 = Out_TangentOS15_g157279;
				float3 In_ViewDirWS16_g157287 = Out_ViewDirWS15_g157279;
				float4 In_VertexData16_g157287 = temp_output_1567_29_g157276;
				float4 In_MotionData16_g157287 = temp_output_1567_27_g157276;
				float4 In_BoundsData16_g157287 = temp_output_1567_30_g157276;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g157276 = _MotionBaseIntensityValue;
				float4 break748_g157276 = Model_VertexMasks518_g157276;
				float4 break33_g157286 = _motion_base_vert_mode;
				float temp_output_30_0_g157286 = ( break748_g157276.x * break33_g157286.x );
				float temp_output_29_0_g157286 = ( break748_g157276.y * break33_g157286.y );
				float temp_output_31_0_g157286 = ( break748_g157276.z * break33_g157286.z );
				float temp_output_28_0_g157286 = ( temp_output_30_0_g157286 + temp_output_29_0_g157286 + temp_output_31_0_g157286 + ( break748_g157276.w * break33_g157286.w ) );
				float4 break33_g157288 = _motion_base_proc_mode;
				float temp_output_30_0_g157288 = ( (Model_BoundsData1322_g157276).z * break33_g157288.x );
				float temp_output_29_0_g157288 = ( (Model_BoundsData1322_g157276).w * break33_g157288.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g157276 = ( temp_output_30_0_g157288 + temp_output_29_0_g157288 );
				#else
				float staticSwitch590_g157276 = temp_output_28_0_g157286;
				#endif
				float clampResult17_g157281 = clamp( staticSwitch590_g157276 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157282 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g157282 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g157282 );
				float temp_output_6_0_g157283 = saturate( ( ( clampResult17_g157281 - temp_output_7_0_g157282 ) / ( temp_output_10_0_g157282 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157283 = ( temp_output_6_0_g157283 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g157283 = temp_output_6_0_g157283;
				#endif
				half Base_Mask217_g157276 = staticSwitch14_g157283;
				float lerpResult1768_g157276 = lerp( (Base_Noise1159_g157276*2.0 + -1.0) , Base_Noise1159_g157276 , length( Base_Direction893_g157276 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g157276 = ( ( Base_Intensity1855_g157276 * Base_Mask217_g157276 * lerpResult1768_g157276 ) * Base_Direction893_g157276 );
				#else
				float2 staticSwitch1573_g157276 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g157276 = staticSwitch1573_g157276;
				half2 Final_VertexBend1570_g157276 = Base_Motion1440_g157276;
				float4 In_RotationData16_g157287 = float4( Final_VertexBend1570_g157276, 0.0 , 0.0 );
				float temp_output_6_0_g157323 = ( _MotionHighlightValue * length( Wind_Direction1486_g157276 ) * Motion_FadeMask1820_g157276 * ( Base_Mask217_g157276 * Base_Mask217_g157276 ) * ( Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 * Wind_Noise1475_g157276 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157323 = ( temp_output_6_0_g157323 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g157323 = temp_output_6_0_g157323;
				#endif
				float temp_output_1852_0_g157276 = staticSwitch14_g157323;
				half Motion_Highlight301_g157276 = temp_output_1852_0_g157276;
				float4 appendResult454_g157276 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g157276));
				half4 Final_FragmentData457_g157276 = appendResult454_g157276;
				float4 In_FragmentData16_g157287 = Final_FragmentData457_g157276;
				{
				Data16_g157287.Dummy = In_Dummy16_g157287;
				Data16_g157287.PositionOS = In_PositionOS16_g157287;
				Data16_g157287.PositionWS = In_PositionWS16_g157287;
				Data16_g157287.PositionWO = In_PositionWO16_g157287;
				Data16_g157287.PositionRawOS = In_PositionRawOS16_g157287;
				Data16_g157287.PositionAddOS = In_PositionAddOS16_g157287;
				Data16_g157287.PivotOS = In_PivotOS16_g157287;
				Data16_g157287.PivotWS = In_PivotWS16_g157287;
				Data16_g157287.PivotWO = In_PivotWO16_g157287;
				Data16_g157287.NormalOS = In_NormalOS16_g157287;
				Data16_g157287.NormalWS = In_NormalWS16_g157287;
				Data16_g157287.NormalRawOS = In_NormalRawOS16_g157287;
				Data16_g157287.NormalRawWS = In_NormalRawWS16_g157287;
				Data16_g157287.TangentOS = In_TangentOS16_g157287;
				Data16_g157287.ViewDirWS = In_ViewDirWS16_g157287;
				Data16_g157287.VertexData = In_VertexData16_g157287;
				Data16_g157287.MotionData = In_MotionData16_g157287;
				Data16_g157287.BoundsData = In_BoundsData16_g157287;
				Data16_g157287.RotationData = In_RotationData16_g157287;
				Data16_g157287.FragmentData = In_FragmentData16_g157287;
				}
				TVEModelData Data15_g157325 = Data16_g157287;
				float Out_Dummy15_g157325 = 0;
				float3 Out_PositionOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157325 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157325 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157325 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157325 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157325 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157325 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157325 = float3( 0,0,0 );
				float4 Out_VertexData15_g157325 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157325 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157325 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157325 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157325 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157325 = Data15_g157325.Dummy;
				Out_PositionOS15_g157325 = Data15_g157325.PositionOS;
				Out_PositionWS15_g157325 = Data15_g157325.PositionWS;
				Out_PositionWO15_g157325 = Data15_g157325.PositionWO;
				Out_PositionRawOS15_g157325 = Data15_g157325.PositionRawOS;
				Out_PositionAddOS15_g157325 = Data15_g157325.PositionAddOS;
				Out_PivotOS15_g157325 = Data15_g157325.PivotOS;
				Out_PivotWS15_g157325 = Data15_g157325.PivotWS;
				Out_PivotWO15_g157325 = Data15_g157325.PivotWO;
				Out_NormalOS15_g157325 = Data15_g157325.NormalOS;
				Out_NormalWS15_g157325 = Data15_g157325.NormalWS;
				Out_NormalRawOS15_g157325 = Data15_g157325.NormalRawOS;
				Out_NormalRawWS15_g157325 = Data15_g157325.NormalRawWS;
				Out_TangentOS15_g157325 = Data15_g157325.TangentOS;
				Out_ViewDirWS15_g157325 = Data15_g157325.ViewDirWS;
				Out_VertexData15_g157325 = Data15_g157325.VertexData;
				Out_MotionData15_g157325 = Data15_g157325.MotionData;
				Out_BoundsData15_g157325 = Data15_g157325.BoundsData;
				Out_RotationData15_g157325 = Data15_g157325.RotationData;
				Out_FragmentData15_g157325 = Data15_g157325.FragmentData;
				}
				half3 Model_PositionOS147_g157324 = Out_PositionOS15_g157325;
				half3 Input_False58_g157330 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157327 = Model_PositionOS147_g157324;
				half3 VertexPos40_g157328 = VertexPos40_g157327;
				float3 appendResult74_g157328 = (float3(VertexPos40_g157328.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157328 = appendResult74_g157328;
				float3 break84_g157328 = VertexPos40_g157328;
				float3 appendResult81_g157328 = (float3(0.0 , break84_g157328.y , break84_g157328.z));
				half3 VertexPosOtherAxis82_g157328 = appendResult81_g157328;
				float4 temp_output_1567_33_g157324 = Out_RotationData15_g157325;
				half4 Model_VertexBend1569_g157324 = temp_output_1567_33_g157324;
				half2 Angle44_g157327 = (Model_VertexBend1569_g157324).xy;
				half Angle44_g157328 = (Angle44_g157327).y;
				half3 VertexPos40_g157329 = ( VertexPosRotationAxis50_g157328 + ( VertexPosOtherAxis82_g157328 * cos( Angle44_g157328 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157328 ) * sin( Angle44_g157328 ) ) );
				float3 appendResult74_g157329 = (float3(0.0 , 0.0 , VertexPos40_g157329.z));
				half3 VertexPosRotationAxis50_g157329 = appendResult74_g157329;
				float3 break84_g157329 = VertexPos40_g157329;
				float3 appendResult81_g157329 = (float3(break84_g157329.x , break84_g157329.y , 0.0));
				half3 VertexPosOtherAxis82_g157329 = appendResult81_g157329;
				half Angle44_g157329 = -(Angle44_g157327).x;
				half3 Input_True57_g157330 = ( VertexPosRotationAxis50_g157329 + ( VertexPosOtherAxis82_g157329 * cos( Angle44_g157329 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157329 ) * sin( Angle44_g157329 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch65_g157330 = Input_False58_g157330;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch67_g157330 = staticSwitch65_g157330;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g157330 = Input_True57_g157330;
				#else
				float3 staticSwitch69_g157330 = staticSwitch67_g157330;
				#endif
				float3 temp_output_1567_31_g157324 = Out_PositionAddOS15_g157325;
				half3 Model_PositionADD1568_g157324 = temp_output_1567_31_g157324;
				half3 Final_PositionOS178_g157324 = ( staticSwitch69_g157330 + Model_PositionADD1568_g157324 );
				float3 In_PositionOS16_g157326 = Final_PositionOS178_g157324;
				float3 In_PositionWS16_g157326 = Out_PositionWS15_g157325;
				float3 In_PositionWO16_g157326 = Out_PositionWO15_g157325;
				float3 In_PositionRawOS16_g157326 = Out_PositionRawOS15_g157325;
				float3 In_PositionAddOS16_g157326 = temp_output_1567_31_g157324;
				float3 In_PivotOS16_g157326 = Out_PivotOS15_g157325;
				float3 In_PivotWS16_g157326 = Out_PivotWS15_g157325;
				float3 In_PivotWO16_g157326 = Out_PivotWO15_g157325;
				float3 In_NormalOS16_g157326 = Out_NormalOS15_g157325;
				float3 In_NormalWS16_g157326 = Out_NormalWS15_g157325;
				float3 In_NormalRawOS16_g157326 = Out_NormalRawOS15_g157325;
				float3 In_NormalRawWS16_g157326 = Out_NormalRawWS15_g157325;
				float4 In_TangentOS16_g157326 = Out_TangentOS15_g157325;
				float3 In_ViewDirWS16_g157326 = Out_ViewDirWS15_g157325;
				float4 In_VertexData16_g157326 = Out_VertexData15_g157325;
				float4 In_MotionData16_g157326 = Out_MotionData15_g157325;
				float4 In_BoundsData16_g157326 = Out_BoundsData15_g157325;
				float4 In_RotationData16_g157326 = temp_output_1567_33_g157324;
				float4 In_FragmentData16_g157326 = Out_FragmentData15_g157325;
				{
				Data16_g157326.Dummy = In_Dummy16_g157326;
				Data16_g157326.PositionOS = In_PositionOS16_g157326;
				Data16_g157326.PositionWS = In_PositionWS16_g157326;
				Data16_g157326.PositionWO = In_PositionWO16_g157326;
				Data16_g157326.PositionRawOS = In_PositionRawOS16_g157326;
				Data16_g157326.PositionAddOS = In_PositionAddOS16_g157326;
				Data16_g157326.PivotOS = In_PivotOS16_g157326;
				Data16_g157326.PivotWS = In_PivotWS16_g157326;
				Data16_g157326.PivotWO = In_PivotWO16_g157326;
				Data16_g157326.NormalOS = In_NormalOS16_g157326;
				Data16_g157326.NormalWS = In_NormalWS16_g157326;
				Data16_g157326.NormalRawOS = In_NormalRawOS16_g157326;
				Data16_g157326.NormalRawWS = In_NormalRawWS16_g157326;
				Data16_g157326.TangentOS = In_TangentOS16_g157326;
				Data16_g157326.ViewDirWS = In_ViewDirWS16_g157326;
				Data16_g157326.VertexData = In_VertexData16_g157326;
				Data16_g157326.MotionData = In_MotionData16_g157326;
				Data16_g157326.BoundsData = In_BoundsData16_g157326;
				Data16_g157326.RotationData = In_RotationData16_g157326;
				Data16_g157326.FragmentData = In_FragmentData16_g157326;
				}
				TVEModelData Data15_g157332 = Data16_g157326;
				float Out_Dummy15_g157332 = 0;
				float3 Out_PositionOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157332 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157332 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157332 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157332 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157332 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157332 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157332 = float3( 0,0,0 );
				float4 Out_VertexData15_g157332 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157332 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157332 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157332 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157332 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157332 = Data15_g157332.Dummy;
				Out_PositionOS15_g157332 = Data15_g157332.PositionOS;
				Out_PositionWS15_g157332 = Data15_g157332.PositionWS;
				Out_PositionWO15_g157332 = Data15_g157332.PositionWO;
				Out_PositionRawOS15_g157332 = Data15_g157332.PositionRawOS;
				Out_PositionAddOS15_g157332 = Data15_g157332.PositionAddOS;
				Out_PivotOS15_g157332 = Data15_g157332.PivotOS;
				Out_PivotWS15_g157332 = Data15_g157332.PivotWS;
				Out_PivotWO15_g157332 = Data15_g157332.PivotWO;
				Out_NormalOS15_g157332 = Data15_g157332.NormalOS;
				Out_NormalWS15_g157332 = Data15_g157332.NormalWS;
				Out_NormalRawOS15_g157332 = Data15_g157332.NormalRawOS;
				Out_NormalRawWS15_g157332 = Data15_g157332.NormalRawWS;
				Out_TangentOS15_g157332 = Data15_g157332.TangentOS;
				Out_ViewDirWS15_g157332 = Data15_g157332.ViewDirWS;
				Out_VertexData15_g157332 = Data15_g157332.VertexData;
				Out_MotionData15_g157332 = Data15_g157332.MotionData;
				Out_BoundsData15_g157332 = Data15_g157332.BoundsData;
				Out_RotationData15_g157332 = Data15_g157332.RotationData;
				Out_FragmentData15_g157332 = Data15_g157332.FragmentData;
				}
				float3 In_PositionOS16_g157333 = Out_PositionOS15_g157332;
				float3 In_PositionWS16_g157333 = Out_PositionWS15_g157332;
				float3 In_PositionWO16_g157333 = Out_PositionWO15_g157332;
				float3 temp_output_1567_26_g157331 = Out_PositionRawOS15_g157332;
				float3 In_PositionRawOS16_g157333 = temp_output_1567_26_g157331;
				float3 In_PositionAddOS16_g157333 = Out_PositionAddOS15_g157332;
				float3 In_PivotOS16_g157333 = Out_PivotOS15_g157332;
				float3 In_PivotWS16_g157333 = Out_PivotWS15_g157332;
				float3 In_PivotWO16_g157333 = Out_PivotWO15_g157332;
				half3 Model_NormalOS1568_g157331 = Out_NormalOS15_g157332;
				float3 lerpResult1589_g157331 = lerp( Model_NormalOS1568_g157331 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g157331 = temp_output_1567_26_g157331;
				float3 normalizeResult1594_g157331 = ASESafeNormalize( ( Model_PositionRAW1592_g157331 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g157331 = lerp( lerpResult1589_g157331 , normalizeResult1594_g157331 , _NormalSphereValue);
				half3 Local_NormalOS1601_g157331 = lerpResult1585_g157331;
				half3 VertexPos40_g157334 = Local_NormalOS1601_g157331;
				half3 VertexPos40_g157335 = VertexPos40_g157334;
				float3 appendResult74_g157335 = (float3(VertexPos40_g157335.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g157335 = appendResult74_g157335;
				float3 break84_g157335 = VertexPos40_g157335;
				float3 appendResult81_g157335 = (float3(0.0 , break84_g157335.y , break84_g157335.z));
				half3 VertexPosOtherAxis82_g157335 = appendResult81_g157335;
				float4 temp_output_1567_33_g157331 = Out_RotationData15_g157332;
				half4 Model_RotationData1583_g157331 = temp_output_1567_33_g157331;
				half2 Angle44_g157334 = Model_RotationData1583_g157331.xy;
				half Angle44_g157335 = (Angle44_g157334).y;
				half3 VertexPos40_g157336 = ( VertexPosRotationAxis50_g157335 + ( VertexPosOtherAxis82_g157335 * cos( Angle44_g157335 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g157335 ) * sin( Angle44_g157335 ) ) );
				float3 appendResult74_g157336 = (float3(0.0 , 0.0 , VertexPos40_g157336.z));
				half3 VertexPosRotationAxis50_g157336 = appendResult74_g157336;
				float3 break84_g157336 = VertexPos40_g157336;
				float3 appendResult81_g157336 = (float3(break84_g157336.x , break84_g157336.y , 0.0));
				half3 VertexPosOtherAxis82_g157336 = appendResult81_g157336;
				half Angle44_g157336 = -(Angle44_g157334).x;
				float3 lerpResult1591_g157331 = lerp( Local_NormalOS1601_g157331 , ( VertexPosRotationAxis50_g157336 + ( VertexPosOtherAxis82_g157336 * cos( Angle44_g157336 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g157336 ) * sin( Angle44_g157336 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g157331 = lerpResult1591_g157331;
				#else
				float3 staticSwitch413_g157331 = Local_NormalOS1601_g157331;
				#endif
				half3 Final_NormalOS178_g157331 = staticSwitch413_g157331;
				float3 In_NormalOS16_g157333 = Final_NormalOS178_g157331;
				float3 In_NormalWS16_g157333 = Out_NormalWS15_g157332;
				float3 In_NormalRawOS16_g157333 = Out_NormalRawOS15_g157332;
				float3 In_NormalRawWS16_g157333 = Out_NormalRawWS15_g157332;
				float4 In_TangentOS16_g157333 = Out_TangentOS15_g157332;
				float3 In_ViewDirWS16_g157333 = Out_ViewDirWS15_g157332;
				float4 In_VertexData16_g157333 = Out_VertexData15_g157332;
				float4 In_MotionData16_g157333 = Out_MotionData15_g157332;
				float4 temp_output_1567_30_g157331 = Out_BoundsData15_g157332;
				float4 In_BoundsData16_g157333 = temp_output_1567_30_g157331;
				float4 In_RotationData16_g157333 = temp_output_1567_33_g157331;
				float4 In_FragmentData16_g157333 = Out_FragmentData15_g157332;
				{
				Data16_g157333.Dummy = In_Dummy16_g157333;
				Data16_g157333.PositionOS = In_PositionOS16_g157333;
				Data16_g157333.PositionWS = In_PositionWS16_g157333;
				Data16_g157333.PositionWO = In_PositionWO16_g157333;
				Data16_g157333.PositionRawOS = In_PositionRawOS16_g157333;
				Data16_g157333.PositionAddOS = In_PositionAddOS16_g157333;
				Data16_g157333.PivotOS = In_PivotOS16_g157333;
				Data16_g157333.PivotWS = In_PivotWS16_g157333;
				Data16_g157333.PivotWO = In_PivotWO16_g157333;
				Data16_g157333.NormalOS = In_NormalOS16_g157333;
				Data16_g157333.NormalWS = In_NormalWS16_g157333;
				Data16_g157333.NormalRawOS = In_NormalRawOS16_g157333;
				Data16_g157333.NormalRawWS = In_NormalRawWS16_g157333;
				Data16_g157333.TangentOS = In_TangentOS16_g157333;
				Data16_g157333.ViewDirWS = In_ViewDirWS16_g157333;
				Data16_g157333.VertexData = In_VertexData16_g157333;
				Data16_g157333.MotionData = In_MotionData16_g157333;
				Data16_g157333.BoundsData = In_BoundsData16_g157333;
				Data16_g157333.RotationData = In_RotationData16_g157333;
				Data16_g157333.FragmentData = In_FragmentData16_g157333;
				}
				TVEModelData Data15_g157338 = Data16_g157333;
				float Out_Dummy15_g157338 = 0;
				float3 Out_PositionOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157338 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157338 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157338 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157338 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157338 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157338 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157338 = float3( 0,0,0 );
				float4 Out_VertexData15_g157338 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157338 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157338 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157338 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157338 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157338 = Data15_g157338.Dummy;
				Out_PositionOS15_g157338 = Data15_g157338.PositionOS;
				Out_PositionWS15_g157338 = Data15_g157338.PositionWS;
				Out_PositionWO15_g157338 = Data15_g157338.PositionWO;
				Out_PositionRawOS15_g157338 = Data15_g157338.PositionRawOS;
				Out_PositionAddOS15_g157338 = Data15_g157338.PositionAddOS;
				Out_PivotOS15_g157338 = Data15_g157338.PivotOS;
				Out_PivotWS15_g157338 = Data15_g157338.PivotWS;
				Out_PivotWO15_g157338 = Data15_g157338.PivotWO;
				Out_NormalOS15_g157338 = Data15_g157338.NormalOS;
				Out_NormalWS15_g157338 = Data15_g157338.NormalWS;
				Out_NormalRawOS15_g157338 = Data15_g157338.NormalRawOS;
				Out_NormalRawWS15_g157338 = Data15_g157338.NormalRawWS;
				Out_TangentOS15_g157338 = Data15_g157338.TangentOS;
				Out_ViewDirWS15_g157338 = Data15_g157338.ViewDirWS;
				Out_VertexData15_g157338 = Data15_g157338.VertexData;
				Out_MotionData15_g157338 = Data15_g157338.MotionData;
				Out_BoundsData15_g157338 = Data15_g157338.BoundsData;
				Out_RotationData15_g157338 = Data15_g157338.RotationData;
				Out_FragmentData15_g157338 = Data15_g157338.FragmentData;
				}
				float3 temp_output_217_24_g157337 = Out_PivotOS15_g157338;
				float3 In_PositionOS16_g157339 = ( Out_PositionOS15_g157338 + temp_output_217_24_g157337 );
				float3 In_PositionWS16_g157339 = Out_PositionWS15_g157338;
				float3 In_PositionWO16_g157339 = Out_PositionWO15_g157338;
				float3 In_PositionRawOS16_g157339 = Out_PositionRawOS15_g157338;
				float3 In_PositionAddOS16_g157339 = Out_PositionAddOS15_g157338;
				float3 In_PivotOS16_g157339 = temp_output_217_24_g157337;
				float3 In_PivotWS16_g157339 = Out_PivotWS15_g157338;
				float3 In_PivotWO16_g157339 = Out_PivotWO15_g157338;
				float3 In_NormalOS16_g157339 = Out_NormalOS15_g157338;
				float3 In_NormalWS16_g157339 = Out_NormalWS15_g157338;
				float3 In_NormalRawOS16_g157339 = Out_NormalRawOS15_g157338;
				float3 In_NormalRawWS16_g157339 = Out_NormalRawWS15_g157338;
				float4 In_TangentOS16_g157339 = Out_TangentOS15_g157338;
				float3 In_ViewDirWS16_g157339 = Out_ViewDirWS15_g157338;
				float4 In_VertexData16_g157339 = Out_VertexData15_g157338;
				float4 In_MotionData16_g157339 = Out_MotionData15_g157338;
				float4 In_BoundsData16_g157339 = Out_BoundsData15_g157338;
				float4 In_RotationData16_g157339 = Out_RotationData15_g157338;
				float4 In_FragmentData16_g157339 = Out_FragmentData15_g157338;
				{
				Data16_g157339.Dummy = In_Dummy16_g157339;
				Data16_g157339.PositionOS = In_PositionOS16_g157339;
				Data16_g157339.PositionWS = In_PositionWS16_g157339;
				Data16_g157339.PositionWO = In_PositionWO16_g157339;
				Data16_g157339.PositionRawOS = In_PositionRawOS16_g157339;
				Data16_g157339.PositionAddOS = In_PositionAddOS16_g157339;
				Data16_g157339.PivotOS = In_PivotOS16_g157339;
				Data16_g157339.PivotWS = In_PivotWS16_g157339;
				Data16_g157339.PivotWO = In_PivotWO16_g157339;
				Data16_g157339.NormalOS = In_NormalOS16_g157339;
				Data16_g157339.NormalWS = In_NormalWS16_g157339;
				Data16_g157339.NormalRawOS = In_NormalRawOS16_g157339;
				Data16_g157339.NormalRawWS = In_NormalRawWS16_g157339;
				Data16_g157339.TangentOS = In_TangentOS16_g157339;
				Data16_g157339.ViewDirWS = In_ViewDirWS16_g157339;
				Data16_g157339.VertexData = In_VertexData16_g157339;
				Data16_g157339.MotionData = In_MotionData16_g157339;
				Data16_g157339.BoundsData = In_BoundsData16_g157339;
				Data16_g157339.RotationData = In_RotationData16_g157339;
				Data16_g157339.FragmentData = In_FragmentData16_g157339;
				}
				TVEModelData Data15_g157392 = Data16_g157339;
				float Out_Dummy15_g157392 = 0;
				float3 Out_PositionOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157392 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157392 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157392 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157392 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157392 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157392 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157392 = float3( 0,0,0 );
				float4 Out_VertexData15_g157392 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157392 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157392 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157392 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157392 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157392 = Data15_g157392.Dummy;
				Out_PositionOS15_g157392 = Data15_g157392.PositionOS;
				Out_PositionWS15_g157392 = Data15_g157392.PositionWS;
				Out_PositionWO15_g157392 = Data15_g157392.PositionWO;
				Out_PositionRawOS15_g157392 = Data15_g157392.PositionRawOS;
				Out_PositionAddOS15_g157392 = Data15_g157392.PositionAddOS;
				Out_PivotOS15_g157392 = Data15_g157392.PivotOS;
				Out_PivotWS15_g157392 = Data15_g157392.PivotWS;
				Out_PivotWO15_g157392 = Data15_g157392.PivotWO;
				Out_NormalOS15_g157392 = Data15_g157392.NormalOS;
				Out_NormalWS15_g157392 = Data15_g157392.NormalWS;
				Out_NormalRawOS15_g157392 = Data15_g157392.NormalRawOS;
				Out_NormalRawWS15_g157392 = Data15_g157392.NormalRawWS;
				Out_TangentOS15_g157392 = Data15_g157392.TangentOS;
				Out_ViewDirWS15_g157392 = Data15_g157392.ViewDirWS;
				Out_VertexData15_g157392 = Data15_g157392.VertexData;
				Out_MotionData15_g157392 = Data15_g157392.MotionData;
				Out_BoundsData15_g157392 = Data15_g157392.BoundsData;
				Out_RotationData15_g157392 = Data15_g157392.RotationData;
				Out_FragmentData15_g157392 = Data15_g157392.FragmentData;
				}
				half3 Model_PositionWO222_g157391 = Out_PositionWO15_g157392;
				float3 temp_output_279_0_g157402 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157402 = temp_output_279_0_g157402;
				half4 localSamplePlanar2D238_g157402 = SamplePlanar2D( Texture238_g157402 , Sampler238_g157402 , Coords238_g157402 , WorldPosition238_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157402) = _MainAlbedoTex;
				SamplerState Sampler246_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition246_g157402 = temp_output_279_0_g157402;
				half3 Model_NormalWS226_g157391 = Out_NormalWS15_g157392;
				float3 temp_output_280_0_g157402 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157402 = temp_output_280_0_g157402;
				half4 localSamplePlanar3D246_g157402 = SamplePlanar3D( Texture246_g157402 , Sampler246_g157402 , Coords246_g157402 , WorldPosition246_g157402 , WorldNormal246_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157402) = _MainAlbedoTex;
				SamplerState Sampler234_g157402 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157402 = temp_output_37_0_g157402;
				float3 WorldPosition234_g157402 = temp_output_279_0_g157402;
				float4 localSampleStochastic2D234_g157402 = SampleStochastic2D( Texture234_g157402 , Sampler234_g157402 , Coords234_g157402 , WorldPosition234_g157402 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157402) = _MainAlbedoTex;
				SamplerState Sampler263_g157402 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157402 = temp_output_37_0_g157402;
				half3 WorldPosition263_g157402 = temp_output_279_0_g157402;
				half3 WorldNormal263_g157402 = temp_output_280_0_g157402;
				half4 localSampleStochastic3D263_g157402 = SampleStochastic3D( Texture263_g157402 , Sampler263_g157402 , Coords263_g157402 , WorldPosition263_g157402 , WorldNormal263_g157402 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g157391 = localSampleExtra275_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g157391 = localSamplePlanar2D238_g157402;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g157391 = localSamplePlanar3D246_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g157391 = localSampleStochastic2D234_g157402;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g157391 = localSampleStochastic3D263_g157402;
				#else
				float4 staticSwitch184_g157391 = localSampleMain276_g157402;
				#endif
				half4 Local_AlbedoTex185_g157391 = staticSwitch184_g157391;
				float3 lerpResult53_g157391 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g157391).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g157391 = lerpResult53_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157404) = _MainShaderTex;
				SamplerState Sampler276_g157404 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157404 = Local_Coords180_g157391;
				half4 Coords276_g157404 = temp_output_37_0_g157404;
				half2 TexCoord276_g157404 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157404 = SampleMain( Texture276_g157404 , Sampler276_g157404 , Coords276_g157404 , TexCoord276_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157404) = _MainShaderTex;
				SamplerState Sampler275_g157404 = sampler_Linear_Repeat;
				half4 Coords275_g157404 = temp_output_37_0_g157404;
				float2 appendResult289_g157404 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157404 = appendResult289_g157404;
				#else
				float2 staticSwitch288_g157404 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157404 = staticSwitch288_g157404;
				half4 localSampleExtra275_g157404 = SampleExtra( Texture275_g157404 , Sampler275_g157404 , Coords275_g157404 , TexCoord275_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157404) = _MainShaderTex;
				SamplerState Sampler238_g157404 = sampler_Linear_Repeat;
				half4 Coords238_g157404 = temp_output_37_0_g157404;
				float3 temp_output_279_0_g157404 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157404 = temp_output_279_0_g157404;
				half4 localSamplePlanar2D238_g157404 = SamplePlanar2D( Texture238_g157404 , Sampler238_g157404 , Coords238_g157404 , WorldPosition238_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157404) = _MainShaderTex;
				SamplerState Sampler246_g157404 = sampler_Linear_Repeat;
				half4 Coords246_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition246_g157404 = temp_output_279_0_g157404;
				float3 temp_output_280_0_g157404 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157404 = temp_output_280_0_g157404;
				half4 localSamplePlanar3D246_g157404 = SamplePlanar3D( Texture246_g157404 , Sampler246_g157404 , Coords246_g157404 , WorldPosition246_g157404 , WorldNormal246_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157404) = _MainShaderTex;
				SamplerState Sampler234_g157404 = sampler_Linear_Repeat;
				float4 Coords234_g157404 = temp_output_37_0_g157404;
				float3 WorldPosition234_g157404 = temp_output_279_0_g157404;
				float4 localSampleStochastic2D234_g157404 = SampleStochastic2D( Texture234_g157404 , Sampler234_g157404 , Coords234_g157404 , WorldPosition234_g157404 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157404) = _MainShaderTex;
				SamplerState Sampler263_g157404 = sampler_Linear_Repeat;
				half4 Coords263_g157404 = temp_output_37_0_g157404;
				half3 WorldPosition263_g157404 = temp_output_279_0_g157404;
				half3 WorldNormal263_g157404 = temp_output_280_0_g157404;
				half4 localSampleStochastic3D263_g157404 = SampleStochastic3D( Texture263_g157404 , Sampler263_g157404 , Coords263_g157404 , WorldPosition263_g157404 , WorldNormal263_g157404 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g157391 = localSampleExtra275_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g157391 = localSamplePlanar2D238_g157404;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g157391 = localSamplePlanar3D246_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g157391 = localSampleStochastic2D234_g157404;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g157391 = localSampleStochastic3D263_g157404;
				#else
				float4 staticSwitch198_g157391 = localSampleMain276_g157404;
				#endif
				half4 Local_MasksTex199_g157391 = staticSwitch198_g157391;
				float lerpResult23_g157391 = lerp( 1.0 , (Local_MasksTex199_g157391).y , _MainOcclusionValue);
				float4 appendResult73_g157391 = (float4(( (Local_MasksTex199_g157391).x * _MainMetallicValue ) , lerpResult23_g157391 , (Local_MasksTex199_g157391).z , ( (Local_MasksTex199_g157391).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g157391 = appendResult73_g157391;
				float clampResult17_g157397 = clamp( (Local_Masks109_g157391).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157398 = _MainMultiRemap.x;
				float temp_output_10_0_g157398 = ( _MainMultiRemap.y - temp_output_7_0_g157398 );
				half Local_MultiMask78_g157391 = saturate( ( ( clampResult17_g157397 - temp_output_7_0_g157398 ) / ( temp_output_10_0_g157398 + 0.0001 ) ) );
				float lerpResult58_g157391 = lerp( 1.0 , Local_MultiMask78_g157391 , _MainColorMode);
				float4 lerpResult62_g157391 = lerp( _MainColorTwo , _MainColor , lerpResult58_g157391);
				half3 Local_ColorRGB93_g157391 = (lerpResult62_g157391).rgb;
				half3 Local_Albedo139_g157391 = ( Local_AlbedoRGB107_g157391 * Local_ColorRGB93_g157391 );
				float3 In_Albedo3_g157401 = Local_Albedo139_g157391;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157403) = _MainNormalTex;
				SamplerState Sampler276_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g157403 = Local_Coords180_g157391;
				half4 Coords276_g157403 = temp_output_37_0_g157403;
				half2 TexCoord276_g157403 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157403 = SampleMain( Texture276_g157403 , Sampler276_g157403 , Coords276_g157403 , TexCoord276_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157403) = _MainNormalTex;
				SamplerState Sampler275_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157403 = temp_output_37_0_g157403;
				float2 appendResult289_g157403 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157403 = appendResult289_g157403;
				#else
				float2 staticSwitch288_g157403 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157403 = staticSwitch288_g157403;
				half4 localSampleExtra275_g157403 = SampleExtra( Texture275_g157403 , Sampler275_g157403 , Coords275_g157403 , TexCoord275_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157403) = _MainNormalTex;
				SamplerState Sampler238_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157403 = temp_output_37_0_g157403;
				float3 temp_output_279_0_g157403 = Model_PositionWO222_g157391;
				half3 WorldPosition238_g157403 = temp_output_279_0_g157403;
				half4 localSamplePlanar2D238_g157403 = SamplePlanar2D( Texture238_g157403 , Sampler238_g157403 , Coords238_g157403 , WorldPosition238_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157403) = _MainNormalTex;
				SamplerState Sampler246_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition246_g157403 = temp_output_279_0_g157403;
				float3 temp_output_280_0_g157403 = Model_NormalWS226_g157391;
				half3 WorldNormal246_g157403 = temp_output_280_0_g157403;
				half4 localSamplePlanar3D246_g157403 = SamplePlanar3D( Texture246_g157403 , Sampler246_g157403 , Coords246_g157403 , WorldPosition246_g157403 , WorldNormal246_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157403) = _MainNormalTex;
				SamplerState Sampler234_g157403 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157403 = temp_output_37_0_g157403;
				float3 WorldPosition234_g157403 = temp_output_279_0_g157403;
				float4 localSampleStochastic2D234_g157403 = SampleStochastic2D( Texture234_g157403 , Sampler234_g157403 , Coords234_g157403 , WorldPosition234_g157403 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157403) = _MainNormalTex;
				SamplerState Sampler263_g157403 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157403 = temp_output_37_0_g157403;
				half3 WorldPosition263_g157403 = temp_output_279_0_g157403;
				half3 WorldNormal263_g157403 = temp_output_280_0_g157403;
				half4 localSampleStochastic3D263_g157403 = SampleStochastic3D( Texture263_g157403 , Sampler263_g157403 , Coords263_g157403 , WorldPosition263_g157403 , WorldNormal263_g157403 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g157391 = localSampleExtra275_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g157391 = localSamplePlanar2D238_g157403;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g157391 = localSamplePlanar3D246_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g157391 = localSampleStochastic2D234_g157403;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g157391 = localSampleStochastic3D263_g157403;
				#else
				float4 staticSwitch193_g157391 = localSampleMain276_g157403;
				#endif
				half4 Local_NormaTex191_g157391 = staticSwitch193_g157391;
				half4 Normal_Packed45_g157393 = Local_NormaTex191_g157391;
				float2 appendResult58_g157393 = (float2(( (Normal_Packed45_g157393).x * (Normal_Packed45_g157393).w ) , (Normal_Packed45_g157393).y));
				half2 Normal_Default50_g157393 = appendResult58_g157393;
				half2 Normal_ASTC41_g157393 = (Normal_Packed45_g157393).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157393 = Normal_ASTC41_g157393;
				#else
				float2 staticSwitch38_g157393 = Normal_Default50_g157393;
				#endif
				half2 Normal_NO_DTX544_g157393 = (Normal_Packed45_g157393).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157393 = Normal_NO_DTX544_g157393;
				#else
				float2 staticSwitch37_g157393 = staticSwitch38_g157393;
				#endif
				float2 temp_output_26_0_g157391 = ( (staticSwitch37_g157393*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord10.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord11.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g157394 = temp_output_26_0_g157391;
				float2 break71_g157394 = Normal_Planar45_g157394;
				float3 appendResult72_g157394 = (float3(break71_g157394.x , 0.0 , break71_g157394.y));
				float2 temp_output_205_0_g157391 = (mul( ase_worldToTangent, appendResult72_g157394 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g157391 = temp_output_205_0_g157391;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g157391 = float2( 0,0 );
				#else
				float2 staticSwitch204_g157391 = temp_output_26_0_g157391;
				#endif
				half2 Local_NormalTS108_g157391 = staticSwitch204_g157391;
				float2 In_NormalTS3_g157401 = Local_NormalTS108_g157391;
				float3 appendResult68_g157395 = (float3(Local_NormalTS108_g157391 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g157395 = appendResult68_g157395;
				float3 worldNormal74_g157395 = normalize( float3(dot(tanToWorld0,tanNormal74_g157395), dot(tanToWorld1,tanNormal74_g157395), dot(tanToWorld2,tanNormal74_g157395)) );
				half3 Local_NormalWS250_g157391 = worldNormal74_g157395;
				float3 In_NormalWS3_g157401 = Local_NormalWS250_g157391;
				float4 In_Shader3_g157401 = Local_Masks109_g157391;
				float4 In_Emissive3_g157401 = half4(1,1,1,1);
				float3 temp_output_3_0_g157396 = Local_Albedo139_g157391;
				float dotResult20_g157396 = dot( temp_output_3_0_g157396 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g157391 = dotResult20_g157396;
				float In_Grayscale3_g157401 = Local_Grayscale110_g157391;
				float clampResult144_g157391 = clamp( saturate( ( Local_Grayscale110_g157391 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g157391 = clampResult144_g157391;
				float In_Luminosity3_g157401 = Local_Luminosity145_g157391;
				float In_MultiMask3_g157401 = Local_MultiMask78_g157391;
				float temp_output_187_0_g157391 = (Local_AlbedoTex185_g157391).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g157391 = ( temp_output_187_0_g157391 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g157391 = temp_output_187_0_g157391;
				#endif
				half Local_AlphaClip111_g157391 = staticSwitch236_g157391;
				float In_AlphaClip3_g157401 = Local_AlphaClip111_g157391;
				half Local_AlphaFade246_g157391 = (lerpResult62_g157391).a;
				float In_AlphaFade3_g157401 = Local_AlphaFade246_g157391;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g157401 = temp_cast_22;
				float In_Transmission3_g157401 = 1.0;
				float In_Thickness3_g157401 = 0.0;
				float In_Diffusion3_g157401 = 0.0;
				{
				Data3_g157401.Dummy = In_Dummy3_g157401;
				Data3_g157401.Albedo = In_Albedo3_g157401;
				Data3_g157401.NormalTS = In_NormalTS3_g157401;
				Data3_g157401.NormalWS = In_NormalWS3_g157401;
				Data3_g157401.Shader = In_Shader3_g157401;
				Data3_g157401.Emissive= In_Emissive3_g157401;
				Data3_g157401.MultiMask = In_MultiMask3_g157401;
				Data3_g157401.Grayscale = In_Grayscale3_g157401;
				Data3_g157401.Luminosity = In_Luminosity3_g157401;
				Data3_g157401.AlphaClip = In_AlphaClip3_g157401;
				Data3_g157401.AlphaFade = In_AlphaFade3_g157401;
				Data3_g157401.Translucency = In_Translucency3_g157401;
				Data3_g157401.Transmission = In_Transmission3_g157401;
				Data3_g157401.Thickness = In_Thickness3_g157401;
				Data3_g157401.Diffusion = In_Diffusion3_g157401;
				}
				TVEVisualData Data4_g157419 = Data3_g157401;
				float Out_Dummy4_g157419 = 0;
				float3 Out_Albedo4_g157419 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157419 = float2( 0,0 );
				float3 Out_NormalWS4_g157419 = float3( 0,0,0 );
				float4 Out_Shader4_g157419 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157419 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157419 = 0;
				float Out_Grayscale4_g157419 = 0;
				float Out_Luminosity4_g157419 = 0;
				float Out_AlphaClip4_g157419 = 0;
				float Out_AlphaFade4_g157419 = 0;
				float3 Out_Translucency4_g157419 = float3( 0,0,0 );
				float Out_Transmission4_g157419 = 0;
				float Out_Thickness4_g157419 = 0;
				float Out_Diffusion4_g157419 = 0;
				{
				Out_Dummy4_g157419 = Data4_g157419.Dummy;
				Out_Albedo4_g157419 = Data4_g157419.Albedo;
				Out_NormalTS4_g157419 = Data4_g157419.NormalTS;
				Out_NormalWS4_g157419 = Data4_g157419.NormalWS;
				Out_Shader4_g157419 = Data4_g157419.Shader;
				Out_Emissive4_g157419= Data4_g157419.Emissive;
				Out_MultiMask4_g157419 = Data4_g157419.MultiMask;
				Out_Grayscale4_g157419 = Data4_g157419.Grayscale;
				Out_Luminosity4_g157419= Data4_g157419.Luminosity;
				Out_AlphaClip4_g157419 = Data4_g157419.AlphaClip;
				Out_AlphaFade4_g157419 = Data4_g157419.AlphaFade;
				Out_Translucency4_g157419 = Data4_g157419.Translucency;
				Out_Transmission4_g157419 = Data4_g157419.Transmission;
				Out_Thickness4_g157419 = Data4_g157419.Thickness;
				Out_Diffusion4_g157419 = Data4_g157419.Diffusion;
				}
				half3 Visual_Albedo527_g157405 = Out_Albedo4_g157419;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157406) = _SecondAlbedoTex;
				SamplerState Sampler276_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157405 = _second_coord_value;
				float4 temp_output_37_0_g157406 = Local_LayerCoords790_g157405;
				half4 Coords276_g157406 = temp_output_37_0_g157406;
				half2 TexCoord276_g157406 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157406 = SampleMain( Texture276_g157406 , Sampler276_g157406 , Coords276_g157406 , TexCoord276_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157406) = _SecondAlbedoTex;
				SamplerState Sampler275_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157406 = temp_output_37_0_g157406;
				float2 appendResult289_g157406 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157406 = appendResult289_g157406;
				#else
				float2 staticSwitch288_g157406 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157406 = staticSwitch288_g157406;
				half4 localSampleExtra275_g157406 = SampleExtra( Texture275_g157406 , Sampler275_g157406 , Coords275_g157406 , TexCoord275_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157406) = _SecondAlbedoTex;
				SamplerState Sampler238_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157406 = temp_output_37_0_g157406;
				TVEModelData Data15_g157417 = Data16_g157339;
				float Out_Dummy15_g157417 = 0;
				float3 Out_PositionOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157417 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157417 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157417 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157417 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157417 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157417 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157417 = float3( 0,0,0 );
				float4 Out_VertexData15_g157417 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157417 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157417 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157417 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157417 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157417 = Data15_g157417.Dummy;
				Out_PositionOS15_g157417 = Data15_g157417.PositionOS;
				Out_PositionWS15_g157417 = Data15_g157417.PositionWS;
				Out_PositionWO15_g157417 = Data15_g157417.PositionWO;
				Out_PositionRawOS15_g157417 = Data15_g157417.PositionRawOS;
				Out_PositionAddOS15_g157417 = Data15_g157417.PositionAddOS;
				Out_PivotOS15_g157417 = Data15_g157417.PivotOS;
				Out_PivotWS15_g157417 = Data15_g157417.PivotWS;
				Out_PivotWO15_g157417 = Data15_g157417.PivotWO;
				Out_NormalOS15_g157417 = Data15_g157417.NormalOS;
				Out_NormalWS15_g157417 = Data15_g157417.NormalWS;
				Out_NormalRawOS15_g157417 = Data15_g157417.NormalRawOS;
				Out_NormalRawWS15_g157417 = Data15_g157417.NormalRawWS;
				Out_TangentOS15_g157417 = Data15_g157417.TangentOS;
				Out_ViewDirWS15_g157417 = Data15_g157417.ViewDirWS;
				Out_VertexData15_g157417 = Data15_g157417.VertexData;
				Out_MotionData15_g157417 = Data15_g157417.MotionData;
				Out_BoundsData15_g157417 = Data15_g157417.BoundsData;
				Out_RotationData15_g157417 = Data15_g157417.RotationData;
				Out_FragmentData15_g157417 = Data15_g157417.FragmentData;
				}
				half3 Model_PositionWO636_g157405 = Out_PositionWO15_g157417;
				float3 temp_output_279_0_g157406 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157406 = temp_output_279_0_g157406;
				half4 localSamplePlanar2D238_g157406 = SamplePlanar2D( Texture238_g157406 , Sampler238_g157406 , Coords238_g157406 , WorldPosition238_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157406) = _SecondAlbedoTex;
				SamplerState Sampler246_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition246_g157406 = temp_output_279_0_g157406;
				half3 Model_NormalWS869_g157405 = Out_NormalWS15_g157417;
				float3 temp_output_280_0_g157406 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157406 = temp_output_280_0_g157406;
				half4 localSamplePlanar3D246_g157406 = SamplePlanar3D( Texture246_g157406 , Sampler246_g157406 , Coords246_g157406 , WorldPosition246_g157406 , WorldNormal246_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157406) = _SecondAlbedoTex;
				SamplerState Sampler234_g157406 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157406 = temp_output_37_0_g157406;
				float3 WorldPosition234_g157406 = temp_output_279_0_g157406;
				float4 localSampleStochastic2D234_g157406 = SampleStochastic2D( Texture234_g157406 , Sampler234_g157406 , Coords234_g157406 , WorldPosition234_g157406 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157406) = _SecondAlbedoTex;
				SamplerState Sampler263_g157406 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157406 = temp_output_37_0_g157406;
				half3 WorldPosition263_g157406 = temp_output_279_0_g157406;
				half3 WorldNormal263_g157406 = temp_output_280_0_g157406;
				half4 localSampleStochastic3D263_g157406 = SampleStochastic3D( Texture263_g157406 , Sampler263_g157406 , Coords263_g157406 , WorldPosition263_g157406 , WorldNormal263_g157406 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157405 = localSampleExtra275_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157405 = localSamplePlanar2D238_g157406;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157405 = localSamplePlanar3D246_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157405 = localSampleStochastic2D234_g157406;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157405 = localSampleStochastic3D263_g157406;
				#else
				float4 staticSwitch693_g157405 = localSampleMain276_g157406;
				#endif
				half4 Local_AlbedoTex777_g157405 = staticSwitch693_g157405;
				float3 lerpResult716_g157405 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157405).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g157405 = lerpResult716_g157405;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157408) = _SecondShaderTex;
				SamplerState Sampler276_g157408 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157408 = Local_LayerCoords790_g157405;
				half4 Coords276_g157408 = temp_output_37_0_g157408;
				half2 TexCoord276_g157408 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157408 = SampleMain( Texture276_g157408 , Sampler276_g157408 , Coords276_g157408 , TexCoord276_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157408) = _SecondShaderTex;
				SamplerState Sampler275_g157408 = sampler_Linear_Repeat;
				half4 Coords275_g157408 = temp_output_37_0_g157408;
				float2 appendResult289_g157408 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157408 = appendResult289_g157408;
				#else
				float2 staticSwitch288_g157408 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157408 = staticSwitch288_g157408;
				half4 localSampleExtra275_g157408 = SampleExtra( Texture275_g157408 , Sampler275_g157408 , Coords275_g157408 , TexCoord275_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157408) = _SecondShaderTex;
				SamplerState Sampler238_g157408 = sampler_Linear_Repeat;
				half4 Coords238_g157408 = temp_output_37_0_g157408;
				float3 temp_output_279_0_g157408 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157408 = temp_output_279_0_g157408;
				half4 localSamplePlanar2D238_g157408 = SamplePlanar2D( Texture238_g157408 , Sampler238_g157408 , Coords238_g157408 , WorldPosition238_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157408) = _SecondShaderTex;
				SamplerState Sampler246_g157408 = sampler_Linear_Repeat;
				half4 Coords246_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition246_g157408 = temp_output_279_0_g157408;
				float3 temp_output_280_0_g157408 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157408 = temp_output_280_0_g157408;
				half4 localSamplePlanar3D246_g157408 = SamplePlanar3D( Texture246_g157408 , Sampler246_g157408 , Coords246_g157408 , WorldPosition246_g157408 , WorldNormal246_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157408) = _SecondShaderTex;
				SamplerState Sampler234_g157408 = sampler_Linear_Repeat;
				float4 Coords234_g157408 = temp_output_37_0_g157408;
				float3 WorldPosition234_g157408 = temp_output_279_0_g157408;
				float4 localSampleStochastic2D234_g157408 = SampleStochastic2D( Texture234_g157408 , Sampler234_g157408 , Coords234_g157408 , WorldPosition234_g157408 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157408) = _SecondShaderTex;
				SamplerState Sampler263_g157408 = sampler_Linear_Repeat;
				half4 Coords263_g157408 = temp_output_37_0_g157408;
				half3 WorldPosition263_g157408 = temp_output_279_0_g157408;
				half3 WorldNormal263_g157408 = temp_output_280_0_g157408;
				half4 localSampleStochastic3D263_g157408 = SampleStochastic3D( Texture263_g157408 , Sampler263_g157408 , Coords263_g157408 , WorldPosition263_g157408 , WorldNormal263_g157408 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157405 = localSampleExtra275_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157405 = localSamplePlanar2D238_g157408;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157405 = localSamplePlanar3D246_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157405 = localSampleStochastic2D234_g157408;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157405 = localSampleStochastic3D263_g157408;
				#else
				float4 staticSwitch722_g157405 = localSampleMain276_g157408;
				#endif
				half4 Local_ShaderTex775_g157405 = staticSwitch722_g157405;
				float lerpResult739_g157405 = lerp( 1.0 , (Local_ShaderTex775_g157405).y , _SecondOcclusionValue);
				float4 appendResult749_g157405 = (float4(( (Local_ShaderTex775_g157405).x * _SecondMetallicValue ) , lerpResult739_g157405 , (Local_ShaderTex775_g157405).z , ( (Local_ShaderTex775_g157405).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g157405 = appendResult749_g157405;
				float clampResult17_g157412 = clamp( (Local_Masks750_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157413 = _SecondMultiRemap.x;
				float temp_output_10_0_g157413 = ( _SecondMultiRemap.y - temp_output_7_0_g157413 );
				float temp_output_765_0_g157405 = saturate( ( ( clampResult17_g157412 - temp_output_7_0_g157413 ) / ( temp_output_10_0_g157413 + 0.0001 ) ) );
				half Local_MultiMask767_g157405 = temp_output_765_0_g157405;
				float lerpResult705_g157405 = lerp( 1.0 , Local_MultiMask767_g157405 , _SecondColorMode);
				float4 lerpResult706_g157405 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g157405);
				half3 Local_ColorRGB774_g157405 = (lerpResult706_g157405).rgb;
				half3 Local_Albedo768_g157405 = ( Local_AlbedoRGB771_g157405 * Local_ColorRGB774_g157405 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157432 = 2.0;
				#else
				float staticSwitch1_g157432 = 4.594794;
				#endif
				float3 lerpResult985_g157405 = lerp( Local_Albedo768_g157405 , ( Visual_Albedo527_g157405 * Local_Albedo768_g157405 * staticSwitch1_g157432 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157409) = _SecondMaskTex;
				SamplerState Sampler276_g157409 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g157405 = _second_mask_coord_value;
				float4 temp_output_37_0_g157409 = Local_BlendCoords813_g157405;
				half4 Coords276_g157409 = temp_output_37_0_g157409;
				half2 TexCoord276_g157409 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157409 = SampleMain( Texture276_g157409 , Sampler276_g157409 , Coords276_g157409 , TexCoord276_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157409) = _SecondMaskTex;
				SamplerState Sampler275_g157409 = sampler_Linear_Repeat;
				half4 Coords275_g157409 = temp_output_37_0_g157409;
				float2 appendResult289_g157409 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157409 = appendResult289_g157409;
				#else
				float2 staticSwitch288_g157409 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157409 = staticSwitch288_g157409;
				half4 localSampleExtra275_g157409 = SampleExtra( Texture275_g157409 , Sampler275_g157409 , Coords275_g157409 , TexCoord275_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157409) = _SecondMaskTex;
				SamplerState Sampler238_g157409 = sampler_Linear_Repeat;
				half4 Coords238_g157409 = temp_output_37_0_g157409;
				float3 temp_output_279_0_g157409 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157409 = temp_output_279_0_g157409;
				half4 localSamplePlanar2D238_g157409 = SamplePlanar2D( Texture238_g157409 , Sampler238_g157409 , Coords238_g157409 , WorldPosition238_g157409 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157409) = _SecondMaskTex;
				SamplerState Sampler246_g157409 = sampler_Linear_Repeat;
				half4 Coords246_g157409 = temp_output_37_0_g157409;
				half3 WorldPosition246_g157409 = temp_output_279_0_g157409;
				float3 temp_output_280_0_g157409 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157409 = temp_output_280_0_g157409;
				half4 localSamplePlanar3D246_g157409 = SamplePlanar3D( Texture246_g157409 , Sampler246_g157409 , Coords246_g157409 , WorldPosition246_g157409 , WorldNormal246_g157409 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157405 = localSampleExtra275_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157405 = localSamplePlanar2D238_g157409;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157405 = localSamplePlanar3D246_g157409;
				#else
				float4 staticSwitch817_g157405 = localSampleMain276_g157409;
				#endif
				half4 Local_MaskTex861_g157405 = staticSwitch817_g157405;
				float clampResult17_g157423 = clamp( (Local_MaskTex861_g157405).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157422 = _SecondMaskRemap.x;
				float temp_output_10_0_g157422 = ( _SecondMaskRemap.y - temp_output_7_0_g157422 );
				float lerpResult1015_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157423 - temp_output_7_0_g157422 ) / ( temp_output_10_0_g157422 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g157405 = lerpResult1015_g157405;
				#else
				float staticSwitch893_g157405 = 1.0;
				#endif
				half Blend_TexMask429_g157405 = staticSwitch893_g157405;
				half3 Visual_NormalWS951_g157405 = Out_NormalWS4_g157419;
				float clampResult17_g157424 = clamp( saturate( (Visual_NormalWS951_g157405).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157425 = _SecondProjRemap.x;
				float temp_output_10_0_g157425 = ( _SecondProjRemap.y - temp_output_7_0_g157425 );
				float lerpResult996_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157424 - temp_output_7_0_g157425 ) / ( temp_output_10_0_g157425 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g157405 = lerpResult996_g157405;
				#else
				float staticSwitch878_g157405 = 1.0;
				#endif
				half Blend_ProjMask434_g157405 = staticSwitch878_g157405;
				half4 Model_VertexMasks964_g157405 = Out_VertexData15_g157417;
				float4 break965_g157405 = Model_VertexMasks964_g157405;
				float4 break33_g157426 = _second_vert_mode;
				float temp_output_30_0_g157426 = ( break965_g157405.x * break33_g157426.x );
				float temp_output_29_0_g157426 = ( break965_g157405.y * break33_g157426.y );
				float temp_output_31_0_g157426 = ( break965_g157405.z * break33_g157426.z );
				float temp_output_28_0_g157426 = ( temp_output_30_0_g157426 + temp_output_29_0_g157426 + temp_output_31_0_g157426 + ( break965_g157405.w * break33_g157426.w ) );
				float clampResult17_g157420 = clamp( temp_output_28_0_g157426 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157421 = _SecondMeshRemap.x;
				float temp_output_10_0_g157421 = ( _SecondMeshRemap.y - temp_output_7_0_g157421 );
				float lerpResult1017_g157405 = lerp( 1.0 , saturate( ( ( clampResult17_g157420 - temp_output_7_0_g157421 ) / ( temp_output_10_0_g157421 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g157434 = lerpResult1017_g157405;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157434 = ( temp_output_6_0_g157434 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157434 = temp_output_6_0_g157434;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g157405 = staticSwitch14_g157434;
				#else
				float staticSwitch917_g157405 = 1.0;
				#endif
				half Blend_VertMask918_g157405 = staticSwitch917_g157405;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				{
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				}
				TVEGlobalData Data15_g157418 = Data204_g157340;
				float Out_Dummy15_g157418 = 0;
				float4 Out_CoatParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157418 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157418 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157418 = Data15_g157418.Dummy;
				Out_CoatParams15_g157418 = Data15_g157418.CoatParams;
				Out_PaintParams15_g157418 = Data15_g157418.PaintParams;
				Out_GlowParams15_g157418 = Data15_g157418.GlowParams;
				Out_AtmoParams15_g157418= Data15_g157418.AtmoParams;
				Out_FormParams15_g157418 = Data15_g157418.FormParams;
				Out_LandParams15_g157418 = Data15_g157418.LandParams;
				Out_WindParams15_g157418 = Data15_g157418.WindParams;
				Out_PushParams15_g157418 = Data15_g157418.PushParams;
				}
				half4 Global_CoatParams975_g157405 = Out_CoatParams15_g157418;
				float lerpResult1013_g157405 = lerp( 1.0 , (Global_CoatParams975_g157405).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g157405 = lerpResult1013_g157405;
				#else
				float staticSwitch971_g157405 = 1.0;
				#endif
				half Blend_GlobalMask972_g157405 = staticSwitch971_g157405;
				float temp_output_432_0_g157405 = ( _SecondIntensityValue * Blend_TexMask429_g157405 * Blend_ProjMask434_g157405 * Blend_VertMask918_g157405 * Blend_GlobalMask972_g157405 );
				float clampResult17_g157428 = clamp( temp_output_432_0_g157405 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157427 = _SecondBlendRemap.x;
				float temp_output_10_0_g157427 = ( _SecondBlendRemap.y - temp_output_7_0_g157427 );
				half Blend_Mask412_g157405 = ( saturate( ( ( clampResult17_g157428 - temp_output_7_0_g157427 ) / ( temp_output_10_0_g157427 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g157405 = lerp( Visual_Albedo527_g157405 , lerpResult985_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g157405 = lerpResult403_g157405;
				#else
				float3 staticSwitch415_g157405 = Visual_Albedo527_g157405;
				#endif
				half3 Final_Albedo601_g157405 = staticSwitch415_g157405;
				float3 In_Albedo3_g157416 = Final_Albedo601_g157405;
				half2 Visual_NormalTS529_g157405 = Out_NormalTS4_g157419;
				float2 lerpResult40_g157430 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157405 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157407) = _SecondNormalTex;
				SamplerState Sampler276_g157407 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157407 = Local_LayerCoords790_g157405;
				half4 Coords276_g157407 = temp_output_37_0_g157407;
				half2 TexCoord276_g157407 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157407 = SampleMain( Texture276_g157407 , Sampler276_g157407 , Coords276_g157407 , TexCoord276_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157407) = _SecondNormalTex;
				SamplerState Sampler275_g157407 = sampler_Linear_Repeat;
				half4 Coords275_g157407 = temp_output_37_0_g157407;
				float2 appendResult289_g157407 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157407 = appendResult289_g157407;
				#else
				float2 staticSwitch288_g157407 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157407 = staticSwitch288_g157407;
				half4 localSampleExtra275_g157407 = SampleExtra( Texture275_g157407 , Sampler275_g157407 , Coords275_g157407 , TexCoord275_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157407) = _SecondNormalTex;
				SamplerState Sampler238_g157407 = sampler_Linear_Repeat;
				half4 Coords238_g157407 = temp_output_37_0_g157407;
				float3 temp_output_279_0_g157407 = Model_PositionWO636_g157405;
				half3 WorldPosition238_g157407 = temp_output_279_0_g157407;
				half4 localSamplePlanar2D238_g157407 = SamplePlanar2D( Texture238_g157407 , Sampler238_g157407 , Coords238_g157407 , WorldPosition238_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157407) = _SecondNormalTex;
				SamplerState Sampler246_g157407 = sampler_Linear_Repeat;
				half4 Coords246_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition246_g157407 = temp_output_279_0_g157407;
				float3 temp_output_280_0_g157407 = Model_NormalWS869_g157405;
				half3 WorldNormal246_g157407 = temp_output_280_0_g157407;
				half4 localSamplePlanar3D246_g157407 = SamplePlanar3D( Texture246_g157407 , Sampler246_g157407 , Coords246_g157407 , WorldPosition246_g157407 , WorldNormal246_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157407) = _SecondNormalTex;
				SamplerState Sampler234_g157407 = sampler_Linear_Repeat;
				float4 Coords234_g157407 = temp_output_37_0_g157407;
				float3 WorldPosition234_g157407 = temp_output_279_0_g157407;
				float4 localSampleStochastic2D234_g157407 = SampleStochastic2D( Texture234_g157407 , Sampler234_g157407 , Coords234_g157407 , WorldPosition234_g157407 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157407) = _SecondNormalTex;
				SamplerState Sampler263_g157407 = sampler_Linear_Repeat;
				half4 Coords263_g157407 = temp_output_37_0_g157407;
				half3 WorldPosition263_g157407 = temp_output_279_0_g157407;
				half3 WorldNormal263_g157407 = temp_output_280_0_g157407;
				half4 localSampleStochastic3D263_g157407 = SampleStochastic3D( Texture263_g157407 , Sampler263_g157407 , Coords263_g157407 , WorldPosition263_g157407 , WorldNormal263_g157407 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157405 = localSampleExtra275_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157405 = localSamplePlanar2D238_g157407;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157405 = localSamplePlanar3D246_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157405 = localSampleStochastic2D234_g157407;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157405 = localSampleStochastic3D263_g157407;
				#else
				float4 staticSwitch698_g157405 = localSampleMain276_g157407;
				#endif
				half4 Local_NormalTex776_g157405 = staticSwitch698_g157405;
				half4 Normal_Packed45_g157410 = Local_NormalTex776_g157405;
				float2 appendResult58_g157410 = (float2(( (Normal_Packed45_g157410).x * (Normal_Packed45_g157410).w ) , (Normal_Packed45_g157410).y));
				half2 Normal_Default50_g157410 = appendResult58_g157410;
				half2 Normal_ASTC41_g157410 = (Normal_Packed45_g157410).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157410 = Normal_ASTC41_g157410;
				#else
				float2 staticSwitch38_g157410 = Normal_Default50_g157410;
				#endif
				half2 Normal_NO_DTX544_g157410 = (Normal_Packed45_g157410).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157410 = Normal_NO_DTX544_g157410;
				#else
				float2 staticSwitch37_g157410 = staticSwitch38_g157410;
				#endif
				float2 temp_output_724_0_g157405 = ( (staticSwitch37_g157410*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g157411 = temp_output_724_0_g157405;
				float2 break71_g157411 = Normal_Planar45_g157411;
				float3 appendResult72_g157411 = (float3(break71_g157411.x , 0.0 , break71_g157411.y));
				float2 temp_output_858_0_g157405 = (mul( ase_worldToTangent, appendResult72_g157411 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157405 = temp_output_858_0_g157405;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157405 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157405 = temp_output_724_0_g157405;
				#endif
				half2 Local_NormalTS729_g157405 = staticSwitch727_g157405;
				float2 temp_output_36_0_g157430 = ( lerpResult40_g157430 + Local_NormalTS729_g157405 );
				float2 lerpResult405_g157405 = lerp( Visual_NormalTS529_g157405 , temp_output_36_0_g157430 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g157405 = lerpResult405_g157405;
				#else
				float2 staticSwitch418_g157405 = Visual_NormalTS529_g157405;
				#endif
				half2 Final_NormalTS612_g157405 = staticSwitch418_g157405;
				float2 In_NormalTS3_g157416 = Final_NormalTS612_g157405;
				float3 appendResult68_g157431 = (float3(Final_NormalTS612_g157405 , 1.0));
				float3 tanNormal74_g157431 = appendResult68_g157431;
				float3 worldNormal74_g157431 = normalize( float3(dot(tanToWorld0,tanNormal74_g157431), dot(tanToWorld1,tanNormal74_g157431), dot(tanToWorld2,tanNormal74_g157431)) );
				half3 Final_NormalWS950_g157405 = worldNormal74_g157431;
				float3 In_NormalWS3_g157416 = Final_NormalWS950_g157405;
				half4 Visual_Shader531_g157405 = Out_Shader4_g157419;
				float4 lerpResult994_g157405 = lerp( Local_Masks750_g157405 , ( Visual_Shader531_g157405 * Local_Masks750_g157405 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g157405 = lerp( Visual_Shader531_g157405 , lerpResult994_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g157405 = lerpResult440_g157405;
				#else
				float4 staticSwitch451_g157405 = Visual_Shader531_g157405;
				#endif
				half4 Final_Masks613_g157405 = staticSwitch451_g157405;
				float4 In_Shader3_g157416 = Final_Masks613_g157405;
				float4 In_Emissive3_g157416 = Out_Emissive4_g157419;
				float3 temp_output_3_0_g157433 = Final_Albedo601_g157405;
				float dotResult20_g157433 = dot( temp_output_3_0_g157433 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157405 = dotResult20_g157433;
				float In_Grayscale3_g157416 = Final_Grayscale615_g157405;
				float clampResult651_g157405 = clamp( saturate( ( Final_Grayscale615_g157405 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157405 = clampResult651_g157405;
				float In_Luminosity3_g157416 = Final_Luminosity652_g157405;
				half Visual_MultiMask547_g157405 = Out_MultiMask4_g157419;
				float lerpResult477_g157405 = lerp( Visual_MultiMask547_g157405 , Local_MultiMask767_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch482_g157405 = lerpResult477_g157405;
				#else
				float staticSwitch482_g157405 = Visual_MultiMask547_g157405;
				#endif
				half Final_MultiMask572_g157405 = staticSwitch482_g157405;
				float In_MultiMask3_g157416 = Final_MultiMask572_g157405;
				half Visual_AlphaClip559_g157405 = Out_AlphaClip4_g157419;
				float temp_output_718_0_g157405 = (Local_AlbedoTex777_g157405).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g157405 = ( temp_output_718_0_g157405 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g157405 = temp_output_718_0_g157405;
				#endif
				half Local_AlphaClip772_g157405 = staticSwitch932_g157405;
				float lerpResult448_g157405 = lerp( Visual_AlphaClip559_g157405 , Local_AlphaClip772_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch564_g157405 = lerpResult448_g157405;
				#else
				float staticSwitch564_g157405 = Visual_AlphaClip559_g157405;
				#endif
				half Final_AlphaClip602_g157405 = staticSwitch564_g157405;
				float In_AlphaClip3_g157416 = Final_AlphaClip602_g157405;
				half Visual_AlphaFade588_g157405 = Out_AlphaFade4_g157419;
				half Local_AlphaFade773_g157405 = (lerpResult706_g157405).a;
				float lerpResult604_g157405 = lerp( Visual_AlphaFade588_g157405 , Local_AlphaFade773_g157405 , Blend_Mask412_g157405);
				#ifdef TVE_SECOND
				float staticSwitch608_g157405 = lerpResult604_g157405;
				#else
				float staticSwitch608_g157405 = Visual_AlphaFade588_g157405;
				#endif
				half Final_AlphaFade611_g157405 = staticSwitch608_g157405;
				float In_AlphaFade3_g157416 = Final_AlphaFade611_g157405;
				float3 In_Translucency3_g157416 = Out_Translucency4_g157419;
				float In_Transmission3_g157416 = Out_Transmission4_g157419;
				float In_Thickness3_g157416 = Out_Thickness4_g157419;
				float In_Diffusion3_g157416 = Out_Diffusion4_g157419;
				{
				Data3_g157416.Dummy = In_Dummy3_g157416;
				Data3_g157416.Albedo = In_Albedo3_g157416;
				Data3_g157416.NormalTS = In_NormalTS3_g157416;
				Data3_g157416.NormalWS = In_NormalWS3_g157416;
				Data3_g157416.Shader = In_Shader3_g157416;
				Data3_g157416.Emissive= In_Emissive3_g157416;
				Data3_g157416.MultiMask = In_MultiMask3_g157416;
				Data3_g157416.Grayscale = In_Grayscale3_g157416;
				Data3_g157416.Luminosity = In_Luminosity3_g157416;
				Data3_g157416.AlphaClip = In_AlphaClip3_g157416;
				Data3_g157416.AlphaFade = In_AlphaFade3_g157416;
				Data3_g157416.Translucency = In_Translucency3_g157416;
				Data3_g157416.Transmission = In_Transmission3_g157416;
				Data3_g157416.Thickness = In_Thickness3_g157416;
				Data3_g157416.Diffusion = In_Diffusion3_g157416;
				}
				TVEVisualData Data4_g157453 = Data3_g157416;
				float Out_Dummy4_g157453 = 0;
				float3 Out_Albedo4_g157453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157453 = float2( 0,0 );
				float3 Out_NormalWS4_g157453 = float3( 0,0,0 );
				float4 Out_Shader4_g157453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157453 = 0;
				float Out_Grayscale4_g157453 = 0;
				float Out_Luminosity4_g157453 = 0;
				float Out_AlphaClip4_g157453 = 0;
				float Out_AlphaFade4_g157453 = 0;
				float3 Out_Translucency4_g157453 = float3( 0,0,0 );
				float Out_Transmission4_g157453 = 0;
				float Out_Thickness4_g157453 = 0;
				float Out_Diffusion4_g157453 = 0;
				{
				Out_Dummy4_g157453 = Data4_g157453.Dummy;
				Out_Albedo4_g157453 = Data4_g157453.Albedo;
				Out_NormalTS4_g157453 = Data4_g157453.NormalTS;
				Out_NormalWS4_g157453 = Data4_g157453.NormalWS;
				Out_Shader4_g157453 = Data4_g157453.Shader;
				Out_Emissive4_g157453= Data4_g157453.Emissive;
				Out_MultiMask4_g157453 = Data4_g157453.MultiMask;
				Out_Grayscale4_g157453 = Data4_g157453.Grayscale;
				Out_Luminosity4_g157453= Data4_g157453.Luminosity;
				Out_AlphaClip4_g157453 = Data4_g157453.AlphaClip;
				Out_AlphaFade4_g157453 = Data4_g157453.AlphaFade;
				Out_Translucency4_g157453 = Data4_g157453.Translucency;
				Out_Transmission4_g157453 = Data4_g157453.Transmission;
				Out_Thickness4_g157453 = Data4_g157453.Thickness;
				Out_Diffusion4_g157453 = Data4_g157453.Diffusion;
				}
				half3 Visual_Albedo527_g157436 = Out_Albedo4_g157453;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler276_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g157436 = _third_coord_value;
				float4 temp_output_37_0_g157437 = Local_LayerCoords790_g157436;
				half4 Coords276_g157437 = temp_output_37_0_g157437;
				half2 TexCoord276_g157437 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157437 = SampleMain( Texture276_g157437 , Sampler276_g157437 , Coords276_g157437 , TexCoord276_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler275_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g157437 = temp_output_37_0_g157437;
				float2 appendResult289_g157437 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157437 = appendResult289_g157437;
				#else
				float2 staticSwitch288_g157437 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157437 = staticSwitch288_g157437;
				half4 localSampleExtra275_g157437 = SampleExtra( Texture275_g157437 , Sampler275_g157437 , Coords275_g157437 , TexCoord275_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler238_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g157437 = temp_output_37_0_g157437;
				TVEModelData Data15_g157452 = Data16_g157339;
				float Out_Dummy15_g157452 = 0;
				float3 Out_PositionOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157452 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157452 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157452 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157452 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157452 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157452 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157452 = float3( 0,0,0 );
				float4 Out_VertexData15_g157452 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157452 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157452 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157452 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157452 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157452 = Data15_g157452.Dummy;
				Out_PositionOS15_g157452 = Data15_g157452.PositionOS;
				Out_PositionWS15_g157452 = Data15_g157452.PositionWS;
				Out_PositionWO15_g157452 = Data15_g157452.PositionWO;
				Out_PositionRawOS15_g157452 = Data15_g157452.PositionRawOS;
				Out_PositionAddOS15_g157452 = Data15_g157452.PositionAddOS;
				Out_PivotOS15_g157452 = Data15_g157452.PivotOS;
				Out_PivotWS15_g157452 = Data15_g157452.PivotWS;
				Out_PivotWO15_g157452 = Data15_g157452.PivotWO;
				Out_NormalOS15_g157452 = Data15_g157452.NormalOS;
				Out_NormalWS15_g157452 = Data15_g157452.NormalWS;
				Out_NormalRawOS15_g157452 = Data15_g157452.NormalRawOS;
				Out_NormalRawWS15_g157452 = Data15_g157452.NormalRawWS;
				Out_TangentOS15_g157452 = Data15_g157452.TangentOS;
				Out_ViewDirWS15_g157452 = Data15_g157452.ViewDirWS;
				Out_VertexData15_g157452 = Data15_g157452.VertexData;
				Out_MotionData15_g157452 = Data15_g157452.MotionData;
				Out_BoundsData15_g157452 = Data15_g157452.BoundsData;
				Out_RotationData15_g157452 = Data15_g157452.RotationData;
				Out_FragmentData15_g157452 = Data15_g157452.FragmentData;
				}
				half3 Model_PositionWO636_g157436 = Out_PositionWO15_g157452;
				float3 temp_output_279_0_g157437 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157437 = temp_output_279_0_g157437;
				half4 localSamplePlanar2D238_g157437 = SamplePlanar2D( Texture238_g157437 , Sampler238_g157437 , Coords238_g157437 , WorldPosition238_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler246_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition246_g157437 = temp_output_279_0_g157437;
				half3 Model_NormalWS869_g157436 = Out_NormalWS15_g157452;
				float3 temp_output_280_0_g157437 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157437 = temp_output_280_0_g157437;
				half4 localSamplePlanar3D246_g157437 = SamplePlanar3D( Texture246_g157437 , Sampler246_g157437 , Coords246_g157437 , WorldPosition246_g157437 , WorldNormal246_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler234_g157437 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g157437 = temp_output_37_0_g157437;
				float3 WorldPosition234_g157437 = temp_output_279_0_g157437;
				float4 localSampleStochastic2D234_g157437 = SampleStochastic2D( Texture234_g157437 , Sampler234_g157437 , Coords234_g157437 , WorldPosition234_g157437 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157437) = _ThirdAlbedoTex;
				SamplerState Sampler263_g157437 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g157437 = temp_output_37_0_g157437;
				half3 WorldPosition263_g157437 = temp_output_279_0_g157437;
				half3 WorldNormal263_g157437 = temp_output_280_0_g157437;
				half4 localSampleStochastic3D263_g157437 = SampleStochastic3D( Texture263_g157437 , Sampler263_g157437 , Coords263_g157437 , WorldPosition263_g157437 , WorldNormal263_g157437 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g157436 = localSampleExtra275_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g157436 = localSamplePlanar2D238_g157437;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g157436 = localSamplePlanar3D246_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g157436 = localSampleStochastic2D234_g157437;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g157436 = localSampleStochastic3D263_g157437;
				#else
				float4 staticSwitch693_g157436 = localSampleMain276_g157437;
				#endif
				half4 Local_AlbedoTex777_g157436 = staticSwitch693_g157436;
				float3 lerpResult716_g157436 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g157436).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g157436 = lerpResult716_g157436;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157439) = _ThirdShaderTex;
				SamplerState Sampler276_g157439 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157439 = Local_LayerCoords790_g157436;
				half4 Coords276_g157439 = temp_output_37_0_g157439;
				half2 TexCoord276_g157439 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157439 = SampleMain( Texture276_g157439 , Sampler276_g157439 , Coords276_g157439 , TexCoord276_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157439) = _ThirdShaderTex;
				SamplerState Sampler275_g157439 = sampler_Linear_Repeat;
				half4 Coords275_g157439 = temp_output_37_0_g157439;
				float2 appendResult289_g157439 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157439 = appendResult289_g157439;
				#else
				float2 staticSwitch288_g157439 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157439 = staticSwitch288_g157439;
				half4 localSampleExtra275_g157439 = SampleExtra( Texture275_g157439 , Sampler275_g157439 , Coords275_g157439 , TexCoord275_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157439) = _ThirdShaderTex;
				SamplerState Sampler238_g157439 = sampler_Linear_Repeat;
				half4 Coords238_g157439 = temp_output_37_0_g157439;
				float3 temp_output_279_0_g157439 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157439 = temp_output_279_0_g157439;
				half4 localSamplePlanar2D238_g157439 = SamplePlanar2D( Texture238_g157439 , Sampler238_g157439 , Coords238_g157439 , WorldPosition238_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157439) = _ThirdShaderTex;
				SamplerState Sampler246_g157439 = sampler_Linear_Repeat;
				half4 Coords246_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition246_g157439 = temp_output_279_0_g157439;
				float3 temp_output_280_0_g157439 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157439 = temp_output_280_0_g157439;
				half4 localSamplePlanar3D246_g157439 = SamplePlanar3D( Texture246_g157439 , Sampler246_g157439 , Coords246_g157439 , WorldPosition246_g157439 , WorldNormal246_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157439) = _ThirdShaderTex;
				SamplerState Sampler234_g157439 = sampler_Linear_Repeat;
				float4 Coords234_g157439 = temp_output_37_0_g157439;
				float3 WorldPosition234_g157439 = temp_output_279_0_g157439;
				float4 localSampleStochastic2D234_g157439 = SampleStochastic2D( Texture234_g157439 , Sampler234_g157439 , Coords234_g157439 , WorldPosition234_g157439 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157439) = _ThirdShaderTex;
				SamplerState Sampler263_g157439 = sampler_Linear_Repeat;
				half4 Coords263_g157439 = temp_output_37_0_g157439;
				half3 WorldPosition263_g157439 = temp_output_279_0_g157439;
				half3 WorldNormal263_g157439 = temp_output_280_0_g157439;
				half4 localSampleStochastic3D263_g157439 = SampleStochastic3D( Texture263_g157439 , Sampler263_g157439 , Coords263_g157439 , WorldPosition263_g157439 , WorldNormal263_g157439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g157436 = localSampleExtra275_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g157436 = localSamplePlanar2D238_g157439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g157436 = localSamplePlanar3D246_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g157436 = localSampleStochastic2D234_g157439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g157436 = localSampleStochastic3D263_g157439;
				#else
				float4 staticSwitch722_g157436 = localSampleMain276_g157439;
				#endif
				half4 Local_ShaderTex775_g157436 = staticSwitch722_g157436;
				float lerpResult739_g157436 = lerp( 1.0 , (Local_ShaderTex775_g157436).y , _ThirdOcclusionValue);
				float4 appendResult749_g157436 = (float4(( (Local_ShaderTex775_g157436).x * _ThirdMetallicValue ) , lerpResult739_g157436 , (Local_ShaderTex775_g157436).z , ( (Local_ShaderTex775_g157436).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g157436 = appendResult749_g157436;
				float clampResult17_g157442 = clamp( (Local_Masks750_g157436).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157443 = _ThirdMultiRemap.x;
				float temp_output_10_0_g157443 = ( _ThirdMultiRemap.y - temp_output_7_0_g157443 );
				float temp_output_765_0_g157436 = saturate( ( ( clampResult17_g157442 - temp_output_7_0_g157443 ) / ( temp_output_10_0_g157443 + 0.0001 ) ) );
				half Local_MultiMask767_g157436 = temp_output_765_0_g157436;
				float lerpResult705_g157436 = lerp( 1.0 , Local_MultiMask767_g157436 , _ThirdColorMode);
				float4 lerpResult706_g157436 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g157436);
				half3 Local_ColorRGB774_g157436 = (lerpResult706_g157436).rgb;
				half3 Local_Albedo768_g157436 = ( Local_AlbedoRGB771_g157436 * Local_ColorRGB774_g157436 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g157461 = 2.0;
				#else
				float staticSwitch1_g157461 = 4.594794;
				#endif
				float3 lerpResult985_g157436 = lerp( Local_Albedo768_g157436 , ( Visual_Albedo527_g157436 * Local_Albedo768_g157436 * staticSwitch1_g157461 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157464) = _ThirdMaskTex;
				SamplerState Sampler276_g157464 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g157436 = _third_mask_coord_value;
				float4 temp_output_37_0_g157464 = Local_MaskCoords813_g157436;
				half4 Coords276_g157464 = temp_output_37_0_g157464;
				half2 TexCoord276_g157464 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157464 = SampleMain( Texture276_g157464 , Sampler276_g157464 , Coords276_g157464 , TexCoord276_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157464) = _ThirdMaskTex;
				SamplerState Sampler275_g157464 = sampler_Linear_Repeat;
				half4 Coords275_g157464 = temp_output_37_0_g157464;
				float2 appendResult289_g157464 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157464 = appendResult289_g157464;
				#else
				float2 staticSwitch288_g157464 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157464 = staticSwitch288_g157464;
				half4 localSampleExtra275_g157464 = SampleExtra( Texture275_g157464 , Sampler275_g157464 , Coords275_g157464 , TexCoord275_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157464) = _ThirdMaskTex;
				SamplerState Sampler238_g157464 = sampler_Linear_Repeat;
				half4 Coords238_g157464 = temp_output_37_0_g157464;
				float3 temp_output_279_0_g157464 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157464 = temp_output_279_0_g157464;
				half4 localSamplePlanar2D238_g157464 = SamplePlanar2D( Texture238_g157464 , Sampler238_g157464 , Coords238_g157464 , WorldPosition238_g157464 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157464) = _ThirdMaskTex;
				SamplerState Sampler246_g157464 = sampler_Linear_Repeat;
				half4 Coords246_g157464 = temp_output_37_0_g157464;
				half3 WorldPosition246_g157464 = temp_output_279_0_g157464;
				float3 temp_output_280_0_g157464 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157464 = temp_output_280_0_g157464;
				half4 localSamplePlanar3D246_g157464 = SamplePlanar3D( Texture246_g157464 , Sampler246_g157464 , Coords246_g157464 , WorldPosition246_g157464 , WorldNormal246_g157464 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g157436 = localSampleExtra275_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g157436 = localSamplePlanar2D238_g157464;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g157436 = localSamplePlanar3D246_g157464;
				#else
				float4 staticSwitch817_g157436 = localSampleMain276_g157464;
				#endif
				half4 Local_MaskTex861_g157436 = staticSwitch817_g157436;
				float clampResult17_g157447 = clamp( (Local_MaskTex861_g157436).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g157448 = _ThirdMaskRemap.x;
				float temp_output_10_0_g157448 = ( _ThirdMaskRemap.y - temp_output_7_0_g157448 );
				float lerpResult1028_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157447 - temp_output_7_0_g157448 ) / ( temp_output_10_0_g157448 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g157436 = lerpResult1028_g157436;
				#else
				float staticSwitch892_g157436 = 1.0;
				#endif
				half Detail_TexMask429_g157436 = staticSwitch892_g157436;
				half4 Model_VertexMasks960_g157436 = Out_VertexData15_g157452;
				float4 break961_g157436 = Model_VertexMasks960_g157436;
				float4 break33_g157451 = _third_vert_mode;
				float temp_output_30_0_g157451 = ( break961_g157436.x * break33_g157451.x );
				float temp_output_29_0_g157451 = ( break961_g157436.y * break33_g157451.y );
				float temp_output_31_0_g157451 = ( break961_g157436.z * break33_g157451.z );
				float temp_output_28_0_g157451 = ( temp_output_30_0_g157451 + temp_output_29_0_g157451 + temp_output_31_0_g157451 + ( break961_g157436.w * break33_g157451.w ) );
				float clampResult17_g157445 = clamp( temp_output_28_0_g157451 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157446 = _ThirdMeshRemap.x;
				float temp_output_10_0_g157446 = ( _ThirdMeshRemap.y - temp_output_7_0_g157446 );
				float lerpResult1026_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157445 - temp_output_7_0_g157446 ) / ( temp_output_10_0_g157446 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g157463 = lerpResult1026_g157436;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157463 = ( temp_output_6_0_g157463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157463 = temp_output_6_0_g157463;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g157436 = staticSwitch14_g157463;
				#else
				float staticSwitch917_g157436 = 1.0;
				#endif
				half Blend_VertMask913_g157436 = staticSwitch917_g157436;
				half3 Visual_NormalWS953_g157436 = Out_NormalWS4_g157453;
				float clampResult17_g157449 = clamp( saturate( (Visual_NormalWS953_g157436).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157450 = _ThirdProjRemap.x;
				float temp_output_10_0_g157450 = ( _ThirdProjRemap.y - temp_output_7_0_g157450 );
				float lerpResult1004_g157436 = lerp( 1.0 , saturate( ( ( clampResult17_g157449 - temp_output_7_0_g157450 ) / ( temp_output_10_0_g157450 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g157436 = lerpResult1004_g157436;
				#else
				float staticSwitch908_g157436 = 1.0;
				#endif
				half Blend_ProjMask912_g157436 = staticSwitch908_g157436;
				TVEGlobalData Data15_g157455 = Data204_g157340;
				float Out_Dummy15_g157455 = 0;
				float4 Out_CoatParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157455 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157455 = Data15_g157455.Dummy;
				Out_CoatParams15_g157455 = Data15_g157455.CoatParams;
				Out_PaintParams15_g157455 = Data15_g157455.PaintParams;
				Out_GlowParams15_g157455 = Data15_g157455.GlowParams;
				Out_AtmoParams15_g157455= Data15_g157455.AtmoParams;
				Out_FormParams15_g157455 = Data15_g157455.FormParams;
				Out_LandParams15_g157455 = Data15_g157455.LandParams;
				Out_WindParams15_g157455 = Data15_g157455.WindParams;
				Out_PushParams15_g157455 = Data15_g157455.PushParams;
				}
				half4 Global_CoatParams972_g157436 = Out_CoatParams15_g157455;
				float lerpResult1023_g157436 = lerp( 1.0 , (Global_CoatParams972_g157436).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g157436 = lerpResult1023_g157436;
				#else
				float staticSwitch965_g157436 = 1.0;
				#endif
				half Blend_GlobalMask968_g157436 = staticSwitch965_g157436;
				float temp_output_432_0_g157436 = ( _ThirdIntensityValue * Detail_TexMask429_g157436 * Blend_VertMask913_g157436 * Blend_ProjMask912_g157436 * Blend_GlobalMask968_g157436 );
				float clampResult17_g157457 = clamp( temp_output_432_0_g157436 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157456 = _ThirdBlendRemap.x;
				float temp_output_10_0_g157456 = ( _ThirdBlendRemap.y - temp_output_7_0_g157456 );
				half Detail_Mask412_g157436 = ( saturate( ( ( clampResult17_g157457 - temp_output_7_0_g157456 ) / ( temp_output_10_0_g157456 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g157436 = lerp( Visual_Albedo527_g157436 , lerpResult985_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g157436 = lerpResult989_g157436;
				#else
				float3 staticSwitch415_g157436 = Visual_Albedo527_g157436;
				#endif
				half3 Final_Albedo601_g157436 = staticSwitch415_g157436;
				float3 In_Albedo3_g157454 = Final_Albedo601_g157436;
				half2 Visual_NormalTS529_g157436 = Out_NormalTS4_g157453;
				float2 lerpResult40_g157459 = lerp( float2( 0,0 ) , Visual_NormalTS529_g157436 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157438) = _ThirdNormalTex;
				SamplerState Sampler276_g157438 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157438 = Local_LayerCoords790_g157436;
				half4 Coords276_g157438 = temp_output_37_0_g157438;
				half2 TexCoord276_g157438 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157438 = SampleMain( Texture276_g157438 , Sampler276_g157438 , Coords276_g157438 , TexCoord276_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157438) = _ThirdNormalTex;
				SamplerState Sampler275_g157438 = sampler_Linear_Repeat;
				half4 Coords275_g157438 = temp_output_37_0_g157438;
				float2 appendResult289_g157438 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157438 = appendResult289_g157438;
				#else
				float2 staticSwitch288_g157438 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157438 = staticSwitch288_g157438;
				half4 localSampleExtra275_g157438 = SampleExtra( Texture275_g157438 , Sampler275_g157438 , Coords275_g157438 , TexCoord275_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157438) = _ThirdNormalTex;
				SamplerState Sampler238_g157438 = sampler_Linear_Repeat;
				half4 Coords238_g157438 = temp_output_37_0_g157438;
				float3 temp_output_279_0_g157438 = Model_PositionWO636_g157436;
				half3 WorldPosition238_g157438 = temp_output_279_0_g157438;
				half4 localSamplePlanar2D238_g157438 = SamplePlanar2D( Texture238_g157438 , Sampler238_g157438 , Coords238_g157438 , WorldPosition238_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157438) = _ThirdNormalTex;
				SamplerState Sampler246_g157438 = sampler_Linear_Repeat;
				half4 Coords246_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition246_g157438 = temp_output_279_0_g157438;
				float3 temp_output_280_0_g157438 = Model_NormalWS869_g157436;
				half3 WorldNormal246_g157438 = temp_output_280_0_g157438;
				half4 localSamplePlanar3D246_g157438 = SamplePlanar3D( Texture246_g157438 , Sampler246_g157438 , Coords246_g157438 , WorldPosition246_g157438 , WorldNormal246_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157438) = _ThirdNormalTex;
				SamplerState Sampler234_g157438 = sampler_Linear_Repeat;
				float4 Coords234_g157438 = temp_output_37_0_g157438;
				float3 WorldPosition234_g157438 = temp_output_279_0_g157438;
				float4 localSampleStochastic2D234_g157438 = SampleStochastic2D( Texture234_g157438 , Sampler234_g157438 , Coords234_g157438 , WorldPosition234_g157438 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157438) = _ThirdNormalTex;
				SamplerState Sampler263_g157438 = sampler_Linear_Repeat;
				half4 Coords263_g157438 = temp_output_37_0_g157438;
				half3 WorldPosition263_g157438 = temp_output_279_0_g157438;
				half3 WorldNormal263_g157438 = temp_output_280_0_g157438;
				half4 localSampleStochastic3D263_g157438 = SampleStochastic3D( Texture263_g157438 , Sampler263_g157438 , Coords263_g157438 , WorldPosition263_g157438 , WorldNormal263_g157438 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g157436 = localSampleExtra275_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g157436 = localSamplePlanar2D238_g157438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g157436 = localSamplePlanar3D246_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g157436 = localSampleStochastic2D234_g157438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g157436 = localSampleStochastic3D263_g157438;
				#else
				float4 staticSwitch698_g157436 = localSampleMain276_g157438;
				#endif
				half4 Local_NormalTex776_g157436 = staticSwitch698_g157436;
				half4 Normal_Packed45_g157440 = Local_NormalTex776_g157436;
				float2 appendResult58_g157440 = (float2(( (Normal_Packed45_g157440).x * (Normal_Packed45_g157440).w ) , (Normal_Packed45_g157440).y));
				half2 Normal_Default50_g157440 = appendResult58_g157440;
				half2 Normal_ASTC41_g157440 = (Normal_Packed45_g157440).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157440 = Normal_ASTC41_g157440;
				#else
				float2 staticSwitch38_g157440 = Normal_Default50_g157440;
				#endif
				half2 Normal_NO_DTX544_g157440 = (Normal_Packed45_g157440).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157440 = Normal_NO_DTX544_g157440;
				#else
				float2 staticSwitch37_g157440 = staticSwitch38_g157440;
				#endif
				float2 temp_output_724_0_g157436 = ( (staticSwitch37_g157440*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g157441 = temp_output_724_0_g157436;
				float2 break71_g157441 = Normal_Planar45_g157441;
				float3 appendResult72_g157441 = (float3(break71_g157441.x , 0.0 , break71_g157441.y));
				float2 temp_output_858_0_g157436 = (mul( ase_worldToTangent, appendResult72_g157441 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g157436 = temp_output_858_0_g157436;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g157436 = float2( 0,0 );
				#else
				float2 staticSwitch727_g157436 = temp_output_724_0_g157436;
				#endif
				half2 Local_NormalTS729_g157436 = staticSwitch727_g157436;
				float2 temp_output_36_0_g157459 = ( lerpResult40_g157459 + Local_NormalTS729_g157436 );
				float2 lerpResult405_g157436 = lerp( Visual_NormalTS529_g157436 , temp_output_36_0_g157459 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g157436 = lerpResult405_g157436;
				#else
				float2 staticSwitch418_g157436 = Visual_NormalTS529_g157436;
				#endif
				half2 Final_NormalTS612_g157436 = staticSwitch418_g157436;
				float2 In_NormalTS3_g157454 = Final_NormalTS612_g157436;
				float3 appendResult68_g157460 = (float3(Final_NormalTS612_g157436 , 1.0));
				float3 tanNormal74_g157460 = appendResult68_g157460;
				float3 worldNormal74_g157460 = normalize( float3(dot(tanToWorld0,tanNormal74_g157460), dot(tanToWorld1,tanNormal74_g157460), dot(tanToWorld2,tanNormal74_g157460)) );
				half3 Final_NormalWS956_g157436 = worldNormal74_g157460;
				float3 In_NormalWS3_g157454 = Final_NormalWS956_g157436;
				half4 Visual_Shader531_g157436 = Out_Shader4_g157453;
				float4 lerpResult1000_g157436 = lerp( Local_Masks750_g157436 , ( Visual_Shader531_g157436 * Local_Masks750_g157436 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g157436 = lerp( Visual_Shader531_g157436 , lerpResult1000_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g157436 = lerpResult998_g157436;
				#else
				float4 staticSwitch451_g157436 = Visual_Shader531_g157436;
				#endif
				half4 Final_Masks613_g157436 = staticSwitch451_g157436;
				float4 In_Shader3_g157454 = Final_Masks613_g157436;
				float4 In_Emissive3_g157454 = Out_Emissive4_g157453;
				float3 temp_output_3_0_g157462 = Final_Albedo601_g157436;
				float dotResult20_g157462 = dot( temp_output_3_0_g157462 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g157436 = dotResult20_g157462;
				float In_Grayscale3_g157454 = Final_Grayscale615_g157436;
				float clampResult651_g157436 = clamp( saturate( ( Final_Grayscale615_g157436 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g157436 = clampResult651_g157436;
				float In_Luminosity3_g157454 = Final_Luminosity652_g157436;
				half Visual_MultiMask547_g157436 = Out_MultiMask4_g157453;
				float lerpResult477_g157436 = lerp( Visual_MultiMask547_g157436 , Local_MultiMask767_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch482_g157436 = lerpResult477_g157436;
				#else
				float staticSwitch482_g157436 = Visual_MultiMask547_g157436;
				#endif
				half Final_MultiMask572_g157436 = staticSwitch482_g157436;
				float In_MultiMask3_g157454 = Final_MultiMask572_g157436;
				half Visual_AlphaClip559_g157436 = Out_AlphaClip4_g157453;
				float temp_output_718_0_g157436 = (Local_AlbedoTex777_g157436).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g157436 = ( temp_output_718_0_g157436 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g157436 = temp_output_718_0_g157436;
				#endif
				half Local_AlphaClip772_g157436 = staticSwitch924_g157436;
				float lerpResult448_g157436 = lerp( Visual_AlphaClip559_g157436 , Local_AlphaClip772_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch564_g157436 = lerpResult448_g157436;
				#else
				float staticSwitch564_g157436 = Visual_AlphaClip559_g157436;
				#endif
				half Final_AlphaClip602_g157436 = staticSwitch564_g157436;
				float In_AlphaClip3_g157454 = Final_AlphaClip602_g157436;
				half Visual_AlphaFade588_g157436 = Out_AlphaFade4_g157453;
				half Local_AlphaFade773_g157436 = (lerpResult706_g157436).a;
				float lerpResult604_g157436 = lerp( Visual_AlphaFade588_g157436 , Local_AlphaFade773_g157436 , Detail_Mask412_g157436);
				#ifdef TVE_THIRD
				float staticSwitch608_g157436 = lerpResult604_g157436;
				#else
				float staticSwitch608_g157436 = Visual_AlphaFade588_g157436;
				#endif
				half Final_AlphaFade611_g157436 = staticSwitch608_g157436;
				float In_AlphaFade3_g157454 = Final_AlphaFade611_g157436;
				float3 In_Translucency3_g157454 = Out_Translucency4_g157453;
				float In_Transmission3_g157454 = Out_Transmission4_g157453;
				float In_Thickness3_g157454 = Out_Thickness4_g157453;
				float In_Diffusion3_g157454 = Out_Diffusion4_g157453;
				{
				Data3_g157454.Dummy = In_Dummy3_g157454;
				Data3_g157454.Albedo = In_Albedo3_g157454;
				Data3_g157454.NormalTS = In_NormalTS3_g157454;
				Data3_g157454.NormalWS = In_NormalWS3_g157454;
				Data3_g157454.Shader = In_Shader3_g157454;
				Data3_g157454.Emissive= In_Emissive3_g157454;
				Data3_g157454.MultiMask = In_MultiMask3_g157454;
				Data3_g157454.Grayscale = In_Grayscale3_g157454;
				Data3_g157454.Luminosity = In_Luminosity3_g157454;
				Data3_g157454.AlphaClip = In_AlphaClip3_g157454;
				Data3_g157454.AlphaFade = In_AlphaFade3_g157454;
				Data3_g157454.Translucency = In_Translucency3_g157454;
				Data3_g157454.Transmission = In_Transmission3_g157454;
				Data3_g157454.Thickness = In_Thickness3_g157454;
				Data3_g157454.Diffusion = In_Diffusion3_g157454;
				}
				TVEVisualData Data4_g157467 = Data3_g157454;
				float Out_Dummy4_g157467 = 0;
				float3 Out_Albedo4_g157467 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157467 = float2( 0,0 );
				float3 Out_NormalWS4_g157467 = float3( 0,0,0 );
				float4 Out_Shader4_g157467 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157467 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157467 = 0;
				float Out_Grayscale4_g157467 = 0;
				float Out_Luminosity4_g157467 = 0;
				float Out_AlphaClip4_g157467 = 0;
				float Out_AlphaFade4_g157467 = 0;
				float3 Out_Translucency4_g157467 = float3( 0,0,0 );
				float Out_Transmission4_g157467 = 0;
				float Out_Thickness4_g157467 = 0;
				float Out_Diffusion4_g157467 = 0;
				{
				Out_Dummy4_g157467 = Data4_g157467.Dummy;
				Out_Albedo4_g157467 = Data4_g157467.Albedo;
				Out_NormalTS4_g157467 = Data4_g157467.NormalTS;
				Out_NormalWS4_g157467 = Data4_g157467.NormalWS;
				Out_Shader4_g157467 = Data4_g157467.Shader;
				Out_Emissive4_g157467= Data4_g157467.Emissive;
				Out_MultiMask4_g157467 = Data4_g157467.MultiMask;
				Out_Grayscale4_g157467 = Data4_g157467.Grayscale;
				Out_Luminosity4_g157467= Data4_g157467.Luminosity;
				Out_AlphaClip4_g157467 = Data4_g157467.AlphaClip;
				Out_AlphaFade4_g157467 = Data4_g157467.AlphaFade;
				Out_Translucency4_g157467 = Data4_g157467.Translucency;
				Out_Transmission4_g157467 = Data4_g157467.Transmission;
				Out_Thickness4_g157467 = Data4_g157467.Thickness;
				Out_Diffusion4_g157467 = Data4_g157467.Diffusion;
				}
				half3 Visual_Albedo127_g157466 = Out_Albedo4_g157467;
				TVEModelData Data15_g157469 = Data16_g157339;
				float Out_Dummy15_g157469 = 0;
				float3 Out_PositionOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157469 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157469 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157469 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157469 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157469 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157469 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157469 = float3( 0,0,0 );
				float4 Out_VertexData15_g157469 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157469 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157469 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157469 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157469 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157469 = Data15_g157469.Dummy;
				Out_PositionOS15_g157469 = Data15_g157469.PositionOS;
				Out_PositionWS15_g157469 = Data15_g157469.PositionWS;
				Out_PositionWO15_g157469 = Data15_g157469.PositionWO;
				Out_PositionRawOS15_g157469 = Data15_g157469.PositionRawOS;
				Out_PositionAddOS15_g157469 = Data15_g157469.PositionAddOS;
				Out_PivotOS15_g157469 = Data15_g157469.PivotOS;
				Out_PivotWS15_g157469 = Data15_g157469.PivotWS;
				Out_PivotWO15_g157469 = Data15_g157469.PivotWO;
				Out_NormalOS15_g157469 = Data15_g157469.NormalOS;
				Out_NormalWS15_g157469 = Data15_g157469.NormalWS;
				Out_NormalRawOS15_g157469 = Data15_g157469.NormalRawOS;
				Out_NormalRawWS15_g157469 = Data15_g157469.NormalRawWS;
				Out_TangentOS15_g157469 = Data15_g157469.TangentOS;
				Out_ViewDirWS15_g157469 = Data15_g157469.ViewDirWS;
				Out_VertexData15_g157469 = Data15_g157469.VertexData;
				Out_MotionData15_g157469 = Data15_g157469.MotionData;
				Out_BoundsData15_g157469 = Data15_g157469.BoundsData;
				Out_RotationData15_g157469 = Data15_g157469.RotationData;
				Out_FragmentData15_g157469 = Data15_g157469.FragmentData;
				}
				half4 Model_VertexData206_g157466 = Out_VertexData15_g157469;
				float4 break208_g157466 = Model_VertexData206_g157466;
				float4 break33_g157474 = _occlusion_vert_mode;
				float temp_output_30_0_g157474 = ( break208_g157466.x * break33_g157474.x );
				float temp_output_29_0_g157474 = ( break208_g157466.y * break33_g157474.y );
				float temp_output_31_0_g157474 = ( break208_g157466.z * break33_g157474.z );
				float temp_output_28_0_g157474 = ( temp_output_30_0_g157474 + temp_output_29_0_g157474 + temp_output_31_0_g157474 + ( break208_g157466.w * break33_g157474.w ) );
				float temp_output_194_0_g157466 = temp_output_28_0_g157474;
				float clampResult17_g157472 = clamp( temp_output_194_0_g157466 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157471 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g157471 = ( _OcclusionMeshRemap.y - temp_output_7_0_g157471 );
				float temp_output_6_0_g157473 = saturate( ( ( clampResult17_g157472 - temp_output_7_0_g157471 ) / ( temp_output_10_0_g157471 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157473 = ( temp_output_6_0_g157473 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157473 = temp_output_6_0_g157473;
				#endif
				half Occlusion_Mask82_g157466 = staticSwitch14_g157473;
				float3 lerpResult75_g157466 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g157466);
				float3 lerpResult186_g157466 = lerp( Visual_Albedo127_g157466 , ( Visual_Albedo127_g157466 * lerpResult75_g157466 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g157466 = lerpResult186_g157466;
				#else
				float3 staticSwitch171_g157466 = Visual_Albedo127_g157466;
				#endif
				half3 Final_Albedo160_g157466 = staticSwitch171_g157466;
				float3 In_Albedo3_g157468 = Final_Albedo160_g157466;
				float2 In_NormalTS3_g157468 = Out_NormalTS4_g157467;
				float3 In_NormalWS3_g157468 = Out_NormalWS4_g157467;
				float4 In_Shader3_g157468 = Out_Shader4_g157467;
				float4 In_Emissive3_g157468 = Out_Emissive4_g157467;
				float3 temp_output_3_0_g157470 = Final_Albedo160_g157466;
				float dotResult20_g157470 = dot( temp_output_3_0_g157470 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157466 = dotResult20_g157470;
				float In_Grayscale3_g157468 = Final_Grayscale164_g157466;
				float clampResult180_g157466 = clamp( saturate( ( Final_Grayscale164_g157466 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g157466 = clampResult180_g157466;
				float In_Luminosity3_g157468 = Final_Shading181_g157466;
				float In_MultiMask3_g157468 = Out_MultiMask4_g157467;
				float In_AlphaClip3_g157468 = Out_AlphaClip4_g157467;
				float In_AlphaFade3_g157468 = Out_AlphaFade4_g157467;
				float3 In_Translucency3_g157468 = Out_Translucency4_g157467;
				float In_Transmission3_g157468 = Out_Transmission4_g157467;
				float In_Thickness3_g157468 = Out_Thickness4_g157467;
				float In_Diffusion3_g157468 = Out_Diffusion4_g157467;
				{
				Data3_g157468.Dummy = In_Dummy3_g157468;
				Data3_g157468.Albedo = In_Albedo3_g157468;
				Data3_g157468.NormalTS = In_NormalTS3_g157468;
				Data3_g157468.NormalWS = In_NormalWS3_g157468;
				Data3_g157468.Shader = In_Shader3_g157468;
				Data3_g157468.Emissive= In_Emissive3_g157468;
				Data3_g157468.MultiMask = In_MultiMask3_g157468;
				Data3_g157468.Grayscale = In_Grayscale3_g157468;
				Data3_g157468.Luminosity = In_Luminosity3_g157468;
				Data3_g157468.AlphaClip = In_AlphaClip3_g157468;
				Data3_g157468.AlphaFade = In_AlphaFade3_g157468;
				Data3_g157468.Translucency = In_Translucency3_g157468;
				Data3_g157468.Transmission = In_Transmission3_g157468;
				Data3_g157468.Thickness = In_Thickness3_g157468;
				Data3_g157468.Diffusion = In_Diffusion3_g157468;
				}
				TVEVisualData Data4_g157479 = Data3_g157468;
				float Out_Dummy4_g157479 = 0;
				float3 Out_Albedo4_g157479 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157479 = float2( 0,0 );
				float3 Out_NormalWS4_g157479 = float3( 0,0,0 );
				float4 Out_Shader4_g157479 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157479 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157479 = 0;
				float Out_Grayscale4_g157479 = 0;
				float Out_Luminosity4_g157479 = 0;
				float Out_AlphaClip4_g157479 = 0;
				float Out_AlphaFade4_g157479 = 0;
				float3 Out_Translucency4_g157479 = float3( 0,0,0 );
				float Out_Transmission4_g157479 = 0;
				float Out_Thickness4_g157479 = 0;
				float Out_Diffusion4_g157479 = 0;
				{
				Out_Dummy4_g157479 = Data4_g157479.Dummy;
				Out_Albedo4_g157479 = Data4_g157479.Albedo;
				Out_NormalTS4_g157479 = Data4_g157479.NormalTS;
				Out_NormalWS4_g157479 = Data4_g157479.NormalWS;
				Out_Shader4_g157479 = Data4_g157479.Shader;
				Out_Emissive4_g157479= Data4_g157479.Emissive;
				Out_MultiMask4_g157479 = Data4_g157479.MultiMask;
				Out_Grayscale4_g157479 = Data4_g157479.Grayscale;
				Out_Luminosity4_g157479= Data4_g157479.Luminosity;
				Out_AlphaClip4_g157479 = Data4_g157479.AlphaClip;
				Out_AlphaFade4_g157479 = Data4_g157479.AlphaFade;
				Out_Translucency4_g157479 = Data4_g157479.Translucency;
				Out_Transmission4_g157479 = Data4_g157479.Transmission;
				Out_Thickness4_g157479 = Data4_g157479.Thickness;
				Out_Diffusion4_g157479 = Data4_g157479.Diffusion;
				}
				half3 Visual_Albedo127_g157476 = Out_Albedo4_g157479;
				float temp_output_162_11_g157476 = Out_MultiMask4_g157479;
				half Visual_MultiMask196_g157476 = temp_output_162_11_g157476;
				float lerpResult190_g157476 = lerp( 1.0 , Visual_MultiMask196_g157476 , _GradientMultiValue);
				half Gradient_MultiMask194_g157476 = lerpResult190_g157476;
				TVEModelData Data15_g157477 = Data16_g157339;
				float Out_Dummy15_g157477 = 0;
				float3 Out_PositionOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157477 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157477 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157477 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157477 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157477 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157477 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157477 = float3( 0,0,0 );
				float4 Out_VertexData15_g157477 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157477 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157477 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157477 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157477 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157477 = Data15_g157477.Dummy;
				Out_PositionOS15_g157477 = Data15_g157477.PositionOS;
				Out_PositionWS15_g157477 = Data15_g157477.PositionWS;
				Out_PositionWO15_g157477 = Data15_g157477.PositionWO;
				Out_PositionRawOS15_g157477 = Data15_g157477.PositionRawOS;
				Out_PositionAddOS15_g157477 = Data15_g157477.PositionAddOS;
				Out_PivotOS15_g157477 = Data15_g157477.PivotOS;
				Out_PivotWS15_g157477 = Data15_g157477.PivotWS;
				Out_PivotWO15_g157477 = Data15_g157477.PivotWO;
				Out_NormalOS15_g157477 = Data15_g157477.NormalOS;
				Out_NormalWS15_g157477 = Data15_g157477.NormalWS;
				Out_NormalRawOS15_g157477 = Data15_g157477.NormalRawOS;
				Out_NormalRawWS15_g157477 = Data15_g157477.NormalRawWS;
				Out_TangentOS15_g157477 = Data15_g157477.TangentOS;
				Out_ViewDirWS15_g157477 = Data15_g157477.ViewDirWS;
				Out_VertexData15_g157477 = Data15_g157477.VertexData;
				Out_MotionData15_g157477 = Data15_g157477.MotionData;
				Out_BoundsData15_g157477 = Data15_g157477.BoundsData;
				Out_RotationData15_g157477 = Data15_g157477.RotationData;
				Out_FragmentData15_g157477 = Data15_g157477.FragmentData;
				}
				half4 Model_VertexData224_g157476 = Out_VertexData15_g157477;
				float4 break226_g157476 = Model_VertexData224_g157476;
				float4 break33_g157478 = _gradient_vert_mode;
				float temp_output_30_0_g157478 = ( break226_g157476.x * break33_g157478.x );
				float temp_output_29_0_g157478 = ( break226_g157476.y * break33_g157478.y );
				float temp_output_31_0_g157478 = ( break226_g157476.z * break33_g157478.z );
				float temp_output_28_0_g157478 = ( temp_output_30_0_g157478 + temp_output_29_0_g157478 + temp_output_31_0_g157478 + ( break226_g157476.w * break33_g157478.w ) );
				float temp_output_211_0_g157476 = temp_output_28_0_g157478;
				float clampResult17_g157483 = clamp( temp_output_211_0_g157476 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157484 = _GradientMeshRemap.x;
				float temp_output_10_0_g157484 = ( _GradientMeshRemap.y - temp_output_7_0_g157484 );
				float temp_output_6_0_g157485 = saturate( ( ( clampResult17_g157483 - temp_output_7_0_g157484 ) / ( temp_output_10_0_g157484 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g157485 = ( temp_output_6_0_g157485 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157485 = temp_output_6_0_g157485;
				#endif
				half Gradient_VertMask82_g157476 = staticSwitch14_g157485;
				half Gradient_Mask200_g157476 = ( Gradient_MultiMask194_g157476 * Gradient_VertMask82_g157476 );
				float3 lerpResult75_g157476 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g157476);
				float3 lerpResult186_g157476 = lerp( Visual_Albedo127_g157476 , ( Visual_Albedo127_g157476 * lerpResult75_g157476 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g157476 = lerpResult186_g157476;
				#else
				float3 staticSwitch171_g157476 = Visual_Albedo127_g157476;
				#endif
				half3 Final_Albedo160_g157476 = staticSwitch171_g157476;
				float3 In_Albedo3_g157480 = Final_Albedo160_g157476;
				float2 In_NormalTS3_g157480 = Out_NormalTS4_g157479;
				float3 In_NormalWS3_g157480 = Out_NormalWS4_g157479;
				float4 In_Shader3_g157480 = Out_Shader4_g157479;
				float4 In_Emissive3_g157480 = Out_Emissive4_g157479;
				float3 temp_output_3_0_g157481 = Final_Albedo160_g157476;
				float dotResult20_g157481 = dot( temp_output_3_0_g157481 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g157476 = dotResult20_g157481;
				float In_Grayscale3_g157480 = Final_Grayscale164_g157476;
				float clampResult180_g157476 = clamp( saturate( ( Final_Grayscale164_g157476 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g157476 = clampResult180_g157476;
				float In_Luminosity3_g157480 = Final_Luminosity181_g157476;
				float In_MultiMask3_g157480 = temp_output_162_11_g157476;
				float In_AlphaClip3_g157480 = Out_AlphaClip4_g157479;
				float In_AlphaFade3_g157480 = Out_AlphaFade4_g157479;
				float3 In_Translucency3_g157480 = Out_Translucency4_g157479;
				float In_Transmission3_g157480 = Out_Transmission4_g157479;
				float In_Thickness3_g157480 = Out_Thickness4_g157479;
				float In_Diffusion3_g157480 = Out_Diffusion4_g157479;
				{
				Data3_g157480.Dummy = In_Dummy3_g157480;
				Data3_g157480.Albedo = In_Albedo3_g157480;
				Data3_g157480.NormalTS = In_NormalTS3_g157480;
				Data3_g157480.NormalWS = In_NormalWS3_g157480;
				Data3_g157480.Shader = In_Shader3_g157480;
				Data3_g157480.Emissive= In_Emissive3_g157480;
				Data3_g157480.MultiMask = In_MultiMask3_g157480;
				Data3_g157480.Grayscale = In_Grayscale3_g157480;
				Data3_g157480.Luminosity = In_Luminosity3_g157480;
				Data3_g157480.AlphaClip = In_AlphaClip3_g157480;
				Data3_g157480.AlphaFade = In_AlphaFade3_g157480;
				Data3_g157480.Translucency = In_Translucency3_g157480;
				Data3_g157480.Transmission = In_Transmission3_g157480;
				Data3_g157480.Thickness = In_Thickness3_g157480;
				Data3_g157480.Diffusion = In_Diffusion3_g157480;
				}
				TVEVisualData Data4_g157487 = Data3_g157480;
				float Out_Dummy4_g157487 = 0;
				float3 Out_Albedo4_g157487 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157487 = float2( 0,0 );
				float3 Out_NormalWS4_g157487 = float3( 0,0,0 );
				float4 Out_Shader4_g157487 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157487 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157487 = 0;
				float Out_Grayscale4_g157487 = 0;
				float Out_Luminosity4_g157487 = 0;
				float Out_AlphaClip4_g157487 = 0;
				float Out_AlphaFade4_g157487 = 0;
				float3 Out_Translucency4_g157487 = float3( 0,0,0 );
				float Out_Transmission4_g157487 = 0;
				float Out_Thickness4_g157487 = 0;
				float Out_Diffusion4_g157487 = 0;
				{
				Out_Dummy4_g157487 = Data4_g157487.Dummy;
				Out_Albedo4_g157487 = Data4_g157487.Albedo;
				Out_NormalTS4_g157487 = Data4_g157487.NormalTS;
				Out_NormalWS4_g157487 = Data4_g157487.NormalWS;
				Out_Shader4_g157487 = Data4_g157487.Shader;
				Out_Emissive4_g157487= Data4_g157487.Emissive;
				Out_MultiMask4_g157487 = Data4_g157487.MultiMask;
				Out_Grayscale4_g157487 = Data4_g157487.Grayscale;
				Out_Luminosity4_g157487= Data4_g157487.Luminosity;
				Out_AlphaClip4_g157487 = Data4_g157487.AlphaClip;
				Out_AlphaFade4_g157487 = Data4_g157487.AlphaFade;
				Out_Translucency4_g157487 = Data4_g157487.Translucency;
				Out_Transmission4_g157487 = Data4_g157487.Transmission;
				Out_Thickness4_g157487 = Data4_g157487.Thickness;
				Out_Diffusion4_g157487 = Data4_g157487.Diffusion;
				}
				half3 Visual_Albedo127_g157486 = Out_Albedo4_g157487;
				float vertexToFrag203_g157486 = IN.ase_texcoord3.z;
				float clampResult208_g157486 = clamp( vertexToFrag203_g157486 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g157486 = ( Visual_Albedo127_g157486 + ( ( Visual_Albedo127_g157486 * Visual_Albedo127_g157486 * 200.0 * _motion_highlight_color ) * clampResult208_g157486 ) );
				#else
				float3 staticSwitch209_g157486 = Visual_Albedo127_g157486;
				#endif
				half3 Final_Albedo160_g157486 = staticSwitch209_g157486;
				float3 In_Albedo3_g157489 = Final_Albedo160_g157486;
				float2 In_NormalTS3_g157489 = Out_NormalTS4_g157487;
				float3 In_NormalWS3_g157489 = Out_NormalWS4_g157487;
				float4 In_Shader3_g157489 = Out_Shader4_g157487;
				float4 In_Emissive3_g157489 = Out_Emissive4_g157487;
				float In_Grayscale3_g157489 = Out_Grayscale4_g157487;
				float In_Luminosity3_g157489 = Out_Luminosity4_g157487;
				float In_MultiMask3_g157489 = Out_MultiMask4_g157487;
				float In_AlphaClip3_g157489 = Out_AlphaClip4_g157487;
				float In_AlphaFade3_g157489 = Out_AlphaFade4_g157487;
				float3 In_Translucency3_g157489 = Out_Translucency4_g157487;
				float In_Transmission3_g157489 = Out_Transmission4_g157487;
				float In_Thickness3_g157489 = Out_Thickness4_g157487;
				float In_Diffusion3_g157489 = Out_Diffusion4_g157487;
				{
				Data3_g157489.Dummy = In_Dummy3_g157489;
				Data3_g157489.Albedo = In_Albedo3_g157489;
				Data3_g157489.NormalTS = In_NormalTS3_g157489;
				Data3_g157489.NormalWS = In_NormalWS3_g157489;
				Data3_g157489.Shader = In_Shader3_g157489;
				Data3_g157489.Emissive= In_Emissive3_g157489;
				Data3_g157489.MultiMask = In_MultiMask3_g157489;
				Data3_g157489.Grayscale = In_Grayscale3_g157489;
				Data3_g157489.Luminosity = In_Luminosity3_g157489;
				Data3_g157489.AlphaClip = In_AlphaClip3_g157489;
				Data3_g157489.AlphaFade = In_AlphaFade3_g157489;
				Data3_g157489.Translucency = In_Translucency3_g157489;
				Data3_g157489.Transmission = In_Transmission3_g157489;
				Data3_g157489.Thickness = In_Thickness3_g157489;
				Data3_g157489.Diffusion = In_Diffusion3_g157489;
				}
				TVEVisualData Data4_g157834 = Data3_g157489;
				float Out_Dummy4_g157834 = 0;
				float3 Out_Albedo4_g157834 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157834 = float2( 0,0 );
				float3 Out_NormalWS4_g157834 = float3( 0,0,0 );
				float4 Out_Shader4_g157834 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157834 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157834 = 0;
				float Out_Grayscale4_g157834 = 0;
				float Out_Luminosity4_g157834 = 0;
				float Out_AlphaClip4_g157834 = 0;
				float Out_AlphaFade4_g157834 = 0;
				float3 Out_Translucency4_g157834 = float3( 0,0,0 );
				float Out_Transmission4_g157834 = 0;
				float Out_Thickness4_g157834 = 0;
				float Out_Diffusion4_g157834 = 0;
				{
				Out_Dummy4_g157834 = Data4_g157834.Dummy;
				Out_Albedo4_g157834 = Data4_g157834.Albedo;
				Out_NormalTS4_g157834 = Data4_g157834.NormalTS;
				Out_NormalWS4_g157834 = Data4_g157834.NormalWS;
				Out_Shader4_g157834 = Data4_g157834.Shader;
				Out_Emissive4_g157834= Data4_g157834.Emissive;
				Out_MultiMask4_g157834 = Data4_g157834.MultiMask;
				Out_Grayscale4_g157834 = Data4_g157834.Grayscale;
				Out_Luminosity4_g157834= Data4_g157834.Luminosity;
				Out_AlphaClip4_g157834 = Data4_g157834.AlphaClip;
				Out_AlphaFade4_g157834 = Data4_g157834.AlphaFade;
				Out_Translucency4_g157834 = Data4_g157834.Translucency;
				Out_Transmission4_g157834 = Data4_g157834.Transmission;
				Out_Thickness4_g157834 = Data4_g157834.Thickness;
				Out_Diffusion4_g157834 = Data4_g157834.Diffusion;
				}
				half3 Visual_Albedo127_g157833 = Out_Albedo4_g157834;
				float3 temp_output_622_0_g157833 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler238_g157837 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157840 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157840 = ( temp_output_6_0_g157840 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157840 = temp_output_6_0_g157840;
				#endif
				half4 Overlay_Coords639_g157833 = staticSwitch14_g157840;
				float4 temp_output_37_0_g157837 = Overlay_Coords639_g157833;
				half4 Coords238_g157837 = temp_output_37_0_g157837;
				TVEModelData Data15_g157841 = Data16_g157339;
				float Out_Dummy15_g157841 = 0;
				float3 Out_PositionOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157841 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157841 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157841 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157841 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157841 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157841 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157841 = float3( 0,0,0 );
				float4 Out_VertexData15_g157841 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157841 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157841 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157841 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157841 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157841 = Data15_g157841.Dummy;
				Out_PositionOS15_g157841 = Data15_g157841.PositionOS;
				Out_PositionWS15_g157841 = Data15_g157841.PositionWS;
				Out_PositionWO15_g157841 = Data15_g157841.PositionWO;
				Out_PositionRawOS15_g157841 = Data15_g157841.PositionRawOS;
				Out_PositionAddOS15_g157841 = Data15_g157841.PositionAddOS;
				Out_PivotOS15_g157841 = Data15_g157841.PivotOS;
				Out_PivotWS15_g157841 = Data15_g157841.PivotWS;
				Out_PivotWO15_g157841 = Data15_g157841.PivotWO;
				Out_NormalOS15_g157841 = Data15_g157841.NormalOS;
				Out_NormalWS15_g157841 = Data15_g157841.NormalWS;
				Out_NormalRawOS15_g157841 = Data15_g157841.NormalRawOS;
				Out_NormalRawWS15_g157841 = Data15_g157841.NormalRawWS;
				Out_TangentOS15_g157841 = Data15_g157841.TangentOS;
				Out_ViewDirWS15_g157841 = Data15_g157841.ViewDirWS;
				Out_VertexData15_g157841 = Data15_g157841.VertexData;
				Out_MotionData15_g157841 = Data15_g157841.MotionData;
				Out_BoundsData15_g157841 = Data15_g157841.BoundsData;
				Out_RotationData15_g157841 = Data15_g157841.RotationData;
				Out_FragmentData15_g157841 = Data15_g157841.FragmentData;
				}
				half3 Model_PositionWO602_g157833 = Out_PositionWO15_g157841;
				float3 temp_output_279_0_g157837 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157837 = temp_output_279_0_g157837;
				half4 localSamplePlanar2D238_g157837 = SamplePlanar2D( Texture238_g157837 , Sampler238_g157837 , Coords238_g157837 , WorldPosition238_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler246_g157837 = sampler_Linear_Repeat;
				half4 Coords246_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition246_g157837 = temp_output_279_0_g157837;
				half3 Model_NormalWS712_g157833 = Out_NormalWS15_g157841;
				float3 temp_output_280_0_g157837 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157837 = temp_output_280_0_g157837;
				half4 localSamplePlanar3D246_g157837 = SamplePlanar3D( Texture246_g157837 , Sampler246_g157837 , Coords246_g157837 , WorldPosition246_g157837 , WorldNormal246_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler234_g157837 = sampler_Linear_Repeat;
				float4 Coords234_g157837 = temp_output_37_0_g157837;
				float3 WorldPosition234_g157837 = temp_output_279_0_g157837;
				float4 localSampleStochastic2D234_g157837 = SampleStochastic2D( Texture234_g157837 , Sampler234_g157837 , Coords234_g157837 , WorldPosition234_g157837 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157837) = _OverlayAlbedoTex;
				SamplerState Sampler263_g157837 = sampler_Linear_Repeat;
				half4 Coords263_g157837 = temp_output_37_0_g157837;
				half3 WorldPosition263_g157837 = temp_output_279_0_g157837;
				half3 WorldNormal263_g157837 = temp_output_280_0_g157837;
				half4 localSampleStochastic3D263_g157837 = SampleStochastic3D( Texture263_g157837 , Sampler263_g157837 , Coords263_g157837 , WorldPosition263_g157837 , WorldNormal263_g157837 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g157833 = localSamplePlanar3D246_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g157833 = localSampleStochastic2D234_g157837;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g157833 = localSampleStochastic3D263_g157837;
				#else
				float4 staticSwitch676_g157833 = localSamplePlanar2D238_g157837;
				#endif
				half3 Overlay_Albedo526_g157833 = (staticSwitch676_g157833).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g157833 = ( temp_output_622_0_g157833 * Overlay_Albedo526_g157833 );
				#else
				float3 staticSwitch578_g157833 = temp_output_622_0_g157833;
				#endif
				float3 temp_output_6_0_g157856 = staticSwitch578_g157833;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157856 = ( temp_output_6_0_g157856 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g157856 = temp_output_6_0_g157856;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157843) = _OverlayMaskTex;
				SamplerState Sampler276_g157843 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157844 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157844 = ( temp_output_6_0_g157844 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157844 = temp_output_6_0_g157844;
				#endif
				half4 Local_MaskCoords886_g157833 = staticSwitch14_g157844;
				float4 temp_output_37_0_g157843 = Local_MaskCoords886_g157833;
				half4 Coords276_g157843 = temp_output_37_0_g157843;
				half2 TexCoord276_g157843 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157843 = SampleMain( Texture276_g157843 , Sampler276_g157843 , Coords276_g157843 , TexCoord276_g157843 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157843) = _OverlayMaskTex;
				SamplerState Sampler275_g157843 = sampler_Linear_Repeat;
				half4 Coords275_g157843 = temp_output_37_0_g157843;
				float2 appendResult289_g157843 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157843 = appendResult289_g157843;
				#else
				float2 staticSwitch288_g157843 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157843 = staticSwitch288_g157843;
				half4 localSampleExtra275_g157843 = SampleExtra( Texture275_g157843 , Sampler275_g157843 , Coords275_g157843 , TexCoord275_g157843 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g157833 = localSampleExtra275_g157843;
				#else
				float4 staticSwitch894_g157833 = localSampleMain276_g157843;
				#endif
				half4 Local_MaskTex885_g157833 = staticSwitch894_g157833;
				float clampResult17_g157858 = clamp( (Local_MaskTex885_g157833).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g157859 = _OverlayMaskRemap.x;
				float temp_output_10_0_g157859 = ( _OverlayMaskRemap.y - temp_output_7_0_g157859 );
				float lerpResult898_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157858 - temp_output_7_0_g157859 ) / ( temp_output_10_0_g157859 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g157833 = lerpResult898_g157833;
				#else
				float staticSwitch904_g157833 = 1.0;
				#endif
				half Overlay_TexMask906_g157833 = staticSwitch904_g157833;
				float3 temp_output_739_21_g157833 = Out_NormalWS4_g157834;
				half3 Visual_NormalWS749_g157833 = temp_output_739_21_g157833;
				float clampResult17_g157853 = clamp( saturate( (Visual_NormalWS749_g157833).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g157852 = _OverlayProjRemap.x;
				float temp_output_10_0_g157852 = ( _OverlayProjRemap.y - temp_output_7_0_g157852 );
				float lerpResult842_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157853 - temp_output_7_0_g157852 ) / ( temp_output_10_0_g157852 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g157833 = lerpResult842_g157833;
				#else
				float staticSwitch734_g157833 = 1.0;
				#endif
				half Overlay_MaskProj457_g157833 = staticSwitch734_g157833;
				float temp_output_739_15_g157833 = Out_Luminosity4_g157834;
				half Visual_Luminosity654_g157833 = temp_output_739_15_g157833;
				float clampResult17_g157855 = clamp( Visual_Luminosity654_g157833 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157854 = _OverlayLumaRemap.x;
				float temp_output_10_0_g157854 = ( _OverlayLumaRemap.y - temp_output_7_0_g157854 );
				float lerpResult587_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157855 - temp_output_7_0_g157854 ) / ( temp_output_10_0_g157854 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g157833 = lerpResult587_g157833;
				half4 Model_VertexMasks791_g157833 = Out_VertexData15_g157841;
				float4 break792_g157833 = Model_VertexMasks791_g157833;
				float4 break33_g157845 = _overlay_vert_mode;
				float temp_output_30_0_g157845 = ( break792_g157833.x * break33_g157845.x );
				float temp_output_29_0_g157845 = ( break792_g157833.y * break33_g157845.y );
				float temp_output_31_0_g157845 = ( break792_g157833.z * break33_g157845.z );
				float temp_output_28_0_g157845 = ( temp_output_30_0_g157845 + temp_output_29_0_g157845 + temp_output_31_0_g157845 + ( break792_g157833.w * break33_g157845.w ) );
				float clampResult17_g157846 = clamp( temp_output_28_0_g157845 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157848 = _OverlayMeshRemap.x;
				float temp_output_10_0_g157848 = ( _OverlayMeshRemap.y - temp_output_7_0_g157848 );
				float lerpResult879_g157833 = lerp( 1.0 , saturate( ( ( clampResult17_g157846 - temp_output_7_0_g157848 ) / ( temp_output_10_0_g157848 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g157857 = lerpResult879_g157833;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157857 = ( temp_output_6_0_g157857 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157857 = temp_output_6_0_g157857;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g157833 = staticSwitch14_g157857;
				#else
				float staticSwitch800_g157833 = 1.0;
				#endif
				half Overlay_VertMask801_g157833 = staticSwitch800_g157833;
				half Overlay_MaskNoise427_g157833 = 1.0;
				TVEGlobalData Data15_g157835 = Data204_g157340;
				float Out_Dummy15_g157835 = 0;
				float4 Out_CoatParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157835 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157835 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157835 = Data15_g157835.Dummy;
				Out_CoatParams15_g157835 = Data15_g157835.CoatParams;
				Out_PaintParams15_g157835 = Data15_g157835.PaintParams;
				Out_GlowParams15_g157835 = Data15_g157835.GlowParams;
				Out_AtmoParams15_g157835= Data15_g157835.AtmoParams;
				Out_FormParams15_g157835 = Data15_g157835.FormParams;
				Out_LandParams15_g157835 = Data15_g157835.LandParams;
				Out_WindParams15_g157835 = Data15_g157835.WindParams;
				Out_PushParams15_g157835 = Data15_g157835.PushParams;
				}
				half4 Global_AtmoParams516_g157833 = Out_AtmoParams15_g157835;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g157833 = (Global_AtmoParams516_g157833).z;
				#else
				float staticSwitch705_g157833 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g157833 = staticSwitch705_g157833;
				half Custom_Mask646_g157833 = 1.0;
				float temp_output_7_0_g157851 = 0.1;
				float temp_output_10_0_g157851 = ( 0.2 - temp_output_7_0_g157851 );
				half Overlay_Mask494_g157833 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g157833 * Overlay_MaskProj457_g157833 * Overlay_MaskLuma438_g157833 * Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 * Custom_Mask646_g157833 ) - temp_output_7_0_g157851 ) / ( temp_output_10_0_g157851 + 0.0001 ) ) );
				float3 lerpResult467_g157833 = lerp( Visual_Albedo127_g157833 , staticSwitch14_g157856 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g157833 = lerpResult467_g157833;
				#else
				float3 staticSwitch577_g157833 = Visual_Albedo127_g157833;
				#endif
				half3 Final_Albedo493_g157833 = staticSwitch577_g157833;
				float3 In_Albedo3_g157836 = Final_Albedo493_g157833;
				half2 Visual_NormalTS535_g157833 = Out_NormalTS4_g157834;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g157842) = _OverlayNormalTex;
				SamplerState Sampler238_g157842 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g157842 = Overlay_Coords639_g157833;
				half4 Coords238_g157842 = temp_output_37_0_g157842;
				float3 temp_output_279_0_g157842 = Model_PositionWO602_g157833;
				half3 WorldPosition238_g157842 = temp_output_279_0_g157842;
				half4 localSamplePlanar2D238_g157842 = SamplePlanar2D( Texture238_g157842 , Sampler238_g157842 , Coords238_g157842 , WorldPosition238_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g157842) = _OverlayNormalTex;
				SamplerState Sampler246_g157842 = sampler_Linear_Repeat;
				half4 Coords246_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition246_g157842 = temp_output_279_0_g157842;
				float3 temp_output_280_0_g157842 = Model_NormalWS712_g157833;
				half3 WorldNormal246_g157842 = temp_output_280_0_g157842;
				half4 localSamplePlanar3D246_g157842 = SamplePlanar3D( Texture246_g157842 , Sampler246_g157842 , Coords246_g157842 , WorldPosition246_g157842 , WorldNormal246_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g157842) = _OverlayNormalTex;
				SamplerState Sampler234_g157842 = sampler_Linear_Repeat;
				float4 Coords234_g157842 = temp_output_37_0_g157842;
				float3 WorldPosition234_g157842 = temp_output_279_0_g157842;
				float4 localSampleStochastic2D234_g157842 = SampleStochastic2D( Texture234_g157842 , Sampler234_g157842 , Coords234_g157842 , WorldPosition234_g157842 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g157842) = _OverlayNormalTex;
				SamplerState Sampler263_g157842 = sampler_Linear_Repeat;
				half4 Coords263_g157842 = temp_output_37_0_g157842;
				half3 WorldPosition263_g157842 = temp_output_279_0_g157842;
				half3 WorldNormal263_g157842 = temp_output_280_0_g157842;
				half4 localSampleStochastic3D263_g157842 = SampleStochastic3D( Texture263_g157842 , Sampler263_g157842 , Coords263_g157842 , WorldPosition263_g157842 , WorldNormal263_g157842 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g157833 = localSamplePlanar3D246_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g157833 = localSampleStochastic2D234_g157842;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g157833 = localSampleStochastic3D263_g157842;
				#else
				float4 staticSwitch686_g157833 = localSamplePlanar2D238_g157842;
				#endif
				half4 Normal_Packed45_g157839 = staticSwitch686_g157833;
				float2 appendResult58_g157839 = (float2(( (Normal_Packed45_g157839).x * (Normal_Packed45_g157839).w ) , (Normal_Packed45_g157839).y));
				half2 Normal_Default50_g157839 = appendResult58_g157839;
				half2 Normal_ASTC41_g157839 = (Normal_Packed45_g157839).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g157839 = Normal_ASTC41_g157839;
				#else
				float2 staticSwitch38_g157839 = Normal_Default50_g157839;
				#endif
				half2 Normal_NO_DTX544_g157839 = (Normal_Packed45_g157839).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g157839 = Normal_NO_DTX544_g157839;
				#else
				float2 staticSwitch37_g157839 = staticSwitch38_g157839;
				#endif
				half2 Normal_Planar45_g157838 = (staticSwitch37_g157839*2.0 + -1.0);
				float2 break71_g157838 = Normal_Planar45_g157838;
				float3 appendResult72_g157838 = (float3(break71_g157838.x , 0.0 , break71_g157838.y));
				half2 Overlay_Normal528_g157833 = (mul( ase_worldToTangent, appendResult72_g157838 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g157833 = Overlay_Normal528_g157833;
				#else
				float2 staticSwitch579_g157833 = Visual_NormalTS535_g157833;
				#endif
				float2 lerpResult551_g157833 = lerp( Visual_NormalTS535_g157833 , ( staticSwitch579_g157833 * _OverlayNormalValue ) , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g157833 = lerpResult551_g157833;
				#else
				float2 staticSwitch583_g157833 = Visual_NormalTS535_g157833;
				#endif
				half2 Final_NormalTS499_g157833 = staticSwitch583_g157833;
				float2 In_NormalTS3_g157836 = Final_NormalTS499_g157833;
				float3 In_NormalWS3_g157836 = temp_output_739_21_g157833;
				half4 Visual_Masks536_g157833 = Out_Shader4_g157834;
				float4 appendResult585_g157833 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g157833 = lerp( Visual_Masks536_g157833 , appendResult585_g157833 , Overlay_Mask494_g157833);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g157833 = lerpResult584_g157833;
				#else
				float4 staticSwitch586_g157833 = Visual_Masks536_g157833;
				#endif
				half4 Final_Masks482_g157833 = staticSwitch586_g157833;
				float4 In_Shader3_g157836 = Final_Masks482_g157833;
				float4 In_Emissive3_g157836 = Out_Emissive4_g157834;
				float temp_output_739_12_g157833 = Out_Grayscale4_g157834;
				float In_Grayscale3_g157836 = temp_output_739_12_g157833;
				float In_Luminosity3_g157836 = temp_output_739_15_g157833;
				float In_MultiMask3_g157836 = Out_MultiMask4_g157834;
				float In_AlphaClip3_g157836 = Out_AlphaClip4_g157834;
				float In_AlphaFade3_g157836 = Out_AlphaFade4_g157834;
				float3 In_Translucency3_g157836 = Out_Translucency4_g157834;
				half Visual_Transmission699_g157833 = Out_Transmission4_g157834;
				float lerpResult746_g157833 = lerp( Visual_Transmission699_g157833 , ( Visual_Transmission699_g157833 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g157833 * Overlay_MaskNoise427_g157833 * Overlay_MaskGlobal429_g157833 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g157833 = lerpResult746_g157833;
				#else
				float staticSwitch703_g157833 = Visual_Transmission699_g157833;
				#endif
				half Final_Transmission702_g157833 = staticSwitch703_g157833;
				float In_Transmission3_g157836 = Final_Transmission702_g157833;
				float In_Thickness3_g157836 = Out_Thickness4_g157834;
				float In_Diffusion3_g157836 = Out_Diffusion4_g157834;
				{
				Data3_g157836.Dummy = In_Dummy3_g157836;
				Data3_g157836.Albedo = In_Albedo3_g157836;
				Data3_g157836.NormalTS = In_NormalTS3_g157836;
				Data3_g157836.NormalWS = In_NormalWS3_g157836;
				Data3_g157836.Shader = In_Shader3_g157836;
				Data3_g157836.Emissive= In_Emissive3_g157836;
				Data3_g157836.MultiMask = In_MultiMask3_g157836;
				Data3_g157836.Grayscale = In_Grayscale3_g157836;
				Data3_g157836.Luminosity = In_Luminosity3_g157836;
				Data3_g157836.AlphaClip = In_AlphaClip3_g157836;
				Data3_g157836.AlphaFade = In_AlphaFade3_g157836;
				Data3_g157836.Translucency = In_Translucency3_g157836;
				Data3_g157836.Transmission = In_Transmission3_g157836;
				Data3_g157836.Thickness = In_Thickness3_g157836;
				Data3_g157836.Diffusion = In_Diffusion3_g157836;
				}
				TVEVisualData Data4_g157871 = Data3_g157836;
				float Out_Dummy4_g157871 = 0;
				float3 Out_Albedo4_g157871 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157871 = float2( 0,0 );
				float3 Out_NormalWS4_g157871 = float3( 0,0,0 );
				float4 Out_Shader4_g157871 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157871 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157871 = 0;
				float Out_Grayscale4_g157871 = 0;
				float Out_Luminosity4_g157871 = 0;
				float Out_AlphaClip4_g157871 = 0;
				float Out_AlphaFade4_g157871 = 0;
				float3 Out_Translucency4_g157871 = float3( 0,0,0 );
				float Out_Transmission4_g157871 = 0;
				float Out_Thickness4_g157871 = 0;
				float Out_Diffusion4_g157871 = 0;
				{
				Out_Dummy4_g157871 = Data4_g157871.Dummy;
				Out_Albedo4_g157871 = Data4_g157871.Albedo;
				Out_NormalTS4_g157871 = Data4_g157871.NormalTS;
				Out_NormalWS4_g157871 = Data4_g157871.NormalWS;
				Out_Shader4_g157871 = Data4_g157871.Shader;
				Out_Emissive4_g157871= Data4_g157871.Emissive;
				Out_MultiMask4_g157871 = Data4_g157871.MultiMask;
				Out_Grayscale4_g157871 = Data4_g157871.Grayscale;
				Out_Luminosity4_g157871= Data4_g157871.Luminosity;
				Out_AlphaClip4_g157871 = Data4_g157871.AlphaClip;
				Out_AlphaFade4_g157871 = Data4_g157871.AlphaFade;
				Out_Translucency4_g157871 = Data4_g157871.Translucency;
				Out_Transmission4_g157871 = Data4_g157871.Transmission;
				Out_Thickness4_g157871 = Data4_g157871.Thickness;
				Out_Diffusion4_g157871 = Data4_g157871.Diffusion;
				}
				float3 temp_output_297_0_g157860 = Out_Albedo4_g157871;
				float3 In_Albedo3_g157872 = temp_output_297_0_g157860;
				float2 In_NormalTS3_g157872 = Out_NormalTS4_g157871;
				float3 In_NormalWS3_g157872 = Out_NormalWS4_g157871;
				float4 In_Shader3_g157872 = Out_Shader4_g157871;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g157860 = Out_Emissive4_g157871;
				TVEModelData Data15_g157861 = Data16_g157339;
				float Out_Dummy15_g157861 = 0;
				float3 Out_PositionOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157861 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157861 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157861 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157861 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157861 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157861 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157861 = float3( 0,0,0 );
				float4 Out_VertexData15_g157861 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157861 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157861 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157861 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157861 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157861 = Data15_g157861.Dummy;
				Out_PositionOS15_g157861 = Data15_g157861.PositionOS;
				Out_PositionWS15_g157861 = Data15_g157861.PositionWS;
				Out_PositionWO15_g157861 = Data15_g157861.PositionWO;
				Out_PositionRawOS15_g157861 = Data15_g157861.PositionRawOS;
				Out_PositionAddOS15_g157861 = Data15_g157861.PositionAddOS;
				Out_PivotOS15_g157861 = Data15_g157861.PivotOS;
				Out_PivotWS15_g157861 = Data15_g157861.PivotWS;
				Out_PivotWO15_g157861 = Data15_g157861.PivotWO;
				Out_NormalOS15_g157861 = Data15_g157861.NormalOS;
				Out_NormalWS15_g157861 = Data15_g157861.NormalWS;
				Out_NormalRawOS15_g157861 = Data15_g157861.NormalRawOS;
				Out_NormalRawWS15_g157861 = Data15_g157861.NormalRawWS;
				Out_TangentOS15_g157861 = Data15_g157861.TangentOS;
				Out_ViewDirWS15_g157861 = Data15_g157861.ViewDirWS;
				Out_VertexData15_g157861 = Data15_g157861.VertexData;
				Out_MotionData15_g157861 = Data15_g157861.MotionData;
				Out_BoundsData15_g157861 = Data15_g157861.BoundsData;
				Out_RotationData15_g157861 = Data15_g157861.RotationData;
				Out_FragmentData15_g157861 = Data15_g157861.FragmentData;
				}
				half4 Model_VertexMasks216_g157860 = Out_VertexData15_g157861;
				float4 break251_g157860 = Model_VertexMasks216_g157860;
				float4 break33_g157865 = _emissive_vert_mode;
				float temp_output_30_0_g157865 = ( break251_g157860.x * break33_g157865.x );
				float temp_output_29_0_g157865 = ( break251_g157860.y * break33_g157865.y );
				float temp_output_31_0_g157865 = ( break251_g157860.z * break33_g157865.z );
				float temp_output_28_0_g157865 = ( temp_output_30_0_g157865 + temp_output_29_0_g157865 + temp_output_31_0_g157865 + ( break251_g157860.w * break33_g157865.w ) );
				float clampResult17_g157864 = clamp( temp_output_28_0_g157865 , 0.0001 , 0.9999 );
				float temp_output_7_0_g157868 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g157868 = ( _EmissiveMeshRemap.y - temp_output_7_0_g157868 );
				float lerpResult303_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157864 - temp_output_7_0_g157868 ) / ( temp_output_10_0_g157868 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g157874 = lerpResult303_g157860;
				#ifdef TVE_REGISTER
				float staticSwitch14_g157874 = ( temp_output_6_0_g157874 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g157874 = temp_output_6_0_g157874;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g157860 = staticSwitch14_g157874;
				#else
				float staticSwitch242_g157860 = 1.0;
				#endif
				half Emissive_MeshMask221_g157860 = staticSwitch242_g157860;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g157863) = _EmissiveMaskTex;
				SamplerState Sampler276_g157863 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g157869 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g157869 = ( temp_output_6_0_g157869 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g157869 = temp_output_6_0_g157869;
				#endif
				half4 Emissive_Coords167_g157860 = staticSwitch14_g157869;
				float4 temp_output_37_0_g157863 = Emissive_Coords167_g157860;
				half4 Coords276_g157863 = temp_output_37_0_g157863;
				half2 TexCoord276_g157863 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g157863 = SampleMain( Texture276_g157863 , Sampler276_g157863 , Coords276_g157863 , TexCoord276_g157863 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g157863) = _EmissiveMaskTex;
				SamplerState Sampler275_g157863 = sampler_Linear_Repeat;
				half4 Coords275_g157863 = temp_output_37_0_g157863;
				float2 appendResult289_g157863 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g157863 = appendResult289_g157863;
				#else
				float2 staticSwitch288_g157863 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g157863 = staticSwitch288_g157863;
				half4 localSampleExtra275_g157863 = SampleExtra( Texture275_g157863 , Sampler275_g157863 , Coords275_g157863 , TexCoord275_g157863 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g157860 = localSampleExtra275_g157863;
				#else
				float4 staticSwitch176_g157860 = localSampleMain276_g157863;
				#endif
				half4 Emissive_MaskTex201_g157860 = staticSwitch176_g157860;
				float clampResult17_g157867 = clamp( (Emissive_MaskTex201_g157860).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g157866 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g157866 = ( _EmissiveMaskRemap.y - temp_output_7_0_g157866 );
				float lerpResult302_g157860 = lerp( 1.0 , saturate( ( ( clampResult17_g157867 - temp_output_7_0_g157866 ) / ( temp_output_10_0_g157866 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g157860 = lerpResult302_g157860;
				#else
				float staticSwitch190_g157860 = 1.0;
				#endif
				half Emissive_Mask103_g157860 = staticSwitch190_g157860;
				float temp_output_279_0_g157860 = ( Emissive_MeshMask221_g157860 * Emissive_Mask103_g157860 );
				float3 appendResult293_g157860 = (float3(temp_output_279_0_g157860 , temp_output_279_0_g157860 , temp_output_279_0_g157860));
				half3 Local_EmissiveColor278_g157860 = appendResult293_g157860;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g157862 = Data204_g157340;
				float Out_Dummy15_g157862 = 0;
				float4 Out_CoatParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157862 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157862 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157862 = Data15_g157862.Dummy;
				Out_CoatParams15_g157862 = Data15_g157862.CoatParams;
				Out_PaintParams15_g157862 = Data15_g157862.PaintParams;
				Out_GlowParams15_g157862 = Data15_g157862.GlowParams;
				Out_AtmoParams15_g157862= Data15_g157862.AtmoParams;
				Out_FormParams15_g157862 = Data15_g157862.FormParams;
				Out_LandParams15_g157862 = Data15_g157862.LandParams;
				Out_WindParams15_g157862 = Data15_g157862.WindParams;
				Out_PushParams15_g157862 = Data15_g157862.PushParams;
				}
				half4 Global_GlowParams179_g157860 = Out_GlowParams15_g157862;
				float3 lerpResult299_g157860 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g157860).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g157860 = lerpResult299_g157860;
				#else
				float3 staticSwitch228_g157860 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g157860 = staticSwitch228_g157860;
				half3 Local_EmissiveValue88_g157860 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g157860 );
				half3 Emissive_Blend260_g157860 = ( ( (Visual_Emissive255_g157860).xyz * Local_EmissiveColor278_g157860 ) * Local_EmissiveValue88_g157860 );
				float3 temp_output_3_0_g157870 = Emissive_Blend260_g157860;
				float temp_output_15_0_g157870 = _emissive_power_value;
				float3 temp_output_23_0_g157870 = ( temp_output_3_0_g157870 * temp_output_15_0_g157870 );
				float4 appendResult295_g157860 = (float4(temp_output_23_0_g157870 , Emissive_Mask103_g157860));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g157860 = appendResult295_g157860;
				#else
				float4 staticSwitch129_g157860 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g157860 = staticSwitch129_g157860;
				float4 In_Emissive3_g157872 = Final_Emissive184_g157860;
				float In_Grayscale3_g157872 = Out_Grayscale4_g157871;
				float In_Luminosity3_g157872 = Out_Luminosity4_g157871;
				float temp_output_297_11_g157860 = Out_MultiMask4_g157871;
				float In_MultiMask3_g157872 = temp_output_297_11_g157860;
				float In_AlphaClip3_g157872 = Out_AlphaClip4_g157871;
				float In_AlphaFade3_g157872 = Out_AlphaFade4_g157871;
				float3 In_Translucency3_g157872 = Out_Translucency4_g157871;
				float In_Transmission3_g157872 = Out_Transmission4_g157871;
				float In_Thickness3_g157872 = Out_Thickness4_g157871;
				float In_Diffusion3_g157872 = Out_Diffusion4_g157871;
				{
				Data3_g157872.Dummy = In_Dummy3_g157872;
				Data3_g157872.Albedo = In_Albedo3_g157872;
				Data3_g157872.NormalTS = In_NormalTS3_g157872;
				Data3_g157872.NormalWS = In_NormalWS3_g157872;
				Data3_g157872.Shader = In_Shader3_g157872;
				Data3_g157872.Emissive= In_Emissive3_g157872;
				Data3_g157872.MultiMask = In_MultiMask3_g157872;
				Data3_g157872.Grayscale = In_Grayscale3_g157872;
				Data3_g157872.Luminosity = In_Luminosity3_g157872;
				Data3_g157872.AlphaClip = In_AlphaClip3_g157872;
				Data3_g157872.AlphaFade = In_AlphaFade3_g157872;
				Data3_g157872.Translucency = In_Translucency3_g157872;
				Data3_g157872.Transmission = In_Transmission3_g157872;
				Data3_g157872.Thickness = In_Thickness3_g157872;
				Data3_g157872.Diffusion = In_Diffusion3_g157872;
				}
				TVEVisualData Data4_g157882 = Data3_g157872;
				float Out_Dummy4_g157882 = 0;
				float3 Out_Albedo4_g157882 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157882 = float2( 0,0 );
				float3 Out_NormalWS4_g157882 = float3( 0,0,0 );
				float4 Out_Shader4_g157882 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157882 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157882 = 0;
				float Out_Grayscale4_g157882 = 0;
				float Out_Luminosity4_g157882 = 0;
				float Out_AlphaClip4_g157882 = 0;
				float Out_AlphaFade4_g157882 = 0;
				float3 Out_Translucency4_g157882 = float3( 0,0,0 );
				float Out_Transmission4_g157882 = 0;
				float Out_Thickness4_g157882 = 0;
				float Out_Diffusion4_g157882 = 0;
				{
				Out_Dummy4_g157882 = Data4_g157882.Dummy;
				Out_Albedo4_g157882 = Data4_g157882.Albedo;
				Out_NormalTS4_g157882 = Data4_g157882.NormalTS;
				Out_NormalWS4_g157882 = Data4_g157882.NormalWS;
				Out_Shader4_g157882 = Data4_g157882.Shader;
				Out_Emissive4_g157882= Data4_g157882.Emissive;
				Out_MultiMask4_g157882 = Data4_g157882.MultiMask;
				Out_Grayscale4_g157882 = Data4_g157882.Grayscale;
				Out_Luminosity4_g157882= Data4_g157882.Luminosity;
				Out_AlphaClip4_g157882 = Data4_g157882.AlphaClip;
				Out_AlphaFade4_g157882 = Data4_g157882.AlphaFade;
				Out_Translucency4_g157882 = Data4_g157882.Translucency;
				Out_Transmission4_g157882 = Data4_g157882.Transmission;
				Out_Thickness4_g157882 = Data4_g157882.Thickness;
				Out_Diffusion4_g157882 = Data4_g157882.Diffusion;
				}
				half3 Visual_Albedo199_g157881 = Out_Albedo4_g157882;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g157881 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g157881 );
				half Visual_Transmission138_g157881 = Out_Transmission4_g157882;
				half Subsurface_Value268_g157881 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g157885 = Data204_g157340;
				float Out_Dummy15_g157885 = 0;
				float4 Out_CoatParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g157885 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g157885 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157885 = Data15_g157885.Dummy;
				Out_CoatParams15_g157885 = Data15_g157885.CoatParams;
				Out_PaintParams15_g157885 = Data15_g157885.PaintParams;
				Out_GlowParams15_g157885 = Data15_g157885.GlowParams;
				Out_AtmoParams15_g157885= Data15_g157885.AtmoParams;
				Out_FormParams15_g157885 = Data15_g157885.FormParams;
				Out_LandParams15_g157885 = Data15_g157885.LandParams;
				Out_WindParams15_g157885 = Data15_g157885.WindParams;
				Out_PushParams15_g157885 = Data15_g157885.PushParams;
				}
				half4 Global_GlowParams373_g157881 = Out_GlowParams15_g157885;
				float lerpResult403_g157881 = lerp( 1.0 , saturate( (Global_GlowParams373_g157881).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g157881 = lerpResult403_g157881;
				#else
				float staticSwitch367_g157881 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g157881 = staticSwitch367_g157881;
				float temp_output_301_11_g157881 = Out_MultiMask4_g157882;
				half Visual_MultiMask292_g157881 = temp_output_301_11_g157881;
				float lerpResult293_g157881 = lerp( 1.0 , Visual_MultiMask292_g157881 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g157881 = lerpResult293_g157881;
				half Custom_Mask363_g157881 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g157881 = ( Visual_Transmission138_g157881 * Subsurface_Value268_g157881 * Subsurface_GlobalMask369_g157881 * Subsurface_MultiMask296_g157881 * Custom_Mask363_g157881 );
				#else
				float staticSwitch345_g157881 = 0.0;
				#endif
				half Final_Transmission269_g157881 = staticSwitch345_g157881;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g157881 = ( Subsurface_Color264_g157881 * Final_Transmission269_g157881 * 10.0 );
				#else
				float3 staticSwitch348_g157881 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g157881 = staticSwitch348_g157881;
				TVEModelData Data15_g157884 = Data16_g157339;
				float Out_Dummy15_g157884 = 0;
				float3 Out_PositionOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157884 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157884 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157884 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157884 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157884 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157884 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157884 = float3( 0,0,0 );
				float4 Out_VertexData15_g157884 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157884 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157884 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157884 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g157884 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g157884 = Data15_g157884.Dummy;
				Out_PositionOS15_g157884 = Data15_g157884.PositionOS;
				Out_PositionWS15_g157884 = Data15_g157884.PositionWS;
				Out_PositionWO15_g157884 = Data15_g157884.PositionWO;
				Out_PositionRawOS15_g157884 = Data15_g157884.PositionRawOS;
				Out_PositionAddOS15_g157884 = Data15_g157884.PositionAddOS;
				Out_PivotOS15_g157884 = Data15_g157884.PivotOS;
				Out_PivotWS15_g157884 = Data15_g157884.PivotWS;
				Out_PivotWO15_g157884 = Data15_g157884.PivotWO;
				Out_NormalOS15_g157884 = Data15_g157884.NormalOS;
				Out_NormalWS15_g157884 = Data15_g157884.NormalWS;
				Out_NormalRawOS15_g157884 = Data15_g157884.NormalRawOS;
				Out_NormalRawWS15_g157884 = Data15_g157884.NormalRawWS;
				Out_TangentOS15_g157884 = Data15_g157884.TangentOS;
				Out_ViewDirWS15_g157884 = Data15_g157884.ViewDirWS;
				Out_VertexData15_g157884 = Data15_g157884.VertexData;
				Out_MotionData15_g157884 = Data15_g157884.MotionData;
				Out_BoundsData15_g157884 = Data15_g157884.BoundsData;
				Out_RotationData15_g157884 = Data15_g157884.RotationData;
				Out_FragmentData15_g157884 = Data15_g157884.FragmentData;
				}
				half3 Model_ViewDirWS392_g157881 = Out_ViewDirWS15_g157884;
				float dotResult324_g157881 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g157881 );
				float saferPower323_g157881 = abs( saturate( dotResult324_g157881 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g157881 = 0.0;
				#else
				float staticSwitch330_g157881 = ( pow( saferPower323_g157881 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g157881 = staticSwitch330_g157881;
				float3 temp_output_6_0_g157886 = ( Final_Translucency254_g157881 * Mask_Subsurface_View320_g157881 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g157886 = ( temp_output_6_0_g157886 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g157886 = temp_output_6_0_g157886;
				#endif
				half3 Subsurface_Approximation333_g157881 = staticSwitch14_g157886;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g157881 = ( Visual_Albedo199_g157881 + Subsurface_Approximation333_g157881 );
				#else
				float3 staticSwitch353_g157881 = Visual_Albedo199_g157881;
				#endif
				half3 Final_Albedo312_g157881 = staticSwitch353_g157881;
				float3 In_Albedo3_g157883 = Final_Albedo312_g157881;
				float2 In_NormalTS3_g157883 = Out_NormalTS4_g157882;
				float3 In_NormalWS3_g157883 = Out_NormalWS4_g157882;
				float4 In_Shader3_g157883 = Out_Shader4_g157882;
				float4 In_Emissive3_g157883 = Out_Emissive4_g157882;
				float In_Grayscale3_g157883 = Out_Grayscale4_g157882;
				float In_Luminosity3_g157883 = Out_Luminosity4_g157882;
				float In_MultiMask3_g157883 = temp_output_301_11_g157881;
				float In_AlphaClip3_g157883 = Out_AlphaClip4_g157882;
				float In_AlphaFade3_g157883 = Out_AlphaFade4_g157882;
				float3 In_Translucency3_g157883 = Final_Translucency254_g157881;
				float In_Transmission3_g157883 = Final_Transmission269_g157881;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g157881 = 0.0;
				#else
				float staticSwitch351_g157881 = 1.0;
				#endif
				half Final_Thickness275_g157881 = staticSwitch351_g157881;
				float In_Thickness3_g157883 = Final_Thickness275_g157881;
				float Final_Diffusion340_g157881 = _SubsurfaceDiffusion;
				float In_Diffusion3_g157883 = Final_Diffusion340_g157881;
				{
				Data3_g157883.Dummy = In_Dummy3_g157883;
				Data3_g157883.Albedo = In_Albedo3_g157883;
				Data3_g157883.NormalTS = In_NormalTS3_g157883;
				Data3_g157883.NormalWS = In_NormalWS3_g157883;
				Data3_g157883.Shader = In_Shader3_g157883;
				Data3_g157883.Emissive= In_Emissive3_g157883;
				Data3_g157883.MultiMask = In_MultiMask3_g157883;
				Data3_g157883.Grayscale = In_Grayscale3_g157883;
				Data3_g157883.Luminosity = In_Luminosity3_g157883;
				Data3_g157883.AlphaClip = In_AlphaClip3_g157883;
				Data3_g157883.AlphaFade = In_AlphaFade3_g157883;
				Data3_g157883.Translucency = In_Translucency3_g157883;
				Data3_g157883.Transmission = In_Transmission3_g157883;
				Data3_g157883.Thickness = In_Thickness3_g157883;
				Data3_g157883.Diffusion = In_Diffusion3_g157883;
				}
				TVEVisualData Data4_g157896 = Data3_g157883;
				float Out_Dummy4_g157896 = 0;
				float3 Out_Albedo4_g157896 = float3( 0,0,0 );
				float2 Out_NormalTS4_g157896 = float2( 0,0 );
				float3 Out_NormalWS4_g157896 = float3( 0,0,0 );
				float4 Out_Shader4_g157896 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g157896 = float4( 0,0,0,0 );
				float Out_MultiMask4_g157896 = 0;
				float Out_Grayscale4_g157896 = 0;
				float Out_Luminosity4_g157896 = 0;
				float Out_AlphaClip4_g157896 = 0;
				float Out_AlphaFade4_g157896 = 0;
				float3 Out_Translucency4_g157896 = float3( 0,0,0 );
				float Out_Transmission4_g157896 = 0;
				float Out_Thickness4_g157896 = 0;
				float Out_Diffusion4_g157896 = 0;
				{
				Out_Dummy4_g157896 = Data4_g157896.Dummy;
				Out_Albedo4_g157896 = Data4_g157896.Albedo;
				Out_NormalTS4_g157896 = Data4_g157896.NormalTS;
				Out_NormalWS4_g157896 = Data4_g157896.NormalWS;
				Out_Shader4_g157896 = Data4_g157896.Shader;
				Out_Emissive4_g157896= Data4_g157896.Emissive;
				Out_MultiMask4_g157896 = Data4_g157896.MultiMask;
				Out_Grayscale4_g157896 = Data4_g157896.Grayscale;
				Out_Luminosity4_g157896= Data4_g157896.Luminosity;
				Out_AlphaClip4_g157896 = Data4_g157896.AlphaClip;
				Out_AlphaFade4_g157896 = Data4_g157896.AlphaFade;
				Out_Translucency4_g157896 = Data4_g157896.Translucency;
				Out_Transmission4_g157896 = Data4_g157896.Transmission;
				Out_Thickness4_g157896 = Data4_g157896.Thickness;
				Out_Diffusion4_g157896 = Data4_g157896.Diffusion;
				}
				float temp_output_3_0_g157897 = Out_AlphaClip4_g157896;
				float Alpha19_g157897 = temp_output_3_0_g157897;
				float temp_output_15_0_g157897 = 0.0;
				float Treshold19_g157897 = temp_output_15_0_g157897;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#else
				clip(Alpha19_g157897 - Treshold19_g157897);
				#endif
				#endif
				}
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha19_g157897 * Out_AlphaFade4_g157896 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUILite"
	
	Fallback Off
}
/*ASEBEGIN
Version=19404
Node;AmplifyShaderEditor.FunctionNode;934;-11264,-384;Inherit;False;Block Model;43;;154892;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,193,0,189,0,300,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;935;-10944,-384;Half;False;Model Raw;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;936;-9472,-384;Inherit;False;935;Model Raw;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;937;-9216,-384;Inherit;False;Block Pivots Sub;-1;;154907;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1002;-8832,-384;Inherit;False;Block Lite Motion;477;;157276;d8687cf5f6a8faa449e82fd2b678fe12;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;939;-8448,-384;Inherit;False;Block Transform;-1;;157324;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;990;-8064,-384;Inherit;False;Block Lite Normal;537;;157331;d07450326a8fd9045b27c2ea55f72353;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;941;-7680,-384;Inherit;False;Block Pivots Add;-1;;157337;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;942;-10496,-384;Inherit;False;935;Model Raw;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;943;-7360,-384;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;997;-10240,-384;Inherit;False;Block Lite Global;52;;157340;3cde0aa66f3d8ec4a9b80a215a26f02b;16,315,0,311,0,317,0,321,0,319,0,323,0,337,1,283,0,285,0,282,0,308,0,276,0,349,0,287,0,289,1,348,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;945;-6912,-384;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;946;-9920,-384;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;947;-6656,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;948;-6656,-192;Inherit;False;946;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;949;-6656,-384;Inherit;False;Block Main;114;;157391;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;950;-6272,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;951;-6272,-192;Inherit;False;946;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;952;-6272,-384;Inherit;False;Block Layer;140;;157405;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;953;-5888,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;954;-5888,-384;Inherit;False;Block Detail;187;;157436;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;955;-5504,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;956;-5504,-384;Inherit;False;Block Occlusion;232;;157466;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;958;-5120,-384;Inherit;False;Block Gradient;244;;157476;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1004;-5120,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;959;-4736,-192;Inherit;False;946;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1003;-4736,-384;Inherit;False;Block Highlight;0;;157486;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;194;OBJECT;;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;957;-4736,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;961;-4352,-192;Inherit;False;946;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;960;-4352,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1015;-4352,-384;Inherit;False;Block Lite Overlay;322;;157833;df6d6bbf01172a34387d93d862d3d156;9,821,1,819,1,813,1,908,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;963;-3968,-192;Inherit;False;946;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;996;-3968,-256;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1014;-3968,-384;Inherit;False;Block Emissive;416;;157860;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;966;-2688,-64;Inherit;False;Block Lite Dithering;403;;157875;6e52cef07120daa408f9658182b29574;2,847,1,848,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;967;-2688,0;Inherit;False;Block Lite Perspective;459;;157876;d4a92d6e6eef32d4f945d10292650e0c;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;968;-2688,64;Inherit;False;Block Lite Size Fade;466;;157877;828b7cb552f180f4193fb67dbaaae0ce;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;970;-2688,-320;Inherit;False;Block Lite Tinting;269;;157878;c2bee839afbcbb7499ebde2af2a2b317;3,352,1,377,0,375,1;0;1;COLOR;204
Node;AmplifyShaderEditor.FunctionNode;971;-2688,-256;Inherit;False;Block Lite Dryness;294;;157879;d0ad841a44e589843b633cc1b97af190;3,398,1,440,0,438,1;0;1;COLOR;346
Node;AmplifyShaderEditor.FunctionNode;972;-2688,-128;Inherit;False;Block Lite Cutout;386;;157880;0780bee94024ab547ae8bb1fac250cb1;2,775,1,824,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;973;-3584,-384;Inherit;False;Block Subsurface;440;;157881;d738d295ada6b1f409db6776b5efe789;3,315,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;969;-2688,-384;Inherit;False;Block Lite Variation;257;;157888;3df1ad26aa7a397488e4d172ec7355ef;0;0;1;COLOR;116
Node;AmplifyShaderEditor.FunctionNode;1013;-2688,-192;Inherit;False;Block Lite Wetness;368;;157889;30361f2d9d7742e4db0b62746ed1affc;2,850,1,873,1;0;1;COLOR;566
Node;AmplifyShaderEditor.RegisterLocalVarNode;974;-3264,-384;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.SimpleAddOpNode;975;-2304,-384;Inherit;False;8;8;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;976;-1408,-320;Inherit;False;943;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;977;-1408,-384;Inherit;False;974;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;978;-2112,-384;Half;False;Dummy Data;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;979;-1152,-384;Inherit;False;Block Render;2;;157890;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.GetLocalVarNode;980;-1152,192;Inherit;False;978;Dummy Data;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.RangedFloatNode;988;-1344,-896;Half;False;Property;_IsLiteShader;_IsLiteShader;553;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;991;-1568,-896;Half;False;Property;_IsStandardShader;_IsStandardShader;552;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;992;-1792,-896;Half;False;Property;_IsGeneralShader;_IsGeneralShader;551;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;981;-1232,-768;Half;False;Property;_render_src;_render_src;547;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;982;-1408,-768;Half;False;Property;_render_cull;_render_cull;546;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;2;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;983;-1056,-768;Half;False;Property;_render_dst;_render_dst;548;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;984;-880,-768;Half;False;Property;_render_zw;_render_zw;549;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;985;-704,-768;Half;False;Property;_render_coverage;_render_coverage;550;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;987;-768,128;Inherit;False;Register;-1;;157905;673534ff3248b7442a6471d786096f1f;0;2;6;FLOAT4;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;986;-384,-768;Inherit;False;Base Compile;-1;;157906;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;864;-768,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;866;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;867;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;868;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;869;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;865;-384,-384;Float;False;True;-1;2;TVEShaderGUILite;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit (Lite);28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;0;638375639217095710;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638375639192301279;Deferred Pass;1;0;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;638375639256623195;Vertex Position,InvertActionOnDeselection;0;638375639268379107;0;6;False;True;True;True;True;True;False;;True;0
WireConnection;935;0;934;128
WireConnection;937;146;936;0
WireConnection;1002;146;937;128
WireConnection;939;146;1002;128
WireConnection;990;146;939;128
WireConnection;941;146;990;128
WireConnection;943;0;941;128
WireConnection;997;206;942;0
WireConnection;946;0;997;151
WireConnection;949;225;945;0
WireConnection;952;585;949;106
WireConnection;952;633;947;0
WireConnection;952;974;948;0
WireConnection;954;585;952;552
WireConnection;954;633;950;0
WireConnection;954;971;951;0
WireConnection;956;144;954;552
WireConnection;956;204;953;0
WireConnection;958;144;956;116
WireConnection;958;222;955;0
WireConnection;1003;144;958;116
WireConnection;1003;194;1004;0
WireConnection;1015;572;1003;116
WireConnection;1015;596;957;0
WireConnection;1015;600;959;0
WireConnection;1014;146;1015;566
WireConnection;1014;148;960;0
WireConnection;1014;178;961;0
WireConnection;973;146;1014;183
WireConnection;973;385;996;0
WireConnection;973;371;963;0
WireConnection;974;0;973;183
WireConnection;975;0;969;116
WireConnection;975;1;970;204
WireConnection;975;2;971;346
WireConnection;975;3;1013;566
WireConnection;975;4;972;566
WireConnection;975;5;966;566
WireConnection;975;6;967;128
WireConnection;975;7;968;128
WireConnection;978;0;975;0
WireConnection;979;17;977;0
WireConnection;979;19;976;0
WireConnection;987;6;979;33
WireConnection;987;7;980;0
WireConnection;865;0;979;21
WireConnection;865;1;979;22
WireConnection;865;2;979;34
WireConnection;865;3;979;77
WireConnection;865;6;979;26
WireConnection;865;5;979;27
WireConnection;865;7;979;28
WireConnection;865;15;979;30
WireConnection;865;16;979;32
WireConnection;865;17;987;0
ASEEND*/
//CHKSM=B0533DE1796229B52C267C33BC644DF855F478B3