// Made with Amplify Shader Editor v1.9.4.4
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite)"
{
	Properties
	{
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2000
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Warning, Global Elements and Layers are only available with The Visual Engine Core package., 0, 0)]_GlobalLiteInfo("# Global Lite Info", Float) = 0
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to control the mask for Global Tinting__ Main Colors__ Gradient Tinting and Subsurface Scattering when available. The mask is stored in Main Mask Blue channel. , 0, 10)]_MessageMainMask("# Message Main Mask", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThitdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThitdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		[StyledMessage(Warning, The Variation feature is only available with The Visual Engine Core package., 0, 10)]_VariationLiteInfo("# Variation Lite Info", Float) = 0
		[StyledColoring]_VariationColoring("# Variation Coloring", Color) = (1,1,1,0.6)
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotsValue1("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		[StyledMessage(Warning, The Tinting feature is only available with The Visual Engine Core package., 0, 10)]_TintingLiteInfo("# Tinting Lite Info", Float) = 0
		[StyledColoring]_TintingColoring("# Tinting Coloring", Color) = (1,1,1,0.6)
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		[StyledMessage(Warning, The Dryness feature is only available with The Visual Engine Core package., 0, 10)]_DrynessLiteInfo("# Dryness Lite Info", Float) = 0
		[StyledColoring]_DrynessColoring("# Dryness Coloring", Color) = (1,1,1,0.6)
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		[StyledMessage(Warning, The Overlay Glitter feature is only available with The Visual Engine Core package., 0, 10)]_OverlayLiteInfo("# Overlay Lite Info", Float) = 0
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[StyledColoring]_OverlayColoringOn("# Overlay Coloring On", Color) = (1,1,1,0.6)
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 10)) = 2
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledColoring]_OverlayColoringOff("# Overlay Coloring Off", Color) = (1,1,1,1)
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		[StyledMessage(Warning, The Wetness feature is only available with The Visual Engine Core package., 0, 10)]_WetnessLiteInfo("# Wetness Lite Info", Float) = 0
		[StyledColoring]_WetnessColoring("# Wetness Coloring", Color) = (1,1,1,0.6)
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.25
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 1
		[HDR][Space(10)]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		[StyledRemapSlider]_WetnessWaterBaseRemap("Wetness Water Base Mask", Vector) = (0,0,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( 0 , 1)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 10)) = 1
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 10
		[StyledRemapSlider]_WetnessDropsProjRemap("Wetness Drops ProjY Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		[StyledMessage(Warning, The Cutout feature is only available with The Visual Engine Core package., 0, 10)]_CutoutLiteInfo("# Cutout Lite Info", Float) = 0
		[StyledColoring]_CutoutColoring("# Cutout Coloring", Color) = (1,1,1,0.6)
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[StyledSpace(10)]_CutoutSpace("[ Cutout Space ]", Float) = 1
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		[StyledMessage(Warning, The Dither feature is only available with The Visual Engine Core package., 0, 10)]_DitherLiteInfo("# Dither Lite Info", Float) = 0
		[StyledColoring]_DitherColoring("# Dither Coloring", Color) = (1,1,1,0.6)
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 1
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, In HDRP__ the Subsurface Color and Power are fake effects used for artistic control. For physically correct subsurface scattering the Power slider need to be set to 0., 0, 10)]_SubsurfaceHDRPInfo("# SubsurfaceHDRPInfo", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		[StyledMessage(Warning, The Perspective feature is only available with The Visual Engine Core package., 0, 10)]_PerspectiveLiteInfo("# Perspective Lite Info", Float) = 0
		[StyledColoring]_PerspectiveColoring("# Perspective Coloring", Color) = (1,1,1,0.6)
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 4)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		[StyledMessage(Warning, The Size Fade feature is only available with The Visual Engine Core package., 0, 10)]_SizeFadeLiteInfo("# SizeFade Lite Info", Float) = 0
		[StyledColoring]_SizeFadeColoring("# SizeFade Coloring", Color) = (1,1,1,0.6)
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Scale", Range( 0 , 1)) = 1
		[Space(10)]_SizeFadeDistMinValue("Size Fade Min", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Max", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Wave Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Wave Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion 01 Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion 01 Pivots", Range( 0 , 1)) = 0.5
		_MotionBasePhaseValue("Motion 01 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion 01 Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion 01 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion 02 Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion 02 Pivots", Range( 0 , 1)) = 0
		_MotionSmallPhaseValue("Motion 02 Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion 02 Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion 02 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion 03 Intensity", Range( 0 , 8)) = 0
		_MotionTinyTillingValue("Motion 03 Tilling", Range( 0 , 40)) = 20
		_MotionTinySpeedValue("Motion 03 Speed", Range( 0 , 40)) = 20
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion 03 Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion 03 Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionNoiseValue("Motion Wind Noise", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionSpeedValue("Motion Wind Speed", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		[StyledMessage(Warning, The Interaction feature is only available with The Visual Engine Core package., 0, 10)]_InteractionLiteInfo("# Interaction Lite Info", Float) = 0
		[StyledColoring]_InteractionColoring("# Interaction Coloring", Color) = (1,1,1,0.6)
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		[StyledMessage(Warning, Computing normals from vertex transform is only available with The Visual Engine Core package., 0, 10)]_NormalLiteInfo("# Normal Lite Info", Float) = 0
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		[StyledColoring]_NormalColoring("# Normal Coloring", Color) = (1,1,1,0.6)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsLiteShader("_IsLiteShader", Float) = 1
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1
		[HideInInspector] _texcoord( "", 2D ) = "white" {}

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		_TransStrength( "Strength", Range( 0, 50 ) ) = 1
		_TransNormal( "Normal Distortion", Range( 0, 1 ) ) = 0.5
		_TransScattering( "Scattering", Range( 1, 50 ) ) = 2
		_TransDirect( "Direct", Range( 0, 1 ) ) = 0.9
		_TransAmbient( "Ambient", Range( 0, 1 ) ) = 0.1
		_TransShadow( "Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend Off
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				float4 ase_texcoord14 : TEXCOORD14;
				float4 ase_texcoord15 : TEXCOORD15;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = v.vertex.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g152464 = ase_worldPos;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float4x4 break19_g152466 = unity_ObjectToWorld;
				float3 appendResult20_g152466 = (float3(break19_g152466[ 0 ][ 3 ] , break19_g152466[ 1 ][ 3 ] , break19_g152466[ 2 ][ 3 ]));
				half3 ObjectData20_g152468 = appendResult20_g152466;
				half3 WorldData19_g152468 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152468 = WorldData19_g152468;
				#else
				float3 staticSwitch14_g152468 = ObjectData20_g152468;
				#endif
				float3 temp_output_124_0_g152466 = staticSwitch14_g152468;
				float3 temp_output_239_7_g152464 = temp_output_124_0_g152466;
				float4x4 break19_g152470 = unity_ObjectToWorld;
				float3 appendResult20_g152470 = (float3(break19_g152470[ 0 ][ 3 ] , break19_g152470[ 1 ][ 3 ] , break19_g152470[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 temp_output_122_0_g152470 = PivotOS149_g152464;
				float3 PivotsOnly105_g152470 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g152470 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g152472 = ( appendResult20_g152470 + PivotsOnly105_g152470 );
				half3 WorldData19_g152472 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152472 = WorldData19_g152472;
				#else
				float3 staticSwitch14_g152472 = ObjectData20_g152472;
				#endif
				float3 temp_output_124_0_g152470 = staticSwitch14_g152472;
				float3 temp_output_237_7_g152464 = temp_output_124_0_g152470;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#else
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#endif
				float3 vertexToFrag76_g152464 = staticSwitch236_g152464;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = v.normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = v.tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = v.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( v.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( v.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( v.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( v.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ), 0.0 );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158291 = Data16_g158068;
				float Out_Dummy15_g158291 = 0;
				float3 Out_PositionOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158291 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158291 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158291 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158291 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158291 = float3( 0,0,0 );
				float4 Out_VertexData15_g158291 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158291 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158291 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158291 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158291 = Data15_g158291.Dummy;
				Out_PositionOS15_g158291 = Data15_g158291.PositionOS;
				Out_PositionWS15_g158291 = Data15_g158291.PositionWS;
				Out_PositionWO15_g158291 = Data15_g158291.PositionWO;
				Out_PositionRawOS15_g158291 = Data15_g158291.PositionRawOS;
				Out_PositionAddOS15_g158291 = Data15_g158291.PositionAddOS;
				Out_PivotOS15_g158291 = Data15_g158291.PivotOS;
				Out_PivotWS15_g158291 = Data15_g158291.PivotWS;
				Out_PivotWO15_g158291 = Data15_g158291.PivotWO;
				Out_NormalOS15_g158291 = Data15_g158291.NormalOS;
				Out_NormalWS15_g158291 = Data15_g158291.NormalWS;
				Out_NormalRawOS15_g158291 = Data15_g158291.NormalRawOS;
				Out_NormalRawWS15_g158291 = Data15_g158291.NormalRawWS;
				Out_TangentOS15_g158291 = Data15_g158291.TangentOS;
				Out_ViewDirWS15_g158291 = Data15_g158291.ViewDirWS;
				Out_VertexData15_g158291 = Data15_g158291.VertexData;
				Out_MotionData15_g158291 = Data15_g158291.MotionData;
				Out_BoundsData15_g158291 = Data15_g158291.BoundsData;
				Out_RotationData15_g158291 = Data15_g158291.RotationData;
				Out_FragmentData15_g158291 = Data15_g158291.FragmentData;
				}
				float3 temp_output_31_0_g158288 = Out_PositionOS15_g158291;
				
				float4 temp_output_6_0_g158303 = Out_TangentOS15_g158291;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158303 = ( temp_output_6_0_g158303 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158303 = temp_output_6_0_g158303;
				#endif
				
				o.ase_texcoord13.xyz = vertexToFrag73_g152464;
				o.ase_texcoord14.xyz = vertexToFrag76_g152464;
				TVEModelData Data15_g158215 = Data16_g158068;
				float Out_Dummy15_g158215 = 0;
				float3 Out_PositionOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158215 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158215 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158215 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158215 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158215 = float3( 0,0,0 );
				float4 Out_VertexData15_g158215 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158215 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158215 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158215 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158215 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158215 = Data15_g158215.Dummy;
				Out_PositionOS15_g158215 = Data15_g158215.PositionOS;
				Out_PositionWS15_g158215 = Data15_g158215.PositionWS;
				Out_PositionWO15_g158215 = Data15_g158215.PositionWO;
				Out_PositionRawOS15_g158215 = Data15_g158215.PositionRawOS;
				Out_PositionAddOS15_g158215 = Data15_g158215.PositionAddOS;
				Out_PivotOS15_g158215 = Data15_g158215.PivotOS;
				Out_PivotWS15_g158215 = Data15_g158215.PivotWS;
				Out_PivotWO15_g158215 = Data15_g158215.PivotWO;
				Out_NormalOS15_g158215 = Data15_g158215.NormalOS;
				Out_NormalWS15_g158215 = Data15_g158215.NormalWS;
				Out_NormalRawOS15_g158215 = Data15_g158215.NormalRawOS;
				Out_NormalRawWS15_g158215 = Data15_g158215.NormalRawWS;
				Out_TangentOS15_g158215 = Data15_g158215.TangentOS;
				Out_ViewDirWS15_g158215 = Data15_g158215.ViewDirWS;
				Out_VertexData15_g158215 = Data15_g158215.VertexData;
				Out_MotionData15_g158215 = Data15_g158215.MotionData;
				Out_BoundsData15_g158215 = Data15_g158215.BoundsData;
				Out_RotationData15_g158215 = Data15_g158215.RotationData;
				Out_FragmentData15_g158215 = Data15_g158215.FragmentData;
				}
				half4 Model_FragmentData196_g158213 = Out_FragmentData15_g158215;
				float vertexToFrag203_g158213 = (Model_FragmentData196_g158213).w;
				o.ase_texcoord10.z = vertexToFrag203_g158213;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord11 = v.texcoord1.xyzw;
				o.ase_texcoord12 = v.vertex;
				o.ase_texcoord15 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.w = 0;
				o.ase_texcoord13.w = 0;
				o.ase_texcoord14.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g158288 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g158291;
				v.tangent = staticSwitch14_g158303;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g158294 = ( 0.0 );
				float localCompData3_g158263 = ( 0.0 );
				TVEVisualData Data3_g158263 = (TVEVisualData)0;
				half Dummy145_g158261 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g158263 = Dummy145_g158261;
				float localBreakData4_g158262 = ( 0.0 );
				float localCompData3_g158256 = ( 0.0 );
				TVEVisualData Data3_g158256 = (TVEVisualData)0;
				half Dummy145_g158244 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g158256 = Dummy145_g158244;
				float localBreakData4_g158255 = ( 0.0 );
				float localCompData3_g158220 = ( 0.0 );
				TVEVisualData Data3_g158220 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g158217 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g158220 = Dummy594_g158217.r;
				float localBreakData4_g158218 = ( 0.0 );
				float localCompData3_g158216 = ( 0.0 );
				TVEVisualData Data3_g158216 = (TVEVisualData)0;
				float In_Dummy3_g158216 = 0.0;
				float localBreakData4_g158214 = ( 0.0 );
				float localCompData3_g158207 = ( 0.0 );
				TVEVisualData Data3_g158207 = (TVEVisualData)0;
				half Dummy220_g158203 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g158207 = Dummy220_g158203;
				float localBreakData4_g158206 = ( 0.0 );
				float localCompData3_g158195 = ( 0.0 );
				TVEVisualData Data3_g158195 = (TVEVisualData)0;
				half Dummy202_g158193 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g158195 = Dummy202_g158193;
				float localBreakData4_g158194 = ( 0.0 );
				float localCompData3_g158182 = ( 0.0 );
				TVEVisualData Data3_g158182 = (TVEVisualData)0;
				half4 Dummy944_g158164 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g158182 = Dummy944_g158164.x;
				float localBreakData4_g158181 = ( 0.0 );
				float localCompData3_g158145 = ( 0.0 );
				TVEVisualData Data3_g158145 = (TVEVisualData)0;
				half4 Dummy946_g158134 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g158145 = Dummy946_g158134.x;
				float localBreakData4_g158148 = ( 0.0 );
				float localCompData3_g158130 = ( 0.0 );
				TVEVisualData Data3_g158130 = (TVEVisualData)0;
				half4 Dummy130_g158120 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g158130 = Dummy130_g158120.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158131) = _MainAlbedoTex;
				SamplerState Sampler276_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g158120 = _main_coord_value;
				float4 temp_output_37_0_g158131 = Local_Coords180_g158120;
				half4 Coords276_g158131 = temp_output_37_0_g158131;
				half2 TexCoord276_g158131 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158131 = SampleMain( Texture276_g158131 , Sampler276_g158131 , Coords276_g158131 , TexCoord276_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158131) = _MainAlbedoTex;
				SamplerState Sampler275_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158131 = temp_output_37_0_g158131;
				float2 appendResult289_g158131 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158131 = appendResult289_g158131;
				#else
				float2 staticSwitch288_g158131 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158131 = staticSwitch288_g158131;
				half4 localSampleExtra275_g158131 = SampleExtra( Texture275_g158131 , Sampler275_g158131 , Coords275_g158131 , TexCoord275_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158131) = _MainAlbedoTex;
				SamplerState Sampler238_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158131 = temp_output_37_0_g158131;
				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = IN.ase_texcoord12.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 vertexToFrag73_g152464 = IN.ase_texcoord13.xyz;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float3 vertexToFrag76_g152464 = IN.ase_texcoord14.xyz;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(IN.ase_texcoord15.x , 0.0 , IN.ase_texcoord15.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = IN.ase_normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = IN.ase_tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = IN.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( IN.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( IN.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( IN.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( IN.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = IN.ase_texcoord9.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ) );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158121 = Data16_g158068;
				float Out_Dummy15_g158121 = 0;
				float3 Out_PositionOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158121 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158121 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158121 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158121 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158121 = float3( 0,0,0 );
				float4 Out_VertexData15_g158121 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158121 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158121 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158121 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158121 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158121 = Data15_g158121.Dummy;
				Out_PositionOS15_g158121 = Data15_g158121.PositionOS;
				Out_PositionWS15_g158121 = Data15_g158121.PositionWS;
				Out_PositionWO15_g158121 = Data15_g158121.PositionWO;
				Out_PositionRawOS15_g158121 = Data15_g158121.PositionRawOS;
				Out_PositionAddOS15_g158121 = Data15_g158121.PositionAddOS;
				Out_PivotOS15_g158121 = Data15_g158121.PivotOS;
				Out_PivotWS15_g158121 = Data15_g158121.PivotWS;
				Out_PivotWO15_g158121 = Data15_g158121.PivotWO;
				Out_NormalOS15_g158121 = Data15_g158121.NormalOS;
				Out_NormalWS15_g158121 = Data15_g158121.NormalWS;
				Out_NormalRawOS15_g158121 = Data15_g158121.NormalRawOS;
				Out_NormalRawWS15_g158121 = Data15_g158121.NormalRawWS;
				Out_TangentOS15_g158121 = Data15_g158121.TangentOS;
				Out_ViewDirWS15_g158121 = Data15_g158121.ViewDirWS;
				Out_VertexData15_g158121 = Data15_g158121.VertexData;
				Out_MotionData15_g158121 = Data15_g158121.MotionData;
				Out_BoundsData15_g158121 = Data15_g158121.BoundsData;
				Out_RotationData15_g158121 = Data15_g158121.RotationData;
				Out_FragmentData15_g158121 = Data15_g158121.FragmentData;
				}
				half3 Model_PositionWO222_g158120 = Out_PositionWO15_g158121;
				float3 temp_output_279_0_g158131 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158131 = temp_output_279_0_g158131;
				half4 localSamplePlanar2D238_g158131 = SamplePlanar2D( Texture238_g158131 , Sampler238_g158131 , Coords238_g158131 , WorldPosition238_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158131) = _MainAlbedoTex;
				SamplerState Sampler246_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition246_g158131 = temp_output_279_0_g158131;
				half3 Model_NormalWS226_g158120 = Out_NormalWS15_g158121;
				float3 temp_output_280_0_g158131 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158131 = temp_output_280_0_g158131;
				half4 localSamplePlanar3D246_g158131 = SamplePlanar3D( Texture246_g158131 , Sampler246_g158131 , Coords246_g158131 , WorldPosition246_g158131 , WorldNormal246_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158131) = _MainAlbedoTex;
				SamplerState Sampler234_g158131 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158131 = temp_output_37_0_g158131;
				float3 WorldPosition234_g158131 = temp_output_279_0_g158131;
				float4 localSampleStochastic2D234_g158131 = SampleStochastic2D( Texture234_g158131 , Sampler234_g158131 , Coords234_g158131 , WorldPosition234_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158131) = _MainAlbedoTex;
				SamplerState Sampler263_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition263_g158131 = temp_output_279_0_g158131;
				half3 WorldNormal263_g158131 = temp_output_280_0_g158131;
				half4 localSampleStochastic3D263_g158131 = SampleStochastic3D( Texture263_g158131 , Sampler263_g158131 , Coords263_g158131 , WorldPosition263_g158131 , WorldNormal263_g158131 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g158120 = localSampleExtra275_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g158120 = localSamplePlanar2D238_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g158120 = localSamplePlanar3D246_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g158120 = localSampleStochastic2D234_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g158120 = localSampleStochastic3D263_g158131;
				#else
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#endif
				half4 Local_AlbedoTex185_g158120 = staticSwitch184_g158120;
				float3 lerpResult53_g158120 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g158120).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g158120 = lerpResult53_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158133) = _MainShaderTex;
				SamplerState Sampler276_g158133 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158133 = Local_Coords180_g158120;
				half4 Coords276_g158133 = temp_output_37_0_g158133;
				half2 TexCoord276_g158133 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158133 = SampleMain( Texture276_g158133 , Sampler276_g158133 , Coords276_g158133 , TexCoord276_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158133) = _MainShaderTex;
				SamplerState Sampler275_g158133 = sampler_Linear_Repeat;
				half4 Coords275_g158133 = temp_output_37_0_g158133;
				float2 appendResult289_g158133 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158133 = appendResult289_g158133;
				#else
				float2 staticSwitch288_g158133 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158133 = staticSwitch288_g158133;
				half4 localSampleExtra275_g158133 = SampleExtra( Texture275_g158133 , Sampler275_g158133 , Coords275_g158133 , TexCoord275_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158133) = _MainShaderTex;
				SamplerState Sampler238_g158133 = sampler_Linear_Repeat;
				half4 Coords238_g158133 = temp_output_37_0_g158133;
				float3 temp_output_279_0_g158133 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158133 = temp_output_279_0_g158133;
				half4 localSamplePlanar2D238_g158133 = SamplePlanar2D( Texture238_g158133 , Sampler238_g158133 , Coords238_g158133 , WorldPosition238_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158133) = _MainShaderTex;
				SamplerState Sampler246_g158133 = sampler_Linear_Repeat;
				half4 Coords246_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition246_g158133 = temp_output_279_0_g158133;
				float3 temp_output_280_0_g158133 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158133 = temp_output_280_0_g158133;
				half4 localSamplePlanar3D246_g158133 = SamplePlanar3D( Texture246_g158133 , Sampler246_g158133 , Coords246_g158133 , WorldPosition246_g158133 , WorldNormal246_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158133) = _MainShaderTex;
				SamplerState Sampler234_g158133 = sampler_Linear_Repeat;
				float4 Coords234_g158133 = temp_output_37_0_g158133;
				float3 WorldPosition234_g158133 = temp_output_279_0_g158133;
				float4 localSampleStochastic2D234_g158133 = SampleStochastic2D( Texture234_g158133 , Sampler234_g158133 , Coords234_g158133 , WorldPosition234_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158133) = _MainShaderTex;
				SamplerState Sampler263_g158133 = sampler_Linear_Repeat;
				half4 Coords263_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition263_g158133 = temp_output_279_0_g158133;
				half3 WorldNormal263_g158133 = temp_output_280_0_g158133;
				half4 localSampleStochastic3D263_g158133 = SampleStochastic3D( Texture263_g158133 , Sampler263_g158133 , Coords263_g158133 , WorldPosition263_g158133 , WorldNormal263_g158133 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g158120 = localSampleExtra275_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g158120 = localSamplePlanar2D238_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g158120 = localSamplePlanar3D246_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g158120 = localSampleStochastic2D234_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g158120 = localSampleStochastic3D263_g158133;
				#else
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#endif
				half4 Local_MasksTex199_g158120 = staticSwitch198_g158120;
				float lerpResult23_g158120 = lerp( 1.0 , (Local_MasksTex199_g158120).y , _MainOcclusionValue);
				float4 appendResult73_g158120 = (float4(( (Local_MasksTex199_g158120).x * _MainMetallicValue ) , lerpResult23_g158120 , (Local_MasksTex199_g158120).z , ( (Local_MasksTex199_g158120).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g158120 = appendResult73_g158120;
				float clampResult17_g158126 = clamp( (Local_Masks109_g158120).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158127 = _MainMultiRemap.x;
				float temp_output_10_0_g158127 = ( _MainMultiRemap.y - temp_output_7_0_g158127 );
				half Local_MultiMask78_g158120 = saturate( ( ( clampResult17_g158126 - temp_output_7_0_g158127 ) / ( temp_output_10_0_g158127 + 0.0001 ) ) );
				float lerpResult58_g158120 = lerp( 1.0 , Local_MultiMask78_g158120 , _MainColorMode);
				float4 lerpResult62_g158120 = lerp( _MainColorTwo , _MainColor , lerpResult58_g158120);
				half3 Local_ColorRGB93_g158120 = (lerpResult62_g158120).rgb;
				half3 Local_Albedo139_g158120 = ( Local_AlbedoRGB107_g158120 * Local_ColorRGB93_g158120 );
				float3 In_Albedo3_g158130 = Local_Albedo139_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158132) = _MainNormalTex;
				SamplerState Sampler276_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g158132 = Local_Coords180_g158120;
				half4 Coords276_g158132 = temp_output_37_0_g158132;
				half2 TexCoord276_g158132 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158132 = SampleMain( Texture276_g158132 , Sampler276_g158132 , Coords276_g158132 , TexCoord276_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158132) = _MainNormalTex;
				SamplerState Sampler275_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158132 = temp_output_37_0_g158132;
				float2 appendResult289_g158132 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158132 = appendResult289_g158132;
				#else
				float2 staticSwitch288_g158132 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158132 = staticSwitch288_g158132;
				half4 localSampleExtra275_g158132 = SampleExtra( Texture275_g158132 , Sampler275_g158132 , Coords275_g158132 , TexCoord275_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158132) = _MainNormalTex;
				SamplerState Sampler238_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158132 = temp_output_37_0_g158132;
				float3 temp_output_279_0_g158132 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158132 = temp_output_279_0_g158132;
				half4 localSamplePlanar2D238_g158132 = SamplePlanar2D( Texture238_g158132 , Sampler238_g158132 , Coords238_g158132 , WorldPosition238_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158132) = _MainNormalTex;
				SamplerState Sampler246_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition246_g158132 = temp_output_279_0_g158132;
				float3 temp_output_280_0_g158132 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158132 = temp_output_280_0_g158132;
				half4 localSamplePlanar3D246_g158132 = SamplePlanar3D( Texture246_g158132 , Sampler246_g158132 , Coords246_g158132 , WorldPosition246_g158132 , WorldNormal246_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158132) = _MainNormalTex;
				SamplerState Sampler234_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158132 = temp_output_37_0_g158132;
				float3 WorldPosition234_g158132 = temp_output_279_0_g158132;
				float4 localSampleStochastic2D234_g158132 = SampleStochastic2D( Texture234_g158132 , Sampler234_g158132 , Coords234_g158132 , WorldPosition234_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158132) = _MainNormalTex;
				SamplerState Sampler263_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition263_g158132 = temp_output_279_0_g158132;
				half3 WorldNormal263_g158132 = temp_output_280_0_g158132;
				half4 localSampleStochastic3D263_g158132 = SampleStochastic3D( Texture263_g158132 , Sampler263_g158132 , Coords263_g158132 , WorldPosition263_g158132 , WorldNormal263_g158132 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g158120 = localSampleExtra275_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g158120 = localSamplePlanar2D238_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g158120 = localSamplePlanar3D246_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g158120 = localSampleStochastic2D234_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g158120 = localSampleStochastic3D263_g158132;
				#else
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#endif
				half4 Local_NormaTex191_g158120 = staticSwitch193_g158120;
				half4 Normal_Packed45_g158122 = Local_NormaTex191_g158120;
				float2 appendResult58_g158122 = (float2(( (Normal_Packed45_g158122).x * (Normal_Packed45_g158122).w ) , (Normal_Packed45_g158122).y));
				half2 Normal_Default50_g158122 = appendResult58_g158122;
				half2 Normal_ASTC41_g158122 = (Normal_Packed45_g158122).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158122 = Normal_ASTC41_g158122;
				#else
				float2 staticSwitch38_g158122 = Normal_Default50_g158122;
				#endif
				half2 Normal_NO_DTX544_g158122 = (Normal_Packed45_g158122).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158122 = Normal_NO_DTX544_g158122;
				#else
				float2 staticSwitch37_g158122 = staticSwitch38_g158122;
				#endif
				float2 temp_output_26_0_g158120 = ( (staticSwitch37_g158122*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g158123 = temp_output_26_0_g158120;
				float2 break71_g158123 = Normal_Planar45_g158123;
				float3 appendResult72_g158123 = (float3(break71_g158123.x , 0.0 , break71_g158123.y));
				float2 temp_output_205_0_g158120 = (mul( ase_worldToTangent, appendResult72_g158123 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#else
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#endif
				half2 Local_NormalTS108_g158120 = staticSwitch204_g158120;
				float2 In_NormalTS3_g158130 = Local_NormalTS108_g158120;
				float3 appendResult68_g158124 = (float3(Local_NormalTS108_g158120 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g158124 = appendResult68_g158124;
				float3 worldNormal74_g158124 = normalize( float3(dot(tanToWorld0,tanNormal74_g158124), dot(tanToWorld1,tanNormal74_g158124), dot(tanToWorld2,tanNormal74_g158124)) );
				half3 Local_NormalWS250_g158120 = worldNormal74_g158124;
				float3 In_NormalWS3_g158130 = Local_NormalWS250_g158120;
				float4 In_Shader3_g158130 = Local_Masks109_g158120;
				float4 In_Emissive3_g158130 = half4(1,1,1,1);
				float3 temp_output_3_0_g158125 = Local_Albedo139_g158120;
				float dotResult20_g158125 = dot( temp_output_3_0_g158125 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g158120 = dotResult20_g158125;
				float In_Grayscale3_g158130 = Local_Grayscale110_g158120;
				float clampResult144_g158120 = clamp( saturate( ( Local_Grayscale110_g158120 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g158120 = clampResult144_g158120;
				float In_Luminosity3_g158130 = Local_Luminosity145_g158120;
				float In_MultiMask3_g158130 = Local_MultiMask78_g158120;
				float temp_output_187_0_g158120 = (Local_AlbedoTex185_g158120).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g158120 = ( temp_output_187_0_g158120 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g158120 = temp_output_187_0_g158120;
				#endif
				half Local_AlphaClip111_g158120 = staticSwitch236_g158120;
				float In_AlphaClip3_g158130 = Local_AlphaClip111_g158120;
				half Local_AlphaFade246_g158120 = (lerpResult62_g158120).a;
				float In_AlphaFade3_g158130 = Local_AlphaFade246_g158120;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g158130 = temp_cast_22;
				float In_Transmission3_g158130 = 1.0;
				float In_Thickness3_g158130 = 0.0;
				float In_Diffusion3_g158130 = 0.0;
				{
				Data3_g158130.Dummy = In_Dummy3_g158130;
				Data3_g158130.Albedo = In_Albedo3_g158130;
				Data3_g158130.NormalTS = In_NormalTS3_g158130;
				Data3_g158130.NormalWS = In_NormalWS3_g158130;
				Data3_g158130.Shader = In_Shader3_g158130;
				Data3_g158130.Emissive= In_Emissive3_g158130;
				Data3_g158130.MultiMask = In_MultiMask3_g158130;
				Data3_g158130.Grayscale = In_Grayscale3_g158130;
				Data3_g158130.Luminosity = In_Luminosity3_g158130;
				Data3_g158130.AlphaClip = In_AlphaClip3_g158130;
				Data3_g158130.AlphaFade = In_AlphaFade3_g158130;
				Data3_g158130.Translucency = In_Translucency3_g158130;
				Data3_g158130.Transmission = In_Transmission3_g158130;
				Data3_g158130.Thickness = In_Thickness3_g158130;
				Data3_g158130.Diffusion = In_Diffusion3_g158130;
				}
				TVEVisualData Data4_g158148 = Data3_g158130;
				float Out_Dummy4_g158148 = 0;
				float3 Out_Albedo4_g158148 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158148 = float2( 0,0 );
				float3 Out_NormalWS4_g158148 = float3( 0,0,0 );
				float4 Out_Shader4_g158148 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158148 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158148 = 0;
				float Out_Grayscale4_g158148 = 0;
				float Out_Luminosity4_g158148 = 0;
				float Out_AlphaClip4_g158148 = 0;
				float Out_AlphaFade4_g158148 = 0;
				float3 Out_Translucency4_g158148 = float3( 0,0,0 );
				float Out_Transmission4_g158148 = 0;
				float Out_Thickness4_g158148 = 0;
				float Out_Diffusion4_g158148 = 0;
				{
				Out_Dummy4_g158148 = Data4_g158148.Dummy;
				Out_Albedo4_g158148 = Data4_g158148.Albedo;
				Out_NormalTS4_g158148 = Data4_g158148.NormalTS;
				Out_NormalWS4_g158148 = Data4_g158148.NormalWS;
				Out_Shader4_g158148 = Data4_g158148.Shader;
				Out_Emissive4_g158148= Data4_g158148.Emissive;
				Out_MultiMask4_g158148 = Data4_g158148.MultiMask;
				Out_Grayscale4_g158148 = Data4_g158148.Grayscale;
				Out_Luminosity4_g158148= Data4_g158148.Luminosity;
				Out_AlphaClip4_g158148 = Data4_g158148.AlphaClip;
				Out_AlphaFade4_g158148 = Data4_g158148.AlphaFade;
				Out_Translucency4_g158148 = Data4_g158148.Translucency;
				Out_Transmission4_g158148 = Data4_g158148.Transmission;
				Out_Thickness4_g158148 = Data4_g158148.Thickness;
				Out_Diffusion4_g158148 = Data4_g158148.Diffusion;
				}
				half3 Visual_Albedo527_g158134 = Out_Albedo4_g158148;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158135) = _SecondAlbedoTex;
				SamplerState Sampler276_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158134 = _second_coord_value;
				float4 temp_output_37_0_g158135 = Local_LayerCoords790_g158134;
				half4 Coords276_g158135 = temp_output_37_0_g158135;
				half2 TexCoord276_g158135 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158135 = SampleMain( Texture276_g158135 , Sampler276_g158135 , Coords276_g158135 , TexCoord276_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158135) = _SecondAlbedoTex;
				SamplerState Sampler275_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158135 = temp_output_37_0_g158135;
				float2 appendResult289_g158135 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158135 = appendResult289_g158135;
				#else
				float2 staticSwitch288_g158135 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158135 = staticSwitch288_g158135;
				half4 localSampleExtra275_g158135 = SampleExtra( Texture275_g158135 , Sampler275_g158135 , Coords275_g158135 , TexCoord275_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158135) = _SecondAlbedoTex;
				SamplerState Sampler238_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158135 = temp_output_37_0_g158135;
				TVEModelData Data15_g158146 = Data16_g158068;
				float Out_Dummy15_g158146 = 0;
				float3 Out_PositionOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158146 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158146 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158146 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158146 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158146 = float3( 0,0,0 );
				float4 Out_VertexData15_g158146 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158146 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158146 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158146 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158146 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158146 = Data15_g158146.Dummy;
				Out_PositionOS15_g158146 = Data15_g158146.PositionOS;
				Out_PositionWS15_g158146 = Data15_g158146.PositionWS;
				Out_PositionWO15_g158146 = Data15_g158146.PositionWO;
				Out_PositionRawOS15_g158146 = Data15_g158146.PositionRawOS;
				Out_PositionAddOS15_g158146 = Data15_g158146.PositionAddOS;
				Out_PivotOS15_g158146 = Data15_g158146.PivotOS;
				Out_PivotWS15_g158146 = Data15_g158146.PivotWS;
				Out_PivotWO15_g158146 = Data15_g158146.PivotWO;
				Out_NormalOS15_g158146 = Data15_g158146.NormalOS;
				Out_NormalWS15_g158146 = Data15_g158146.NormalWS;
				Out_NormalRawOS15_g158146 = Data15_g158146.NormalRawOS;
				Out_NormalRawWS15_g158146 = Data15_g158146.NormalRawWS;
				Out_TangentOS15_g158146 = Data15_g158146.TangentOS;
				Out_ViewDirWS15_g158146 = Data15_g158146.ViewDirWS;
				Out_VertexData15_g158146 = Data15_g158146.VertexData;
				Out_MotionData15_g158146 = Data15_g158146.MotionData;
				Out_BoundsData15_g158146 = Data15_g158146.BoundsData;
				Out_RotationData15_g158146 = Data15_g158146.RotationData;
				Out_FragmentData15_g158146 = Data15_g158146.FragmentData;
				}
				half3 Model_PositionWO636_g158134 = Out_PositionWO15_g158146;
				float3 temp_output_279_0_g158135 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158135 = temp_output_279_0_g158135;
				half4 localSamplePlanar2D238_g158135 = SamplePlanar2D( Texture238_g158135 , Sampler238_g158135 , Coords238_g158135 , WorldPosition238_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158135) = _SecondAlbedoTex;
				SamplerState Sampler246_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition246_g158135 = temp_output_279_0_g158135;
				half3 Model_NormalWS869_g158134 = Out_NormalWS15_g158146;
				float3 temp_output_280_0_g158135 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158135 = temp_output_280_0_g158135;
				half4 localSamplePlanar3D246_g158135 = SamplePlanar3D( Texture246_g158135 , Sampler246_g158135 , Coords246_g158135 , WorldPosition246_g158135 , WorldNormal246_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158135) = _SecondAlbedoTex;
				SamplerState Sampler234_g158135 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158135 = temp_output_37_0_g158135;
				float3 WorldPosition234_g158135 = temp_output_279_0_g158135;
				float4 localSampleStochastic2D234_g158135 = SampleStochastic2D( Texture234_g158135 , Sampler234_g158135 , Coords234_g158135 , WorldPosition234_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158135) = _SecondAlbedoTex;
				SamplerState Sampler263_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition263_g158135 = temp_output_279_0_g158135;
				half3 WorldNormal263_g158135 = temp_output_280_0_g158135;
				half4 localSampleStochastic3D263_g158135 = SampleStochastic3D( Texture263_g158135 , Sampler263_g158135 , Coords263_g158135 , WorldPosition263_g158135 , WorldNormal263_g158135 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158134 = localSampleExtra275_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158134 = localSamplePlanar2D238_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158134 = localSamplePlanar3D246_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158134 = localSampleStochastic2D234_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158134 = localSampleStochastic3D263_g158135;
				#else
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#endif
				half4 Local_AlbedoTex777_g158134 = staticSwitch693_g158134;
				float3 lerpResult716_g158134 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158134).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g158134 = lerpResult716_g158134;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158137) = _SecondShaderTex;
				SamplerState Sampler276_g158137 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158137 = Local_LayerCoords790_g158134;
				half4 Coords276_g158137 = temp_output_37_0_g158137;
				half2 TexCoord276_g158137 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158137 = SampleMain( Texture276_g158137 , Sampler276_g158137 , Coords276_g158137 , TexCoord276_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158137) = _SecondShaderTex;
				SamplerState Sampler275_g158137 = sampler_Linear_Repeat;
				half4 Coords275_g158137 = temp_output_37_0_g158137;
				float2 appendResult289_g158137 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158137 = appendResult289_g158137;
				#else
				float2 staticSwitch288_g158137 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158137 = staticSwitch288_g158137;
				half4 localSampleExtra275_g158137 = SampleExtra( Texture275_g158137 , Sampler275_g158137 , Coords275_g158137 , TexCoord275_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158137) = _SecondShaderTex;
				SamplerState Sampler238_g158137 = sampler_Linear_Repeat;
				half4 Coords238_g158137 = temp_output_37_0_g158137;
				float3 temp_output_279_0_g158137 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158137 = temp_output_279_0_g158137;
				half4 localSamplePlanar2D238_g158137 = SamplePlanar2D( Texture238_g158137 , Sampler238_g158137 , Coords238_g158137 , WorldPosition238_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158137) = _SecondShaderTex;
				SamplerState Sampler246_g158137 = sampler_Linear_Repeat;
				half4 Coords246_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition246_g158137 = temp_output_279_0_g158137;
				float3 temp_output_280_0_g158137 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158137 = temp_output_280_0_g158137;
				half4 localSamplePlanar3D246_g158137 = SamplePlanar3D( Texture246_g158137 , Sampler246_g158137 , Coords246_g158137 , WorldPosition246_g158137 , WorldNormal246_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158137) = _SecondShaderTex;
				SamplerState Sampler234_g158137 = sampler_Linear_Repeat;
				float4 Coords234_g158137 = temp_output_37_0_g158137;
				float3 WorldPosition234_g158137 = temp_output_279_0_g158137;
				float4 localSampleStochastic2D234_g158137 = SampleStochastic2D( Texture234_g158137 , Sampler234_g158137 , Coords234_g158137 , WorldPosition234_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158137) = _SecondShaderTex;
				SamplerState Sampler263_g158137 = sampler_Linear_Repeat;
				half4 Coords263_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition263_g158137 = temp_output_279_0_g158137;
				half3 WorldNormal263_g158137 = temp_output_280_0_g158137;
				half4 localSampleStochastic3D263_g158137 = SampleStochastic3D( Texture263_g158137 , Sampler263_g158137 , Coords263_g158137 , WorldPosition263_g158137 , WorldNormal263_g158137 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158134 = localSampleExtra275_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158134 = localSamplePlanar2D238_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158134 = localSamplePlanar3D246_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158134 = localSampleStochastic2D234_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158134 = localSampleStochastic3D263_g158137;
				#else
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#endif
				half4 Local_ShaderTex775_g158134 = staticSwitch722_g158134;
				float lerpResult739_g158134 = lerp( 1.0 , (Local_ShaderTex775_g158134).y , _SecondOcclusionValue);
				float4 appendResult749_g158134 = (float4(( (Local_ShaderTex775_g158134).x * _SecondMetallicValue ) , lerpResult739_g158134 , (Local_ShaderTex775_g158134).z , ( (Local_ShaderTex775_g158134).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g158134 = appendResult749_g158134;
				float clampResult17_g158141 = clamp( (Local_Masks750_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158142 = _SecondMultiRemap.x;
				float temp_output_10_0_g158142 = ( _SecondMultiRemap.y - temp_output_7_0_g158142 );
				float temp_output_765_0_g158134 = saturate( ( ( clampResult17_g158141 - temp_output_7_0_g158142 ) / ( temp_output_10_0_g158142 + 0.0001 ) ) );
				half Local_MultiMask767_g158134 = temp_output_765_0_g158134;
				float lerpResult705_g158134 = lerp( 1.0 , Local_MultiMask767_g158134 , _SecondColorMode);
				float4 lerpResult706_g158134 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g158134);
				half3 Local_ColorRGB774_g158134 = (lerpResult706_g158134).rgb;
				half3 Local_Albedo768_g158134 = ( Local_AlbedoRGB771_g158134 * Local_ColorRGB774_g158134 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158161 = 2.0;
				#else
				float staticSwitch1_g158161 = 4.594794;
				#endif
				float3 lerpResult985_g158134 = lerp( Local_Albedo768_g158134 , ( Visual_Albedo527_g158134 * Local_Albedo768_g158134 * staticSwitch1_g158161 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158138) = _SecondMaskTex;
				SamplerState Sampler276_g158138 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g158134 = _second_mask_coord_value;
				float4 temp_output_37_0_g158138 = Local_BlendCoords813_g158134;
				half4 Coords276_g158138 = temp_output_37_0_g158138;
				half2 TexCoord276_g158138 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158138 = SampleMain( Texture276_g158138 , Sampler276_g158138 , Coords276_g158138 , TexCoord276_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158138) = _SecondMaskTex;
				SamplerState Sampler275_g158138 = sampler_Linear_Repeat;
				half4 Coords275_g158138 = temp_output_37_0_g158138;
				float2 appendResult289_g158138 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158138 = appendResult289_g158138;
				#else
				float2 staticSwitch288_g158138 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158138 = staticSwitch288_g158138;
				half4 localSampleExtra275_g158138 = SampleExtra( Texture275_g158138 , Sampler275_g158138 , Coords275_g158138 , TexCoord275_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158138) = _SecondMaskTex;
				SamplerState Sampler238_g158138 = sampler_Linear_Repeat;
				half4 Coords238_g158138 = temp_output_37_0_g158138;
				float3 temp_output_279_0_g158138 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158138 = temp_output_279_0_g158138;
				half4 localSamplePlanar2D238_g158138 = SamplePlanar2D( Texture238_g158138 , Sampler238_g158138 , Coords238_g158138 , WorldPosition238_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158138) = _SecondMaskTex;
				SamplerState Sampler246_g158138 = sampler_Linear_Repeat;
				half4 Coords246_g158138 = temp_output_37_0_g158138;
				half3 WorldPosition246_g158138 = temp_output_279_0_g158138;
				float3 temp_output_280_0_g158138 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158138 = temp_output_280_0_g158138;
				half4 localSamplePlanar3D246_g158138 = SamplePlanar3D( Texture246_g158138 , Sampler246_g158138 , Coords246_g158138 , WorldPosition246_g158138 , WorldNormal246_g158138 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158134 = localSampleExtra275_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158134 = localSamplePlanar2D238_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158134 = localSamplePlanar3D246_g158138;
				#else
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#endif
				half4 Local_MaskTex861_g158134 = staticSwitch817_g158134;
				float clampResult17_g158152 = clamp( (Local_MaskTex861_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158151 = _SecondMaskRemap.x;
				float temp_output_10_0_g158151 = ( _SecondMaskRemap.y - temp_output_7_0_g158151 );
				float lerpResult1015_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158152 - temp_output_7_0_g158151 ) / ( temp_output_10_0_g158151 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g158134 = lerpResult1015_g158134;
				#else
				float staticSwitch893_g158134 = 1.0;
				#endif
				half Blend_TexMask429_g158134 = staticSwitch893_g158134;
				half3 Visual_NormalWS951_g158134 = Out_NormalWS4_g158148;
				float clampResult17_g158153 = clamp( saturate( (Visual_NormalWS951_g158134).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158154 = _SecondProjRemap.x;
				float temp_output_10_0_g158154 = ( _SecondProjRemap.y - temp_output_7_0_g158154 );
				float lerpResult996_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158153 - temp_output_7_0_g158154 ) / ( temp_output_10_0_g158154 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g158134 = lerpResult996_g158134;
				#else
				float staticSwitch878_g158134 = 1.0;
				#endif
				half Blend_ProjMask434_g158134 = staticSwitch878_g158134;
				half4 Model_VertexMasks964_g158134 = Out_VertexData15_g158146;
				float4 break965_g158134 = Model_VertexMasks964_g158134;
				float4 break33_g158155 = _second_vert_mode;
				float temp_output_30_0_g158155 = ( break965_g158134.x * break33_g158155.x );
				float temp_output_29_0_g158155 = ( break965_g158134.y * break33_g158155.y );
				float temp_output_31_0_g158155 = ( break965_g158134.z * break33_g158155.z );
				float temp_output_28_0_g158155 = ( temp_output_30_0_g158155 + temp_output_29_0_g158155 + temp_output_31_0_g158155 + ( break965_g158134.w * break33_g158155.w ) );
				float clampResult17_g158149 = clamp( temp_output_28_0_g158155 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158150 = _SecondMeshRemap.x;
				float temp_output_10_0_g158150 = ( _SecondMeshRemap.y - temp_output_7_0_g158150 );
				float lerpResult1017_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158149 - temp_output_7_0_g158150 ) / ( temp_output_10_0_g158150 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g158163 = lerpResult1017_g158134;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158163 = ( temp_output_6_0_g158163 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158163 = temp_output_6_0_g158163;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g158134 = staticSwitch14_g158163;
				#else
				float staticSwitch917_g158134 = 1.0;
				#endif
				half Blend_VertMask918_g158134 = staticSwitch917_g158134;
				float localBuildGlobalData204_g158069 = ( 0.0 );
				TVEGlobalData Data204_g158069 = (TVEGlobalData)0;
				half Dummy211_g158069 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g158069 = Dummy211_g158069;
				float4 temp_output_362_164_g158069 = TVE_CoatParams;
				half4 Coat_Params302_g158069 = temp_output_362_164_g158069;
				float4 In_CoatParams204_g158069 = Coat_Params302_g158069;
				float4 temp_output_361_164_g158069 = TVE_PaintParams;
				half4 Paint_Params71_g158069 = temp_output_361_164_g158069;
				float4 In_PaintParams204_g158069 = Paint_Params71_g158069;
				float4 temp_output_365_163_g158069 = TVE_GlowParams;
				half4 Glow_Params248_g158069 = temp_output_365_163_g158069;
				float4 In_GlowParams204_g158069 = Glow_Params248_g158069;
				float4 temp_output_363_141_g158069 = TVE_AtmoParams;
				half4 Atmo_Params80_g158069 = temp_output_363_141_g158069;
				float4 In_AtmoParams204_g158069 = Atmo_Params80_g158069;
				float4 temp_output_364_139_g158069 = TVE_FormParams;
				half4 Form_Params112_g158069 = temp_output_364_139_g158069;
				float4 In_FormParams204_g158069 = Form_Params112_g158069;
				float4 temp_output_366_145_g158069 = TVE_WindParams;
				half4 Wind_Params88_g158069 = temp_output_366_145_g158069;
				float4 In_WindParams204_g158069 = Wind_Params88_g158069;
				float4 temp_output_367_145_g158069 = TVE_PushParams;
				half4 Push_Params335_g158069 = temp_output_367_145_g158069;
				float4 In_PushParams204_g158069 = Push_Params335_g158069;
				{
				Data204_g158069.Dummy = In_Dummy204_g158069;
				Data204_g158069.CoatParams = In_CoatParams204_g158069;
				Data204_g158069.PaintParams = In_PaintParams204_g158069;
				Data204_g158069.GlowParams = In_GlowParams204_g158069;
				Data204_g158069.AtmoParams = In_AtmoParams204_g158069;
				Data204_g158069.FormParams= In_FormParams204_g158069;
				Data204_g158069.WindParams = In_WindParams204_g158069;
				Data204_g158069.PushParams = In_PushParams204_g158069;
				}
				TVEGlobalData Data15_g158147 = Data204_g158069;
				float Out_Dummy15_g158147 = 0;
				float4 Out_CoatParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158147 = Data15_g158147.Dummy;
				Out_CoatParams15_g158147 = Data15_g158147.CoatParams;
				Out_PaintParams15_g158147 = Data15_g158147.PaintParams;
				Out_GlowParams15_g158147 = Data15_g158147.GlowParams;
				Out_AtmoParams15_g158147= Data15_g158147.AtmoParams;
				Out_FormParams15_g158147 = Data15_g158147.FormParams;
				Out_LandParams15_g158147 = Data15_g158147.LandParams;
				Out_WindParams15_g158147 = Data15_g158147.WindParams;
				Out_PushParams15_g158147 = Data15_g158147.PushParams;
				}
				half4 Global_CoatParams975_g158134 = Out_CoatParams15_g158147;
				float lerpResult1013_g158134 = lerp( 1.0 , (Global_CoatParams975_g158134).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g158134 = lerpResult1013_g158134;
				#else
				float staticSwitch971_g158134 = 1.0;
				#endif
				half Blend_GlobalMask972_g158134 = staticSwitch971_g158134;
				float temp_output_432_0_g158134 = ( _SecondIntensityValue * Blend_TexMask429_g158134 * Blend_ProjMask434_g158134 * Blend_VertMask918_g158134 * Blend_GlobalMask972_g158134 );
				float clampResult17_g158157 = clamp( temp_output_432_0_g158134 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158156 = _SecondBlendRemap.x;
				float temp_output_10_0_g158156 = ( _SecondBlendRemap.y - temp_output_7_0_g158156 );
				half Blend_Mask412_g158134 = ( saturate( ( ( clampResult17_g158157 - temp_output_7_0_g158156 ) / ( temp_output_10_0_g158156 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g158134 = lerp( Visual_Albedo527_g158134 , lerpResult985_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g158134 = lerpResult403_g158134;
				#else
				float3 staticSwitch415_g158134 = Visual_Albedo527_g158134;
				#endif
				half3 Final_Albedo601_g158134 = staticSwitch415_g158134;
				float3 In_Albedo3_g158145 = Final_Albedo601_g158134;
				half2 Visual_NormalTS529_g158134 = Out_NormalTS4_g158148;
				float2 lerpResult40_g158159 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158134 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158136) = _SecondNormalTex;
				SamplerState Sampler276_g158136 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158136 = Local_LayerCoords790_g158134;
				half4 Coords276_g158136 = temp_output_37_0_g158136;
				half2 TexCoord276_g158136 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158136 = SampleMain( Texture276_g158136 , Sampler276_g158136 , Coords276_g158136 , TexCoord276_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158136) = _SecondNormalTex;
				SamplerState Sampler275_g158136 = sampler_Linear_Repeat;
				half4 Coords275_g158136 = temp_output_37_0_g158136;
				float2 appendResult289_g158136 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158136 = appendResult289_g158136;
				#else
				float2 staticSwitch288_g158136 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158136 = staticSwitch288_g158136;
				half4 localSampleExtra275_g158136 = SampleExtra( Texture275_g158136 , Sampler275_g158136 , Coords275_g158136 , TexCoord275_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158136) = _SecondNormalTex;
				SamplerState Sampler238_g158136 = sampler_Linear_Repeat;
				half4 Coords238_g158136 = temp_output_37_0_g158136;
				float3 temp_output_279_0_g158136 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158136 = temp_output_279_0_g158136;
				half4 localSamplePlanar2D238_g158136 = SamplePlanar2D( Texture238_g158136 , Sampler238_g158136 , Coords238_g158136 , WorldPosition238_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158136) = _SecondNormalTex;
				SamplerState Sampler246_g158136 = sampler_Linear_Repeat;
				half4 Coords246_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition246_g158136 = temp_output_279_0_g158136;
				float3 temp_output_280_0_g158136 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158136 = temp_output_280_0_g158136;
				half4 localSamplePlanar3D246_g158136 = SamplePlanar3D( Texture246_g158136 , Sampler246_g158136 , Coords246_g158136 , WorldPosition246_g158136 , WorldNormal246_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158136) = _SecondNormalTex;
				SamplerState Sampler234_g158136 = sampler_Linear_Repeat;
				float4 Coords234_g158136 = temp_output_37_0_g158136;
				float3 WorldPosition234_g158136 = temp_output_279_0_g158136;
				float4 localSampleStochastic2D234_g158136 = SampleStochastic2D( Texture234_g158136 , Sampler234_g158136 , Coords234_g158136 , WorldPosition234_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158136) = _SecondNormalTex;
				SamplerState Sampler263_g158136 = sampler_Linear_Repeat;
				half4 Coords263_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition263_g158136 = temp_output_279_0_g158136;
				half3 WorldNormal263_g158136 = temp_output_280_0_g158136;
				half4 localSampleStochastic3D263_g158136 = SampleStochastic3D( Texture263_g158136 , Sampler263_g158136 , Coords263_g158136 , WorldPosition263_g158136 , WorldNormal263_g158136 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158134 = localSampleExtra275_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158134 = localSamplePlanar2D238_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158134 = localSamplePlanar3D246_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158134 = localSampleStochastic2D234_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158134 = localSampleStochastic3D263_g158136;
				#else
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#endif
				half4 Local_NormalTex776_g158134 = staticSwitch698_g158134;
				half4 Normal_Packed45_g158139 = Local_NormalTex776_g158134;
				float2 appendResult58_g158139 = (float2(( (Normal_Packed45_g158139).x * (Normal_Packed45_g158139).w ) , (Normal_Packed45_g158139).y));
				half2 Normal_Default50_g158139 = appendResult58_g158139;
				half2 Normal_ASTC41_g158139 = (Normal_Packed45_g158139).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158139 = Normal_ASTC41_g158139;
				#else
				float2 staticSwitch38_g158139 = Normal_Default50_g158139;
				#endif
				half2 Normal_NO_DTX544_g158139 = (Normal_Packed45_g158139).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158139 = Normal_NO_DTX544_g158139;
				#else
				float2 staticSwitch37_g158139 = staticSwitch38_g158139;
				#endif
				float2 temp_output_724_0_g158134 = ( (staticSwitch37_g158139*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g158140 = temp_output_724_0_g158134;
				float2 break71_g158140 = Normal_Planar45_g158140;
				float3 appendResult72_g158140 = (float3(break71_g158140.x , 0.0 , break71_g158140.y));
				float2 temp_output_858_0_g158134 = (mul( ase_worldToTangent, appendResult72_g158140 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#endif
				half2 Local_NormalTS729_g158134 = staticSwitch727_g158134;
				float2 temp_output_36_0_g158159 = ( lerpResult40_g158159 + Local_NormalTS729_g158134 );
				float2 lerpResult405_g158134 = lerp( Visual_NormalTS529_g158134 , temp_output_36_0_g158159 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g158134 = lerpResult405_g158134;
				#else
				float2 staticSwitch418_g158134 = Visual_NormalTS529_g158134;
				#endif
				half2 Final_NormalTS612_g158134 = staticSwitch418_g158134;
				float2 In_NormalTS3_g158145 = Final_NormalTS612_g158134;
				float3 appendResult68_g158160 = (float3(Final_NormalTS612_g158134 , 1.0));
				float3 tanNormal74_g158160 = appendResult68_g158160;
				float3 worldNormal74_g158160 = normalize( float3(dot(tanToWorld0,tanNormal74_g158160), dot(tanToWorld1,tanNormal74_g158160), dot(tanToWorld2,tanNormal74_g158160)) );
				half3 Final_NormalWS950_g158134 = worldNormal74_g158160;
				float3 In_NormalWS3_g158145 = Final_NormalWS950_g158134;
				half4 Visual_Shader531_g158134 = Out_Shader4_g158148;
				float4 lerpResult994_g158134 = lerp( Local_Masks750_g158134 , ( Visual_Shader531_g158134 * Local_Masks750_g158134 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g158134 = lerp( Visual_Shader531_g158134 , lerpResult994_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g158134 = lerpResult440_g158134;
				#else
				float4 staticSwitch451_g158134 = Visual_Shader531_g158134;
				#endif
				half4 Final_Masks613_g158134 = staticSwitch451_g158134;
				float4 In_Shader3_g158145 = Final_Masks613_g158134;
				float4 In_Emissive3_g158145 = Out_Emissive4_g158148;
				float3 temp_output_3_0_g158162 = Final_Albedo601_g158134;
				float dotResult20_g158162 = dot( temp_output_3_0_g158162 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158134 = dotResult20_g158162;
				float In_Grayscale3_g158145 = Final_Grayscale615_g158134;
				float clampResult651_g158134 = clamp( saturate( ( Final_Grayscale615_g158134 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158134 = clampResult651_g158134;
				float In_Luminosity3_g158145 = Final_Luminosity652_g158134;
				half Visual_MultiMask547_g158134 = Out_MultiMask4_g158148;
				float lerpResult477_g158134 = lerp( Visual_MultiMask547_g158134 , Local_MultiMask767_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch482_g158134 = lerpResult477_g158134;
				#else
				float staticSwitch482_g158134 = Visual_MultiMask547_g158134;
				#endif
				half Final_MultiMask572_g158134 = staticSwitch482_g158134;
				float In_MultiMask3_g158145 = Final_MultiMask572_g158134;
				half Visual_AlphaClip559_g158134 = Out_AlphaClip4_g158148;
				float temp_output_718_0_g158134 = (Local_AlbedoTex777_g158134).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g158134 = ( temp_output_718_0_g158134 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g158134 = temp_output_718_0_g158134;
				#endif
				half Local_AlphaClip772_g158134 = staticSwitch932_g158134;
				float lerpResult448_g158134 = lerp( Visual_AlphaClip559_g158134 , Local_AlphaClip772_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch564_g158134 = lerpResult448_g158134;
				#else
				float staticSwitch564_g158134 = Visual_AlphaClip559_g158134;
				#endif
				half Final_AlphaClip602_g158134 = staticSwitch564_g158134;
				float In_AlphaClip3_g158145 = Final_AlphaClip602_g158134;
				half Visual_AlphaFade588_g158134 = Out_AlphaFade4_g158148;
				half Local_AlphaFade773_g158134 = (lerpResult706_g158134).a;
				float lerpResult604_g158134 = lerp( Visual_AlphaFade588_g158134 , Local_AlphaFade773_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch608_g158134 = lerpResult604_g158134;
				#else
				float staticSwitch608_g158134 = Visual_AlphaFade588_g158134;
				#endif
				half Final_AlphaFade611_g158134 = staticSwitch608_g158134;
				float In_AlphaFade3_g158145 = Final_AlphaFade611_g158134;
				float3 In_Translucency3_g158145 = Out_Translucency4_g158148;
				float In_Transmission3_g158145 = Out_Transmission4_g158148;
				float In_Thickness3_g158145 = Out_Thickness4_g158148;
				float In_Diffusion3_g158145 = Out_Diffusion4_g158148;
				{
				Data3_g158145.Dummy = In_Dummy3_g158145;
				Data3_g158145.Albedo = In_Albedo3_g158145;
				Data3_g158145.NormalTS = In_NormalTS3_g158145;
				Data3_g158145.NormalWS = In_NormalWS3_g158145;
				Data3_g158145.Shader = In_Shader3_g158145;
				Data3_g158145.Emissive= In_Emissive3_g158145;
				Data3_g158145.MultiMask = In_MultiMask3_g158145;
				Data3_g158145.Grayscale = In_Grayscale3_g158145;
				Data3_g158145.Luminosity = In_Luminosity3_g158145;
				Data3_g158145.AlphaClip = In_AlphaClip3_g158145;
				Data3_g158145.AlphaFade = In_AlphaFade3_g158145;
				Data3_g158145.Translucency = In_Translucency3_g158145;
				Data3_g158145.Transmission = In_Transmission3_g158145;
				Data3_g158145.Thickness = In_Thickness3_g158145;
				Data3_g158145.Diffusion = In_Diffusion3_g158145;
				}
				TVEVisualData Data4_g158181 = Data3_g158145;
				float Out_Dummy4_g158181 = 0;
				float3 Out_Albedo4_g158181 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158181 = float2( 0,0 );
				float3 Out_NormalWS4_g158181 = float3( 0,0,0 );
				float4 Out_Shader4_g158181 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158181 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158181 = 0;
				float Out_Grayscale4_g158181 = 0;
				float Out_Luminosity4_g158181 = 0;
				float Out_AlphaClip4_g158181 = 0;
				float Out_AlphaFade4_g158181 = 0;
				float3 Out_Translucency4_g158181 = float3( 0,0,0 );
				float Out_Transmission4_g158181 = 0;
				float Out_Thickness4_g158181 = 0;
				float Out_Diffusion4_g158181 = 0;
				{
				Out_Dummy4_g158181 = Data4_g158181.Dummy;
				Out_Albedo4_g158181 = Data4_g158181.Albedo;
				Out_NormalTS4_g158181 = Data4_g158181.NormalTS;
				Out_NormalWS4_g158181 = Data4_g158181.NormalWS;
				Out_Shader4_g158181 = Data4_g158181.Shader;
				Out_Emissive4_g158181= Data4_g158181.Emissive;
				Out_MultiMask4_g158181 = Data4_g158181.MultiMask;
				Out_Grayscale4_g158181 = Data4_g158181.Grayscale;
				Out_Luminosity4_g158181= Data4_g158181.Luminosity;
				Out_AlphaClip4_g158181 = Data4_g158181.AlphaClip;
				Out_AlphaFade4_g158181 = Data4_g158181.AlphaFade;
				Out_Translucency4_g158181 = Data4_g158181.Translucency;
				Out_Transmission4_g158181 = Data4_g158181.Transmission;
				Out_Thickness4_g158181 = Data4_g158181.Thickness;
				Out_Diffusion4_g158181 = Data4_g158181.Diffusion;
				}
				half3 Visual_Albedo527_g158164 = Out_Albedo4_g158181;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler276_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158164 = _third_coord_value;
				float4 temp_output_37_0_g158165 = Local_LayerCoords790_g158164;
				half4 Coords276_g158165 = temp_output_37_0_g158165;
				half2 TexCoord276_g158165 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158165 = SampleMain( Texture276_g158165 , Sampler276_g158165 , Coords276_g158165 , TexCoord276_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler275_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158165 = temp_output_37_0_g158165;
				float2 appendResult289_g158165 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158165 = appendResult289_g158165;
				#else
				float2 staticSwitch288_g158165 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158165 = staticSwitch288_g158165;
				half4 localSampleExtra275_g158165 = SampleExtra( Texture275_g158165 , Sampler275_g158165 , Coords275_g158165 , TexCoord275_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler238_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158165 = temp_output_37_0_g158165;
				TVEModelData Data15_g158180 = Data16_g158068;
				float Out_Dummy15_g158180 = 0;
				float3 Out_PositionOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158180 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158180 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158180 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158180 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158180 = float3( 0,0,0 );
				float4 Out_VertexData15_g158180 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158180 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158180 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158180 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158180 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158180 = Data15_g158180.Dummy;
				Out_PositionOS15_g158180 = Data15_g158180.PositionOS;
				Out_PositionWS15_g158180 = Data15_g158180.PositionWS;
				Out_PositionWO15_g158180 = Data15_g158180.PositionWO;
				Out_PositionRawOS15_g158180 = Data15_g158180.PositionRawOS;
				Out_PositionAddOS15_g158180 = Data15_g158180.PositionAddOS;
				Out_PivotOS15_g158180 = Data15_g158180.PivotOS;
				Out_PivotWS15_g158180 = Data15_g158180.PivotWS;
				Out_PivotWO15_g158180 = Data15_g158180.PivotWO;
				Out_NormalOS15_g158180 = Data15_g158180.NormalOS;
				Out_NormalWS15_g158180 = Data15_g158180.NormalWS;
				Out_NormalRawOS15_g158180 = Data15_g158180.NormalRawOS;
				Out_NormalRawWS15_g158180 = Data15_g158180.NormalRawWS;
				Out_TangentOS15_g158180 = Data15_g158180.TangentOS;
				Out_ViewDirWS15_g158180 = Data15_g158180.ViewDirWS;
				Out_VertexData15_g158180 = Data15_g158180.VertexData;
				Out_MotionData15_g158180 = Data15_g158180.MotionData;
				Out_BoundsData15_g158180 = Data15_g158180.BoundsData;
				Out_RotationData15_g158180 = Data15_g158180.RotationData;
				Out_FragmentData15_g158180 = Data15_g158180.FragmentData;
				}
				half3 Model_PositionWO636_g158164 = Out_PositionWO15_g158180;
				float3 temp_output_279_0_g158165 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158165 = temp_output_279_0_g158165;
				half4 localSamplePlanar2D238_g158165 = SamplePlanar2D( Texture238_g158165 , Sampler238_g158165 , Coords238_g158165 , WorldPosition238_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler246_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition246_g158165 = temp_output_279_0_g158165;
				half3 Model_NormalWS869_g158164 = Out_NormalWS15_g158180;
				float3 temp_output_280_0_g158165 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158165 = temp_output_280_0_g158165;
				half4 localSamplePlanar3D246_g158165 = SamplePlanar3D( Texture246_g158165 , Sampler246_g158165 , Coords246_g158165 , WorldPosition246_g158165 , WorldNormal246_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler234_g158165 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158165 = temp_output_37_0_g158165;
				float3 WorldPosition234_g158165 = temp_output_279_0_g158165;
				float4 localSampleStochastic2D234_g158165 = SampleStochastic2D( Texture234_g158165 , Sampler234_g158165 , Coords234_g158165 , WorldPosition234_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler263_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition263_g158165 = temp_output_279_0_g158165;
				half3 WorldNormal263_g158165 = temp_output_280_0_g158165;
				half4 localSampleStochastic3D263_g158165 = SampleStochastic3D( Texture263_g158165 , Sampler263_g158165 , Coords263_g158165 , WorldPosition263_g158165 , WorldNormal263_g158165 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158164 = localSampleExtra275_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158164 = localSamplePlanar2D238_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158164 = localSamplePlanar3D246_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158164 = localSampleStochastic2D234_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158164 = localSampleStochastic3D263_g158165;
				#else
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#endif
				half4 Local_AlbedoTex777_g158164 = staticSwitch693_g158164;
				float3 lerpResult716_g158164 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158164).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g158164 = lerpResult716_g158164;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158167) = _ThirdShaderTex;
				SamplerState Sampler276_g158167 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158167 = Local_LayerCoords790_g158164;
				half4 Coords276_g158167 = temp_output_37_0_g158167;
				half2 TexCoord276_g158167 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158167 = SampleMain( Texture276_g158167 , Sampler276_g158167 , Coords276_g158167 , TexCoord276_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158167) = _ThirdShaderTex;
				SamplerState Sampler275_g158167 = sampler_Linear_Repeat;
				half4 Coords275_g158167 = temp_output_37_0_g158167;
				float2 appendResult289_g158167 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158167 = appendResult289_g158167;
				#else
				float2 staticSwitch288_g158167 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158167 = staticSwitch288_g158167;
				half4 localSampleExtra275_g158167 = SampleExtra( Texture275_g158167 , Sampler275_g158167 , Coords275_g158167 , TexCoord275_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158167) = _ThirdShaderTex;
				SamplerState Sampler238_g158167 = sampler_Linear_Repeat;
				half4 Coords238_g158167 = temp_output_37_0_g158167;
				float3 temp_output_279_0_g158167 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158167 = temp_output_279_0_g158167;
				half4 localSamplePlanar2D238_g158167 = SamplePlanar2D( Texture238_g158167 , Sampler238_g158167 , Coords238_g158167 , WorldPosition238_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158167) = _ThirdShaderTex;
				SamplerState Sampler246_g158167 = sampler_Linear_Repeat;
				half4 Coords246_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition246_g158167 = temp_output_279_0_g158167;
				float3 temp_output_280_0_g158167 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158167 = temp_output_280_0_g158167;
				half4 localSamplePlanar3D246_g158167 = SamplePlanar3D( Texture246_g158167 , Sampler246_g158167 , Coords246_g158167 , WorldPosition246_g158167 , WorldNormal246_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158167) = _ThirdShaderTex;
				SamplerState Sampler234_g158167 = sampler_Linear_Repeat;
				float4 Coords234_g158167 = temp_output_37_0_g158167;
				float3 WorldPosition234_g158167 = temp_output_279_0_g158167;
				float4 localSampleStochastic2D234_g158167 = SampleStochastic2D( Texture234_g158167 , Sampler234_g158167 , Coords234_g158167 , WorldPosition234_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158167) = _ThirdShaderTex;
				SamplerState Sampler263_g158167 = sampler_Linear_Repeat;
				half4 Coords263_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition263_g158167 = temp_output_279_0_g158167;
				half3 WorldNormal263_g158167 = temp_output_280_0_g158167;
				half4 localSampleStochastic3D263_g158167 = SampleStochastic3D( Texture263_g158167 , Sampler263_g158167 , Coords263_g158167 , WorldPosition263_g158167 , WorldNormal263_g158167 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158164 = localSampleExtra275_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158164 = localSamplePlanar2D238_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158164 = localSamplePlanar3D246_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158164 = localSampleStochastic2D234_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158164 = localSampleStochastic3D263_g158167;
				#else
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#endif
				half4 Local_ShaderTex775_g158164 = staticSwitch722_g158164;
				float lerpResult739_g158164 = lerp( 1.0 , (Local_ShaderTex775_g158164).y , _ThirdOcclusionValue);
				float4 appendResult749_g158164 = (float4(( (Local_ShaderTex775_g158164).x * _ThirdMetallicValue ) , lerpResult739_g158164 , (Local_ShaderTex775_g158164).z , ( (Local_ShaderTex775_g158164).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g158164 = appendResult749_g158164;
				float clampResult17_g158170 = clamp( (Local_Masks750_g158164).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158171 = _ThirdMultiRemap.x;
				float temp_output_10_0_g158171 = ( _ThirdMultiRemap.y - temp_output_7_0_g158171 );
				float temp_output_765_0_g158164 = saturate( ( ( clampResult17_g158170 - temp_output_7_0_g158171 ) / ( temp_output_10_0_g158171 + 0.0001 ) ) );
				half Local_MultiMask767_g158164 = temp_output_765_0_g158164;
				float lerpResult705_g158164 = lerp( 1.0 , Local_MultiMask767_g158164 , _ThirdColorMode);
				float4 lerpResult706_g158164 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g158164);
				half3 Local_ColorRGB774_g158164 = (lerpResult706_g158164).rgb;
				half3 Local_Albedo768_g158164 = ( Local_AlbedoRGB771_g158164 * Local_ColorRGB774_g158164 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158189 = 2.0;
				#else
				float staticSwitch1_g158189 = 4.594794;
				#endif
				float3 lerpResult985_g158164 = lerp( Local_Albedo768_g158164 , ( Visual_Albedo527_g158164 * Local_Albedo768_g158164 * staticSwitch1_g158189 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158192) = _ThirdMaskTex;
				SamplerState Sampler276_g158192 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g158164 = _third_mask_coord_value;
				float4 temp_output_37_0_g158192 = Local_MaskCoords813_g158164;
				half4 Coords276_g158192 = temp_output_37_0_g158192;
				half2 TexCoord276_g158192 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158192 = SampleMain( Texture276_g158192 , Sampler276_g158192 , Coords276_g158192 , TexCoord276_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158192) = _ThirdMaskTex;
				SamplerState Sampler275_g158192 = sampler_Linear_Repeat;
				half4 Coords275_g158192 = temp_output_37_0_g158192;
				float2 appendResult289_g158192 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158192 = appendResult289_g158192;
				#else
				float2 staticSwitch288_g158192 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158192 = staticSwitch288_g158192;
				half4 localSampleExtra275_g158192 = SampleExtra( Texture275_g158192 , Sampler275_g158192 , Coords275_g158192 , TexCoord275_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158192) = _ThirdMaskTex;
				SamplerState Sampler238_g158192 = sampler_Linear_Repeat;
				half4 Coords238_g158192 = temp_output_37_0_g158192;
				float3 temp_output_279_0_g158192 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158192 = temp_output_279_0_g158192;
				half4 localSamplePlanar2D238_g158192 = SamplePlanar2D( Texture238_g158192 , Sampler238_g158192 , Coords238_g158192 , WorldPosition238_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158192) = _ThirdMaskTex;
				SamplerState Sampler246_g158192 = sampler_Linear_Repeat;
				half4 Coords246_g158192 = temp_output_37_0_g158192;
				half3 WorldPosition246_g158192 = temp_output_279_0_g158192;
				float3 temp_output_280_0_g158192 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158192 = temp_output_280_0_g158192;
				half4 localSamplePlanar3D246_g158192 = SamplePlanar3D( Texture246_g158192 , Sampler246_g158192 , Coords246_g158192 , WorldPosition246_g158192 , WorldNormal246_g158192 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158164 = localSampleExtra275_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158164 = localSamplePlanar2D238_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158164 = localSamplePlanar3D246_g158192;
				#else
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#endif
				half4 Local_MaskTex861_g158164 = staticSwitch817_g158164;
				float clampResult17_g158175 = clamp( (Local_MaskTex861_g158164).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g158176 = _ThirdMaskRemap.x;
				float temp_output_10_0_g158176 = ( _ThirdMaskRemap.y - temp_output_7_0_g158176 );
				float lerpResult1028_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158175 - temp_output_7_0_g158176 ) / ( temp_output_10_0_g158176 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g158164 = lerpResult1028_g158164;
				#else
				float staticSwitch892_g158164 = 1.0;
				#endif
				half Detail_TexMask429_g158164 = staticSwitch892_g158164;
				half4 Model_VertexMasks960_g158164 = Out_VertexData15_g158180;
				float4 break961_g158164 = Model_VertexMasks960_g158164;
				float4 break33_g158179 = _third_vert_mode;
				float temp_output_30_0_g158179 = ( break961_g158164.x * break33_g158179.x );
				float temp_output_29_0_g158179 = ( break961_g158164.y * break33_g158179.y );
				float temp_output_31_0_g158179 = ( break961_g158164.z * break33_g158179.z );
				float temp_output_28_0_g158179 = ( temp_output_30_0_g158179 + temp_output_29_0_g158179 + temp_output_31_0_g158179 + ( break961_g158164.w * break33_g158179.w ) );
				float clampResult17_g158173 = clamp( temp_output_28_0_g158179 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158174 = _ThirdMeshRemap.x;
				float temp_output_10_0_g158174 = ( _ThirdMeshRemap.y - temp_output_7_0_g158174 );
				float lerpResult1026_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158173 - temp_output_7_0_g158174 ) / ( temp_output_10_0_g158174 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g158191 = lerpResult1026_g158164;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158191 = ( temp_output_6_0_g158191 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158191 = temp_output_6_0_g158191;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g158164 = staticSwitch14_g158191;
				#else
				float staticSwitch917_g158164 = 1.0;
				#endif
				half Blend_VertMask913_g158164 = staticSwitch917_g158164;
				half3 Visual_NormalWS953_g158164 = Out_NormalWS4_g158181;
				float clampResult17_g158177 = clamp( saturate( (Visual_NormalWS953_g158164).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158178 = _ThirdProjRemap.x;
				float temp_output_10_0_g158178 = ( _ThirdProjRemap.y - temp_output_7_0_g158178 );
				float lerpResult1004_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158177 - temp_output_7_0_g158178 ) / ( temp_output_10_0_g158178 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g158164 = lerpResult1004_g158164;
				#else
				float staticSwitch908_g158164 = 1.0;
				#endif
				half Blend_ProjMask912_g158164 = staticSwitch908_g158164;
				TVEGlobalData Data15_g158183 = Data204_g158069;
				float Out_Dummy15_g158183 = 0;
				float4 Out_CoatParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158183 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158183 = Data15_g158183.Dummy;
				Out_CoatParams15_g158183 = Data15_g158183.CoatParams;
				Out_PaintParams15_g158183 = Data15_g158183.PaintParams;
				Out_GlowParams15_g158183 = Data15_g158183.GlowParams;
				Out_AtmoParams15_g158183= Data15_g158183.AtmoParams;
				Out_FormParams15_g158183 = Data15_g158183.FormParams;
				Out_LandParams15_g158183 = Data15_g158183.LandParams;
				Out_WindParams15_g158183 = Data15_g158183.WindParams;
				Out_PushParams15_g158183 = Data15_g158183.PushParams;
				}
				half4 Global_CoatParams972_g158164 = Out_CoatParams15_g158183;
				float lerpResult1023_g158164 = lerp( 1.0 , (Global_CoatParams972_g158164).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g158164 = lerpResult1023_g158164;
				#else
				float staticSwitch965_g158164 = 1.0;
				#endif
				half Blend_GlobalMask968_g158164 = staticSwitch965_g158164;
				float temp_output_432_0_g158164 = ( _ThirdIntensityValue * Detail_TexMask429_g158164 * Blend_VertMask913_g158164 * Blend_ProjMask912_g158164 * Blend_GlobalMask968_g158164 );
				float clampResult17_g158185 = clamp( temp_output_432_0_g158164 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158184 = _ThirdBlendRemap.x;
				float temp_output_10_0_g158184 = ( _ThirdBlendRemap.y - temp_output_7_0_g158184 );
				half Detail_Mask412_g158164 = ( saturate( ( ( clampResult17_g158185 - temp_output_7_0_g158184 ) / ( temp_output_10_0_g158184 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g158164 = lerp( Visual_Albedo527_g158164 , lerpResult985_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g158164 = lerpResult989_g158164;
				#else
				float3 staticSwitch415_g158164 = Visual_Albedo527_g158164;
				#endif
				half3 Final_Albedo601_g158164 = staticSwitch415_g158164;
				float3 In_Albedo3_g158182 = Final_Albedo601_g158164;
				half2 Visual_NormalTS529_g158164 = Out_NormalTS4_g158181;
				float2 lerpResult40_g158187 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158164 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158166) = _ThirdNormalTex;
				SamplerState Sampler276_g158166 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158166 = Local_LayerCoords790_g158164;
				half4 Coords276_g158166 = temp_output_37_0_g158166;
				half2 TexCoord276_g158166 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158166 = SampleMain( Texture276_g158166 , Sampler276_g158166 , Coords276_g158166 , TexCoord276_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158166) = _ThirdNormalTex;
				SamplerState Sampler275_g158166 = sampler_Linear_Repeat;
				half4 Coords275_g158166 = temp_output_37_0_g158166;
				float2 appendResult289_g158166 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158166 = appendResult289_g158166;
				#else
				float2 staticSwitch288_g158166 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158166 = staticSwitch288_g158166;
				half4 localSampleExtra275_g158166 = SampleExtra( Texture275_g158166 , Sampler275_g158166 , Coords275_g158166 , TexCoord275_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158166) = _ThirdNormalTex;
				SamplerState Sampler238_g158166 = sampler_Linear_Repeat;
				half4 Coords238_g158166 = temp_output_37_0_g158166;
				float3 temp_output_279_0_g158166 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158166 = temp_output_279_0_g158166;
				half4 localSamplePlanar2D238_g158166 = SamplePlanar2D( Texture238_g158166 , Sampler238_g158166 , Coords238_g158166 , WorldPosition238_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158166) = _ThirdNormalTex;
				SamplerState Sampler246_g158166 = sampler_Linear_Repeat;
				half4 Coords246_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition246_g158166 = temp_output_279_0_g158166;
				float3 temp_output_280_0_g158166 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158166 = temp_output_280_0_g158166;
				half4 localSamplePlanar3D246_g158166 = SamplePlanar3D( Texture246_g158166 , Sampler246_g158166 , Coords246_g158166 , WorldPosition246_g158166 , WorldNormal246_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158166) = _ThirdNormalTex;
				SamplerState Sampler234_g158166 = sampler_Linear_Repeat;
				float4 Coords234_g158166 = temp_output_37_0_g158166;
				float3 WorldPosition234_g158166 = temp_output_279_0_g158166;
				float4 localSampleStochastic2D234_g158166 = SampleStochastic2D( Texture234_g158166 , Sampler234_g158166 , Coords234_g158166 , WorldPosition234_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158166) = _ThirdNormalTex;
				SamplerState Sampler263_g158166 = sampler_Linear_Repeat;
				half4 Coords263_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition263_g158166 = temp_output_279_0_g158166;
				half3 WorldNormal263_g158166 = temp_output_280_0_g158166;
				half4 localSampleStochastic3D263_g158166 = SampleStochastic3D( Texture263_g158166 , Sampler263_g158166 , Coords263_g158166 , WorldPosition263_g158166 , WorldNormal263_g158166 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158164 = localSampleExtra275_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158164 = localSamplePlanar2D238_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158164 = localSamplePlanar3D246_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158164 = localSampleStochastic2D234_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158164 = localSampleStochastic3D263_g158166;
				#else
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#endif
				half4 Local_NormalTex776_g158164 = staticSwitch698_g158164;
				half4 Normal_Packed45_g158168 = Local_NormalTex776_g158164;
				float2 appendResult58_g158168 = (float2(( (Normal_Packed45_g158168).x * (Normal_Packed45_g158168).w ) , (Normal_Packed45_g158168).y));
				half2 Normal_Default50_g158168 = appendResult58_g158168;
				half2 Normal_ASTC41_g158168 = (Normal_Packed45_g158168).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158168 = Normal_ASTC41_g158168;
				#else
				float2 staticSwitch38_g158168 = Normal_Default50_g158168;
				#endif
				half2 Normal_NO_DTX544_g158168 = (Normal_Packed45_g158168).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158168 = Normal_NO_DTX544_g158168;
				#else
				float2 staticSwitch37_g158168 = staticSwitch38_g158168;
				#endif
				float2 temp_output_724_0_g158164 = ( (staticSwitch37_g158168*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g158169 = temp_output_724_0_g158164;
				float2 break71_g158169 = Normal_Planar45_g158169;
				float3 appendResult72_g158169 = (float3(break71_g158169.x , 0.0 , break71_g158169.y));
				float2 temp_output_858_0_g158164 = (mul( ase_worldToTangent, appendResult72_g158169 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#endif
				half2 Local_NormalTS729_g158164 = staticSwitch727_g158164;
				float2 temp_output_36_0_g158187 = ( lerpResult40_g158187 + Local_NormalTS729_g158164 );
				float2 lerpResult405_g158164 = lerp( Visual_NormalTS529_g158164 , temp_output_36_0_g158187 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g158164 = lerpResult405_g158164;
				#else
				float2 staticSwitch418_g158164 = Visual_NormalTS529_g158164;
				#endif
				half2 Final_NormalTS612_g158164 = staticSwitch418_g158164;
				float2 In_NormalTS3_g158182 = Final_NormalTS612_g158164;
				float3 appendResult68_g158188 = (float3(Final_NormalTS612_g158164 , 1.0));
				float3 tanNormal74_g158188 = appendResult68_g158188;
				float3 worldNormal74_g158188 = normalize( float3(dot(tanToWorld0,tanNormal74_g158188), dot(tanToWorld1,tanNormal74_g158188), dot(tanToWorld2,tanNormal74_g158188)) );
				half3 Final_NormalWS956_g158164 = worldNormal74_g158188;
				float3 In_NormalWS3_g158182 = Final_NormalWS956_g158164;
				half4 Visual_Shader531_g158164 = Out_Shader4_g158181;
				float4 lerpResult1000_g158164 = lerp( Local_Masks750_g158164 , ( Visual_Shader531_g158164 * Local_Masks750_g158164 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g158164 = lerp( Visual_Shader531_g158164 , lerpResult1000_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g158164 = lerpResult998_g158164;
				#else
				float4 staticSwitch451_g158164 = Visual_Shader531_g158164;
				#endif
				half4 Final_Masks613_g158164 = staticSwitch451_g158164;
				float4 In_Shader3_g158182 = Final_Masks613_g158164;
				float4 In_Emissive3_g158182 = Out_Emissive4_g158181;
				float3 temp_output_3_0_g158190 = Final_Albedo601_g158164;
				float dotResult20_g158190 = dot( temp_output_3_0_g158190 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158164 = dotResult20_g158190;
				float In_Grayscale3_g158182 = Final_Grayscale615_g158164;
				float clampResult651_g158164 = clamp( saturate( ( Final_Grayscale615_g158164 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158164 = clampResult651_g158164;
				float In_Luminosity3_g158182 = Final_Luminosity652_g158164;
				half Visual_MultiMask547_g158164 = Out_MultiMask4_g158181;
				float lerpResult477_g158164 = lerp( Visual_MultiMask547_g158164 , Local_MultiMask767_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch482_g158164 = lerpResult477_g158164;
				#else
				float staticSwitch482_g158164 = Visual_MultiMask547_g158164;
				#endif
				half Final_MultiMask572_g158164 = staticSwitch482_g158164;
				float In_MultiMask3_g158182 = Final_MultiMask572_g158164;
				half Visual_AlphaClip559_g158164 = Out_AlphaClip4_g158181;
				float temp_output_718_0_g158164 = (Local_AlbedoTex777_g158164).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g158164 = ( temp_output_718_0_g158164 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g158164 = temp_output_718_0_g158164;
				#endif
				half Local_AlphaClip772_g158164 = staticSwitch924_g158164;
				float lerpResult448_g158164 = lerp( Visual_AlphaClip559_g158164 , Local_AlphaClip772_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch564_g158164 = lerpResult448_g158164;
				#else
				float staticSwitch564_g158164 = Visual_AlphaClip559_g158164;
				#endif
				half Final_AlphaClip602_g158164 = staticSwitch564_g158164;
				float In_AlphaClip3_g158182 = Final_AlphaClip602_g158164;
				half Visual_AlphaFade588_g158164 = Out_AlphaFade4_g158181;
				half Local_AlphaFade773_g158164 = (lerpResult706_g158164).a;
				float lerpResult604_g158164 = lerp( Visual_AlphaFade588_g158164 , Local_AlphaFade773_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch608_g158164 = lerpResult604_g158164;
				#else
				float staticSwitch608_g158164 = Visual_AlphaFade588_g158164;
				#endif
				half Final_AlphaFade611_g158164 = staticSwitch608_g158164;
				float In_AlphaFade3_g158182 = Final_AlphaFade611_g158164;
				float3 In_Translucency3_g158182 = Out_Translucency4_g158181;
				float In_Transmission3_g158182 = Out_Transmission4_g158181;
				float In_Thickness3_g158182 = Out_Thickness4_g158181;
				float In_Diffusion3_g158182 = Out_Diffusion4_g158181;
				{
				Data3_g158182.Dummy = In_Dummy3_g158182;
				Data3_g158182.Albedo = In_Albedo3_g158182;
				Data3_g158182.NormalTS = In_NormalTS3_g158182;
				Data3_g158182.NormalWS = In_NormalWS3_g158182;
				Data3_g158182.Shader = In_Shader3_g158182;
				Data3_g158182.Emissive= In_Emissive3_g158182;
				Data3_g158182.MultiMask = In_MultiMask3_g158182;
				Data3_g158182.Grayscale = In_Grayscale3_g158182;
				Data3_g158182.Luminosity = In_Luminosity3_g158182;
				Data3_g158182.AlphaClip = In_AlphaClip3_g158182;
				Data3_g158182.AlphaFade = In_AlphaFade3_g158182;
				Data3_g158182.Translucency = In_Translucency3_g158182;
				Data3_g158182.Transmission = In_Transmission3_g158182;
				Data3_g158182.Thickness = In_Thickness3_g158182;
				Data3_g158182.Diffusion = In_Diffusion3_g158182;
				}
				TVEVisualData Data4_g158194 = Data3_g158182;
				float Out_Dummy4_g158194 = 0;
				float3 Out_Albedo4_g158194 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158194 = float2( 0,0 );
				float3 Out_NormalWS4_g158194 = float3( 0,0,0 );
				float4 Out_Shader4_g158194 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158194 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158194 = 0;
				float Out_Grayscale4_g158194 = 0;
				float Out_Luminosity4_g158194 = 0;
				float Out_AlphaClip4_g158194 = 0;
				float Out_AlphaFade4_g158194 = 0;
				float3 Out_Translucency4_g158194 = float3( 0,0,0 );
				float Out_Transmission4_g158194 = 0;
				float Out_Thickness4_g158194 = 0;
				float Out_Diffusion4_g158194 = 0;
				{
				Out_Dummy4_g158194 = Data4_g158194.Dummy;
				Out_Albedo4_g158194 = Data4_g158194.Albedo;
				Out_NormalTS4_g158194 = Data4_g158194.NormalTS;
				Out_NormalWS4_g158194 = Data4_g158194.NormalWS;
				Out_Shader4_g158194 = Data4_g158194.Shader;
				Out_Emissive4_g158194= Data4_g158194.Emissive;
				Out_MultiMask4_g158194 = Data4_g158194.MultiMask;
				Out_Grayscale4_g158194 = Data4_g158194.Grayscale;
				Out_Luminosity4_g158194= Data4_g158194.Luminosity;
				Out_AlphaClip4_g158194 = Data4_g158194.AlphaClip;
				Out_AlphaFade4_g158194 = Data4_g158194.AlphaFade;
				Out_Translucency4_g158194 = Data4_g158194.Translucency;
				Out_Transmission4_g158194 = Data4_g158194.Transmission;
				Out_Thickness4_g158194 = Data4_g158194.Thickness;
				Out_Diffusion4_g158194 = Data4_g158194.Diffusion;
				}
				half3 Visual_Albedo127_g158193 = Out_Albedo4_g158194;
				TVEModelData Data15_g158196 = Data16_g158068;
				float Out_Dummy15_g158196 = 0;
				float3 Out_PositionOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158196 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158196 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158196 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158196 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158196 = float3( 0,0,0 );
				float4 Out_VertexData15_g158196 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158196 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158196 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158196 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158196 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158196 = Data15_g158196.Dummy;
				Out_PositionOS15_g158196 = Data15_g158196.PositionOS;
				Out_PositionWS15_g158196 = Data15_g158196.PositionWS;
				Out_PositionWO15_g158196 = Data15_g158196.PositionWO;
				Out_PositionRawOS15_g158196 = Data15_g158196.PositionRawOS;
				Out_PositionAddOS15_g158196 = Data15_g158196.PositionAddOS;
				Out_PivotOS15_g158196 = Data15_g158196.PivotOS;
				Out_PivotWS15_g158196 = Data15_g158196.PivotWS;
				Out_PivotWO15_g158196 = Data15_g158196.PivotWO;
				Out_NormalOS15_g158196 = Data15_g158196.NormalOS;
				Out_NormalWS15_g158196 = Data15_g158196.NormalWS;
				Out_NormalRawOS15_g158196 = Data15_g158196.NormalRawOS;
				Out_NormalRawWS15_g158196 = Data15_g158196.NormalRawWS;
				Out_TangentOS15_g158196 = Data15_g158196.TangentOS;
				Out_ViewDirWS15_g158196 = Data15_g158196.ViewDirWS;
				Out_VertexData15_g158196 = Data15_g158196.VertexData;
				Out_MotionData15_g158196 = Data15_g158196.MotionData;
				Out_BoundsData15_g158196 = Data15_g158196.BoundsData;
				Out_RotationData15_g158196 = Data15_g158196.RotationData;
				Out_FragmentData15_g158196 = Data15_g158196.FragmentData;
				}
				half4 Model_VertexData206_g158193 = Out_VertexData15_g158196;
				float4 break208_g158193 = Model_VertexData206_g158193;
				float4 break33_g158201 = _occlusion_vert_mode;
				float temp_output_30_0_g158201 = ( break208_g158193.x * break33_g158201.x );
				float temp_output_29_0_g158201 = ( break208_g158193.y * break33_g158201.y );
				float temp_output_31_0_g158201 = ( break208_g158193.z * break33_g158201.z );
				float temp_output_28_0_g158201 = ( temp_output_30_0_g158201 + temp_output_29_0_g158201 + temp_output_31_0_g158201 + ( break208_g158193.w * break33_g158201.w ) );
				float temp_output_194_0_g158193 = temp_output_28_0_g158201;
				float clampResult17_g158199 = clamp( temp_output_194_0_g158193 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158198 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g158198 = ( _OcclusionMeshRemap.y - temp_output_7_0_g158198 );
				float temp_output_6_0_g158200 = saturate( ( ( clampResult17_g158199 - temp_output_7_0_g158198 ) / ( temp_output_10_0_g158198 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158200 = ( temp_output_6_0_g158200 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158200 = temp_output_6_0_g158200;
				#endif
				half Occlusion_Mask82_g158193 = staticSwitch14_g158200;
				float3 lerpResult75_g158193 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g158193);
				float3 lerpResult186_g158193 = lerp( Visual_Albedo127_g158193 , ( Visual_Albedo127_g158193 * lerpResult75_g158193 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g158193 = lerpResult186_g158193;
				#else
				float3 staticSwitch171_g158193 = Visual_Albedo127_g158193;
				#endif
				half3 Final_Albedo160_g158193 = staticSwitch171_g158193;
				float3 In_Albedo3_g158195 = Final_Albedo160_g158193;
				float2 In_NormalTS3_g158195 = Out_NormalTS4_g158194;
				float3 In_NormalWS3_g158195 = Out_NormalWS4_g158194;
				float4 In_Shader3_g158195 = Out_Shader4_g158194;
				float4 In_Emissive3_g158195 = Out_Emissive4_g158194;
				float3 temp_output_3_0_g158197 = Final_Albedo160_g158193;
				float dotResult20_g158197 = dot( temp_output_3_0_g158197 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158193 = dotResult20_g158197;
				float In_Grayscale3_g158195 = Final_Grayscale164_g158193;
				float clampResult180_g158193 = clamp( saturate( ( Final_Grayscale164_g158193 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g158193 = clampResult180_g158193;
				float In_Luminosity3_g158195 = Final_Shading181_g158193;
				float In_MultiMask3_g158195 = Out_MultiMask4_g158194;
				float In_AlphaClip3_g158195 = Out_AlphaClip4_g158194;
				float In_AlphaFade3_g158195 = Out_AlphaFade4_g158194;
				float3 In_Translucency3_g158195 = Out_Translucency4_g158194;
				float In_Transmission3_g158195 = Out_Transmission4_g158194;
				float In_Thickness3_g158195 = Out_Thickness4_g158194;
				float In_Diffusion3_g158195 = Out_Diffusion4_g158194;
				{
				Data3_g158195.Dummy = In_Dummy3_g158195;
				Data3_g158195.Albedo = In_Albedo3_g158195;
				Data3_g158195.NormalTS = In_NormalTS3_g158195;
				Data3_g158195.NormalWS = In_NormalWS3_g158195;
				Data3_g158195.Shader = In_Shader3_g158195;
				Data3_g158195.Emissive= In_Emissive3_g158195;
				Data3_g158195.MultiMask = In_MultiMask3_g158195;
				Data3_g158195.Grayscale = In_Grayscale3_g158195;
				Data3_g158195.Luminosity = In_Luminosity3_g158195;
				Data3_g158195.AlphaClip = In_AlphaClip3_g158195;
				Data3_g158195.AlphaFade = In_AlphaFade3_g158195;
				Data3_g158195.Translucency = In_Translucency3_g158195;
				Data3_g158195.Transmission = In_Transmission3_g158195;
				Data3_g158195.Thickness = In_Thickness3_g158195;
				Data3_g158195.Diffusion = In_Diffusion3_g158195;
				}
				TVEVisualData Data4_g158206 = Data3_g158195;
				float Out_Dummy4_g158206 = 0;
				float3 Out_Albedo4_g158206 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158206 = float2( 0,0 );
				float3 Out_NormalWS4_g158206 = float3( 0,0,0 );
				float4 Out_Shader4_g158206 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158206 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158206 = 0;
				float Out_Grayscale4_g158206 = 0;
				float Out_Luminosity4_g158206 = 0;
				float Out_AlphaClip4_g158206 = 0;
				float Out_AlphaFade4_g158206 = 0;
				float3 Out_Translucency4_g158206 = float3( 0,0,0 );
				float Out_Transmission4_g158206 = 0;
				float Out_Thickness4_g158206 = 0;
				float Out_Diffusion4_g158206 = 0;
				{
				Out_Dummy4_g158206 = Data4_g158206.Dummy;
				Out_Albedo4_g158206 = Data4_g158206.Albedo;
				Out_NormalTS4_g158206 = Data4_g158206.NormalTS;
				Out_NormalWS4_g158206 = Data4_g158206.NormalWS;
				Out_Shader4_g158206 = Data4_g158206.Shader;
				Out_Emissive4_g158206= Data4_g158206.Emissive;
				Out_MultiMask4_g158206 = Data4_g158206.MultiMask;
				Out_Grayscale4_g158206 = Data4_g158206.Grayscale;
				Out_Luminosity4_g158206= Data4_g158206.Luminosity;
				Out_AlphaClip4_g158206 = Data4_g158206.AlphaClip;
				Out_AlphaFade4_g158206 = Data4_g158206.AlphaFade;
				Out_Translucency4_g158206 = Data4_g158206.Translucency;
				Out_Transmission4_g158206 = Data4_g158206.Transmission;
				Out_Thickness4_g158206 = Data4_g158206.Thickness;
				Out_Diffusion4_g158206 = Data4_g158206.Diffusion;
				}
				half3 Visual_Albedo127_g158203 = Out_Albedo4_g158206;
				float temp_output_162_11_g158203 = Out_MultiMask4_g158206;
				half Visual_MultiMask196_g158203 = temp_output_162_11_g158203;
				float lerpResult190_g158203 = lerp( 1.0 , Visual_MultiMask196_g158203 , _GradientMultiValue);
				half Gradient_MultiMask194_g158203 = lerpResult190_g158203;
				TVEModelData Data15_g158204 = Data16_g158068;
				float Out_Dummy15_g158204 = 0;
				float3 Out_PositionOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158204 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158204 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158204 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158204 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158204 = float3( 0,0,0 );
				float4 Out_VertexData15_g158204 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158204 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158204 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158204 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158204 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158204 = Data15_g158204.Dummy;
				Out_PositionOS15_g158204 = Data15_g158204.PositionOS;
				Out_PositionWS15_g158204 = Data15_g158204.PositionWS;
				Out_PositionWO15_g158204 = Data15_g158204.PositionWO;
				Out_PositionRawOS15_g158204 = Data15_g158204.PositionRawOS;
				Out_PositionAddOS15_g158204 = Data15_g158204.PositionAddOS;
				Out_PivotOS15_g158204 = Data15_g158204.PivotOS;
				Out_PivotWS15_g158204 = Data15_g158204.PivotWS;
				Out_PivotWO15_g158204 = Data15_g158204.PivotWO;
				Out_NormalOS15_g158204 = Data15_g158204.NormalOS;
				Out_NormalWS15_g158204 = Data15_g158204.NormalWS;
				Out_NormalRawOS15_g158204 = Data15_g158204.NormalRawOS;
				Out_NormalRawWS15_g158204 = Data15_g158204.NormalRawWS;
				Out_TangentOS15_g158204 = Data15_g158204.TangentOS;
				Out_ViewDirWS15_g158204 = Data15_g158204.ViewDirWS;
				Out_VertexData15_g158204 = Data15_g158204.VertexData;
				Out_MotionData15_g158204 = Data15_g158204.MotionData;
				Out_BoundsData15_g158204 = Data15_g158204.BoundsData;
				Out_RotationData15_g158204 = Data15_g158204.RotationData;
				Out_FragmentData15_g158204 = Data15_g158204.FragmentData;
				}
				half4 Model_VertexData224_g158203 = Out_VertexData15_g158204;
				float4 break226_g158203 = Model_VertexData224_g158203;
				float4 break33_g158205 = _gradient_vert_mode;
				float temp_output_30_0_g158205 = ( break226_g158203.x * break33_g158205.x );
				float temp_output_29_0_g158205 = ( break226_g158203.y * break33_g158205.y );
				float temp_output_31_0_g158205 = ( break226_g158203.z * break33_g158205.z );
				float temp_output_28_0_g158205 = ( temp_output_30_0_g158205 + temp_output_29_0_g158205 + temp_output_31_0_g158205 + ( break226_g158203.w * break33_g158205.w ) );
				float temp_output_211_0_g158203 = temp_output_28_0_g158205;
				float clampResult17_g158210 = clamp( temp_output_211_0_g158203 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158211 = _GradientMeshRemap.x;
				float temp_output_10_0_g158211 = ( _GradientMeshRemap.y - temp_output_7_0_g158211 );
				float temp_output_6_0_g158212 = saturate( ( ( clampResult17_g158210 - temp_output_7_0_g158211 ) / ( temp_output_10_0_g158211 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158212 = ( temp_output_6_0_g158212 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158212 = temp_output_6_0_g158212;
				#endif
				half Gradient_VertMask82_g158203 = staticSwitch14_g158212;
				half Gradient_Mask200_g158203 = ( Gradient_MultiMask194_g158203 * Gradient_VertMask82_g158203 );
				float3 lerpResult75_g158203 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g158203);
				float3 lerpResult186_g158203 = lerp( Visual_Albedo127_g158203 , ( Visual_Albedo127_g158203 * lerpResult75_g158203 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g158203 = lerpResult186_g158203;
				#else
				float3 staticSwitch171_g158203 = Visual_Albedo127_g158203;
				#endif
				half3 Final_Albedo160_g158203 = staticSwitch171_g158203;
				float3 In_Albedo3_g158207 = Final_Albedo160_g158203;
				float2 In_NormalTS3_g158207 = Out_NormalTS4_g158206;
				float3 In_NormalWS3_g158207 = Out_NormalWS4_g158206;
				float4 In_Shader3_g158207 = Out_Shader4_g158206;
				float4 In_Emissive3_g158207 = Out_Emissive4_g158206;
				float3 temp_output_3_0_g158208 = Final_Albedo160_g158203;
				float dotResult20_g158208 = dot( temp_output_3_0_g158208 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158203 = dotResult20_g158208;
				float In_Grayscale3_g158207 = Final_Grayscale164_g158203;
				float clampResult180_g158203 = clamp( saturate( ( Final_Grayscale164_g158203 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g158203 = clampResult180_g158203;
				float In_Luminosity3_g158207 = Final_Luminosity181_g158203;
				float In_MultiMask3_g158207 = temp_output_162_11_g158203;
				float In_AlphaClip3_g158207 = Out_AlphaClip4_g158206;
				float In_AlphaFade3_g158207 = Out_AlphaFade4_g158206;
				float3 In_Translucency3_g158207 = Out_Translucency4_g158206;
				float In_Transmission3_g158207 = Out_Transmission4_g158206;
				float In_Thickness3_g158207 = Out_Thickness4_g158206;
				float In_Diffusion3_g158207 = Out_Diffusion4_g158206;
				{
				Data3_g158207.Dummy = In_Dummy3_g158207;
				Data3_g158207.Albedo = In_Albedo3_g158207;
				Data3_g158207.NormalTS = In_NormalTS3_g158207;
				Data3_g158207.NormalWS = In_NormalWS3_g158207;
				Data3_g158207.Shader = In_Shader3_g158207;
				Data3_g158207.Emissive= In_Emissive3_g158207;
				Data3_g158207.MultiMask = In_MultiMask3_g158207;
				Data3_g158207.Grayscale = In_Grayscale3_g158207;
				Data3_g158207.Luminosity = In_Luminosity3_g158207;
				Data3_g158207.AlphaClip = In_AlphaClip3_g158207;
				Data3_g158207.AlphaFade = In_AlphaFade3_g158207;
				Data3_g158207.Translucency = In_Translucency3_g158207;
				Data3_g158207.Transmission = In_Transmission3_g158207;
				Data3_g158207.Thickness = In_Thickness3_g158207;
				Data3_g158207.Diffusion = In_Diffusion3_g158207;
				}
				TVEVisualData Data4_g158214 = Data3_g158207;
				float Out_Dummy4_g158214 = 0;
				float3 Out_Albedo4_g158214 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158214 = float2( 0,0 );
				float3 Out_NormalWS4_g158214 = float3( 0,0,0 );
				float4 Out_Shader4_g158214 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158214 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158214 = 0;
				float Out_Grayscale4_g158214 = 0;
				float Out_Luminosity4_g158214 = 0;
				float Out_AlphaClip4_g158214 = 0;
				float Out_AlphaFade4_g158214 = 0;
				float3 Out_Translucency4_g158214 = float3( 0,0,0 );
				float Out_Transmission4_g158214 = 0;
				float Out_Thickness4_g158214 = 0;
				float Out_Diffusion4_g158214 = 0;
				{
				Out_Dummy4_g158214 = Data4_g158214.Dummy;
				Out_Albedo4_g158214 = Data4_g158214.Albedo;
				Out_NormalTS4_g158214 = Data4_g158214.NormalTS;
				Out_NormalWS4_g158214 = Data4_g158214.NormalWS;
				Out_Shader4_g158214 = Data4_g158214.Shader;
				Out_Emissive4_g158214= Data4_g158214.Emissive;
				Out_MultiMask4_g158214 = Data4_g158214.MultiMask;
				Out_Grayscale4_g158214 = Data4_g158214.Grayscale;
				Out_Luminosity4_g158214= Data4_g158214.Luminosity;
				Out_AlphaClip4_g158214 = Data4_g158214.AlphaClip;
				Out_AlphaFade4_g158214 = Data4_g158214.AlphaFade;
				Out_Translucency4_g158214 = Data4_g158214.Translucency;
				Out_Transmission4_g158214 = Data4_g158214.Transmission;
				Out_Thickness4_g158214 = Data4_g158214.Thickness;
				Out_Diffusion4_g158214 = Data4_g158214.Diffusion;
				}
				half3 Visual_Albedo127_g158213 = Out_Albedo4_g158214;
				float vertexToFrag203_g158213 = IN.ase_texcoord10.z;
				float clampResult208_g158213 = clamp( vertexToFrag203_g158213 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g158213 = ( Visual_Albedo127_g158213 + ( ( Visual_Albedo127_g158213 * Visual_Albedo127_g158213 * 200.0 * _motion_highlight_color ) * clampResult208_g158213 ) );
				#else
				float3 staticSwitch209_g158213 = Visual_Albedo127_g158213;
				#endif
				half3 Final_Albedo160_g158213 = staticSwitch209_g158213;
				float3 In_Albedo3_g158216 = Final_Albedo160_g158213;
				float2 In_NormalTS3_g158216 = Out_NormalTS4_g158214;
				float3 In_NormalWS3_g158216 = Out_NormalWS4_g158214;
				float4 In_Shader3_g158216 = Out_Shader4_g158214;
				float4 In_Emissive3_g158216 = Out_Emissive4_g158214;
				float In_Grayscale3_g158216 = Out_Grayscale4_g158214;
				float In_Luminosity3_g158216 = Out_Luminosity4_g158214;
				float In_MultiMask3_g158216 = Out_MultiMask4_g158214;
				float In_AlphaClip3_g158216 = Out_AlphaClip4_g158214;
				float In_AlphaFade3_g158216 = Out_AlphaFade4_g158214;
				float3 In_Translucency3_g158216 = Out_Translucency4_g158214;
				float In_Transmission3_g158216 = Out_Transmission4_g158214;
				float In_Thickness3_g158216 = Out_Thickness4_g158214;
				float In_Diffusion3_g158216 = Out_Diffusion4_g158214;
				{
				Data3_g158216.Dummy = In_Dummy3_g158216;
				Data3_g158216.Albedo = In_Albedo3_g158216;
				Data3_g158216.NormalTS = In_NormalTS3_g158216;
				Data3_g158216.NormalWS = In_NormalWS3_g158216;
				Data3_g158216.Shader = In_Shader3_g158216;
				Data3_g158216.Emissive= In_Emissive3_g158216;
				Data3_g158216.MultiMask = In_MultiMask3_g158216;
				Data3_g158216.Grayscale = In_Grayscale3_g158216;
				Data3_g158216.Luminosity = In_Luminosity3_g158216;
				Data3_g158216.AlphaClip = In_AlphaClip3_g158216;
				Data3_g158216.AlphaFade = In_AlphaFade3_g158216;
				Data3_g158216.Translucency = In_Translucency3_g158216;
				Data3_g158216.Transmission = In_Transmission3_g158216;
				Data3_g158216.Thickness = In_Thickness3_g158216;
				Data3_g158216.Diffusion = In_Diffusion3_g158216;
				}
				TVEVisualData Data4_g158218 = Data3_g158216;
				float Out_Dummy4_g158218 = 0;
				float3 Out_Albedo4_g158218 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158218 = float2( 0,0 );
				float3 Out_NormalWS4_g158218 = float3( 0,0,0 );
				float4 Out_Shader4_g158218 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158218 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158218 = 0;
				float Out_Grayscale4_g158218 = 0;
				float Out_Luminosity4_g158218 = 0;
				float Out_AlphaClip4_g158218 = 0;
				float Out_AlphaFade4_g158218 = 0;
				float3 Out_Translucency4_g158218 = float3( 0,0,0 );
				float Out_Transmission4_g158218 = 0;
				float Out_Thickness4_g158218 = 0;
				float Out_Diffusion4_g158218 = 0;
				{
				Out_Dummy4_g158218 = Data4_g158218.Dummy;
				Out_Albedo4_g158218 = Data4_g158218.Albedo;
				Out_NormalTS4_g158218 = Data4_g158218.NormalTS;
				Out_NormalWS4_g158218 = Data4_g158218.NormalWS;
				Out_Shader4_g158218 = Data4_g158218.Shader;
				Out_Emissive4_g158218= Data4_g158218.Emissive;
				Out_MultiMask4_g158218 = Data4_g158218.MultiMask;
				Out_Grayscale4_g158218 = Data4_g158218.Grayscale;
				Out_Luminosity4_g158218= Data4_g158218.Luminosity;
				Out_AlphaClip4_g158218 = Data4_g158218.AlphaClip;
				Out_AlphaFade4_g158218 = Data4_g158218.AlphaFade;
				Out_Translucency4_g158218 = Data4_g158218.Translucency;
				Out_Transmission4_g158218 = Data4_g158218.Transmission;
				Out_Thickness4_g158218 = Data4_g158218.Thickness;
				Out_Diffusion4_g158218 = Data4_g158218.Diffusion;
				}
				half3 Visual_Albedo127_g158217 = Out_Albedo4_g158218;
				float3 temp_output_622_0_g158217 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler238_g158221 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158224 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158224 = ( temp_output_6_0_g158224 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158224 = temp_output_6_0_g158224;
				#endif
				half4 Overlay_Coords639_g158217 = staticSwitch14_g158224;
				float4 temp_output_37_0_g158221 = Overlay_Coords639_g158217;
				half4 Coords238_g158221 = temp_output_37_0_g158221;
				TVEModelData Data15_g158225 = Data16_g158068;
				float Out_Dummy15_g158225 = 0;
				float3 Out_PositionOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158225 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158225 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158225 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158225 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158225 = float3( 0,0,0 );
				float4 Out_VertexData15_g158225 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158225 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158225 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158225 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158225 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158225 = Data15_g158225.Dummy;
				Out_PositionOS15_g158225 = Data15_g158225.PositionOS;
				Out_PositionWS15_g158225 = Data15_g158225.PositionWS;
				Out_PositionWO15_g158225 = Data15_g158225.PositionWO;
				Out_PositionRawOS15_g158225 = Data15_g158225.PositionRawOS;
				Out_PositionAddOS15_g158225 = Data15_g158225.PositionAddOS;
				Out_PivotOS15_g158225 = Data15_g158225.PivotOS;
				Out_PivotWS15_g158225 = Data15_g158225.PivotWS;
				Out_PivotWO15_g158225 = Data15_g158225.PivotWO;
				Out_NormalOS15_g158225 = Data15_g158225.NormalOS;
				Out_NormalWS15_g158225 = Data15_g158225.NormalWS;
				Out_NormalRawOS15_g158225 = Data15_g158225.NormalRawOS;
				Out_NormalRawWS15_g158225 = Data15_g158225.NormalRawWS;
				Out_TangentOS15_g158225 = Data15_g158225.TangentOS;
				Out_ViewDirWS15_g158225 = Data15_g158225.ViewDirWS;
				Out_VertexData15_g158225 = Data15_g158225.VertexData;
				Out_MotionData15_g158225 = Data15_g158225.MotionData;
				Out_BoundsData15_g158225 = Data15_g158225.BoundsData;
				Out_RotationData15_g158225 = Data15_g158225.RotationData;
				Out_FragmentData15_g158225 = Data15_g158225.FragmentData;
				}
				half3 Model_PositionWO602_g158217 = Out_PositionWO15_g158225;
				float3 temp_output_279_0_g158221 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158221 = temp_output_279_0_g158221;
				half4 localSamplePlanar2D238_g158221 = SamplePlanar2D( Texture238_g158221 , Sampler238_g158221 , Coords238_g158221 , WorldPosition238_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler246_g158221 = sampler_Linear_Repeat;
				half4 Coords246_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition246_g158221 = temp_output_279_0_g158221;
				half3 Model_NormalWS712_g158217 = Out_NormalWS15_g158225;
				float3 temp_output_280_0_g158221 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158221 = temp_output_280_0_g158221;
				half4 localSamplePlanar3D246_g158221 = SamplePlanar3D( Texture246_g158221 , Sampler246_g158221 , Coords246_g158221 , WorldPosition246_g158221 , WorldNormal246_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler234_g158221 = sampler_Linear_Repeat;
				float4 Coords234_g158221 = temp_output_37_0_g158221;
				float3 WorldPosition234_g158221 = temp_output_279_0_g158221;
				float4 localSampleStochastic2D234_g158221 = SampleStochastic2D( Texture234_g158221 , Sampler234_g158221 , Coords234_g158221 , WorldPosition234_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler263_g158221 = sampler_Linear_Repeat;
				half4 Coords263_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition263_g158221 = temp_output_279_0_g158221;
				half3 WorldNormal263_g158221 = temp_output_280_0_g158221;
				half4 localSampleStochastic3D263_g158221 = SampleStochastic3D( Texture263_g158221 , Sampler263_g158221 , Coords263_g158221 , WorldPosition263_g158221 , WorldNormal263_g158221 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g158217 = localSamplePlanar3D246_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g158217 = localSampleStochastic2D234_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g158217 = localSampleStochastic3D263_g158221;
				#else
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#endif
				half3 Overlay_Albedo526_g158217 = (staticSwitch676_g158217).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g158217 = ( temp_output_622_0_g158217 * Overlay_Albedo526_g158217 );
				#else
				float3 staticSwitch578_g158217 = temp_output_622_0_g158217;
				#endif
				float3 temp_output_6_0_g158240 = staticSwitch578_g158217;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g158240 = ( temp_output_6_0_g158240 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g158240 = temp_output_6_0_g158240;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158227) = _OverlayMaskTex;
				SamplerState Sampler276_g158227 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158228 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158228 = ( temp_output_6_0_g158228 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158228 = temp_output_6_0_g158228;
				#endif
				half4 Local_MaskCoords886_g158217 = staticSwitch14_g158228;
				float4 temp_output_37_0_g158227 = Local_MaskCoords886_g158217;
				half4 Coords276_g158227 = temp_output_37_0_g158227;
				half2 TexCoord276_g158227 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158227 = SampleMain( Texture276_g158227 , Sampler276_g158227 , Coords276_g158227 , TexCoord276_g158227 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158227) = _OverlayMaskTex;
				SamplerState Sampler275_g158227 = sampler_Linear_Repeat;
				half4 Coords275_g158227 = temp_output_37_0_g158227;
				float2 appendResult289_g158227 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158227 = appendResult289_g158227;
				#else
				float2 staticSwitch288_g158227 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158227 = staticSwitch288_g158227;
				half4 localSampleExtra275_g158227 = SampleExtra( Texture275_g158227 , Sampler275_g158227 , Coords275_g158227 , TexCoord275_g158227 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g158217 = localSampleExtra275_g158227;
				#else
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#endif
				half4 Local_MaskTex885_g158217 = staticSwitch894_g158217;
				float clampResult17_g158242 = clamp( (Local_MaskTex885_g158217).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158243 = _OverlayMaskRemap.x;
				float temp_output_10_0_g158243 = ( _OverlayMaskRemap.y - temp_output_7_0_g158243 );
				float lerpResult898_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158242 - temp_output_7_0_g158243 ) / ( temp_output_10_0_g158243 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g158217 = lerpResult898_g158217;
				#else
				float staticSwitch904_g158217 = 1.0;
				#endif
				half Overlay_TexMask906_g158217 = staticSwitch904_g158217;
				float3 temp_output_739_21_g158217 = Out_NormalWS4_g158218;
				half3 Visual_NormalWS749_g158217 = temp_output_739_21_g158217;
				float clampResult17_g158237 = clamp( saturate( (Visual_NormalWS749_g158217).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158236 = _OverlayProjRemap.x;
				float temp_output_10_0_g158236 = ( _OverlayProjRemap.y - temp_output_7_0_g158236 );
				float lerpResult842_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158237 - temp_output_7_0_g158236 ) / ( temp_output_10_0_g158236 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g158217 = lerpResult842_g158217;
				#else
				float staticSwitch734_g158217 = 1.0;
				#endif
				half Overlay_MaskProj457_g158217 = staticSwitch734_g158217;
				float temp_output_739_15_g158217 = Out_Luminosity4_g158218;
				half Visual_Luminosity654_g158217 = temp_output_739_15_g158217;
				float clampResult17_g158239 = clamp( Visual_Luminosity654_g158217 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158238 = _OverlayLumaRemap.x;
				float temp_output_10_0_g158238 = ( _OverlayLumaRemap.y - temp_output_7_0_g158238 );
				float lerpResult587_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158239 - temp_output_7_0_g158238 ) / ( temp_output_10_0_g158238 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g158217 = lerpResult587_g158217;
				half4 Model_VertexMasks791_g158217 = Out_VertexData15_g158225;
				float4 break792_g158217 = Model_VertexMasks791_g158217;
				float4 break33_g158229 = _overlay_vert_mode;
				float temp_output_30_0_g158229 = ( break792_g158217.x * break33_g158229.x );
				float temp_output_29_0_g158229 = ( break792_g158217.y * break33_g158229.y );
				float temp_output_31_0_g158229 = ( break792_g158217.z * break33_g158229.z );
				float temp_output_28_0_g158229 = ( temp_output_30_0_g158229 + temp_output_29_0_g158229 + temp_output_31_0_g158229 + ( break792_g158217.w * break33_g158229.w ) );
				float clampResult17_g158230 = clamp( temp_output_28_0_g158229 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158232 = _OverlayMeshRemap.x;
				float temp_output_10_0_g158232 = ( _OverlayMeshRemap.y - temp_output_7_0_g158232 );
				float lerpResult879_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158230 - temp_output_7_0_g158232 ) / ( temp_output_10_0_g158232 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g158241 = lerpResult879_g158217;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158241 = ( temp_output_6_0_g158241 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158241 = temp_output_6_0_g158241;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g158217 = staticSwitch14_g158241;
				#else
				float staticSwitch800_g158217 = 1.0;
				#endif
				half Overlay_VertMask801_g158217 = staticSwitch800_g158217;
				half Overlay_MaskNoise427_g158217 = 1.0;
				TVEGlobalData Data15_g158219 = Data204_g158069;
				float Out_Dummy15_g158219 = 0;
				float4 Out_CoatParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158219 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158219 = Data15_g158219.Dummy;
				Out_CoatParams15_g158219 = Data15_g158219.CoatParams;
				Out_PaintParams15_g158219 = Data15_g158219.PaintParams;
				Out_GlowParams15_g158219 = Data15_g158219.GlowParams;
				Out_AtmoParams15_g158219= Data15_g158219.AtmoParams;
				Out_FormParams15_g158219 = Data15_g158219.FormParams;
				Out_LandParams15_g158219 = Data15_g158219.LandParams;
				Out_WindParams15_g158219 = Data15_g158219.WindParams;
				Out_PushParams15_g158219 = Data15_g158219.PushParams;
				}
				half4 Global_AtmoParams516_g158217 = Out_AtmoParams15_g158219;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g158217 = (Global_AtmoParams516_g158217).z;
				#else
				float staticSwitch705_g158217 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g158217 = staticSwitch705_g158217;
				half Custom_Mask646_g158217 = 1.0;
				float temp_output_7_0_g158235 = 0.1;
				float temp_output_10_0_g158235 = ( 0.2 - temp_output_7_0_g158235 );
				half Overlay_Mask494_g158217 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g158217 * Overlay_MaskProj457_g158217 * Overlay_MaskLuma438_g158217 * Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 * Custom_Mask646_g158217 ) - temp_output_7_0_g158235 ) / ( temp_output_10_0_g158235 + 0.0001 ) ) );
				float3 lerpResult467_g158217 = lerp( Visual_Albedo127_g158217 , staticSwitch14_g158240 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g158217 = lerpResult467_g158217;
				#else
				float3 staticSwitch577_g158217 = Visual_Albedo127_g158217;
				#endif
				half3 Final_Albedo493_g158217 = staticSwitch577_g158217;
				float3 In_Albedo3_g158220 = Final_Albedo493_g158217;
				half2 Visual_NormalTS535_g158217 = Out_NormalTS4_g158218;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158226) = _OverlayNormalTex;
				SamplerState Sampler238_g158226 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158226 = Overlay_Coords639_g158217;
				half4 Coords238_g158226 = temp_output_37_0_g158226;
				float3 temp_output_279_0_g158226 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158226 = temp_output_279_0_g158226;
				half4 localSamplePlanar2D238_g158226 = SamplePlanar2D( Texture238_g158226 , Sampler238_g158226 , Coords238_g158226 , WorldPosition238_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158226) = _OverlayNormalTex;
				SamplerState Sampler246_g158226 = sampler_Linear_Repeat;
				half4 Coords246_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition246_g158226 = temp_output_279_0_g158226;
				float3 temp_output_280_0_g158226 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158226 = temp_output_280_0_g158226;
				half4 localSamplePlanar3D246_g158226 = SamplePlanar3D( Texture246_g158226 , Sampler246_g158226 , Coords246_g158226 , WorldPosition246_g158226 , WorldNormal246_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158226) = _OverlayNormalTex;
				SamplerState Sampler234_g158226 = sampler_Linear_Repeat;
				float4 Coords234_g158226 = temp_output_37_0_g158226;
				float3 WorldPosition234_g158226 = temp_output_279_0_g158226;
				float4 localSampleStochastic2D234_g158226 = SampleStochastic2D( Texture234_g158226 , Sampler234_g158226 , Coords234_g158226 , WorldPosition234_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158226) = _OverlayNormalTex;
				SamplerState Sampler263_g158226 = sampler_Linear_Repeat;
				half4 Coords263_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition263_g158226 = temp_output_279_0_g158226;
				half3 WorldNormal263_g158226 = temp_output_280_0_g158226;
				half4 localSampleStochastic3D263_g158226 = SampleStochastic3D( Texture263_g158226 , Sampler263_g158226 , Coords263_g158226 , WorldPosition263_g158226 , WorldNormal263_g158226 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g158217 = localSamplePlanar3D246_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g158217 = localSampleStochastic2D234_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g158217 = localSampleStochastic3D263_g158226;
				#else
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#endif
				half4 Normal_Packed45_g158223 = staticSwitch686_g158217;
				float2 appendResult58_g158223 = (float2(( (Normal_Packed45_g158223).x * (Normal_Packed45_g158223).w ) , (Normal_Packed45_g158223).y));
				half2 Normal_Default50_g158223 = appendResult58_g158223;
				half2 Normal_ASTC41_g158223 = (Normal_Packed45_g158223).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158223 = Normal_ASTC41_g158223;
				#else
				float2 staticSwitch38_g158223 = Normal_Default50_g158223;
				#endif
				half2 Normal_NO_DTX544_g158223 = (Normal_Packed45_g158223).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158223 = Normal_NO_DTX544_g158223;
				#else
				float2 staticSwitch37_g158223 = staticSwitch38_g158223;
				#endif
				half2 Normal_Planar45_g158222 = (staticSwitch37_g158223*2.0 + -1.0);
				float2 break71_g158222 = Normal_Planar45_g158222;
				float3 appendResult72_g158222 = (float3(break71_g158222.x , 0.0 , break71_g158222.y));
				half2 Overlay_Normal528_g158217 = (mul( ase_worldToTangent, appendResult72_g158222 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g158217 = Overlay_Normal528_g158217;
				#else
				float2 staticSwitch579_g158217 = Visual_NormalTS535_g158217;
				#endif
				float2 lerpResult551_g158217 = lerp( Visual_NormalTS535_g158217 , ( staticSwitch579_g158217 * _OverlayNormalValue ) , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g158217 = lerpResult551_g158217;
				#else
				float2 staticSwitch583_g158217 = Visual_NormalTS535_g158217;
				#endif
				half2 Final_NormalTS499_g158217 = staticSwitch583_g158217;
				float2 In_NormalTS3_g158220 = Final_NormalTS499_g158217;
				float3 In_NormalWS3_g158220 = temp_output_739_21_g158217;
				half4 Visual_Masks536_g158217 = Out_Shader4_g158218;
				float4 appendResult585_g158217 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g158217 = lerp( Visual_Masks536_g158217 , appendResult585_g158217 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g158217 = lerpResult584_g158217;
				#else
				float4 staticSwitch586_g158217 = Visual_Masks536_g158217;
				#endif
				half4 Final_Masks482_g158217 = staticSwitch586_g158217;
				float4 In_Shader3_g158220 = Final_Masks482_g158217;
				float4 In_Emissive3_g158220 = Out_Emissive4_g158218;
				float temp_output_739_12_g158217 = Out_Grayscale4_g158218;
				float In_Grayscale3_g158220 = temp_output_739_12_g158217;
				float In_Luminosity3_g158220 = temp_output_739_15_g158217;
				float In_MultiMask3_g158220 = Out_MultiMask4_g158218;
				float In_AlphaClip3_g158220 = Out_AlphaClip4_g158218;
				float In_AlphaFade3_g158220 = Out_AlphaFade4_g158218;
				float3 In_Translucency3_g158220 = Out_Translucency4_g158218;
				half Visual_Transmission699_g158217 = Out_Transmission4_g158218;
				float lerpResult746_g158217 = lerp( Visual_Transmission699_g158217 , ( Visual_Transmission699_g158217 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g158217 = lerpResult746_g158217;
				#else
				float staticSwitch703_g158217 = Visual_Transmission699_g158217;
				#endif
				half Final_Transmission702_g158217 = staticSwitch703_g158217;
				float In_Transmission3_g158220 = Final_Transmission702_g158217;
				float In_Thickness3_g158220 = Out_Thickness4_g158218;
				float In_Diffusion3_g158220 = Out_Diffusion4_g158218;
				{
				Data3_g158220.Dummy = In_Dummy3_g158220;
				Data3_g158220.Albedo = In_Albedo3_g158220;
				Data3_g158220.NormalTS = In_NormalTS3_g158220;
				Data3_g158220.NormalWS = In_NormalWS3_g158220;
				Data3_g158220.Shader = In_Shader3_g158220;
				Data3_g158220.Emissive= In_Emissive3_g158220;
				Data3_g158220.MultiMask = In_MultiMask3_g158220;
				Data3_g158220.Grayscale = In_Grayscale3_g158220;
				Data3_g158220.Luminosity = In_Luminosity3_g158220;
				Data3_g158220.AlphaClip = In_AlphaClip3_g158220;
				Data3_g158220.AlphaFade = In_AlphaFade3_g158220;
				Data3_g158220.Translucency = In_Translucency3_g158220;
				Data3_g158220.Transmission = In_Transmission3_g158220;
				Data3_g158220.Thickness = In_Thickness3_g158220;
				Data3_g158220.Diffusion = In_Diffusion3_g158220;
				}
				TVEVisualData Data4_g158255 = Data3_g158220;
				float Out_Dummy4_g158255 = 0;
				float3 Out_Albedo4_g158255 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158255 = float2( 0,0 );
				float3 Out_NormalWS4_g158255 = float3( 0,0,0 );
				float4 Out_Shader4_g158255 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158255 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158255 = 0;
				float Out_Grayscale4_g158255 = 0;
				float Out_Luminosity4_g158255 = 0;
				float Out_AlphaClip4_g158255 = 0;
				float Out_AlphaFade4_g158255 = 0;
				float3 Out_Translucency4_g158255 = float3( 0,0,0 );
				float Out_Transmission4_g158255 = 0;
				float Out_Thickness4_g158255 = 0;
				float Out_Diffusion4_g158255 = 0;
				{
				Out_Dummy4_g158255 = Data4_g158255.Dummy;
				Out_Albedo4_g158255 = Data4_g158255.Albedo;
				Out_NormalTS4_g158255 = Data4_g158255.NormalTS;
				Out_NormalWS4_g158255 = Data4_g158255.NormalWS;
				Out_Shader4_g158255 = Data4_g158255.Shader;
				Out_Emissive4_g158255= Data4_g158255.Emissive;
				Out_MultiMask4_g158255 = Data4_g158255.MultiMask;
				Out_Grayscale4_g158255 = Data4_g158255.Grayscale;
				Out_Luminosity4_g158255= Data4_g158255.Luminosity;
				Out_AlphaClip4_g158255 = Data4_g158255.AlphaClip;
				Out_AlphaFade4_g158255 = Data4_g158255.AlphaFade;
				Out_Translucency4_g158255 = Data4_g158255.Translucency;
				Out_Transmission4_g158255 = Data4_g158255.Transmission;
				Out_Thickness4_g158255 = Data4_g158255.Thickness;
				Out_Diffusion4_g158255 = Data4_g158255.Diffusion;
				}
				float3 temp_output_297_0_g158244 = Out_Albedo4_g158255;
				float3 In_Albedo3_g158256 = temp_output_297_0_g158244;
				float2 In_NormalTS3_g158256 = Out_NormalTS4_g158255;
				float3 In_NormalWS3_g158256 = Out_NormalWS4_g158255;
				float4 In_Shader3_g158256 = Out_Shader4_g158255;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g158244 = Out_Emissive4_g158255;
				TVEModelData Data15_g158245 = Data16_g158068;
				float Out_Dummy15_g158245 = 0;
				float3 Out_PositionOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158245 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158245 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158245 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158245 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158245 = float3( 0,0,0 );
				float4 Out_VertexData15_g158245 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158245 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158245 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158245 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158245 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158245 = Data15_g158245.Dummy;
				Out_PositionOS15_g158245 = Data15_g158245.PositionOS;
				Out_PositionWS15_g158245 = Data15_g158245.PositionWS;
				Out_PositionWO15_g158245 = Data15_g158245.PositionWO;
				Out_PositionRawOS15_g158245 = Data15_g158245.PositionRawOS;
				Out_PositionAddOS15_g158245 = Data15_g158245.PositionAddOS;
				Out_PivotOS15_g158245 = Data15_g158245.PivotOS;
				Out_PivotWS15_g158245 = Data15_g158245.PivotWS;
				Out_PivotWO15_g158245 = Data15_g158245.PivotWO;
				Out_NormalOS15_g158245 = Data15_g158245.NormalOS;
				Out_NormalWS15_g158245 = Data15_g158245.NormalWS;
				Out_NormalRawOS15_g158245 = Data15_g158245.NormalRawOS;
				Out_NormalRawWS15_g158245 = Data15_g158245.NormalRawWS;
				Out_TangentOS15_g158245 = Data15_g158245.TangentOS;
				Out_ViewDirWS15_g158245 = Data15_g158245.ViewDirWS;
				Out_VertexData15_g158245 = Data15_g158245.VertexData;
				Out_MotionData15_g158245 = Data15_g158245.MotionData;
				Out_BoundsData15_g158245 = Data15_g158245.BoundsData;
				Out_RotationData15_g158245 = Data15_g158245.RotationData;
				Out_FragmentData15_g158245 = Data15_g158245.FragmentData;
				}
				half4 Model_VertexMasks216_g158244 = Out_VertexData15_g158245;
				float4 break251_g158244 = Model_VertexMasks216_g158244;
				float4 break33_g158249 = _emissive_vert_mode;
				float temp_output_30_0_g158249 = ( break251_g158244.x * break33_g158249.x );
				float temp_output_29_0_g158249 = ( break251_g158244.y * break33_g158249.y );
				float temp_output_31_0_g158249 = ( break251_g158244.z * break33_g158249.z );
				float temp_output_28_0_g158249 = ( temp_output_30_0_g158249 + temp_output_29_0_g158249 + temp_output_31_0_g158249 + ( break251_g158244.w * break33_g158249.w ) );
				float clampResult17_g158248 = clamp( temp_output_28_0_g158249 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158252 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g158252 = ( _EmissiveMeshRemap.y - temp_output_7_0_g158252 );
				float lerpResult303_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158248 - temp_output_7_0_g158252 ) / ( temp_output_10_0_g158252 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g158258 = lerpResult303_g158244;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158258 = ( temp_output_6_0_g158258 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158258 = temp_output_6_0_g158258;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g158244 = staticSwitch14_g158258;
				#else
				float staticSwitch242_g158244 = 1.0;
				#endif
				half Emissive_MeshMask221_g158244 = staticSwitch242_g158244;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158247) = _EmissiveMaskTex;
				SamplerState Sampler276_g158247 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158253 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158253 = ( temp_output_6_0_g158253 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158253 = temp_output_6_0_g158253;
				#endif
				half4 Emissive_Coords167_g158244 = staticSwitch14_g158253;
				float4 temp_output_37_0_g158247 = Emissive_Coords167_g158244;
				half4 Coords276_g158247 = temp_output_37_0_g158247;
				half2 TexCoord276_g158247 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158247 = SampleMain( Texture276_g158247 , Sampler276_g158247 , Coords276_g158247 , TexCoord276_g158247 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158247) = _EmissiveMaskTex;
				SamplerState Sampler275_g158247 = sampler_Linear_Repeat;
				half4 Coords275_g158247 = temp_output_37_0_g158247;
				float2 appendResult289_g158247 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158247 = appendResult289_g158247;
				#else
				float2 staticSwitch288_g158247 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158247 = staticSwitch288_g158247;
				half4 localSampleExtra275_g158247 = SampleExtra( Texture275_g158247 , Sampler275_g158247 , Coords275_g158247 , TexCoord275_g158247 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g158244 = localSampleExtra275_g158247;
				#else
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#endif
				half4 Emissive_MaskTex201_g158244 = staticSwitch176_g158244;
				float clampResult17_g158251 = clamp( (Emissive_MaskTex201_g158244).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g158250 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g158250 = ( _EmissiveMaskRemap.y - temp_output_7_0_g158250 );
				float lerpResult302_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158251 - temp_output_7_0_g158250 ) / ( temp_output_10_0_g158250 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g158244 = lerpResult302_g158244;
				#else
				float staticSwitch190_g158244 = 1.0;
				#endif
				half Emissive_Mask103_g158244 = staticSwitch190_g158244;
				float temp_output_279_0_g158244 = ( Emissive_MeshMask221_g158244 * Emissive_Mask103_g158244 );
				float3 appendResult293_g158244 = (float3(temp_output_279_0_g158244 , temp_output_279_0_g158244 , temp_output_279_0_g158244));
				half3 Local_EmissiveColor278_g158244 = appendResult293_g158244;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g158246 = Data204_g158069;
				float Out_Dummy15_g158246 = 0;
				float4 Out_CoatParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158246 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158246 = Data15_g158246.Dummy;
				Out_CoatParams15_g158246 = Data15_g158246.CoatParams;
				Out_PaintParams15_g158246 = Data15_g158246.PaintParams;
				Out_GlowParams15_g158246 = Data15_g158246.GlowParams;
				Out_AtmoParams15_g158246= Data15_g158246.AtmoParams;
				Out_FormParams15_g158246 = Data15_g158246.FormParams;
				Out_LandParams15_g158246 = Data15_g158246.LandParams;
				Out_WindParams15_g158246 = Data15_g158246.WindParams;
				Out_PushParams15_g158246 = Data15_g158246.PushParams;
				}
				half4 Global_GlowParams179_g158244 = Out_GlowParams15_g158246;
				float3 lerpResult299_g158244 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g158244).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g158244 = lerpResult299_g158244;
				#else
				float3 staticSwitch228_g158244 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g158244 = staticSwitch228_g158244;
				half3 Local_EmissiveValue88_g158244 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g158244 );
				half3 Emissive_Blend260_g158244 = ( ( (Visual_Emissive255_g158244).xyz * Local_EmissiveColor278_g158244 ) * Local_EmissiveValue88_g158244 );
				float3 temp_output_3_0_g158254 = Emissive_Blend260_g158244;
				float temp_output_15_0_g158254 = _emissive_power_value;
				float3 temp_output_23_0_g158254 = ( temp_output_3_0_g158254 * temp_output_15_0_g158254 );
				float4 appendResult295_g158244 = (float4(temp_output_23_0_g158254 , Emissive_Mask103_g158244));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g158244 = appendResult295_g158244;
				#else
				float4 staticSwitch129_g158244 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g158244 = staticSwitch129_g158244;
				float4 In_Emissive3_g158256 = Final_Emissive184_g158244;
				float In_Grayscale3_g158256 = Out_Grayscale4_g158255;
				float In_Luminosity3_g158256 = Out_Luminosity4_g158255;
				float temp_output_297_11_g158244 = Out_MultiMask4_g158255;
				float In_MultiMask3_g158256 = temp_output_297_11_g158244;
				float In_AlphaClip3_g158256 = Out_AlphaClip4_g158255;
				float In_AlphaFade3_g158256 = Out_AlphaFade4_g158255;
				float3 In_Translucency3_g158256 = Out_Translucency4_g158255;
				float In_Transmission3_g158256 = Out_Transmission4_g158255;
				float In_Thickness3_g158256 = Out_Thickness4_g158255;
				float In_Diffusion3_g158256 = Out_Diffusion4_g158255;
				{
				Data3_g158256.Dummy = In_Dummy3_g158256;
				Data3_g158256.Albedo = In_Albedo3_g158256;
				Data3_g158256.NormalTS = In_NormalTS3_g158256;
				Data3_g158256.NormalWS = In_NormalWS3_g158256;
				Data3_g158256.Shader = In_Shader3_g158256;
				Data3_g158256.Emissive= In_Emissive3_g158256;
				Data3_g158256.MultiMask = In_MultiMask3_g158256;
				Data3_g158256.Grayscale = In_Grayscale3_g158256;
				Data3_g158256.Luminosity = In_Luminosity3_g158256;
				Data3_g158256.AlphaClip = In_AlphaClip3_g158256;
				Data3_g158256.AlphaFade = In_AlphaFade3_g158256;
				Data3_g158256.Translucency = In_Translucency3_g158256;
				Data3_g158256.Transmission = In_Transmission3_g158256;
				Data3_g158256.Thickness = In_Thickness3_g158256;
				Data3_g158256.Diffusion = In_Diffusion3_g158256;
				}
				TVEVisualData Data4_g158262 = Data3_g158256;
				float Out_Dummy4_g158262 = 0;
				float3 Out_Albedo4_g158262 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158262 = float2( 0,0 );
				float3 Out_NormalWS4_g158262 = float3( 0,0,0 );
				float4 Out_Shader4_g158262 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158262 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158262 = 0;
				float Out_Grayscale4_g158262 = 0;
				float Out_Luminosity4_g158262 = 0;
				float Out_AlphaClip4_g158262 = 0;
				float Out_AlphaFade4_g158262 = 0;
				float3 Out_Translucency4_g158262 = float3( 0,0,0 );
				float Out_Transmission4_g158262 = 0;
				float Out_Thickness4_g158262 = 0;
				float Out_Diffusion4_g158262 = 0;
				{
				Out_Dummy4_g158262 = Data4_g158262.Dummy;
				Out_Albedo4_g158262 = Data4_g158262.Albedo;
				Out_NormalTS4_g158262 = Data4_g158262.NormalTS;
				Out_NormalWS4_g158262 = Data4_g158262.NormalWS;
				Out_Shader4_g158262 = Data4_g158262.Shader;
				Out_Emissive4_g158262= Data4_g158262.Emissive;
				Out_MultiMask4_g158262 = Data4_g158262.MultiMask;
				Out_Grayscale4_g158262 = Data4_g158262.Grayscale;
				Out_Luminosity4_g158262= Data4_g158262.Luminosity;
				Out_AlphaClip4_g158262 = Data4_g158262.AlphaClip;
				Out_AlphaFade4_g158262 = Data4_g158262.AlphaFade;
				Out_Translucency4_g158262 = Data4_g158262.Translucency;
				Out_Transmission4_g158262 = Data4_g158262.Transmission;
				Out_Thickness4_g158262 = Data4_g158262.Thickness;
				Out_Diffusion4_g158262 = Data4_g158262.Diffusion;
				}
				half3 Visual_Albedo199_g158261 = Out_Albedo4_g158262;
				half3 Final_Albedo312_g158261 = Visual_Albedo199_g158261;
				float3 In_Albedo3_g158263 = Final_Albedo312_g158261;
				float2 In_NormalTS3_g158263 = Out_NormalTS4_g158262;
				float3 In_NormalWS3_g158263 = Out_NormalWS4_g158262;
				float4 In_Shader3_g158263 = Out_Shader4_g158262;
				float4 In_Emissive3_g158263 = Out_Emissive4_g158262;
				float In_Grayscale3_g158263 = Out_Grayscale4_g158262;
				float In_Luminosity3_g158263 = Out_Luminosity4_g158262;
				float temp_output_301_11_g158261 = Out_MultiMask4_g158262;
				float In_MultiMask3_g158263 = temp_output_301_11_g158261;
				float In_AlphaClip3_g158263 = Out_AlphaClip4_g158262;
				float In_AlphaFade3_g158263 = Out_AlphaFade4_g158262;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g158261 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g158261 );
				half Visual_Transmission138_g158261 = Out_Transmission4_g158262;
				half Subsurface_Value268_g158261 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g158265 = Data204_g158069;
				float Out_Dummy15_g158265 = 0;
				float4 Out_CoatParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158265 = Data15_g158265.Dummy;
				Out_CoatParams15_g158265 = Data15_g158265.CoatParams;
				Out_PaintParams15_g158265 = Data15_g158265.PaintParams;
				Out_GlowParams15_g158265 = Data15_g158265.GlowParams;
				Out_AtmoParams15_g158265= Data15_g158265.AtmoParams;
				Out_FormParams15_g158265 = Data15_g158265.FormParams;
				Out_LandParams15_g158265 = Data15_g158265.LandParams;
				Out_WindParams15_g158265 = Data15_g158265.WindParams;
				Out_PushParams15_g158265 = Data15_g158265.PushParams;
				}
				half4 Global_GlowParams373_g158261 = Out_GlowParams15_g158265;
				float lerpResult403_g158261 = lerp( 1.0 , saturate( (Global_GlowParams373_g158261).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g158261 = lerpResult403_g158261;
				#else
				float staticSwitch367_g158261 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g158261 = staticSwitch367_g158261;
				half Visual_MultiMask292_g158261 = temp_output_301_11_g158261;
				float lerpResult293_g158261 = lerp( 1.0 , Visual_MultiMask292_g158261 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g158261 = lerpResult293_g158261;
				half Custom_Mask363_g158261 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g158261 = ( Visual_Transmission138_g158261 * Subsurface_Value268_g158261 * Subsurface_GlobalMask369_g158261 * Subsurface_MultiMask296_g158261 * Custom_Mask363_g158261 );
				#else
				float staticSwitch345_g158261 = 0.0;
				#endif
				half Final_Transmission269_g158261 = staticSwitch345_g158261;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g158261 = ( Subsurface_Color264_g158261 * Final_Transmission269_g158261 * 10.0 );
				#else
				float3 staticSwitch348_g158261 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g158261 = staticSwitch348_g158261;
				float3 In_Translucency3_g158263 = Final_Translucency254_g158261;
				float In_Transmission3_g158263 = Final_Transmission269_g158261;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g158261 = 0.0;
				#else
				float staticSwitch351_g158261 = 1.0;
				#endif
				half Final_Thickness275_g158261 = staticSwitch351_g158261;
				float In_Thickness3_g158263 = Final_Thickness275_g158261;
				float Final_Diffusion340_g158261 = _SubsurfaceDiffusion;
				float In_Diffusion3_g158263 = Final_Diffusion340_g158261;
				{
				Data3_g158263.Dummy = In_Dummy3_g158263;
				Data3_g158263.Albedo = In_Albedo3_g158263;
				Data3_g158263.NormalTS = In_NormalTS3_g158263;
				Data3_g158263.NormalWS = In_NormalWS3_g158263;
				Data3_g158263.Shader = In_Shader3_g158263;
				Data3_g158263.Emissive= In_Emissive3_g158263;
				Data3_g158263.MultiMask = In_MultiMask3_g158263;
				Data3_g158263.Grayscale = In_Grayscale3_g158263;
				Data3_g158263.Luminosity = In_Luminosity3_g158263;
				Data3_g158263.AlphaClip = In_AlphaClip3_g158263;
				Data3_g158263.AlphaFade = In_AlphaFade3_g158263;
				Data3_g158263.Translucency = In_Translucency3_g158263;
				Data3_g158263.Transmission = In_Transmission3_g158263;
				Data3_g158263.Thickness = In_Thickness3_g158263;
				Data3_g158263.Diffusion = In_Diffusion3_g158263;
				}
				TVEVisualData Data4_g158294 = Data3_g158263;
				float Out_Dummy4_g158294 = 0;
				float3 Out_Albedo4_g158294 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158294 = float2( 0,0 );
				float3 Out_NormalWS4_g158294 = float3( 0,0,0 );
				float4 Out_Shader4_g158294 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158294 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158294 = 0;
				float Out_Grayscale4_g158294 = 0;
				float Out_Luminosity4_g158294 = 0;
				float Out_AlphaClip4_g158294 = 0;
				float Out_AlphaFade4_g158294 = 0;
				float3 Out_Translucency4_g158294 = float3( 0,0,0 );
				float Out_Transmission4_g158294 = 0;
				float Out_Thickness4_g158294 = 0;
				float Out_Diffusion4_g158294 = 0;
				{
				Out_Dummy4_g158294 = Data4_g158294.Dummy;
				Out_Albedo4_g158294 = Data4_g158294.Albedo;
				Out_NormalTS4_g158294 = Data4_g158294.NormalTS;
				Out_NormalWS4_g158294 = Data4_g158294.NormalWS;
				Out_Shader4_g158294 = Data4_g158294.Shader;
				Out_Emissive4_g158294= Data4_g158294.Emissive;
				Out_MultiMask4_g158294 = Data4_g158294.MultiMask;
				Out_Grayscale4_g158294 = Data4_g158294.Grayscale;
				Out_Luminosity4_g158294= Data4_g158294.Luminosity;
				Out_AlphaClip4_g158294 = Data4_g158294.AlphaClip;
				Out_AlphaFade4_g158294 = Data4_g158294.AlphaFade;
				Out_Translucency4_g158294 = Data4_g158294.Translucency;
				Out_Transmission4_g158294 = Data4_g158294.Transmission;
				Out_Thickness4_g158294 = Data4_g158294.Thickness;
				Out_Diffusion4_g158294 = Data4_g158294.Diffusion;
				}
				half3 Input_Albedo24_g158293 = Out_Albedo4_g158294;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g158293 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g158293 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g158293 = staticSwitch22_g158293;
				float4 break24_g158288 = Out_Shader4_g158294;
				half Metallic95_g158288 = break24_g158288.x;
				half Input_Metallic25_g158293 = Metallic95_g158288;
				half OneMinusReflectivity31_g158293 = ( (ColorSpaceDielectricSpec23_g158293).w - ( (ColorSpaceDielectricSpec23_g158293).w * Input_Metallic25_g158293 ) );
				
				float3 appendResult23_g158288 = (float3(Out_NormalTS4_g158294 , 1.0));
				float3 temp_output_13_0_g158292 = appendResult23_g158288;
				float3 temp_output_33_0_g158292 = ( temp_output_13_0_g158292 * _render_normal );
				float3 switchResult12_g158292 = (((ase_vface>0)?(temp_output_13_0_g158292):(temp_output_33_0_g158292)));
				
				float3 lerpResult28_g158293 = lerp( (ColorSpaceDielectricSpec23_g158293).xyz , Input_Albedo24_g158293 , Input_Metallic25_g158293);
				half RenderSpec102_g158288 = _RenderSpecular;
				
				float localCustomAlphaClip19_g158295 = ( 0.0 );
				float temp_output_3_0_g158295 = Out_AlphaClip4_g158294;
				float Alpha19_g158295 = temp_output_3_0_g158295;
				float temp_output_15_0_g158295 = 0.0;
				float Treshold19_g158295 = temp_output_15_0_g158295;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#else
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g158293 * OneMinusReflectivity31_g158293 );
				o.Normal = switchResult12_g158292;
				o.Emission = (Out_Emissive4_g158294).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 1;
					o.Gloss = 1;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g158293 * RenderSpec102_g158288 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g158288.y;
					o.Smoothness = break24_g158288.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g158295 * Out_AlphaFade4_g158294 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = Out_Translucency4_g158294;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_texcoord13 : TEXCOORD13;
				float4 ase_texcoord14 : TEXCOORD14;
				float4 ase_texcoord15 : TEXCOORD15;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = v.vertex.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g152464 = ase_worldPos;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float4x4 break19_g152466 = unity_ObjectToWorld;
				float3 appendResult20_g152466 = (float3(break19_g152466[ 0 ][ 3 ] , break19_g152466[ 1 ][ 3 ] , break19_g152466[ 2 ][ 3 ]));
				half3 ObjectData20_g152468 = appendResult20_g152466;
				half3 WorldData19_g152468 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152468 = WorldData19_g152468;
				#else
				float3 staticSwitch14_g152468 = ObjectData20_g152468;
				#endif
				float3 temp_output_124_0_g152466 = staticSwitch14_g152468;
				float3 temp_output_239_7_g152464 = temp_output_124_0_g152466;
				float4x4 break19_g152470 = unity_ObjectToWorld;
				float3 appendResult20_g152470 = (float3(break19_g152470[ 0 ][ 3 ] , break19_g152470[ 1 ][ 3 ] , break19_g152470[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 temp_output_122_0_g152470 = PivotOS149_g152464;
				float3 PivotsOnly105_g152470 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g152470 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g152472 = ( appendResult20_g152470 + PivotsOnly105_g152470 );
				half3 WorldData19_g152472 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152472 = WorldData19_g152472;
				#else
				float3 staticSwitch14_g152472 = ObjectData20_g152472;
				#endif
				float3 temp_output_124_0_g152470 = staticSwitch14_g152472;
				float3 temp_output_237_7_g152464 = temp_output_124_0_g152470;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#else
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#endif
				float3 vertexToFrag76_g152464 = staticSwitch236_g152464;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = v.normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = v.tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = v.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( v.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( v.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( v.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( v.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ), 0.0 );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158291 = Data16_g158068;
				float Out_Dummy15_g158291 = 0;
				float3 Out_PositionOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158291 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158291 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158291 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158291 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158291 = float3( 0,0,0 );
				float4 Out_VertexData15_g158291 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158291 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158291 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158291 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158291 = Data15_g158291.Dummy;
				Out_PositionOS15_g158291 = Data15_g158291.PositionOS;
				Out_PositionWS15_g158291 = Data15_g158291.PositionWS;
				Out_PositionWO15_g158291 = Data15_g158291.PositionWO;
				Out_PositionRawOS15_g158291 = Data15_g158291.PositionRawOS;
				Out_PositionAddOS15_g158291 = Data15_g158291.PositionAddOS;
				Out_PivotOS15_g158291 = Data15_g158291.PivotOS;
				Out_PivotWS15_g158291 = Data15_g158291.PivotWS;
				Out_PivotWO15_g158291 = Data15_g158291.PivotWO;
				Out_NormalOS15_g158291 = Data15_g158291.NormalOS;
				Out_NormalWS15_g158291 = Data15_g158291.NormalWS;
				Out_NormalRawOS15_g158291 = Data15_g158291.NormalRawOS;
				Out_NormalRawWS15_g158291 = Data15_g158291.NormalRawWS;
				Out_TangentOS15_g158291 = Data15_g158291.TangentOS;
				Out_ViewDirWS15_g158291 = Data15_g158291.ViewDirWS;
				Out_VertexData15_g158291 = Data15_g158291.VertexData;
				Out_MotionData15_g158291 = Data15_g158291.MotionData;
				Out_BoundsData15_g158291 = Data15_g158291.BoundsData;
				Out_RotationData15_g158291 = Data15_g158291.RotationData;
				Out_FragmentData15_g158291 = Data15_g158291.FragmentData;
				}
				float3 temp_output_31_0_g158288 = Out_PositionOS15_g158291;
				
				float4 temp_output_6_0_g158303 = Out_TangentOS15_g158291;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158303 = ( temp_output_6_0_g158303 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158303 = temp_output_6_0_g158303;
				#endif
				
				o.ase_texcoord13.xyz = vertexToFrag73_g152464;
				o.ase_texcoord14.xyz = vertexToFrag76_g152464;
				TVEModelData Data15_g158215 = Data16_g158068;
				float Out_Dummy15_g158215 = 0;
				float3 Out_PositionOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158215 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158215 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158215 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158215 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158215 = float3( 0,0,0 );
				float4 Out_VertexData15_g158215 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158215 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158215 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158215 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158215 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158215 = Data15_g158215.Dummy;
				Out_PositionOS15_g158215 = Data15_g158215.PositionOS;
				Out_PositionWS15_g158215 = Data15_g158215.PositionWS;
				Out_PositionWO15_g158215 = Data15_g158215.PositionWO;
				Out_PositionRawOS15_g158215 = Data15_g158215.PositionRawOS;
				Out_PositionAddOS15_g158215 = Data15_g158215.PositionAddOS;
				Out_PivotOS15_g158215 = Data15_g158215.PivotOS;
				Out_PivotWS15_g158215 = Data15_g158215.PivotWS;
				Out_PivotWO15_g158215 = Data15_g158215.PivotWO;
				Out_NormalOS15_g158215 = Data15_g158215.NormalOS;
				Out_NormalWS15_g158215 = Data15_g158215.NormalWS;
				Out_NormalRawOS15_g158215 = Data15_g158215.NormalRawOS;
				Out_NormalRawWS15_g158215 = Data15_g158215.NormalRawWS;
				Out_TangentOS15_g158215 = Data15_g158215.TangentOS;
				Out_ViewDirWS15_g158215 = Data15_g158215.ViewDirWS;
				Out_VertexData15_g158215 = Data15_g158215.VertexData;
				Out_MotionData15_g158215 = Data15_g158215.MotionData;
				Out_BoundsData15_g158215 = Data15_g158215.BoundsData;
				Out_RotationData15_g158215 = Data15_g158215.RotationData;
				Out_FragmentData15_g158215 = Data15_g158215.FragmentData;
				}
				half4 Model_FragmentData196_g158213 = Out_FragmentData15_g158215;
				float vertexToFrag203_g158213 = (Model_FragmentData196_g158213).w;
				o.ase_texcoord10.z = vertexToFrag203_g158213;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord11 = v.texcoord1.xyzw;
				o.ase_texcoord12 = v.vertex;
				o.ase_texcoord15 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.w = 0;
				o.ase_texcoord13.w = 0;
				o.ase_texcoord14.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g158288 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g158291;
				v.tangent = staticSwitch14_g158303;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g158294 = ( 0.0 );
				float localCompData3_g158263 = ( 0.0 );
				TVEVisualData Data3_g158263 = (TVEVisualData)0;
				half Dummy145_g158261 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g158263 = Dummy145_g158261;
				float localBreakData4_g158262 = ( 0.0 );
				float localCompData3_g158256 = ( 0.0 );
				TVEVisualData Data3_g158256 = (TVEVisualData)0;
				half Dummy145_g158244 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g158256 = Dummy145_g158244;
				float localBreakData4_g158255 = ( 0.0 );
				float localCompData3_g158220 = ( 0.0 );
				TVEVisualData Data3_g158220 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g158217 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g158220 = Dummy594_g158217.r;
				float localBreakData4_g158218 = ( 0.0 );
				float localCompData3_g158216 = ( 0.0 );
				TVEVisualData Data3_g158216 = (TVEVisualData)0;
				float In_Dummy3_g158216 = 0.0;
				float localBreakData4_g158214 = ( 0.0 );
				float localCompData3_g158207 = ( 0.0 );
				TVEVisualData Data3_g158207 = (TVEVisualData)0;
				half Dummy220_g158203 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g158207 = Dummy220_g158203;
				float localBreakData4_g158206 = ( 0.0 );
				float localCompData3_g158195 = ( 0.0 );
				TVEVisualData Data3_g158195 = (TVEVisualData)0;
				half Dummy202_g158193 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g158195 = Dummy202_g158193;
				float localBreakData4_g158194 = ( 0.0 );
				float localCompData3_g158182 = ( 0.0 );
				TVEVisualData Data3_g158182 = (TVEVisualData)0;
				half4 Dummy944_g158164 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g158182 = Dummy944_g158164.x;
				float localBreakData4_g158181 = ( 0.0 );
				float localCompData3_g158145 = ( 0.0 );
				TVEVisualData Data3_g158145 = (TVEVisualData)0;
				half4 Dummy946_g158134 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g158145 = Dummy946_g158134.x;
				float localBreakData4_g158148 = ( 0.0 );
				float localCompData3_g158130 = ( 0.0 );
				TVEVisualData Data3_g158130 = (TVEVisualData)0;
				half4 Dummy130_g158120 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g158130 = Dummy130_g158120.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158131) = _MainAlbedoTex;
				SamplerState Sampler276_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g158120 = _main_coord_value;
				float4 temp_output_37_0_g158131 = Local_Coords180_g158120;
				half4 Coords276_g158131 = temp_output_37_0_g158131;
				half2 TexCoord276_g158131 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158131 = SampleMain( Texture276_g158131 , Sampler276_g158131 , Coords276_g158131 , TexCoord276_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158131) = _MainAlbedoTex;
				SamplerState Sampler275_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158131 = temp_output_37_0_g158131;
				float2 appendResult289_g158131 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158131 = appendResult289_g158131;
				#else
				float2 staticSwitch288_g158131 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158131 = staticSwitch288_g158131;
				half4 localSampleExtra275_g158131 = SampleExtra( Texture275_g158131 , Sampler275_g158131 , Coords275_g158131 , TexCoord275_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158131) = _MainAlbedoTex;
				SamplerState Sampler238_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158131 = temp_output_37_0_g158131;
				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = IN.ase_texcoord12.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 vertexToFrag73_g152464 = IN.ase_texcoord13.xyz;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float3 vertexToFrag76_g152464 = IN.ase_texcoord14.xyz;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(IN.ase_texcoord15.x , 0.0 , IN.ase_texcoord15.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = IN.ase_normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = IN.ase_tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = IN.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( IN.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( IN.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( IN.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( IN.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = IN.ase_texcoord9.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ) );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158121 = Data16_g158068;
				float Out_Dummy15_g158121 = 0;
				float3 Out_PositionOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158121 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158121 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158121 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158121 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158121 = float3( 0,0,0 );
				float4 Out_VertexData15_g158121 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158121 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158121 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158121 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158121 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158121 = Data15_g158121.Dummy;
				Out_PositionOS15_g158121 = Data15_g158121.PositionOS;
				Out_PositionWS15_g158121 = Data15_g158121.PositionWS;
				Out_PositionWO15_g158121 = Data15_g158121.PositionWO;
				Out_PositionRawOS15_g158121 = Data15_g158121.PositionRawOS;
				Out_PositionAddOS15_g158121 = Data15_g158121.PositionAddOS;
				Out_PivotOS15_g158121 = Data15_g158121.PivotOS;
				Out_PivotWS15_g158121 = Data15_g158121.PivotWS;
				Out_PivotWO15_g158121 = Data15_g158121.PivotWO;
				Out_NormalOS15_g158121 = Data15_g158121.NormalOS;
				Out_NormalWS15_g158121 = Data15_g158121.NormalWS;
				Out_NormalRawOS15_g158121 = Data15_g158121.NormalRawOS;
				Out_NormalRawWS15_g158121 = Data15_g158121.NormalRawWS;
				Out_TangentOS15_g158121 = Data15_g158121.TangentOS;
				Out_ViewDirWS15_g158121 = Data15_g158121.ViewDirWS;
				Out_VertexData15_g158121 = Data15_g158121.VertexData;
				Out_MotionData15_g158121 = Data15_g158121.MotionData;
				Out_BoundsData15_g158121 = Data15_g158121.BoundsData;
				Out_RotationData15_g158121 = Data15_g158121.RotationData;
				Out_FragmentData15_g158121 = Data15_g158121.FragmentData;
				}
				half3 Model_PositionWO222_g158120 = Out_PositionWO15_g158121;
				float3 temp_output_279_0_g158131 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158131 = temp_output_279_0_g158131;
				half4 localSamplePlanar2D238_g158131 = SamplePlanar2D( Texture238_g158131 , Sampler238_g158131 , Coords238_g158131 , WorldPosition238_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158131) = _MainAlbedoTex;
				SamplerState Sampler246_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition246_g158131 = temp_output_279_0_g158131;
				half3 Model_NormalWS226_g158120 = Out_NormalWS15_g158121;
				float3 temp_output_280_0_g158131 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158131 = temp_output_280_0_g158131;
				half4 localSamplePlanar3D246_g158131 = SamplePlanar3D( Texture246_g158131 , Sampler246_g158131 , Coords246_g158131 , WorldPosition246_g158131 , WorldNormal246_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158131) = _MainAlbedoTex;
				SamplerState Sampler234_g158131 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158131 = temp_output_37_0_g158131;
				float3 WorldPosition234_g158131 = temp_output_279_0_g158131;
				float4 localSampleStochastic2D234_g158131 = SampleStochastic2D( Texture234_g158131 , Sampler234_g158131 , Coords234_g158131 , WorldPosition234_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158131) = _MainAlbedoTex;
				SamplerState Sampler263_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition263_g158131 = temp_output_279_0_g158131;
				half3 WorldNormal263_g158131 = temp_output_280_0_g158131;
				half4 localSampleStochastic3D263_g158131 = SampleStochastic3D( Texture263_g158131 , Sampler263_g158131 , Coords263_g158131 , WorldPosition263_g158131 , WorldNormal263_g158131 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g158120 = localSampleExtra275_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g158120 = localSamplePlanar2D238_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g158120 = localSamplePlanar3D246_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g158120 = localSampleStochastic2D234_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g158120 = localSampleStochastic3D263_g158131;
				#else
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#endif
				half4 Local_AlbedoTex185_g158120 = staticSwitch184_g158120;
				float3 lerpResult53_g158120 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g158120).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g158120 = lerpResult53_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158133) = _MainShaderTex;
				SamplerState Sampler276_g158133 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158133 = Local_Coords180_g158120;
				half4 Coords276_g158133 = temp_output_37_0_g158133;
				half2 TexCoord276_g158133 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158133 = SampleMain( Texture276_g158133 , Sampler276_g158133 , Coords276_g158133 , TexCoord276_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158133) = _MainShaderTex;
				SamplerState Sampler275_g158133 = sampler_Linear_Repeat;
				half4 Coords275_g158133 = temp_output_37_0_g158133;
				float2 appendResult289_g158133 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158133 = appendResult289_g158133;
				#else
				float2 staticSwitch288_g158133 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158133 = staticSwitch288_g158133;
				half4 localSampleExtra275_g158133 = SampleExtra( Texture275_g158133 , Sampler275_g158133 , Coords275_g158133 , TexCoord275_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158133) = _MainShaderTex;
				SamplerState Sampler238_g158133 = sampler_Linear_Repeat;
				half4 Coords238_g158133 = temp_output_37_0_g158133;
				float3 temp_output_279_0_g158133 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158133 = temp_output_279_0_g158133;
				half4 localSamplePlanar2D238_g158133 = SamplePlanar2D( Texture238_g158133 , Sampler238_g158133 , Coords238_g158133 , WorldPosition238_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158133) = _MainShaderTex;
				SamplerState Sampler246_g158133 = sampler_Linear_Repeat;
				half4 Coords246_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition246_g158133 = temp_output_279_0_g158133;
				float3 temp_output_280_0_g158133 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158133 = temp_output_280_0_g158133;
				half4 localSamplePlanar3D246_g158133 = SamplePlanar3D( Texture246_g158133 , Sampler246_g158133 , Coords246_g158133 , WorldPosition246_g158133 , WorldNormal246_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158133) = _MainShaderTex;
				SamplerState Sampler234_g158133 = sampler_Linear_Repeat;
				float4 Coords234_g158133 = temp_output_37_0_g158133;
				float3 WorldPosition234_g158133 = temp_output_279_0_g158133;
				float4 localSampleStochastic2D234_g158133 = SampleStochastic2D( Texture234_g158133 , Sampler234_g158133 , Coords234_g158133 , WorldPosition234_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158133) = _MainShaderTex;
				SamplerState Sampler263_g158133 = sampler_Linear_Repeat;
				half4 Coords263_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition263_g158133 = temp_output_279_0_g158133;
				half3 WorldNormal263_g158133 = temp_output_280_0_g158133;
				half4 localSampleStochastic3D263_g158133 = SampleStochastic3D( Texture263_g158133 , Sampler263_g158133 , Coords263_g158133 , WorldPosition263_g158133 , WorldNormal263_g158133 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g158120 = localSampleExtra275_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g158120 = localSamplePlanar2D238_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g158120 = localSamplePlanar3D246_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g158120 = localSampleStochastic2D234_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g158120 = localSampleStochastic3D263_g158133;
				#else
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#endif
				half4 Local_MasksTex199_g158120 = staticSwitch198_g158120;
				float lerpResult23_g158120 = lerp( 1.0 , (Local_MasksTex199_g158120).y , _MainOcclusionValue);
				float4 appendResult73_g158120 = (float4(( (Local_MasksTex199_g158120).x * _MainMetallicValue ) , lerpResult23_g158120 , (Local_MasksTex199_g158120).z , ( (Local_MasksTex199_g158120).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g158120 = appendResult73_g158120;
				float clampResult17_g158126 = clamp( (Local_Masks109_g158120).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158127 = _MainMultiRemap.x;
				float temp_output_10_0_g158127 = ( _MainMultiRemap.y - temp_output_7_0_g158127 );
				half Local_MultiMask78_g158120 = saturate( ( ( clampResult17_g158126 - temp_output_7_0_g158127 ) / ( temp_output_10_0_g158127 + 0.0001 ) ) );
				float lerpResult58_g158120 = lerp( 1.0 , Local_MultiMask78_g158120 , _MainColorMode);
				float4 lerpResult62_g158120 = lerp( _MainColorTwo , _MainColor , lerpResult58_g158120);
				half3 Local_ColorRGB93_g158120 = (lerpResult62_g158120).rgb;
				half3 Local_Albedo139_g158120 = ( Local_AlbedoRGB107_g158120 * Local_ColorRGB93_g158120 );
				float3 In_Albedo3_g158130 = Local_Albedo139_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158132) = _MainNormalTex;
				SamplerState Sampler276_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g158132 = Local_Coords180_g158120;
				half4 Coords276_g158132 = temp_output_37_0_g158132;
				half2 TexCoord276_g158132 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158132 = SampleMain( Texture276_g158132 , Sampler276_g158132 , Coords276_g158132 , TexCoord276_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158132) = _MainNormalTex;
				SamplerState Sampler275_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158132 = temp_output_37_0_g158132;
				float2 appendResult289_g158132 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158132 = appendResult289_g158132;
				#else
				float2 staticSwitch288_g158132 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158132 = staticSwitch288_g158132;
				half4 localSampleExtra275_g158132 = SampleExtra( Texture275_g158132 , Sampler275_g158132 , Coords275_g158132 , TexCoord275_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158132) = _MainNormalTex;
				SamplerState Sampler238_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158132 = temp_output_37_0_g158132;
				float3 temp_output_279_0_g158132 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158132 = temp_output_279_0_g158132;
				half4 localSamplePlanar2D238_g158132 = SamplePlanar2D( Texture238_g158132 , Sampler238_g158132 , Coords238_g158132 , WorldPosition238_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158132) = _MainNormalTex;
				SamplerState Sampler246_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition246_g158132 = temp_output_279_0_g158132;
				float3 temp_output_280_0_g158132 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158132 = temp_output_280_0_g158132;
				half4 localSamplePlanar3D246_g158132 = SamplePlanar3D( Texture246_g158132 , Sampler246_g158132 , Coords246_g158132 , WorldPosition246_g158132 , WorldNormal246_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158132) = _MainNormalTex;
				SamplerState Sampler234_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158132 = temp_output_37_0_g158132;
				float3 WorldPosition234_g158132 = temp_output_279_0_g158132;
				float4 localSampleStochastic2D234_g158132 = SampleStochastic2D( Texture234_g158132 , Sampler234_g158132 , Coords234_g158132 , WorldPosition234_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158132) = _MainNormalTex;
				SamplerState Sampler263_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition263_g158132 = temp_output_279_0_g158132;
				half3 WorldNormal263_g158132 = temp_output_280_0_g158132;
				half4 localSampleStochastic3D263_g158132 = SampleStochastic3D( Texture263_g158132 , Sampler263_g158132 , Coords263_g158132 , WorldPosition263_g158132 , WorldNormal263_g158132 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g158120 = localSampleExtra275_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g158120 = localSamplePlanar2D238_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g158120 = localSamplePlanar3D246_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g158120 = localSampleStochastic2D234_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g158120 = localSampleStochastic3D263_g158132;
				#else
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#endif
				half4 Local_NormaTex191_g158120 = staticSwitch193_g158120;
				half4 Normal_Packed45_g158122 = Local_NormaTex191_g158120;
				float2 appendResult58_g158122 = (float2(( (Normal_Packed45_g158122).x * (Normal_Packed45_g158122).w ) , (Normal_Packed45_g158122).y));
				half2 Normal_Default50_g158122 = appendResult58_g158122;
				half2 Normal_ASTC41_g158122 = (Normal_Packed45_g158122).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158122 = Normal_ASTC41_g158122;
				#else
				float2 staticSwitch38_g158122 = Normal_Default50_g158122;
				#endif
				half2 Normal_NO_DTX544_g158122 = (Normal_Packed45_g158122).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158122 = Normal_NO_DTX544_g158122;
				#else
				float2 staticSwitch37_g158122 = staticSwitch38_g158122;
				#endif
				float2 temp_output_26_0_g158120 = ( (staticSwitch37_g158122*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g158123 = temp_output_26_0_g158120;
				float2 break71_g158123 = Normal_Planar45_g158123;
				float3 appendResult72_g158123 = (float3(break71_g158123.x , 0.0 , break71_g158123.y));
				float2 temp_output_205_0_g158120 = (mul( ase_worldToTangent, appendResult72_g158123 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#else
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#endif
				half2 Local_NormalTS108_g158120 = staticSwitch204_g158120;
				float2 In_NormalTS3_g158130 = Local_NormalTS108_g158120;
				float3 appendResult68_g158124 = (float3(Local_NormalTS108_g158120 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g158124 = appendResult68_g158124;
				float3 worldNormal74_g158124 = normalize( float3(dot(tanToWorld0,tanNormal74_g158124), dot(tanToWorld1,tanNormal74_g158124), dot(tanToWorld2,tanNormal74_g158124)) );
				half3 Local_NormalWS250_g158120 = worldNormal74_g158124;
				float3 In_NormalWS3_g158130 = Local_NormalWS250_g158120;
				float4 In_Shader3_g158130 = Local_Masks109_g158120;
				float4 In_Emissive3_g158130 = half4(1,1,1,1);
				float3 temp_output_3_0_g158125 = Local_Albedo139_g158120;
				float dotResult20_g158125 = dot( temp_output_3_0_g158125 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g158120 = dotResult20_g158125;
				float In_Grayscale3_g158130 = Local_Grayscale110_g158120;
				float clampResult144_g158120 = clamp( saturate( ( Local_Grayscale110_g158120 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g158120 = clampResult144_g158120;
				float In_Luminosity3_g158130 = Local_Luminosity145_g158120;
				float In_MultiMask3_g158130 = Local_MultiMask78_g158120;
				float temp_output_187_0_g158120 = (Local_AlbedoTex185_g158120).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g158120 = ( temp_output_187_0_g158120 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g158120 = temp_output_187_0_g158120;
				#endif
				half Local_AlphaClip111_g158120 = staticSwitch236_g158120;
				float In_AlphaClip3_g158130 = Local_AlphaClip111_g158120;
				half Local_AlphaFade246_g158120 = (lerpResult62_g158120).a;
				float In_AlphaFade3_g158130 = Local_AlphaFade246_g158120;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g158130 = temp_cast_22;
				float In_Transmission3_g158130 = 1.0;
				float In_Thickness3_g158130 = 0.0;
				float In_Diffusion3_g158130 = 0.0;
				{
				Data3_g158130.Dummy = In_Dummy3_g158130;
				Data3_g158130.Albedo = In_Albedo3_g158130;
				Data3_g158130.NormalTS = In_NormalTS3_g158130;
				Data3_g158130.NormalWS = In_NormalWS3_g158130;
				Data3_g158130.Shader = In_Shader3_g158130;
				Data3_g158130.Emissive= In_Emissive3_g158130;
				Data3_g158130.MultiMask = In_MultiMask3_g158130;
				Data3_g158130.Grayscale = In_Grayscale3_g158130;
				Data3_g158130.Luminosity = In_Luminosity3_g158130;
				Data3_g158130.AlphaClip = In_AlphaClip3_g158130;
				Data3_g158130.AlphaFade = In_AlphaFade3_g158130;
				Data3_g158130.Translucency = In_Translucency3_g158130;
				Data3_g158130.Transmission = In_Transmission3_g158130;
				Data3_g158130.Thickness = In_Thickness3_g158130;
				Data3_g158130.Diffusion = In_Diffusion3_g158130;
				}
				TVEVisualData Data4_g158148 = Data3_g158130;
				float Out_Dummy4_g158148 = 0;
				float3 Out_Albedo4_g158148 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158148 = float2( 0,0 );
				float3 Out_NormalWS4_g158148 = float3( 0,0,0 );
				float4 Out_Shader4_g158148 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158148 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158148 = 0;
				float Out_Grayscale4_g158148 = 0;
				float Out_Luminosity4_g158148 = 0;
				float Out_AlphaClip4_g158148 = 0;
				float Out_AlphaFade4_g158148 = 0;
				float3 Out_Translucency4_g158148 = float3( 0,0,0 );
				float Out_Transmission4_g158148 = 0;
				float Out_Thickness4_g158148 = 0;
				float Out_Diffusion4_g158148 = 0;
				{
				Out_Dummy4_g158148 = Data4_g158148.Dummy;
				Out_Albedo4_g158148 = Data4_g158148.Albedo;
				Out_NormalTS4_g158148 = Data4_g158148.NormalTS;
				Out_NormalWS4_g158148 = Data4_g158148.NormalWS;
				Out_Shader4_g158148 = Data4_g158148.Shader;
				Out_Emissive4_g158148= Data4_g158148.Emissive;
				Out_MultiMask4_g158148 = Data4_g158148.MultiMask;
				Out_Grayscale4_g158148 = Data4_g158148.Grayscale;
				Out_Luminosity4_g158148= Data4_g158148.Luminosity;
				Out_AlphaClip4_g158148 = Data4_g158148.AlphaClip;
				Out_AlphaFade4_g158148 = Data4_g158148.AlphaFade;
				Out_Translucency4_g158148 = Data4_g158148.Translucency;
				Out_Transmission4_g158148 = Data4_g158148.Transmission;
				Out_Thickness4_g158148 = Data4_g158148.Thickness;
				Out_Diffusion4_g158148 = Data4_g158148.Diffusion;
				}
				half3 Visual_Albedo527_g158134 = Out_Albedo4_g158148;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158135) = _SecondAlbedoTex;
				SamplerState Sampler276_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158134 = _second_coord_value;
				float4 temp_output_37_0_g158135 = Local_LayerCoords790_g158134;
				half4 Coords276_g158135 = temp_output_37_0_g158135;
				half2 TexCoord276_g158135 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158135 = SampleMain( Texture276_g158135 , Sampler276_g158135 , Coords276_g158135 , TexCoord276_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158135) = _SecondAlbedoTex;
				SamplerState Sampler275_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158135 = temp_output_37_0_g158135;
				float2 appendResult289_g158135 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158135 = appendResult289_g158135;
				#else
				float2 staticSwitch288_g158135 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158135 = staticSwitch288_g158135;
				half4 localSampleExtra275_g158135 = SampleExtra( Texture275_g158135 , Sampler275_g158135 , Coords275_g158135 , TexCoord275_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158135) = _SecondAlbedoTex;
				SamplerState Sampler238_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158135 = temp_output_37_0_g158135;
				TVEModelData Data15_g158146 = Data16_g158068;
				float Out_Dummy15_g158146 = 0;
				float3 Out_PositionOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158146 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158146 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158146 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158146 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158146 = float3( 0,0,0 );
				float4 Out_VertexData15_g158146 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158146 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158146 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158146 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158146 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158146 = Data15_g158146.Dummy;
				Out_PositionOS15_g158146 = Data15_g158146.PositionOS;
				Out_PositionWS15_g158146 = Data15_g158146.PositionWS;
				Out_PositionWO15_g158146 = Data15_g158146.PositionWO;
				Out_PositionRawOS15_g158146 = Data15_g158146.PositionRawOS;
				Out_PositionAddOS15_g158146 = Data15_g158146.PositionAddOS;
				Out_PivotOS15_g158146 = Data15_g158146.PivotOS;
				Out_PivotWS15_g158146 = Data15_g158146.PivotWS;
				Out_PivotWO15_g158146 = Data15_g158146.PivotWO;
				Out_NormalOS15_g158146 = Data15_g158146.NormalOS;
				Out_NormalWS15_g158146 = Data15_g158146.NormalWS;
				Out_NormalRawOS15_g158146 = Data15_g158146.NormalRawOS;
				Out_NormalRawWS15_g158146 = Data15_g158146.NormalRawWS;
				Out_TangentOS15_g158146 = Data15_g158146.TangentOS;
				Out_ViewDirWS15_g158146 = Data15_g158146.ViewDirWS;
				Out_VertexData15_g158146 = Data15_g158146.VertexData;
				Out_MotionData15_g158146 = Data15_g158146.MotionData;
				Out_BoundsData15_g158146 = Data15_g158146.BoundsData;
				Out_RotationData15_g158146 = Data15_g158146.RotationData;
				Out_FragmentData15_g158146 = Data15_g158146.FragmentData;
				}
				half3 Model_PositionWO636_g158134 = Out_PositionWO15_g158146;
				float3 temp_output_279_0_g158135 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158135 = temp_output_279_0_g158135;
				half4 localSamplePlanar2D238_g158135 = SamplePlanar2D( Texture238_g158135 , Sampler238_g158135 , Coords238_g158135 , WorldPosition238_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158135) = _SecondAlbedoTex;
				SamplerState Sampler246_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition246_g158135 = temp_output_279_0_g158135;
				half3 Model_NormalWS869_g158134 = Out_NormalWS15_g158146;
				float3 temp_output_280_0_g158135 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158135 = temp_output_280_0_g158135;
				half4 localSamplePlanar3D246_g158135 = SamplePlanar3D( Texture246_g158135 , Sampler246_g158135 , Coords246_g158135 , WorldPosition246_g158135 , WorldNormal246_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158135) = _SecondAlbedoTex;
				SamplerState Sampler234_g158135 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158135 = temp_output_37_0_g158135;
				float3 WorldPosition234_g158135 = temp_output_279_0_g158135;
				float4 localSampleStochastic2D234_g158135 = SampleStochastic2D( Texture234_g158135 , Sampler234_g158135 , Coords234_g158135 , WorldPosition234_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158135) = _SecondAlbedoTex;
				SamplerState Sampler263_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition263_g158135 = temp_output_279_0_g158135;
				half3 WorldNormal263_g158135 = temp_output_280_0_g158135;
				half4 localSampleStochastic3D263_g158135 = SampleStochastic3D( Texture263_g158135 , Sampler263_g158135 , Coords263_g158135 , WorldPosition263_g158135 , WorldNormal263_g158135 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158134 = localSampleExtra275_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158134 = localSamplePlanar2D238_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158134 = localSamplePlanar3D246_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158134 = localSampleStochastic2D234_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158134 = localSampleStochastic3D263_g158135;
				#else
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#endif
				half4 Local_AlbedoTex777_g158134 = staticSwitch693_g158134;
				float3 lerpResult716_g158134 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158134).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g158134 = lerpResult716_g158134;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158137) = _SecondShaderTex;
				SamplerState Sampler276_g158137 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158137 = Local_LayerCoords790_g158134;
				half4 Coords276_g158137 = temp_output_37_0_g158137;
				half2 TexCoord276_g158137 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158137 = SampleMain( Texture276_g158137 , Sampler276_g158137 , Coords276_g158137 , TexCoord276_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158137) = _SecondShaderTex;
				SamplerState Sampler275_g158137 = sampler_Linear_Repeat;
				half4 Coords275_g158137 = temp_output_37_0_g158137;
				float2 appendResult289_g158137 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158137 = appendResult289_g158137;
				#else
				float2 staticSwitch288_g158137 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158137 = staticSwitch288_g158137;
				half4 localSampleExtra275_g158137 = SampleExtra( Texture275_g158137 , Sampler275_g158137 , Coords275_g158137 , TexCoord275_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158137) = _SecondShaderTex;
				SamplerState Sampler238_g158137 = sampler_Linear_Repeat;
				half4 Coords238_g158137 = temp_output_37_0_g158137;
				float3 temp_output_279_0_g158137 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158137 = temp_output_279_0_g158137;
				half4 localSamplePlanar2D238_g158137 = SamplePlanar2D( Texture238_g158137 , Sampler238_g158137 , Coords238_g158137 , WorldPosition238_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158137) = _SecondShaderTex;
				SamplerState Sampler246_g158137 = sampler_Linear_Repeat;
				half4 Coords246_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition246_g158137 = temp_output_279_0_g158137;
				float3 temp_output_280_0_g158137 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158137 = temp_output_280_0_g158137;
				half4 localSamplePlanar3D246_g158137 = SamplePlanar3D( Texture246_g158137 , Sampler246_g158137 , Coords246_g158137 , WorldPosition246_g158137 , WorldNormal246_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158137) = _SecondShaderTex;
				SamplerState Sampler234_g158137 = sampler_Linear_Repeat;
				float4 Coords234_g158137 = temp_output_37_0_g158137;
				float3 WorldPosition234_g158137 = temp_output_279_0_g158137;
				float4 localSampleStochastic2D234_g158137 = SampleStochastic2D( Texture234_g158137 , Sampler234_g158137 , Coords234_g158137 , WorldPosition234_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158137) = _SecondShaderTex;
				SamplerState Sampler263_g158137 = sampler_Linear_Repeat;
				half4 Coords263_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition263_g158137 = temp_output_279_0_g158137;
				half3 WorldNormal263_g158137 = temp_output_280_0_g158137;
				half4 localSampleStochastic3D263_g158137 = SampleStochastic3D( Texture263_g158137 , Sampler263_g158137 , Coords263_g158137 , WorldPosition263_g158137 , WorldNormal263_g158137 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158134 = localSampleExtra275_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158134 = localSamplePlanar2D238_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158134 = localSamplePlanar3D246_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158134 = localSampleStochastic2D234_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158134 = localSampleStochastic3D263_g158137;
				#else
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#endif
				half4 Local_ShaderTex775_g158134 = staticSwitch722_g158134;
				float lerpResult739_g158134 = lerp( 1.0 , (Local_ShaderTex775_g158134).y , _SecondOcclusionValue);
				float4 appendResult749_g158134 = (float4(( (Local_ShaderTex775_g158134).x * _SecondMetallicValue ) , lerpResult739_g158134 , (Local_ShaderTex775_g158134).z , ( (Local_ShaderTex775_g158134).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g158134 = appendResult749_g158134;
				float clampResult17_g158141 = clamp( (Local_Masks750_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158142 = _SecondMultiRemap.x;
				float temp_output_10_0_g158142 = ( _SecondMultiRemap.y - temp_output_7_0_g158142 );
				float temp_output_765_0_g158134 = saturate( ( ( clampResult17_g158141 - temp_output_7_0_g158142 ) / ( temp_output_10_0_g158142 + 0.0001 ) ) );
				half Local_MultiMask767_g158134 = temp_output_765_0_g158134;
				float lerpResult705_g158134 = lerp( 1.0 , Local_MultiMask767_g158134 , _SecondColorMode);
				float4 lerpResult706_g158134 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g158134);
				half3 Local_ColorRGB774_g158134 = (lerpResult706_g158134).rgb;
				half3 Local_Albedo768_g158134 = ( Local_AlbedoRGB771_g158134 * Local_ColorRGB774_g158134 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158161 = 2.0;
				#else
				float staticSwitch1_g158161 = 4.594794;
				#endif
				float3 lerpResult985_g158134 = lerp( Local_Albedo768_g158134 , ( Visual_Albedo527_g158134 * Local_Albedo768_g158134 * staticSwitch1_g158161 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158138) = _SecondMaskTex;
				SamplerState Sampler276_g158138 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g158134 = _second_mask_coord_value;
				float4 temp_output_37_0_g158138 = Local_BlendCoords813_g158134;
				half4 Coords276_g158138 = temp_output_37_0_g158138;
				half2 TexCoord276_g158138 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158138 = SampleMain( Texture276_g158138 , Sampler276_g158138 , Coords276_g158138 , TexCoord276_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158138) = _SecondMaskTex;
				SamplerState Sampler275_g158138 = sampler_Linear_Repeat;
				half4 Coords275_g158138 = temp_output_37_0_g158138;
				float2 appendResult289_g158138 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158138 = appendResult289_g158138;
				#else
				float2 staticSwitch288_g158138 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158138 = staticSwitch288_g158138;
				half4 localSampleExtra275_g158138 = SampleExtra( Texture275_g158138 , Sampler275_g158138 , Coords275_g158138 , TexCoord275_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158138) = _SecondMaskTex;
				SamplerState Sampler238_g158138 = sampler_Linear_Repeat;
				half4 Coords238_g158138 = temp_output_37_0_g158138;
				float3 temp_output_279_0_g158138 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158138 = temp_output_279_0_g158138;
				half4 localSamplePlanar2D238_g158138 = SamplePlanar2D( Texture238_g158138 , Sampler238_g158138 , Coords238_g158138 , WorldPosition238_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158138) = _SecondMaskTex;
				SamplerState Sampler246_g158138 = sampler_Linear_Repeat;
				half4 Coords246_g158138 = temp_output_37_0_g158138;
				half3 WorldPosition246_g158138 = temp_output_279_0_g158138;
				float3 temp_output_280_0_g158138 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158138 = temp_output_280_0_g158138;
				half4 localSamplePlanar3D246_g158138 = SamplePlanar3D( Texture246_g158138 , Sampler246_g158138 , Coords246_g158138 , WorldPosition246_g158138 , WorldNormal246_g158138 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158134 = localSampleExtra275_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158134 = localSamplePlanar2D238_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158134 = localSamplePlanar3D246_g158138;
				#else
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#endif
				half4 Local_MaskTex861_g158134 = staticSwitch817_g158134;
				float clampResult17_g158152 = clamp( (Local_MaskTex861_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158151 = _SecondMaskRemap.x;
				float temp_output_10_0_g158151 = ( _SecondMaskRemap.y - temp_output_7_0_g158151 );
				float lerpResult1015_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158152 - temp_output_7_0_g158151 ) / ( temp_output_10_0_g158151 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g158134 = lerpResult1015_g158134;
				#else
				float staticSwitch893_g158134 = 1.0;
				#endif
				half Blend_TexMask429_g158134 = staticSwitch893_g158134;
				half3 Visual_NormalWS951_g158134 = Out_NormalWS4_g158148;
				float clampResult17_g158153 = clamp( saturate( (Visual_NormalWS951_g158134).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158154 = _SecondProjRemap.x;
				float temp_output_10_0_g158154 = ( _SecondProjRemap.y - temp_output_7_0_g158154 );
				float lerpResult996_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158153 - temp_output_7_0_g158154 ) / ( temp_output_10_0_g158154 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g158134 = lerpResult996_g158134;
				#else
				float staticSwitch878_g158134 = 1.0;
				#endif
				half Blend_ProjMask434_g158134 = staticSwitch878_g158134;
				half4 Model_VertexMasks964_g158134 = Out_VertexData15_g158146;
				float4 break965_g158134 = Model_VertexMasks964_g158134;
				float4 break33_g158155 = _second_vert_mode;
				float temp_output_30_0_g158155 = ( break965_g158134.x * break33_g158155.x );
				float temp_output_29_0_g158155 = ( break965_g158134.y * break33_g158155.y );
				float temp_output_31_0_g158155 = ( break965_g158134.z * break33_g158155.z );
				float temp_output_28_0_g158155 = ( temp_output_30_0_g158155 + temp_output_29_0_g158155 + temp_output_31_0_g158155 + ( break965_g158134.w * break33_g158155.w ) );
				float clampResult17_g158149 = clamp( temp_output_28_0_g158155 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158150 = _SecondMeshRemap.x;
				float temp_output_10_0_g158150 = ( _SecondMeshRemap.y - temp_output_7_0_g158150 );
				float lerpResult1017_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158149 - temp_output_7_0_g158150 ) / ( temp_output_10_0_g158150 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g158163 = lerpResult1017_g158134;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158163 = ( temp_output_6_0_g158163 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158163 = temp_output_6_0_g158163;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g158134 = staticSwitch14_g158163;
				#else
				float staticSwitch917_g158134 = 1.0;
				#endif
				half Blend_VertMask918_g158134 = staticSwitch917_g158134;
				float localBuildGlobalData204_g158069 = ( 0.0 );
				TVEGlobalData Data204_g158069 = (TVEGlobalData)0;
				half Dummy211_g158069 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g158069 = Dummy211_g158069;
				float4 temp_output_362_164_g158069 = TVE_CoatParams;
				half4 Coat_Params302_g158069 = temp_output_362_164_g158069;
				float4 In_CoatParams204_g158069 = Coat_Params302_g158069;
				float4 temp_output_361_164_g158069 = TVE_PaintParams;
				half4 Paint_Params71_g158069 = temp_output_361_164_g158069;
				float4 In_PaintParams204_g158069 = Paint_Params71_g158069;
				float4 temp_output_365_163_g158069 = TVE_GlowParams;
				half4 Glow_Params248_g158069 = temp_output_365_163_g158069;
				float4 In_GlowParams204_g158069 = Glow_Params248_g158069;
				float4 temp_output_363_141_g158069 = TVE_AtmoParams;
				half4 Atmo_Params80_g158069 = temp_output_363_141_g158069;
				float4 In_AtmoParams204_g158069 = Atmo_Params80_g158069;
				float4 temp_output_364_139_g158069 = TVE_FormParams;
				half4 Form_Params112_g158069 = temp_output_364_139_g158069;
				float4 In_FormParams204_g158069 = Form_Params112_g158069;
				float4 temp_output_366_145_g158069 = TVE_WindParams;
				half4 Wind_Params88_g158069 = temp_output_366_145_g158069;
				float4 In_WindParams204_g158069 = Wind_Params88_g158069;
				float4 temp_output_367_145_g158069 = TVE_PushParams;
				half4 Push_Params335_g158069 = temp_output_367_145_g158069;
				float4 In_PushParams204_g158069 = Push_Params335_g158069;
				{
				Data204_g158069.Dummy = In_Dummy204_g158069;
				Data204_g158069.CoatParams = In_CoatParams204_g158069;
				Data204_g158069.PaintParams = In_PaintParams204_g158069;
				Data204_g158069.GlowParams = In_GlowParams204_g158069;
				Data204_g158069.AtmoParams = In_AtmoParams204_g158069;
				Data204_g158069.FormParams= In_FormParams204_g158069;
				Data204_g158069.WindParams = In_WindParams204_g158069;
				Data204_g158069.PushParams = In_PushParams204_g158069;
				}
				TVEGlobalData Data15_g158147 = Data204_g158069;
				float Out_Dummy15_g158147 = 0;
				float4 Out_CoatParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158147 = Data15_g158147.Dummy;
				Out_CoatParams15_g158147 = Data15_g158147.CoatParams;
				Out_PaintParams15_g158147 = Data15_g158147.PaintParams;
				Out_GlowParams15_g158147 = Data15_g158147.GlowParams;
				Out_AtmoParams15_g158147= Data15_g158147.AtmoParams;
				Out_FormParams15_g158147 = Data15_g158147.FormParams;
				Out_LandParams15_g158147 = Data15_g158147.LandParams;
				Out_WindParams15_g158147 = Data15_g158147.WindParams;
				Out_PushParams15_g158147 = Data15_g158147.PushParams;
				}
				half4 Global_CoatParams975_g158134 = Out_CoatParams15_g158147;
				float lerpResult1013_g158134 = lerp( 1.0 , (Global_CoatParams975_g158134).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g158134 = lerpResult1013_g158134;
				#else
				float staticSwitch971_g158134 = 1.0;
				#endif
				half Blend_GlobalMask972_g158134 = staticSwitch971_g158134;
				float temp_output_432_0_g158134 = ( _SecondIntensityValue * Blend_TexMask429_g158134 * Blend_ProjMask434_g158134 * Blend_VertMask918_g158134 * Blend_GlobalMask972_g158134 );
				float clampResult17_g158157 = clamp( temp_output_432_0_g158134 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158156 = _SecondBlendRemap.x;
				float temp_output_10_0_g158156 = ( _SecondBlendRemap.y - temp_output_7_0_g158156 );
				half Blend_Mask412_g158134 = ( saturate( ( ( clampResult17_g158157 - temp_output_7_0_g158156 ) / ( temp_output_10_0_g158156 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g158134 = lerp( Visual_Albedo527_g158134 , lerpResult985_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g158134 = lerpResult403_g158134;
				#else
				float3 staticSwitch415_g158134 = Visual_Albedo527_g158134;
				#endif
				half3 Final_Albedo601_g158134 = staticSwitch415_g158134;
				float3 In_Albedo3_g158145 = Final_Albedo601_g158134;
				half2 Visual_NormalTS529_g158134 = Out_NormalTS4_g158148;
				float2 lerpResult40_g158159 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158134 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158136) = _SecondNormalTex;
				SamplerState Sampler276_g158136 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158136 = Local_LayerCoords790_g158134;
				half4 Coords276_g158136 = temp_output_37_0_g158136;
				half2 TexCoord276_g158136 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158136 = SampleMain( Texture276_g158136 , Sampler276_g158136 , Coords276_g158136 , TexCoord276_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158136) = _SecondNormalTex;
				SamplerState Sampler275_g158136 = sampler_Linear_Repeat;
				half4 Coords275_g158136 = temp_output_37_0_g158136;
				float2 appendResult289_g158136 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158136 = appendResult289_g158136;
				#else
				float2 staticSwitch288_g158136 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158136 = staticSwitch288_g158136;
				half4 localSampleExtra275_g158136 = SampleExtra( Texture275_g158136 , Sampler275_g158136 , Coords275_g158136 , TexCoord275_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158136) = _SecondNormalTex;
				SamplerState Sampler238_g158136 = sampler_Linear_Repeat;
				half4 Coords238_g158136 = temp_output_37_0_g158136;
				float3 temp_output_279_0_g158136 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158136 = temp_output_279_0_g158136;
				half4 localSamplePlanar2D238_g158136 = SamplePlanar2D( Texture238_g158136 , Sampler238_g158136 , Coords238_g158136 , WorldPosition238_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158136) = _SecondNormalTex;
				SamplerState Sampler246_g158136 = sampler_Linear_Repeat;
				half4 Coords246_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition246_g158136 = temp_output_279_0_g158136;
				float3 temp_output_280_0_g158136 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158136 = temp_output_280_0_g158136;
				half4 localSamplePlanar3D246_g158136 = SamplePlanar3D( Texture246_g158136 , Sampler246_g158136 , Coords246_g158136 , WorldPosition246_g158136 , WorldNormal246_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158136) = _SecondNormalTex;
				SamplerState Sampler234_g158136 = sampler_Linear_Repeat;
				float4 Coords234_g158136 = temp_output_37_0_g158136;
				float3 WorldPosition234_g158136 = temp_output_279_0_g158136;
				float4 localSampleStochastic2D234_g158136 = SampleStochastic2D( Texture234_g158136 , Sampler234_g158136 , Coords234_g158136 , WorldPosition234_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158136) = _SecondNormalTex;
				SamplerState Sampler263_g158136 = sampler_Linear_Repeat;
				half4 Coords263_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition263_g158136 = temp_output_279_0_g158136;
				half3 WorldNormal263_g158136 = temp_output_280_0_g158136;
				half4 localSampleStochastic3D263_g158136 = SampleStochastic3D( Texture263_g158136 , Sampler263_g158136 , Coords263_g158136 , WorldPosition263_g158136 , WorldNormal263_g158136 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158134 = localSampleExtra275_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158134 = localSamplePlanar2D238_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158134 = localSamplePlanar3D246_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158134 = localSampleStochastic2D234_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158134 = localSampleStochastic3D263_g158136;
				#else
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#endif
				half4 Local_NormalTex776_g158134 = staticSwitch698_g158134;
				half4 Normal_Packed45_g158139 = Local_NormalTex776_g158134;
				float2 appendResult58_g158139 = (float2(( (Normal_Packed45_g158139).x * (Normal_Packed45_g158139).w ) , (Normal_Packed45_g158139).y));
				half2 Normal_Default50_g158139 = appendResult58_g158139;
				half2 Normal_ASTC41_g158139 = (Normal_Packed45_g158139).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158139 = Normal_ASTC41_g158139;
				#else
				float2 staticSwitch38_g158139 = Normal_Default50_g158139;
				#endif
				half2 Normal_NO_DTX544_g158139 = (Normal_Packed45_g158139).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158139 = Normal_NO_DTX544_g158139;
				#else
				float2 staticSwitch37_g158139 = staticSwitch38_g158139;
				#endif
				float2 temp_output_724_0_g158134 = ( (staticSwitch37_g158139*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g158140 = temp_output_724_0_g158134;
				float2 break71_g158140 = Normal_Planar45_g158140;
				float3 appendResult72_g158140 = (float3(break71_g158140.x , 0.0 , break71_g158140.y));
				float2 temp_output_858_0_g158134 = (mul( ase_worldToTangent, appendResult72_g158140 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#endif
				half2 Local_NormalTS729_g158134 = staticSwitch727_g158134;
				float2 temp_output_36_0_g158159 = ( lerpResult40_g158159 + Local_NormalTS729_g158134 );
				float2 lerpResult405_g158134 = lerp( Visual_NormalTS529_g158134 , temp_output_36_0_g158159 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g158134 = lerpResult405_g158134;
				#else
				float2 staticSwitch418_g158134 = Visual_NormalTS529_g158134;
				#endif
				half2 Final_NormalTS612_g158134 = staticSwitch418_g158134;
				float2 In_NormalTS3_g158145 = Final_NormalTS612_g158134;
				float3 appendResult68_g158160 = (float3(Final_NormalTS612_g158134 , 1.0));
				float3 tanNormal74_g158160 = appendResult68_g158160;
				float3 worldNormal74_g158160 = normalize( float3(dot(tanToWorld0,tanNormal74_g158160), dot(tanToWorld1,tanNormal74_g158160), dot(tanToWorld2,tanNormal74_g158160)) );
				half3 Final_NormalWS950_g158134 = worldNormal74_g158160;
				float3 In_NormalWS3_g158145 = Final_NormalWS950_g158134;
				half4 Visual_Shader531_g158134 = Out_Shader4_g158148;
				float4 lerpResult994_g158134 = lerp( Local_Masks750_g158134 , ( Visual_Shader531_g158134 * Local_Masks750_g158134 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g158134 = lerp( Visual_Shader531_g158134 , lerpResult994_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g158134 = lerpResult440_g158134;
				#else
				float4 staticSwitch451_g158134 = Visual_Shader531_g158134;
				#endif
				half4 Final_Masks613_g158134 = staticSwitch451_g158134;
				float4 In_Shader3_g158145 = Final_Masks613_g158134;
				float4 In_Emissive3_g158145 = Out_Emissive4_g158148;
				float3 temp_output_3_0_g158162 = Final_Albedo601_g158134;
				float dotResult20_g158162 = dot( temp_output_3_0_g158162 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158134 = dotResult20_g158162;
				float In_Grayscale3_g158145 = Final_Grayscale615_g158134;
				float clampResult651_g158134 = clamp( saturate( ( Final_Grayscale615_g158134 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158134 = clampResult651_g158134;
				float In_Luminosity3_g158145 = Final_Luminosity652_g158134;
				half Visual_MultiMask547_g158134 = Out_MultiMask4_g158148;
				float lerpResult477_g158134 = lerp( Visual_MultiMask547_g158134 , Local_MultiMask767_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch482_g158134 = lerpResult477_g158134;
				#else
				float staticSwitch482_g158134 = Visual_MultiMask547_g158134;
				#endif
				half Final_MultiMask572_g158134 = staticSwitch482_g158134;
				float In_MultiMask3_g158145 = Final_MultiMask572_g158134;
				half Visual_AlphaClip559_g158134 = Out_AlphaClip4_g158148;
				float temp_output_718_0_g158134 = (Local_AlbedoTex777_g158134).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g158134 = ( temp_output_718_0_g158134 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g158134 = temp_output_718_0_g158134;
				#endif
				half Local_AlphaClip772_g158134 = staticSwitch932_g158134;
				float lerpResult448_g158134 = lerp( Visual_AlphaClip559_g158134 , Local_AlphaClip772_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch564_g158134 = lerpResult448_g158134;
				#else
				float staticSwitch564_g158134 = Visual_AlphaClip559_g158134;
				#endif
				half Final_AlphaClip602_g158134 = staticSwitch564_g158134;
				float In_AlphaClip3_g158145 = Final_AlphaClip602_g158134;
				half Visual_AlphaFade588_g158134 = Out_AlphaFade4_g158148;
				half Local_AlphaFade773_g158134 = (lerpResult706_g158134).a;
				float lerpResult604_g158134 = lerp( Visual_AlphaFade588_g158134 , Local_AlphaFade773_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch608_g158134 = lerpResult604_g158134;
				#else
				float staticSwitch608_g158134 = Visual_AlphaFade588_g158134;
				#endif
				half Final_AlphaFade611_g158134 = staticSwitch608_g158134;
				float In_AlphaFade3_g158145 = Final_AlphaFade611_g158134;
				float3 In_Translucency3_g158145 = Out_Translucency4_g158148;
				float In_Transmission3_g158145 = Out_Transmission4_g158148;
				float In_Thickness3_g158145 = Out_Thickness4_g158148;
				float In_Diffusion3_g158145 = Out_Diffusion4_g158148;
				{
				Data3_g158145.Dummy = In_Dummy3_g158145;
				Data3_g158145.Albedo = In_Albedo3_g158145;
				Data3_g158145.NormalTS = In_NormalTS3_g158145;
				Data3_g158145.NormalWS = In_NormalWS3_g158145;
				Data3_g158145.Shader = In_Shader3_g158145;
				Data3_g158145.Emissive= In_Emissive3_g158145;
				Data3_g158145.MultiMask = In_MultiMask3_g158145;
				Data3_g158145.Grayscale = In_Grayscale3_g158145;
				Data3_g158145.Luminosity = In_Luminosity3_g158145;
				Data3_g158145.AlphaClip = In_AlphaClip3_g158145;
				Data3_g158145.AlphaFade = In_AlphaFade3_g158145;
				Data3_g158145.Translucency = In_Translucency3_g158145;
				Data3_g158145.Transmission = In_Transmission3_g158145;
				Data3_g158145.Thickness = In_Thickness3_g158145;
				Data3_g158145.Diffusion = In_Diffusion3_g158145;
				}
				TVEVisualData Data4_g158181 = Data3_g158145;
				float Out_Dummy4_g158181 = 0;
				float3 Out_Albedo4_g158181 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158181 = float2( 0,0 );
				float3 Out_NormalWS4_g158181 = float3( 0,0,0 );
				float4 Out_Shader4_g158181 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158181 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158181 = 0;
				float Out_Grayscale4_g158181 = 0;
				float Out_Luminosity4_g158181 = 0;
				float Out_AlphaClip4_g158181 = 0;
				float Out_AlphaFade4_g158181 = 0;
				float3 Out_Translucency4_g158181 = float3( 0,0,0 );
				float Out_Transmission4_g158181 = 0;
				float Out_Thickness4_g158181 = 0;
				float Out_Diffusion4_g158181 = 0;
				{
				Out_Dummy4_g158181 = Data4_g158181.Dummy;
				Out_Albedo4_g158181 = Data4_g158181.Albedo;
				Out_NormalTS4_g158181 = Data4_g158181.NormalTS;
				Out_NormalWS4_g158181 = Data4_g158181.NormalWS;
				Out_Shader4_g158181 = Data4_g158181.Shader;
				Out_Emissive4_g158181= Data4_g158181.Emissive;
				Out_MultiMask4_g158181 = Data4_g158181.MultiMask;
				Out_Grayscale4_g158181 = Data4_g158181.Grayscale;
				Out_Luminosity4_g158181= Data4_g158181.Luminosity;
				Out_AlphaClip4_g158181 = Data4_g158181.AlphaClip;
				Out_AlphaFade4_g158181 = Data4_g158181.AlphaFade;
				Out_Translucency4_g158181 = Data4_g158181.Translucency;
				Out_Transmission4_g158181 = Data4_g158181.Transmission;
				Out_Thickness4_g158181 = Data4_g158181.Thickness;
				Out_Diffusion4_g158181 = Data4_g158181.Diffusion;
				}
				half3 Visual_Albedo527_g158164 = Out_Albedo4_g158181;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler276_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158164 = _third_coord_value;
				float4 temp_output_37_0_g158165 = Local_LayerCoords790_g158164;
				half4 Coords276_g158165 = temp_output_37_0_g158165;
				half2 TexCoord276_g158165 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158165 = SampleMain( Texture276_g158165 , Sampler276_g158165 , Coords276_g158165 , TexCoord276_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler275_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158165 = temp_output_37_0_g158165;
				float2 appendResult289_g158165 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158165 = appendResult289_g158165;
				#else
				float2 staticSwitch288_g158165 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158165 = staticSwitch288_g158165;
				half4 localSampleExtra275_g158165 = SampleExtra( Texture275_g158165 , Sampler275_g158165 , Coords275_g158165 , TexCoord275_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler238_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158165 = temp_output_37_0_g158165;
				TVEModelData Data15_g158180 = Data16_g158068;
				float Out_Dummy15_g158180 = 0;
				float3 Out_PositionOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158180 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158180 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158180 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158180 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158180 = float3( 0,0,0 );
				float4 Out_VertexData15_g158180 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158180 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158180 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158180 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158180 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158180 = Data15_g158180.Dummy;
				Out_PositionOS15_g158180 = Data15_g158180.PositionOS;
				Out_PositionWS15_g158180 = Data15_g158180.PositionWS;
				Out_PositionWO15_g158180 = Data15_g158180.PositionWO;
				Out_PositionRawOS15_g158180 = Data15_g158180.PositionRawOS;
				Out_PositionAddOS15_g158180 = Data15_g158180.PositionAddOS;
				Out_PivotOS15_g158180 = Data15_g158180.PivotOS;
				Out_PivotWS15_g158180 = Data15_g158180.PivotWS;
				Out_PivotWO15_g158180 = Data15_g158180.PivotWO;
				Out_NormalOS15_g158180 = Data15_g158180.NormalOS;
				Out_NormalWS15_g158180 = Data15_g158180.NormalWS;
				Out_NormalRawOS15_g158180 = Data15_g158180.NormalRawOS;
				Out_NormalRawWS15_g158180 = Data15_g158180.NormalRawWS;
				Out_TangentOS15_g158180 = Data15_g158180.TangentOS;
				Out_ViewDirWS15_g158180 = Data15_g158180.ViewDirWS;
				Out_VertexData15_g158180 = Data15_g158180.VertexData;
				Out_MotionData15_g158180 = Data15_g158180.MotionData;
				Out_BoundsData15_g158180 = Data15_g158180.BoundsData;
				Out_RotationData15_g158180 = Data15_g158180.RotationData;
				Out_FragmentData15_g158180 = Data15_g158180.FragmentData;
				}
				half3 Model_PositionWO636_g158164 = Out_PositionWO15_g158180;
				float3 temp_output_279_0_g158165 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158165 = temp_output_279_0_g158165;
				half4 localSamplePlanar2D238_g158165 = SamplePlanar2D( Texture238_g158165 , Sampler238_g158165 , Coords238_g158165 , WorldPosition238_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler246_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition246_g158165 = temp_output_279_0_g158165;
				half3 Model_NormalWS869_g158164 = Out_NormalWS15_g158180;
				float3 temp_output_280_0_g158165 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158165 = temp_output_280_0_g158165;
				half4 localSamplePlanar3D246_g158165 = SamplePlanar3D( Texture246_g158165 , Sampler246_g158165 , Coords246_g158165 , WorldPosition246_g158165 , WorldNormal246_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler234_g158165 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158165 = temp_output_37_0_g158165;
				float3 WorldPosition234_g158165 = temp_output_279_0_g158165;
				float4 localSampleStochastic2D234_g158165 = SampleStochastic2D( Texture234_g158165 , Sampler234_g158165 , Coords234_g158165 , WorldPosition234_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler263_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition263_g158165 = temp_output_279_0_g158165;
				half3 WorldNormal263_g158165 = temp_output_280_0_g158165;
				half4 localSampleStochastic3D263_g158165 = SampleStochastic3D( Texture263_g158165 , Sampler263_g158165 , Coords263_g158165 , WorldPosition263_g158165 , WorldNormal263_g158165 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158164 = localSampleExtra275_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158164 = localSamplePlanar2D238_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158164 = localSamplePlanar3D246_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158164 = localSampleStochastic2D234_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158164 = localSampleStochastic3D263_g158165;
				#else
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#endif
				half4 Local_AlbedoTex777_g158164 = staticSwitch693_g158164;
				float3 lerpResult716_g158164 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158164).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g158164 = lerpResult716_g158164;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158167) = _ThirdShaderTex;
				SamplerState Sampler276_g158167 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158167 = Local_LayerCoords790_g158164;
				half4 Coords276_g158167 = temp_output_37_0_g158167;
				half2 TexCoord276_g158167 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158167 = SampleMain( Texture276_g158167 , Sampler276_g158167 , Coords276_g158167 , TexCoord276_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158167) = _ThirdShaderTex;
				SamplerState Sampler275_g158167 = sampler_Linear_Repeat;
				half4 Coords275_g158167 = temp_output_37_0_g158167;
				float2 appendResult289_g158167 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158167 = appendResult289_g158167;
				#else
				float2 staticSwitch288_g158167 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158167 = staticSwitch288_g158167;
				half4 localSampleExtra275_g158167 = SampleExtra( Texture275_g158167 , Sampler275_g158167 , Coords275_g158167 , TexCoord275_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158167) = _ThirdShaderTex;
				SamplerState Sampler238_g158167 = sampler_Linear_Repeat;
				half4 Coords238_g158167 = temp_output_37_0_g158167;
				float3 temp_output_279_0_g158167 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158167 = temp_output_279_0_g158167;
				half4 localSamplePlanar2D238_g158167 = SamplePlanar2D( Texture238_g158167 , Sampler238_g158167 , Coords238_g158167 , WorldPosition238_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158167) = _ThirdShaderTex;
				SamplerState Sampler246_g158167 = sampler_Linear_Repeat;
				half4 Coords246_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition246_g158167 = temp_output_279_0_g158167;
				float3 temp_output_280_0_g158167 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158167 = temp_output_280_0_g158167;
				half4 localSamplePlanar3D246_g158167 = SamplePlanar3D( Texture246_g158167 , Sampler246_g158167 , Coords246_g158167 , WorldPosition246_g158167 , WorldNormal246_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158167) = _ThirdShaderTex;
				SamplerState Sampler234_g158167 = sampler_Linear_Repeat;
				float4 Coords234_g158167 = temp_output_37_0_g158167;
				float3 WorldPosition234_g158167 = temp_output_279_0_g158167;
				float4 localSampleStochastic2D234_g158167 = SampleStochastic2D( Texture234_g158167 , Sampler234_g158167 , Coords234_g158167 , WorldPosition234_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158167) = _ThirdShaderTex;
				SamplerState Sampler263_g158167 = sampler_Linear_Repeat;
				half4 Coords263_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition263_g158167 = temp_output_279_0_g158167;
				half3 WorldNormal263_g158167 = temp_output_280_0_g158167;
				half4 localSampleStochastic3D263_g158167 = SampleStochastic3D( Texture263_g158167 , Sampler263_g158167 , Coords263_g158167 , WorldPosition263_g158167 , WorldNormal263_g158167 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158164 = localSampleExtra275_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158164 = localSamplePlanar2D238_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158164 = localSamplePlanar3D246_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158164 = localSampleStochastic2D234_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158164 = localSampleStochastic3D263_g158167;
				#else
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#endif
				half4 Local_ShaderTex775_g158164 = staticSwitch722_g158164;
				float lerpResult739_g158164 = lerp( 1.0 , (Local_ShaderTex775_g158164).y , _ThirdOcclusionValue);
				float4 appendResult749_g158164 = (float4(( (Local_ShaderTex775_g158164).x * _ThirdMetallicValue ) , lerpResult739_g158164 , (Local_ShaderTex775_g158164).z , ( (Local_ShaderTex775_g158164).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g158164 = appendResult749_g158164;
				float clampResult17_g158170 = clamp( (Local_Masks750_g158164).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158171 = _ThirdMultiRemap.x;
				float temp_output_10_0_g158171 = ( _ThirdMultiRemap.y - temp_output_7_0_g158171 );
				float temp_output_765_0_g158164 = saturate( ( ( clampResult17_g158170 - temp_output_7_0_g158171 ) / ( temp_output_10_0_g158171 + 0.0001 ) ) );
				half Local_MultiMask767_g158164 = temp_output_765_0_g158164;
				float lerpResult705_g158164 = lerp( 1.0 , Local_MultiMask767_g158164 , _ThirdColorMode);
				float4 lerpResult706_g158164 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g158164);
				half3 Local_ColorRGB774_g158164 = (lerpResult706_g158164).rgb;
				half3 Local_Albedo768_g158164 = ( Local_AlbedoRGB771_g158164 * Local_ColorRGB774_g158164 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158189 = 2.0;
				#else
				float staticSwitch1_g158189 = 4.594794;
				#endif
				float3 lerpResult985_g158164 = lerp( Local_Albedo768_g158164 , ( Visual_Albedo527_g158164 * Local_Albedo768_g158164 * staticSwitch1_g158189 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158192) = _ThirdMaskTex;
				SamplerState Sampler276_g158192 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g158164 = _third_mask_coord_value;
				float4 temp_output_37_0_g158192 = Local_MaskCoords813_g158164;
				half4 Coords276_g158192 = temp_output_37_0_g158192;
				half2 TexCoord276_g158192 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158192 = SampleMain( Texture276_g158192 , Sampler276_g158192 , Coords276_g158192 , TexCoord276_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158192) = _ThirdMaskTex;
				SamplerState Sampler275_g158192 = sampler_Linear_Repeat;
				half4 Coords275_g158192 = temp_output_37_0_g158192;
				float2 appendResult289_g158192 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158192 = appendResult289_g158192;
				#else
				float2 staticSwitch288_g158192 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158192 = staticSwitch288_g158192;
				half4 localSampleExtra275_g158192 = SampleExtra( Texture275_g158192 , Sampler275_g158192 , Coords275_g158192 , TexCoord275_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158192) = _ThirdMaskTex;
				SamplerState Sampler238_g158192 = sampler_Linear_Repeat;
				half4 Coords238_g158192 = temp_output_37_0_g158192;
				float3 temp_output_279_0_g158192 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158192 = temp_output_279_0_g158192;
				half4 localSamplePlanar2D238_g158192 = SamplePlanar2D( Texture238_g158192 , Sampler238_g158192 , Coords238_g158192 , WorldPosition238_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158192) = _ThirdMaskTex;
				SamplerState Sampler246_g158192 = sampler_Linear_Repeat;
				half4 Coords246_g158192 = temp_output_37_0_g158192;
				half3 WorldPosition246_g158192 = temp_output_279_0_g158192;
				float3 temp_output_280_0_g158192 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158192 = temp_output_280_0_g158192;
				half4 localSamplePlanar3D246_g158192 = SamplePlanar3D( Texture246_g158192 , Sampler246_g158192 , Coords246_g158192 , WorldPosition246_g158192 , WorldNormal246_g158192 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158164 = localSampleExtra275_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158164 = localSamplePlanar2D238_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158164 = localSamplePlanar3D246_g158192;
				#else
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#endif
				half4 Local_MaskTex861_g158164 = staticSwitch817_g158164;
				float clampResult17_g158175 = clamp( (Local_MaskTex861_g158164).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g158176 = _ThirdMaskRemap.x;
				float temp_output_10_0_g158176 = ( _ThirdMaskRemap.y - temp_output_7_0_g158176 );
				float lerpResult1028_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158175 - temp_output_7_0_g158176 ) / ( temp_output_10_0_g158176 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g158164 = lerpResult1028_g158164;
				#else
				float staticSwitch892_g158164 = 1.0;
				#endif
				half Detail_TexMask429_g158164 = staticSwitch892_g158164;
				half4 Model_VertexMasks960_g158164 = Out_VertexData15_g158180;
				float4 break961_g158164 = Model_VertexMasks960_g158164;
				float4 break33_g158179 = _third_vert_mode;
				float temp_output_30_0_g158179 = ( break961_g158164.x * break33_g158179.x );
				float temp_output_29_0_g158179 = ( break961_g158164.y * break33_g158179.y );
				float temp_output_31_0_g158179 = ( break961_g158164.z * break33_g158179.z );
				float temp_output_28_0_g158179 = ( temp_output_30_0_g158179 + temp_output_29_0_g158179 + temp_output_31_0_g158179 + ( break961_g158164.w * break33_g158179.w ) );
				float clampResult17_g158173 = clamp( temp_output_28_0_g158179 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158174 = _ThirdMeshRemap.x;
				float temp_output_10_0_g158174 = ( _ThirdMeshRemap.y - temp_output_7_0_g158174 );
				float lerpResult1026_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158173 - temp_output_7_0_g158174 ) / ( temp_output_10_0_g158174 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g158191 = lerpResult1026_g158164;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158191 = ( temp_output_6_0_g158191 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158191 = temp_output_6_0_g158191;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g158164 = staticSwitch14_g158191;
				#else
				float staticSwitch917_g158164 = 1.0;
				#endif
				half Blend_VertMask913_g158164 = staticSwitch917_g158164;
				half3 Visual_NormalWS953_g158164 = Out_NormalWS4_g158181;
				float clampResult17_g158177 = clamp( saturate( (Visual_NormalWS953_g158164).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158178 = _ThirdProjRemap.x;
				float temp_output_10_0_g158178 = ( _ThirdProjRemap.y - temp_output_7_0_g158178 );
				float lerpResult1004_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158177 - temp_output_7_0_g158178 ) / ( temp_output_10_0_g158178 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g158164 = lerpResult1004_g158164;
				#else
				float staticSwitch908_g158164 = 1.0;
				#endif
				half Blend_ProjMask912_g158164 = staticSwitch908_g158164;
				TVEGlobalData Data15_g158183 = Data204_g158069;
				float Out_Dummy15_g158183 = 0;
				float4 Out_CoatParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158183 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158183 = Data15_g158183.Dummy;
				Out_CoatParams15_g158183 = Data15_g158183.CoatParams;
				Out_PaintParams15_g158183 = Data15_g158183.PaintParams;
				Out_GlowParams15_g158183 = Data15_g158183.GlowParams;
				Out_AtmoParams15_g158183= Data15_g158183.AtmoParams;
				Out_FormParams15_g158183 = Data15_g158183.FormParams;
				Out_LandParams15_g158183 = Data15_g158183.LandParams;
				Out_WindParams15_g158183 = Data15_g158183.WindParams;
				Out_PushParams15_g158183 = Data15_g158183.PushParams;
				}
				half4 Global_CoatParams972_g158164 = Out_CoatParams15_g158183;
				float lerpResult1023_g158164 = lerp( 1.0 , (Global_CoatParams972_g158164).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g158164 = lerpResult1023_g158164;
				#else
				float staticSwitch965_g158164 = 1.0;
				#endif
				half Blend_GlobalMask968_g158164 = staticSwitch965_g158164;
				float temp_output_432_0_g158164 = ( _ThirdIntensityValue * Detail_TexMask429_g158164 * Blend_VertMask913_g158164 * Blend_ProjMask912_g158164 * Blend_GlobalMask968_g158164 );
				float clampResult17_g158185 = clamp( temp_output_432_0_g158164 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158184 = _ThirdBlendRemap.x;
				float temp_output_10_0_g158184 = ( _ThirdBlendRemap.y - temp_output_7_0_g158184 );
				half Detail_Mask412_g158164 = ( saturate( ( ( clampResult17_g158185 - temp_output_7_0_g158184 ) / ( temp_output_10_0_g158184 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g158164 = lerp( Visual_Albedo527_g158164 , lerpResult985_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g158164 = lerpResult989_g158164;
				#else
				float3 staticSwitch415_g158164 = Visual_Albedo527_g158164;
				#endif
				half3 Final_Albedo601_g158164 = staticSwitch415_g158164;
				float3 In_Albedo3_g158182 = Final_Albedo601_g158164;
				half2 Visual_NormalTS529_g158164 = Out_NormalTS4_g158181;
				float2 lerpResult40_g158187 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158164 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158166) = _ThirdNormalTex;
				SamplerState Sampler276_g158166 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158166 = Local_LayerCoords790_g158164;
				half4 Coords276_g158166 = temp_output_37_0_g158166;
				half2 TexCoord276_g158166 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158166 = SampleMain( Texture276_g158166 , Sampler276_g158166 , Coords276_g158166 , TexCoord276_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158166) = _ThirdNormalTex;
				SamplerState Sampler275_g158166 = sampler_Linear_Repeat;
				half4 Coords275_g158166 = temp_output_37_0_g158166;
				float2 appendResult289_g158166 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158166 = appendResult289_g158166;
				#else
				float2 staticSwitch288_g158166 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158166 = staticSwitch288_g158166;
				half4 localSampleExtra275_g158166 = SampleExtra( Texture275_g158166 , Sampler275_g158166 , Coords275_g158166 , TexCoord275_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158166) = _ThirdNormalTex;
				SamplerState Sampler238_g158166 = sampler_Linear_Repeat;
				half4 Coords238_g158166 = temp_output_37_0_g158166;
				float3 temp_output_279_0_g158166 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158166 = temp_output_279_0_g158166;
				half4 localSamplePlanar2D238_g158166 = SamplePlanar2D( Texture238_g158166 , Sampler238_g158166 , Coords238_g158166 , WorldPosition238_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158166) = _ThirdNormalTex;
				SamplerState Sampler246_g158166 = sampler_Linear_Repeat;
				half4 Coords246_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition246_g158166 = temp_output_279_0_g158166;
				float3 temp_output_280_0_g158166 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158166 = temp_output_280_0_g158166;
				half4 localSamplePlanar3D246_g158166 = SamplePlanar3D( Texture246_g158166 , Sampler246_g158166 , Coords246_g158166 , WorldPosition246_g158166 , WorldNormal246_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158166) = _ThirdNormalTex;
				SamplerState Sampler234_g158166 = sampler_Linear_Repeat;
				float4 Coords234_g158166 = temp_output_37_0_g158166;
				float3 WorldPosition234_g158166 = temp_output_279_0_g158166;
				float4 localSampleStochastic2D234_g158166 = SampleStochastic2D( Texture234_g158166 , Sampler234_g158166 , Coords234_g158166 , WorldPosition234_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158166) = _ThirdNormalTex;
				SamplerState Sampler263_g158166 = sampler_Linear_Repeat;
				half4 Coords263_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition263_g158166 = temp_output_279_0_g158166;
				half3 WorldNormal263_g158166 = temp_output_280_0_g158166;
				half4 localSampleStochastic3D263_g158166 = SampleStochastic3D( Texture263_g158166 , Sampler263_g158166 , Coords263_g158166 , WorldPosition263_g158166 , WorldNormal263_g158166 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158164 = localSampleExtra275_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158164 = localSamplePlanar2D238_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158164 = localSamplePlanar3D246_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158164 = localSampleStochastic2D234_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158164 = localSampleStochastic3D263_g158166;
				#else
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#endif
				half4 Local_NormalTex776_g158164 = staticSwitch698_g158164;
				half4 Normal_Packed45_g158168 = Local_NormalTex776_g158164;
				float2 appendResult58_g158168 = (float2(( (Normal_Packed45_g158168).x * (Normal_Packed45_g158168).w ) , (Normal_Packed45_g158168).y));
				half2 Normal_Default50_g158168 = appendResult58_g158168;
				half2 Normal_ASTC41_g158168 = (Normal_Packed45_g158168).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158168 = Normal_ASTC41_g158168;
				#else
				float2 staticSwitch38_g158168 = Normal_Default50_g158168;
				#endif
				half2 Normal_NO_DTX544_g158168 = (Normal_Packed45_g158168).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158168 = Normal_NO_DTX544_g158168;
				#else
				float2 staticSwitch37_g158168 = staticSwitch38_g158168;
				#endif
				float2 temp_output_724_0_g158164 = ( (staticSwitch37_g158168*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g158169 = temp_output_724_0_g158164;
				float2 break71_g158169 = Normal_Planar45_g158169;
				float3 appendResult72_g158169 = (float3(break71_g158169.x , 0.0 , break71_g158169.y));
				float2 temp_output_858_0_g158164 = (mul( ase_worldToTangent, appendResult72_g158169 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#endif
				half2 Local_NormalTS729_g158164 = staticSwitch727_g158164;
				float2 temp_output_36_0_g158187 = ( lerpResult40_g158187 + Local_NormalTS729_g158164 );
				float2 lerpResult405_g158164 = lerp( Visual_NormalTS529_g158164 , temp_output_36_0_g158187 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g158164 = lerpResult405_g158164;
				#else
				float2 staticSwitch418_g158164 = Visual_NormalTS529_g158164;
				#endif
				half2 Final_NormalTS612_g158164 = staticSwitch418_g158164;
				float2 In_NormalTS3_g158182 = Final_NormalTS612_g158164;
				float3 appendResult68_g158188 = (float3(Final_NormalTS612_g158164 , 1.0));
				float3 tanNormal74_g158188 = appendResult68_g158188;
				float3 worldNormal74_g158188 = normalize( float3(dot(tanToWorld0,tanNormal74_g158188), dot(tanToWorld1,tanNormal74_g158188), dot(tanToWorld2,tanNormal74_g158188)) );
				half3 Final_NormalWS956_g158164 = worldNormal74_g158188;
				float3 In_NormalWS3_g158182 = Final_NormalWS956_g158164;
				half4 Visual_Shader531_g158164 = Out_Shader4_g158181;
				float4 lerpResult1000_g158164 = lerp( Local_Masks750_g158164 , ( Visual_Shader531_g158164 * Local_Masks750_g158164 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g158164 = lerp( Visual_Shader531_g158164 , lerpResult1000_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g158164 = lerpResult998_g158164;
				#else
				float4 staticSwitch451_g158164 = Visual_Shader531_g158164;
				#endif
				half4 Final_Masks613_g158164 = staticSwitch451_g158164;
				float4 In_Shader3_g158182 = Final_Masks613_g158164;
				float4 In_Emissive3_g158182 = Out_Emissive4_g158181;
				float3 temp_output_3_0_g158190 = Final_Albedo601_g158164;
				float dotResult20_g158190 = dot( temp_output_3_0_g158190 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158164 = dotResult20_g158190;
				float In_Grayscale3_g158182 = Final_Grayscale615_g158164;
				float clampResult651_g158164 = clamp( saturate( ( Final_Grayscale615_g158164 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158164 = clampResult651_g158164;
				float In_Luminosity3_g158182 = Final_Luminosity652_g158164;
				half Visual_MultiMask547_g158164 = Out_MultiMask4_g158181;
				float lerpResult477_g158164 = lerp( Visual_MultiMask547_g158164 , Local_MultiMask767_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch482_g158164 = lerpResult477_g158164;
				#else
				float staticSwitch482_g158164 = Visual_MultiMask547_g158164;
				#endif
				half Final_MultiMask572_g158164 = staticSwitch482_g158164;
				float In_MultiMask3_g158182 = Final_MultiMask572_g158164;
				half Visual_AlphaClip559_g158164 = Out_AlphaClip4_g158181;
				float temp_output_718_0_g158164 = (Local_AlbedoTex777_g158164).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g158164 = ( temp_output_718_0_g158164 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g158164 = temp_output_718_0_g158164;
				#endif
				half Local_AlphaClip772_g158164 = staticSwitch924_g158164;
				float lerpResult448_g158164 = lerp( Visual_AlphaClip559_g158164 , Local_AlphaClip772_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch564_g158164 = lerpResult448_g158164;
				#else
				float staticSwitch564_g158164 = Visual_AlphaClip559_g158164;
				#endif
				half Final_AlphaClip602_g158164 = staticSwitch564_g158164;
				float In_AlphaClip3_g158182 = Final_AlphaClip602_g158164;
				half Visual_AlphaFade588_g158164 = Out_AlphaFade4_g158181;
				half Local_AlphaFade773_g158164 = (lerpResult706_g158164).a;
				float lerpResult604_g158164 = lerp( Visual_AlphaFade588_g158164 , Local_AlphaFade773_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch608_g158164 = lerpResult604_g158164;
				#else
				float staticSwitch608_g158164 = Visual_AlphaFade588_g158164;
				#endif
				half Final_AlphaFade611_g158164 = staticSwitch608_g158164;
				float In_AlphaFade3_g158182 = Final_AlphaFade611_g158164;
				float3 In_Translucency3_g158182 = Out_Translucency4_g158181;
				float In_Transmission3_g158182 = Out_Transmission4_g158181;
				float In_Thickness3_g158182 = Out_Thickness4_g158181;
				float In_Diffusion3_g158182 = Out_Diffusion4_g158181;
				{
				Data3_g158182.Dummy = In_Dummy3_g158182;
				Data3_g158182.Albedo = In_Albedo3_g158182;
				Data3_g158182.NormalTS = In_NormalTS3_g158182;
				Data3_g158182.NormalWS = In_NormalWS3_g158182;
				Data3_g158182.Shader = In_Shader3_g158182;
				Data3_g158182.Emissive= In_Emissive3_g158182;
				Data3_g158182.MultiMask = In_MultiMask3_g158182;
				Data3_g158182.Grayscale = In_Grayscale3_g158182;
				Data3_g158182.Luminosity = In_Luminosity3_g158182;
				Data3_g158182.AlphaClip = In_AlphaClip3_g158182;
				Data3_g158182.AlphaFade = In_AlphaFade3_g158182;
				Data3_g158182.Translucency = In_Translucency3_g158182;
				Data3_g158182.Transmission = In_Transmission3_g158182;
				Data3_g158182.Thickness = In_Thickness3_g158182;
				Data3_g158182.Diffusion = In_Diffusion3_g158182;
				}
				TVEVisualData Data4_g158194 = Data3_g158182;
				float Out_Dummy4_g158194 = 0;
				float3 Out_Albedo4_g158194 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158194 = float2( 0,0 );
				float3 Out_NormalWS4_g158194 = float3( 0,0,0 );
				float4 Out_Shader4_g158194 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158194 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158194 = 0;
				float Out_Grayscale4_g158194 = 0;
				float Out_Luminosity4_g158194 = 0;
				float Out_AlphaClip4_g158194 = 0;
				float Out_AlphaFade4_g158194 = 0;
				float3 Out_Translucency4_g158194 = float3( 0,0,0 );
				float Out_Transmission4_g158194 = 0;
				float Out_Thickness4_g158194 = 0;
				float Out_Diffusion4_g158194 = 0;
				{
				Out_Dummy4_g158194 = Data4_g158194.Dummy;
				Out_Albedo4_g158194 = Data4_g158194.Albedo;
				Out_NormalTS4_g158194 = Data4_g158194.NormalTS;
				Out_NormalWS4_g158194 = Data4_g158194.NormalWS;
				Out_Shader4_g158194 = Data4_g158194.Shader;
				Out_Emissive4_g158194= Data4_g158194.Emissive;
				Out_MultiMask4_g158194 = Data4_g158194.MultiMask;
				Out_Grayscale4_g158194 = Data4_g158194.Grayscale;
				Out_Luminosity4_g158194= Data4_g158194.Luminosity;
				Out_AlphaClip4_g158194 = Data4_g158194.AlphaClip;
				Out_AlphaFade4_g158194 = Data4_g158194.AlphaFade;
				Out_Translucency4_g158194 = Data4_g158194.Translucency;
				Out_Transmission4_g158194 = Data4_g158194.Transmission;
				Out_Thickness4_g158194 = Data4_g158194.Thickness;
				Out_Diffusion4_g158194 = Data4_g158194.Diffusion;
				}
				half3 Visual_Albedo127_g158193 = Out_Albedo4_g158194;
				TVEModelData Data15_g158196 = Data16_g158068;
				float Out_Dummy15_g158196 = 0;
				float3 Out_PositionOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158196 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158196 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158196 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158196 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158196 = float3( 0,0,0 );
				float4 Out_VertexData15_g158196 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158196 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158196 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158196 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158196 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158196 = Data15_g158196.Dummy;
				Out_PositionOS15_g158196 = Data15_g158196.PositionOS;
				Out_PositionWS15_g158196 = Data15_g158196.PositionWS;
				Out_PositionWO15_g158196 = Data15_g158196.PositionWO;
				Out_PositionRawOS15_g158196 = Data15_g158196.PositionRawOS;
				Out_PositionAddOS15_g158196 = Data15_g158196.PositionAddOS;
				Out_PivotOS15_g158196 = Data15_g158196.PivotOS;
				Out_PivotWS15_g158196 = Data15_g158196.PivotWS;
				Out_PivotWO15_g158196 = Data15_g158196.PivotWO;
				Out_NormalOS15_g158196 = Data15_g158196.NormalOS;
				Out_NormalWS15_g158196 = Data15_g158196.NormalWS;
				Out_NormalRawOS15_g158196 = Data15_g158196.NormalRawOS;
				Out_NormalRawWS15_g158196 = Data15_g158196.NormalRawWS;
				Out_TangentOS15_g158196 = Data15_g158196.TangentOS;
				Out_ViewDirWS15_g158196 = Data15_g158196.ViewDirWS;
				Out_VertexData15_g158196 = Data15_g158196.VertexData;
				Out_MotionData15_g158196 = Data15_g158196.MotionData;
				Out_BoundsData15_g158196 = Data15_g158196.BoundsData;
				Out_RotationData15_g158196 = Data15_g158196.RotationData;
				Out_FragmentData15_g158196 = Data15_g158196.FragmentData;
				}
				half4 Model_VertexData206_g158193 = Out_VertexData15_g158196;
				float4 break208_g158193 = Model_VertexData206_g158193;
				float4 break33_g158201 = _occlusion_vert_mode;
				float temp_output_30_0_g158201 = ( break208_g158193.x * break33_g158201.x );
				float temp_output_29_0_g158201 = ( break208_g158193.y * break33_g158201.y );
				float temp_output_31_0_g158201 = ( break208_g158193.z * break33_g158201.z );
				float temp_output_28_0_g158201 = ( temp_output_30_0_g158201 + temp_output_29_0_g158201 + temp_output_31_0_g158201 + ( break208_g158193.w * break33_g158201.w ) );
				float temp_output_194_0_g158193 = temp_output_28_0_g158201;
				float clampResult17_g158199 = clamp( temp_output_194_0_g158193 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158198 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g158198 = ( _OcclusionMeshRemap.y - temp_output_7_0_g158198 );
				float temp_output_6_0_g158200 = saturate( ( ( clampResult17_g158199 - temp_output_7_0_g158198 ) / ( temp_output_10_0_g158198 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158200 = ( temp_output_6_0_g158200 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158200 = temp_output_6_0_g158200;
				#endif
				half Occlusion_Mask82_g158193 = staticSwitch14_g158200;
				float3 lerpResult75_g158193 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g158193);
				float3 lerpResult186_g158193 = lerp( Visual_Albedo127_g158193 , ( Visual_Albedo127_g158193 * lerpResult75_g158193 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g158193 = lerpResult186_g158193;
				#else
				float3 staticSwitch171_g158193 = Visual_Albedo127_g158193;
				#endif
				half3 Final_Albedo160_g158193 = staticSwitch171_g158193;
				float3 In_Albedo3_g158195 = Final_Albedo160_g158193;
				float2 In_NormalTS3_g158195 = Out_NormalTS4_g158194;
				float3 In_NormalWS3_g158195 = Out_NormalWS4_g158194;
				float4 In_Shader3_g158195 = Out_Shader4_g158194;
				float4 In_Emissive3_g158195 = Out_Emissive4_g158194;
				float3 temp_output_3_0_g158197 = Final_Albedo160_g158193;
				float dotResult20_g158197 = dot( temp_output_3_0_g158197 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158193 = dotResult20_g158197;
				float In_Grayscale3_g158195 = Final_Grayscale164_g158193;
				float clampResult180_g158193 = clamp( saturate( ( Final_Grayscale164_g158193 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g158193 = clampResult180_g158193;
				float In_Luminosity3_g158195 = Final_Shading181_g158193;
				float In_MultiMask3_g158195 = Out_MultiMask4_g158194;
				float In_AlphaClip3_g158195 = Out_AlphaClip4_g158194;
				float In_AlphaFade3_g158195 = Out_AlphaFade4_g158194;
				float3 In_Translucency3_g158195 = Out_Translucency4_g158194;
				float In_Transmission3_g158195 = Out_Transmission4_g158194;
				float In_Thickness3_g158195 = Out_Thickness4_g158194;
				float In_Diffusion3_g158195 = Out_Diffusion4_g158194;
				{
				Data3_g158195.Dummy = In_Dummy3_g158195;
				Data3_g158195.Albedo = In_Albedo3_g158195;
				Data3_g158195.NormalTS = In_NormalTS3_g158195;
				Data3_g158195.NormalWS = In_NormalWS3_g158195;
				Data3_g158195.Shader = In_Shader3_g158195;
				Data3_g158195.Emissive= In_Emissive3_g158195;
				Data3_g158195.MultiMask = In_MultiMask3_g158195;
				Data3_g158195.Grayscale = In_Grayscale3_g158195;
				Data3_g158195.Luminosity = In_Luminosity3_g158195;
				Data3_g158195.AlphaClip = In_AlphaClip3_g158195;
				Data3_g158195.AlphaFade = In_AlphaFade3_g158195;
				Data3_g158195.Translucency = In_Translucency3_g158195;
				Data3_g158195.Transmission = In_Transmission3_g158195;
				Data3_g158195.Thickness = In_Thickness3_g158195;
				Data3_g158195.Diffusion = In_Diffusion3_g158195;
				}
				TVEVisualData Data4_g158206 = Data3_g158195;
				float Out_Dummy4_g158206 = 0;
				float3 Out_Albedo4_g158206 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158206 = float2( 0,0 );
				float3 Out_NormalWS4_g158206 = float3( 0,0,0 );
				float4 Out_Shader4_g158206 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158206 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158206 = 0;
				float Out_Grayscale4_g158206 = 0;
				float Out_Luminosity4_g158206 = 0;
				float Out_AlphaClip4_g158206 = 0;
				float Out_AlphaFade4_g158206 = 0;
				float3 Out_Translucency4_g158206 = float3( 0,0,0 );
				float Out_Transmission4_g158206 = 0;
				float Out_Thickness4_g158206 = 0;
				float Out_Diffusion4_g158206 = 0;
				{
				Out_Dummy4_g158206 = Data4_g158206.Dummy;
				Out_Albedo4_g158206 = Data4_g158206.Albedo;
				Out_NormalTS4_g158206 = Data4_g158206.NormalTS;
				Out_NormalWS4_g158206 = Data4_g158206.NormalWS;
				Out_Shader4_g158206 = Data4_g158206.Shader;
				Out_Emissive4_g158206= Data4_g158206.Emissive;
				Out_MultiMask4_g158206 = Data4_g158206.MultiMask;
				Out_Grayscale4_g158206 = Data4_g158206.Grayscale;
				Out_Luminosity4_g158206= Data4_g158206.Luminosity;
				Out_AlphaClip4_g158206 = Data4_g158206.AlphaClip;
				Out_AlphaFade4_g158206 = Data4_g158206.AlphaFade;
				Out_Translucency4_g158206 = Data4_g158206.Translucency;
				Out_Transmission4_g158206 = Data4_g158206.Transmission;
				Out_Thickness4_g158206 = Data4_g158206.Thickness;
				Out_Diffusion4_g158206 = Data4_g158206.Diffusion;
				}
				half3 Visual_Albedo127_g158203 = Out_Albedo4_g158206;
				float temp_output_162_11_g158203 = Out_MultiMask4_g158206;
				half Visual_MultiMask196_g158203 = temp_output_162_11_g158203;
				float lerpResult190_g158203 = lerp( 1.0 , Visual_MultiMask196_g158203 , _GradientMultiValue);
				half Gradient_MultiMask194_g158203 = lerpResult190_g158203;
				TVEModelData Data15_g158204 = Data16_g158068;
				float Out_Dummy15_g158204 = 0;
				float3 Out_PositionOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158204 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158204 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158204 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158204 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158204 = float3( 0,0,0 );
				float4 Out_VertexData15_g158204 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158204 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158204 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158204 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158204 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158204 = Data15_g158204.Dummy;
				Out_PositionOS15_g158204 = Data15_g158204.PositionOS;
				Out_PositionWS15_g158204 = Data15_g158204.PositionWS;
				Out_PositionWO15_g158204 = Data15_g158204.PositionWO;
				Out_PositionRawOS15_g158204 = Data15_g158204.PositionRawOS;
				Out_PositionAddOS15_g158204 = Data15_g158204.PositionAddOS;
				Out_PivotOS15_g158204 = Data15_g158204.PivotOS;
				Out_PivotWS15_g158204 = Data15_g158204.PivotWS;
				Out_PivotWO15_g158204 = Data15_g158204.PivotWO;
				Out_NormalOS15_g158204 = Data15_g158204.NormalOS;
				Out_NormalWS15_g158204 = Data15_g158204.NormalWS;
				Out_NormalRawOS15_g158204 = Data15_g158204.NormalRawOS;
				Out_NormalRawWS15_g158204 = Data15_g158204.NormalRawWS;
				Out_TangentOS15_g158204 = Data15_g158204.TangentOS;
				Out_ViewDirWS15_g158204 = Data15_g158204.ViewDirWS;
				Out_VertexData15_g158204 = Data15_g158204.VertexData;
				Out_MotionData15_g158204 = Data15_g158204.MotionData;
				Out_BoundsData15_g158204 = Data15_g158204.BoundsData;
				Out_RotationData15_g158204 = Data15_g158204.RotationData;
				Out_FragmentData15_g158204 = Data15_g158204.FragmentData;
				}
				half4 Model_VertexData224_g158203 = Out_VertexData15_g158204;
				float4 break226_g158203 = Model_VertexData224_g158203;
				float4 break33_g158205 = _gradient_vert_mode;
				float temp_output_30_0_g158205 = ( break226_g158203.x * break33_g158205.x );
				float temp_output_29_0_g158205 = ( break226_g158203.y * break33_g158205.y );
				float temp_output_31_0_g158205 = ( break226_g158203.z * break33_g158205.z );
				float temp_output_28_0_g158205 = ( temp_output_30_0_g158205 + temp_output_29_0_g158205 + temp_output_31_0_g158205 + ( break226_g158203.w * break33_g158205.w ) );
				float temp_output_211_0_g158203 = temp_output_28_0_g158205;
				float clampResult17_g158210 = clamp( temp_output_211_0_g158203 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158211 = _GradientMeshRemap.x;
				float temp_output_10_0_g158211 = ( _GradientMeshRemap.y - temp_output_7_0_g158211 );
				float temp_output_6_0_g158212 = saturate( ( ( clampResult17_g158210 - temp_output_7_0_g158211 ) / ( temp_output_10_0_g158211 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158212 = ( temp_output_6_0_g158212 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158212 = temp_output_6_0_g158212;
				#endif
				half Gradient_VertMask82_g158203 = staticSwitch14_g158212;
				half Gradient_Mask200_g158203 = ( Gradient_MultiMask194_g158203 * Gradient_VertMask82_g158203 );
				float3 lerpResult75_g158203 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g158203);
				float3 lerpResult186_g158203 = lerp( Visual_Albedo127_g158203 , ( Visual_Albedo127_g158203 * lerpResult75_g158203 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g158203 = lerpResult186_g158203;
				#else
				float3 staticSwitch171_g158203 = Visual_Albedo127_g158203;
				#endif
				half3 Final_Albedo160_g158203 = staticSwitch171_g158203;
				float3 In_Albedo3_g158207 = Final_Albedo160_g158203;
				float2 In_NormalTS3_g158207 = Out_NormalTS4_g158206;
				float3 In_NormalWS3_g158207 = Out_NormalWS4_g158206;
				float4 In_Shader3_g158207 = Out_Shader4_g158206;
				float4 In_Emissive3_g158207 = Out_Emissive4_g158206;
				float3 temp_output_3_0_g158208 = Final_Albedo160_g158203;
				float dotResult20_g158208 = dot( temp_output_3_0_g158208 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158203 = dotResult20_g158208;
				float In_Grayscale3_g158207 = Final_Grayscale164_g158203;
				float clampResult180_g158203 = clamp( saturate( ( Final_Grayscale164_g158203 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g158203 = clampResult180_g158203;
				float In_Luminosity3_g158207 = Final_Luminosity181_g158203;
				float In_MultiMask3_g158207 = temp_output_162_11_g158203;
				float In_AlphaClip3_g158207 = Out_AlphaClip4_g158206;
				float In_AlphaFade3_g158207 = Out_AlphaFade4_g158206;
				float3 In_Translucency3_g158207 = Out_Translucency4_g158206;
				float In_Transmission3_g158207 = Out_Transmission4_g158206;
				float In_Thickness3_g158207 = Out_Thickness4_g158206;
				float In_Diffusion3_g158207 = Out_Diffusion4_g158206;
				{
				Data3_g158207.Dummy = In_Dummy3_g158207;
				Data3_g158207.Albedo = In_Albedo3_g158207;
				Data3_g158207.NormalTS = In_NormalTS3_g158207;
				Data3_g158207.NormalWS = In_NormalWS3_g158207;
				Data3_g158207.Shader = In_Shader3_g158207;
				Data3_g158207.Emissive= In_Emissive3_g158207;
				Data3_g158207.MultiMask = In_MultiMask3_g158207;
				Data3_g158207.Grayscale = In_Grayscale3_g158207;
				Data3_g158207.Luminosity = In_Luminosity3_g158207;
				Data3_g158207.AlphaClip = In_AlphaClip3_g158207;
				Data3_g158207.AlphaFade = In_AlphaFade3_g158207;
				Data3_g158207.Translucency = In_Translucency3_g158207;
				Data3_g158207.Transmission = In_Transmission3_g158207;
				Data3_g158207.Thickness = In_Thickness3_g158207;
				Data3_g158207.Diffusion = In_Diffusion3_g158207;
				}
				TVEVisualData Data4_g158214 = Data3_g158207;
				float Out_Dummy4_g158214 = 0;
				float3 Out_Albedo4_g158214 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158214 = float2( 0,0 );
				float3 Out_NormalWS4_g158214 = float3( 0,0,0 );
				float4 Out_Shader4_g158214 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158214 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158214 = 0;
				float Out_Grayscale4_g158214 = 0;
				float Out_Luminosity4_g158214 = 0;
				float Out_AlphaClip4_g158214 = 0;
				float Out_AlphaFade4_g158214 = 0;
				float3 Out_Translucency4_g158214 = float3( 0,0,0 );
				float Out_Transmission4_g158214 = 0;
				float Out_Thickness4_g158214 = 0;
				float Out_Diffusion4_g158214 = 0;
				{
				Out_Dummy4_g158214 = Data4_g158214.Dummy;
				Out_Albedo4_g158214 = Data4_g158214.Albedo;
				Out_NormalTS4_g158214 = Data4_g158214.NormalTS;
				Out_NormalWS4_g158214 = Data4_g158214.NormalWS;
				Out_Shader4_g158214 = Data4_g158214.Shader;
				Out_Emissive4_g158214= Data4_g158214.Emissive;
				Out_MultiMask4_g158214 = Data4_g158214.MultiMask;
				Out_Grayscale4_g158214 = Data4_g158214.Grayscale;
				Out_Luminosity4_g158214= Data4_g158214.Luminosity;
				Out_AlphaClip4_g158214 = Data4_g158214.AlphaClip;
				Out_AlphaFade4_g158214 = Data4_g158214.AlphaFade;
				Out_Translucency4_g158214 = Data4_g158214.Translucency;
				Out_Transmission4_g158214 = Data4_g158214.Transmission;
				Out_Thickness4_g158214 = Data4_g158214.Thickness;
				Out_Diffusion4_g158214 = Data4_g158214.Diffusion;
				}
				half3 Visual_Albedo127_g158213 = Out_Albedo4_g158214;
				float vertexToFrag203_g158213 = IN.ase_texcoord10.z;
				float clampResult208_g158213 = clamp( vertexToFrag203_g158213 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g158213 = ( Visual_Albedo127_g158213 + ( ( Visual_Albedo127_g158213 * Visual_Albedo127_g158213 * 200.0 * _motion_highlight_color ) * clampResult208_g158213 ) );
				#else
				float3 staticSwitch209_g158213 = Visual_Albedo127_g158213;
				#endif
				half3 Final_Albedo160_g158213 = staticSwitch209_g158213;
				float3 In_Albedo3_g158216 = Final_Albedo160_g158213;
				float2 In_NormalTS3_g158216 = Out_NormalTS4_g158214;
				float3 In_NormalWS3_g158216 = Out_NormalWS4_g158214;
				float4 In_Shader3_g158216 = Out_Shader4_g158214;
				float4 In_Emissive3_g158216 = Out_Emissive4_g158214;
				float In_Grayscale3_g158216 = Out_Grayscale4_g158214;
				float In_Luminosity3_g158216 = Out_Luminosity4_g158214;
				float In_MultiMask3_g158216 = Out_MultiMask4_g158214;
				float In_AlphaClip3_g158216 = Out_AlphaClip4_g158214;
				float In_AlphaFade3_g158216 = Out_AlphaFade4_g158214;
				float3 In_Translucency3_g158216 = Out_Translucency4_g158214;
				float In_Transmission3_g158216 = Out_Transmission4_g158214;
				float In_Thickness3_g158216 = Out_Thickness4_g158214;
				float In_Diffusion3_g158216 = Out_Diffusion4_g158214;
				{
				Data3_g158216.Dummy = In_Dummy3_g158216;
				Data3_g158216.Albedo = In_Albedo3_g158216;
				Data3_g158216.NormalTS = In_NormalTS3_g158216;
				Data3_g158216.NormalWS = In_NormalWS3_g158216;
				Data3_g158216.Shader = In_Shader3_g158216;
				Data3_g158216.Emissive= In_Emissive3_g158216;
				Data3_g158216.MultiMask = In_MultiMask3_g158216;
				Data3_g158216.Grayscale = In_Grayscale3_g158216;
				Data3_g158216.Luminosity = In_Luminosity3_g158216;
				Data3_g158216.AlphaClip = In_AlphaClip3_g158216;
				Data3_g158216.AlphaFade = In_AlphaFade3_g158216;
				Data3_g158216.Translucency = In_Translucency3_g158216;
				Data3_g158216.Transmission = In_Transmission3_g158216;
				Data3_g158216.Thickness = In_Thickness3_g158216;
				Data3_g158216.Diffusion = In_Diffusion3_g158216;
				}
				TVEVisualData Data4_g158218 = Data3_g158216;
				float Out_Dummy4_g158218 = 0;
				float3 Out_Albedo4_g158218 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158218 = float2( 0,0 );
				float3 Out_NormalWS4_g158218 = float3( 0,0,0 );
				float4 Out_Shader4_g158218 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158218 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158218 = 0;
				float Out_Grayscale4_g158218 = 0;
				float Out_Luminosity4_g158218 = 0;
				float Out_AlphaClip4_g158218 = 0;
				float Out_AlphaFade4_g158218 = 0;
				float3 Out_Translucency4_g158218 = float3( 0,0,0 );
				float Out_Transmission4_g158218 = 0;
				float Out_Thickness4_g158218 = 0;
				float Out_Diffusion4_g158218 = 0;
				{
				Out_Dummy4_g158218 = Data4_g158218.Dummy;
				Out_Albedo4_g158218 = Data4_g158218.Albedo;
				Out_NormalTS4_g158218 = Data4_g158218.NormalTS;
				Out_NormalWS4_g158218 = Data4_g158218.NormalWS;
				Out_Shader4_g158218 = Data4_g158218.Shader;
				Out_Emissive4_g158218= Data4_g158218.Emissive;
				Out_MultiMask4_g158218 = Data4_g158218.MultiMask;
				Out_Grayscale4_g158218 = Data4_g158218.Grayscale;
				Out_Luminosity4_g158218= Data4_g158218.Luminosity;
				Out_AlphaClip4_g158218 = Data4_g158218.AlphaClip;
				Out_AlphaFade4_g158218 = Data4_g158218.AlphaFade;
				Out_Translucency4_g158218 = Data4_g158218.Translucency;
				Out_Transmission4_g158218 = Data4_g158218.Transmission;
				Out_Thickness4_g158218 = Data4_g158218.Thickness;
				Out_Diffusion4_g158218 = Data4_g158218.Diffusion;
				}
				half3 Visual_Albedo127_g158217 = Out_Albedo4_g158218;
				float3 temp_output_622_0_g158217 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler238_g158221 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158224 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158224 = ( temp_output_6_0_g158224 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158224 = temp_output_6_0_g158224;
				#endif
				half4 Overlay_Coords639_g158217 = staticSwitch14_g158224;
				float4 temp_output_37_0_g158221 = Overlay_Coords639_g158217;
				half4 Coords238_g158221 = temp_output_37_0_g158221;
				TVEModelData Data15_g158225 = Data16_g158068;
				float Out_Dummy15_g158225 = 0;
				float3 Out_PositionOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158225 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158225 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158225 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158225 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158225 = float3( 0,0,0 );
				float4 Out_VertexData15_g158225 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158225 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158225 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158225 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158225 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158225 = Data15_g158225.Dummy;
				Out_PositionOS15_g158225 = Data15_g158225.PositionOS;
				Out_PositionWS15_g158225 = Data15_g158225.PositionWS;
				Out_PositionWO15_g158225 = Data15_g158225.PositionWO;
				Out_PositionRawOS15_g158225 = Data15_g158225.PositionRawOS;
				Out_PositionAddOS15_g158225 = Data15_g158225.PositionAddOS;
				Out_PivotOS15_g158225 = Data15_g158225.PivotOS;
				Out_PivotWS15_g158225 = Data15_g158225.PivotWS;
				Out_PivotWO15_g158225 = Data15_g158225.PivotWO;
				Out_NormalOS15_g158225 = Data15_g158225.NormalOS;
				Out_NormalWS15_g158225 = Data15_g158225.NormalWS;
				Out_NormalRawOS15_g158225 = Data15_g158225.NormalRawOS;
				Out_NormalRawWS15_g158225 = Data15_g158225.NormalRawWS;
				Out_TangentOS15_g158225 = Data15_g158225.TangentOS;
				Out_ViewDirWS15_g158225 = Data15_g158225.ViewDirWS;
				Out_VertexData15_g158225 = Data15_g158225.VertexData;
				Out_MotionData15_g158225 = Data15_g158225.MotionData;
				Out_BoundsData15_g158225 = Data15_g158225.BoundsData;
				Out_RotationData15_g158225 = Data15_g158225.RotationData;
				Out_FragmentData15_g158225 = Data15_g158225.FragmentData;
				}
				half3 Model_PositionWO602_g158217 = Out_PositionWO15_g158225;
				float3 temp_output_279_0_g158221 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158221 = temp_output_279_0_g158221;
				half4 localSamplePlanar2D238_g158221 = SamplePlanar2D( Texture238_g158221 , Sampler238_g158221 , Coords238_g158221 , WorldPosition238_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler246_g158221 = sampler_Linear_Repeat;
				half4 Coords246_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition246_g158221 = temp_output_279_0_g158221;
				half3 Model_NormalWS712_g158217 = Out_NormalWS15_g158225;
				float3 temp_output_280_0_g158221 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158221 = temp_output_280_0_g158221;
				half4 localSamplePlanar3D246_g158221 = SamplePlanar3D( Texture246_g158221 , Sampler246_g158221 , Coords246_g158221 , WorldPosition246_g158221 , WorldNormal246_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler234_g158221 = sampler_Linear_Repeat;
				float4 Coords234_g158221 = temp_output_37_0_g158221;
				float3 WorldPosition234_g158221 = temp_output_279_0_g158221;
				float4 localSampleStochastic2D234_g158221 = SampleStochastic2D( Texture234_g158221 , Sampler234_g158221 , Coords234_g158221 , WorldPosition234_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler263_g158221 = sampler_Linear_Repeat;
				half4 Coords263_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition263_g158221 = temp_output_279_0_g158221;
				half3 WorldNormal263_g158221 = temp_output_280_0_g158221;
				half4 localSampleStochastic3D263_g158221 = SampleStochastic3D( Texture263_g158221 , Sampler263_g158221 , Coords263_g158221 , WorldPosition263_g158221 , WorldNormal263_g158221 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g158217 = localSamplePlanar3D246_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g158217 = localSampleStochastic2D234_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g158217 = localSampleStochastic3D263_g158221;
				#else
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#endif
				half3 Overlay_Albedo526_g158217 = (staticSwitch676_g158217).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g158217 = ( temp_output_622_0_g158217 * Overlay_Albedo526_g158217 );
				#else
				float3 staticSwitch578_g158217 = temp_output_622_0_g158217;
				#endif
				float3 temp_output_6_0_g158240 = staticSwitch578_g158217;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g158240 = ( temp_output_6_0_g158240 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g158240 = temp_output_6_0_g158240;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158227) = _OverlayMaskTex;
				SamplerState Sampler276_g158227 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158228 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158228 = ( temp_output_6_0_g158228 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158228 = temp_output_6_0_g158228;
				#endif
				half4 Local_MaskCoords886_g158217 = staticSwitch14_g158228;
				float4 temp_output_37_0_g158227 = Local_MaskCoords886_g158217;
				half4 Coords276_g158227 = temp_output_37_0_g158227;
				half2 TexCoord276_g158227 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158227 = SampleMain( Texture276_g158227 , Sampler276_g158227 , Coords276_g158227 , TexCoord276_g158227 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158227) = _OverlayMaskTex;
				SamplerState Sampler275_g158227 = sampler_Linear_Repeat;
				half4 Coords275_g158227 = temp_output_37_0_g158227;
				float2 appendResult289_g158227 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158227 = appendResult289_g158227;
				#else
				float2 staticSwitch288_g158227 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158227 = staticSwitch288_g158227;
				half4 localSampleExtra275_g158227 = SampleExtra( Texture275_g158227 , Sampler275_g158227 , Coords275_g158227 , TexCoord275_g158227 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g158217 = localSampleExtra275_g158227;
				#else
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#endif
				half4 Local_MaskTex885_g158217 = staticSwitch894_g158217;
				float clampResult17_g158242 = clamp( (Local_MaskTex885_g158217).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158243 = _OverlayMaskRemap.x;
				float temp_output_10_0_g158243 = ( _OverlayMaskRemap.y - temp_output_7_0_g158243 );
				float lerpResult898_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158242 - temp_output_7_0_g158243 ) / ( temp_output_10_0_g158243 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g158217 = lerpResult898_g158217;
				#else
				float staticSwitch904_g158217 = 1.0;
				#endif
				half Overlay_TexMask906_g158217 = staticSwitch904_g158217;
				float3 temp_output_739_21_g158217 = Out_NormalWS4_g158218;
				half3 Visual_NormalWS749_g158217 = temp_output_739_21_g158217;
				float clampResult17_g158237 = clamp( saturate( (Visual_NormalWS749_g158217).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158236 = _OverlayProjRemap.x;
				float temp_output_10_0_g158236 = ( _OverlayProjRemap.y - temp_output_7_0_g158236 );
				float lerpResult842_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158237 - temp_output_7_0_g158236 ) / ( temp_output_10_0_g158236 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g158217 = lerpResult842_g158217;
				#else
				float staticSwitch734_g158217 = 1.0;
				#endif
				half Overlay_MaskProj457_g158217 = staticSwitch734_g158217;
				float temp_output_739_15_g158217 = Out_Luminosity4_g158218;
				half Visual_Luminosity654_g158217 = temp_output_739_15_g158217;
				float clampResult17_g158239 = clamp( Visual_Luminosity654_g158217 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158238 = _OverlayLumaRemap.x;
				float temp_output_10_0_g158238 = ( _OverlayLumaRemap.y - temp_output_7_0_g158238 );
				float lerpResult587_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158239 - temp_output_7_0_g158238 ) / ( temp_output_10_0_g158238 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g158217 = lerpResult587_g158217;
				half4 Model_VertexMasks791_g158217 = Out_VertexData15_g158225;
				float4 break792_g158217 = Model_VertexMasks791_g158217;
				float4 break33_g158229 = _overlay_vert_mode;
				float temp_output_30_0_g158229 = ( break792_g158217.x * break33_g158229.x );
				float temp_output_29_0_g158229 = ( break792_g158217.y * break33_g158229.y );
				float temp_output_31_0_g158229 = ( break792_g158217.z * break33_g158229.z );
				float temp_output_28_0_g158229 = ( temp_output_30_0_g158229 + temp_output_29_0_g158229 + temp_output_31_0_g158229 + ( break792_g158217.w * break33_g158229.w ) );
				float clampResult17_g158230 = clamp( temp_output_28_0_g158229 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158232 = _OverlayMeshRemap.x;
				float temp_output_10_0_g158232 = ( _OverlayMeshRemap.y - temp_output_7_0_g158232 );
				float lerpResult879_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158230 - temp_output_7_0_g158232 ) / ( temp_output_10_0_g158232 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g158241 = lerpResult879_g158217;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158241 = ( temp_output_6_0_g158241 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158241 = temp_output_6_0_g158241;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g158217 = staticSwitch14_g158241;
				#else
				float staticSwitch800_g158217 = 1.0;
				#endif
				half Overlay_VertMask801_g158217 = staticSwitch800_g158217;
				half Overlay_MaskNoise427_g158217 = 1.0;
				TVEGlobalData Data15_g158219 = Data204_g158069;
				float Out_Dummy15_g158219 = 0;
				float4 Out_CoatParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158219 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158219 = Data15_g158219.Dummy;
				Out_CoatParams15_g158219 = Data15_g158219.CoatParams;
				Out_PaintParams15_g158219 = Data15_g158219.PaintParams;
				Out_GlowParams15_g158219 = Data15_g158219.GlowParams;
				Out_AtmoParams15_g158219= Data15_g158219.AtmoParams;
				Out_FormParams15_g158219 = Data15_g158219.FormParams;
				Out_LandParams15_g158219 = Data15_g158219.LandParams;
				Out_WindParams15_g158219 = Data15_g158219.WindParams;
				Out_PushParams15_g158219 = Data15_g158219.PushParams;
				}
				half4 Global_AtmoParams516_g158217 = Out_AtmoParams15_g158219;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g158217 = (Global_AtmoParams516_g158217).z;
				#else
				float staticSwitch705_g158217 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g158217 = staticSwitch705_g158217;
				half Custom_Mask646_g158217 = 1.0;
				float temp_output_7_0_g158235 = 0.1;
				float temp_output_10_0_g158235 = ( 0.2 - temp_output_7_0_g158235 );
				half Overlay_Mask494_g158217 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g158217 * Overlay_MaskProj457_g158217 * Overlay_MaskLuma438_g158217 * Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 * Custom_Mask646_g158217 ) - temp_output_7_0_g158235 ) / ( temp_output_10_0_g158235 + 0.0001 ) ) );
				float3 lerpResult467_g158217 = lerp( Visual_Albedo127_g158217 , staticSwitch14_g158240 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g158217 = lerpResult467_g158217;
				#else
				float3 staticSwitch577_g158217 = Visual_Albedo127_g158217;
				#endif
				half3 Final_Albedo493_g158217 = staticSwitch577_g158217;
				float3 In_Albedo3_g158220 = Final_Albedo493_g158217;
				half2 Visual_NormalTS535_g158217 = Out_NormalTS4_g158218;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158226) = _OverlayNormalTex;
				SamplerState Sampler238_g158226 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158226 = Overlay_Coords639_g158217;
				half4 Coords238_g158226 = temp_output_37_0_g158226;
				float3 temp_output_279_0_g158226 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158226 = temp_output_279_0_g158226;
				half4 localSamplePlanar2D238_g158226 = SamplePlanar2D( Texture238_g158226 , Sampler238_g158226 , Coords238_g158226 , WorldPosition238_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158226) = _OverlayNormalTex;
				SamplerState Sampler246_g158226 = sampler_Linear_Repeat;
				half4 Coords246_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition246_g158226 = temp_output_279_0_g158226;
				float3 temp_output_280_0_g158226 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158226 = temp_output_280_0_g158226;
				half4 localSamplePlanar3D246_g158226 = SamplePlanar3D( Texture246_g158226 , Sampler246_g158226 , Coords246_g158226 , WorldPosition246_g158226 , WorldNormal246_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158226) = _OverlayNormalTex;
				SamplerState Sampler234_g158226 = sampler_Linear_Repeat;
				float4 Coords234_g158226 = temp_output_37_0_g158226;
				float3 WorldPosition234_g158226 = temp_output_279_0_g158226;
				float4 localSampleStochastic2D234_g158226 = SampleStochastic2D( Texture234_g158226 , Sampler234_g158226 , Coords234_g158226 , WorldPosition234_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158226) = _OverlayNormalTex;
				SamplerState Sampler263_g158226 = sampler_Linear_Repeat;
				half4 Coords263_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition263_g158226 = temp_output_279_0_g158226;
				half3 WorldNormal263_g158226 = temp_output_280_0_g158226;
				half4 localSampleStochastic3D263_g158226 = SampleStochastic3D( Texture263_g158226 , Sampler263_g158226 , Coords263_g158226 , WorldPosition263_g158226 , WorldNormal263_g158226 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g158217 = localSamplePlanar3D246_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g158217 = localSampleStochastic2D234_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g158217 = localSampleStochastic3D263_g158226;
				#else
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#endif
				half4 Normal_Packed45_g158223 = staticSwitch686_g158217;
				float2 appendResult58_g158223 = (float2(( (Normal_Packed45_g158223).x * (Normal_Packed45_g158223).w ) , (Normal_Packed45_g158223).y));
				half2 Normal_Default50_g158223 = appendResult58_g158223;
				half2 Normal_ASTC41_g158223 = (Normal_Packed45_g158223).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158223 = Normal_ASTC41_g158223;
				#else
				float2 staticSwitch38_g158223 = Normal_Default50_g158223;
				#endif
				half2 Normal_NO_DTX544_g158223 = (Normal_Packed45_g158223).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158223 = Normal_NO_DTX544_g158223;
				#else
				float2 staticSwitch37_g158223 = staticSwitch38_g158223;
				#endif
				half2 Normal_Planar45_g158222 = (staticSwitch37_g158223*2.0 + -1.0);
				float2 break71_g158222 = Normal_Planar45_g158222;
				float3 appendResult72_g158222 = (float3(break71_g158222.x , 0.0 , break71_g158222.y));
				half2 Overlay_Normal528_g158217 = (mul( ase_worldToTangent, appendResult72_g158222 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g158217 = Overlay_Normal528_g158217;
				#else
				float2 staticSwitch579_g158217 = Visual_NormalTS535_g158217;
				#endif
				float2 lerpResult551_g158217 = lerp( Visual_NormalTS535_g158217 , ( staticSwitch579_g158217 * _OverlayNormalValue ) , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g158217 = lerpResult551_g158217;
				#else
				float2 staticSwitch583_g158217 = Visual_NormalTS535_g158217;
				#endif
				half2 Final_NormalTS499_g158217 = staticSwitch583_g158217;
				float2 In_NormalTS3_g158220 = Final_NormalTS499_g158217;
				float3 In_NormalWS3_g158220 = temp_output_739_21_g158217;
				half4 Visual_Masks536_g158217 = Out_Shader4_g158218;
				float4 appendResult585_g158217 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g158217 = lerp( Visual_Masks536_g158217 , appendResult585_g158217 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g158217 = lerpResult584_g158217;
				#else
				float4 staticSwitch586_g158217 = Visual_Masks536_g158217;
				#endif
				half4 Final_Masks482_g158217 = staticSwitch586_g158217;
				float4 In_Shader3_g158220 = Final_Masks482_g158217;
				float4 In_Emissive3_g158220 = Out_Emissive4_g158218;
				float temp_output_739_12_g158217 = Out_Grayscale4_g158218;
				float In_Grayscale3_g158220 = temp_output_739_12_g158217;
				float In_Luminosity3_g158220 = temp_output_739_15_g158217;
				float In_MultiMask3_g158220 = Out_MultiMask4_g158218;
				float In_AlphaClip3_g158220 = Out_AlphaClip4_g158218;
				float In_AlphaFade3_g158220 = Out_AlphaFade4_g158218;
				float3 In_Translucency3_g158220 = Out_Translucency4_g158218;
				half Visual_Transmission699_g158217 = Out_Transmission4_g158218;
				float lerpResult746_g158217 = lerp( Visual_Transmission699_g158217 , ( Visual_Transmission699_g158217 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g158217 = lerpResult746_g158217;
				#else
				float staticSwitch703_g158217 = Visual_Transmission699_g158217;
				#endif
				half Final_Transmission702_g158217 = staticSwitch703_g158217;
				float In_Transmission3_g158220 = Final_Transmission702_g158217;
				float In_Thickness3_g158220 = Out_Thickness4_g158218;
				float In_Diffusion3_g158220 = Out_Diffusion4_g158218;
				{
				Data3_g158220.Dummy = In_Dummy3_g158220;
				Data3_g158220.Albedo = In_Albedo3_g158220;
				Data3_g158220.NormalTS = In_NormalTS3_g158220;
				Data3_g158220.NormalWS = In_NormalWS3_g158220;
				Data3_g158220.Shader = In_Shader3_g158220;
				Data3_g158220.Emissive= In_Emissive3_g158220;
				Data3_g158220.MultiMask = In_MultiMask3_g158220;
				Data3_g158220.Grayscale = In_Grayscale3_g158220;
				Data3_g158220.Luminosity = In_Luminosity3_g158220;
				Data3_g158220.AlphaClip = In_AlphaClip3_g158220;
				Data3_g158220.AlphaFade = In_AlphaFade3_g158220;
				Data3_g158220.Translucency = In_Translucency3_g158220;
				Data3_g158220.Transmission = In_Transmission3_g158220;
				Data3_g158220.Thickness = In_Thickness3_g158220;
				Data3_g158220.Diffusion = In_Diffusion3_g158220;
				}
				TVEVisualData Data4_g158255 = Data3_g158220;
				float Out_Dummy4_g158255 = 0;
				float3 Out_Albedo4_g158255 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158255 = float2( 0,0 );
				float3 Out_NormalWS4_g158255 = float3( 0,0,0 );
				float4 Out_Shader4_g158255 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158255 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158255 = 0;
				float Out_Grayscale4_g158255 = 0;
				float Out_Luminosity4_g158255 = 0;
				float Out_AlphaClip4_g158255 = 0;
				float Out_AlphaFade4_g158255 = 0;
				float3 Out_Translucency4_g158255 = float3( 0,0,0 );
				float Out_Transmission4_g158255 = 0;
				float Out_Thickness4_g158255 = 0;
				float Out_Diffusion4_g158255 = 0;
				{
				Out_Dummy4_g158255 = Data4_g158255.Dummy;
				Out_Albedo4_g158255 = Data4_g158255.Albedo;
				Out_NormalTS4_g158255 = Data4_g158255.NormalTS;
				Out_NormalWS4_g158255 = Data4_g158255.NormalWS;
				Out_Shader4_g158255 = Data4_g158255.Shader;
				Out_Emissive4_g158255= Data4_g158255.Emissive;
				Out_MultiMask4_g158255 = Data4_g158255.MultiMask;
				Out_Grayscale4_g158255 = Data4_g158255.Grayscale;
				Out_Luminosity4_g158255= Data4_g158255.Luminosity;
				Out_AlphaClip4_g158255 = Data4_g158255.AlphaClip;
				Out_AlphaFade4_g158255 = Data4_g158255.AlphaFade;
				Out_Translucency4_g158255 = Data4_g158255.Translucency;
				Out_Transmission4_g158255 = Data4_g158255.Transmission;
				Out_Thickness4_g158255 = Data4_g158255.Thickness;
				Out_Diffusion4_g158255 = Data4_g158255.Diffusion;
				}
				float3 temp_output_297_0_g158244 = Out_Albedo4_g158255;
				float3 In_Albedo3_g158256 = temp_output_297_0_g158244;
				float2 In_NormalTS3_g158256 = Out_NormalTS4_g158255;
				float3 In_NormalWS3_g158256 = Out_NormalWS4_g158255;
				float4 In_Shader3_g158256 = Out_Shader4_g158255;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g158244 = Out_Emissive4_g158255;
				TVEModelData Data15_g158245 = Data16_g158068;
				float Out_Dummy15_g158245 = 0;
				float3 Out_PositionOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158245 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158245 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158245 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158245 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158245 = float3( 0,0,0 );
				float4 Out_VertexData15_g158245 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158245 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158245 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158245 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158245 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158245 = Data15_g158245.Dummy;
				Out_PositionOS15_g158245 = Data15_g158245.PositionOS;
				Out_PositionWS15_g158245 = Data15_g158245.PositionWS;
				Out_PositionWO15_g158245 = Data15_g158245.PositionWO;
				Out_PositionRawOS15_g158245 = Data15_g158245.PositionRawOS;
				Out_PositionAddOS15_g158245 = Data15_g158245.PositionAddOS;
				Out_PivotOS15_g158245 = Data15_g158245.PivotOS;
				Out_PivotWS15_g158245 = Data15_g158245.PivotWS;
				Out_PivotWO15_g158245 = Data15_g158245.PivotWO;
				Out_NormalOS15_g158245 = Data15_g158245.NormalOS;
				Out_NormalWS15_g158245 = Data15_g158245.NormalWS;
				Out_NormalRawOS15_g158245 = Data15_g158245.NormalRawOS;
				Out_NormalRawWS15_g158245 = Data15_g158245.NormalRawWS;
				Out_TangentOS15_g158245 = Data15_g158245.TangentOS;
				Out_ViewDirWS15_g158245 = Data15_g158245.ViewDirWS;
				Out_VertexData15_g158245 = Data15_g158245.VertexData;
				Out_MotionData15_g158245 = Data15_g158245.MotionData;
				Out_BoundsData15_g158245 = Data15_g158245.BoundsData;
				Out_RotationData15_g158245 = Data15_g158245.RotationData;
				Out_FragmentData15_g158245 = Data15_g158245.FragmentData;
				}
				half4 Model_VertexMasks216_g158244 = Out_VertexData15_g158245;
				float4 break251_g158244 = Model_VertexMasks216_g158244;
				float4 break33_g158249 = _emissive_vert_mode;
				float temp_output_30_0_g158249 = ( break251_g158244.x * break33_g158249.x );
				float temp_output_29_0_g158249 = ( break251_g158244.y * break33_g158249.y );
				float temp_output_31_0_g158249 = ( break251_g158244.z * break33_g158249.z );
				float temp_output_28_0_g158249 = ( temp_output_30_0_g158249 + temp_output_29_0_g158249 + temp_output_31_0_g158249 + ( break251_g158244.w * break33_g158249.w ) );
				float clampResult17_g158248 = clamp( temp_output_28_0_g158249 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158252 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g158252 = ( _EmissiveMeshRemap.y - temp_output_7_0_g158252 );
				float lerpResult303_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158248 - temp_output_7_0_g158252 ) / ( temp_output_10_0_g158252 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g158258 = lerpResult303_g158244;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158258 = ( temp_output_6_0_g158258 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158258 = temp_output_6_0_g158258;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g158244 = staticSwitch14_g158258;
				#else
				float staticSwitch242_g158244 = 1.0;
				#endif
				half Emissive_MeshMask221_g158244 = staticSwitch242_g158244;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158247) = _EmissiveMaskTex;
				SamplerState Sampler276_g158247 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158253 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158253 = ( temp_output_6_0_g158253 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158253 = temp_output_6_0_g158253;
				#endif
				half4 Emissive_Coords167_g158244 = staticSwitch14_g158253;
				float4 temp_output_37_0_g158247 = Emissive_Coords167_g158244;
				half4 Coords276_g158247 = temp_output_37_0_g158247;
				half2 TexCoord276_g158247 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g158247 = SampleMain( Texture276_g158247 , Sampler276_g158247 , Coords276_g158247 , TexCoord276_g158247 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158247) = _EmissiveMaskTex;
				SamplerState Sampler275_g158247 = sampler_Linear_Repeat;
				half4 Coords275_g158247 = temp_output_37_0_g158247;
				float2 appendResult289_g158247 = (float2(IN.ase_texcoord11.z , IN.ase_texcoord11.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158247 = appendResult289_g158247;
				#else
				float2 staticSwitch288_g158247 = IN.ase_texcoord10.xy;
				#endif
				half2 TexCoord275_g158247 = staticSwitch288_g158247;
				half4 localSampleExtra275_g158247 = SampleExtra( Texture275_g158247 , Sampler275_g158247 , Coords275_g158247 , TexCoord275_g158247 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g158244 = localSampleExtra275_g158247;
				#else
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#endif
				half4 Emissive_MaskTex201_g158244 = staticSwitch176_g158244;
				float clampResult17_g158251 = clamp( (Emissive_MaskTex201_g158244).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g158250 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g158250 = ( _EmissiveMaskRemap.y - temp_output_7_0_g158250 );
				float lerpResult302_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158251 - temp_output_7_0_g158250 ) / ( temp_output_10_0_g158250 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g158244 = lerpResult302_g158244;
				#else
				float staticSwitch190_g158244 = 1.0;
				#endif
				half Emissive_Mask103_g158244 = staticSwitch190_g158244;
				float temp_output_279_0_g158244 = ( Emissive_MeshMask221_g158244 * Emissive_Mask103_g158244 );
				float3 appendResult293_g158244 = (float3(temp_output_279_0_g158244 , temp_output_279_0_g158244 , temp_output_279_0_g158244));
				half3 Local_EmissiveColor278_g158244 = appendResult293_g158244;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g158246 = Data204_g158069;
				float Out_Dummy15_g158246 = 0;
				float4 Out_CoatParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158246 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158246 = Data15_g158246.Dummy;
				Out_CoatParams15_g158246 = Data15_g158246.CoatParams;
				Out_PaintParams15_g158246 = Data15_g158246.PaintParams;
				Out_GlowParams15_g158246 = Data15_g158246.GlowParams;
				Out_AtmoParams15_g158246= Data15_g158246.AtmoParams;
				Out_FormParams15_g158246 = Data15_g158246.FormParams;
				Out_LandParams15_g158246 = Data15_g158246.LandParams;
				Out_WindParams15_g158246 = Data15_g158246.WindParams;
				Out_PushParams15_g158246 = Data15_g158246.PushParams;
				}
				half4 Global_GlowParams179_g158244 = Out_GlowParams15_g158246;
				float3 lerpResult299_g158244 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g158244).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g158244 = lerpResult299_g158244;
				#else
				float3 staticSwitch228_g158244 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g158244 = staticSwitch228_g158244;
				half3 Local_EmissiveValue88_g158244 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g158244 );
				half3 Emissive_Blend260_g158244 = ( ( (Visual_Emissive255_g158244).xyz * Local_EmissiveColor278_g158244 ) * Local_EmissiveValue88_g158244 );
				float3 temp_output_3_0_g158254 = Emissive_Blend260_g158244;
				float temp_output_15_0_g158254 = _emissive_power_value;
				float3 temp_output_23_0_g158254 = ( temp_output_3_0_g158254 * temp_output_15_0_g158254 );
				float4 appendResult295_g158244 = (float4(temp_output_23_0_g158254 , Emissive_Mask103_g158244));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g158244 = appendResult295_g158244;
				#else
				float4 staticSwitch129_g158244 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g158244 = staticSwitch129_g158244;
				float4 In_Emissive3_g158256 = Final_Emissive184_g158244;
				float In_Grayscale3_g158256 = Out_Grayscale4_g158255;
				float In_Luminosity3_g158256 = Out_Luminosity4_g158255;
				float temp_output_297_11_g158244 = Out_MultiMask4_g158255;
				float In_MultiMask3_g158256 = temp_output_297_11_g158244;
				float In_AlphaClip3_g158256 = Out_AlphaClip4_g158255;
				float In_AlphaFade3_g158256 = Out_AlphaFade4_g158255;
				float3 In_Translucency3_g158256 = Out_Translucency4_g158255;
				float In_Transmission3_g158256 = Out_Transmission4_g158255;
				float In_Thickness3_g158256 = Out_Thickness4_g158255;
				float In_Diffusion3_g158256 = Out_Diffusion4_g158255;
				{
				Data3_g158256.Dummy = In_Dummy3_g158256;
				Data3_g158256.Albedo = In_Albedo3_g158256;
				Data3_g158256.NormalTS = In_NormalTS3_g158256;
				Data3_g158256.NormalWS = In_NormalWS3_g158256;
				Data3_g158256.Shader = In_Shader3_g158256;
				Data3_g158256.Emissive= In_Emissive3_g158256;
				Data3_g158256.MultiMask = In_MultiMask3_g158256;
				Data3_g158256.Grayscale = In_Grayscale3_g158256;
				Data3_g158256.Luminosity = In_Luminosity3_g158256;
				Data3_g158256.AlphaClip = In_AlphaClip3_g158256;
				Data3_g158256.AlphaFade = In_AlphaFade3_g158256;
				Data3_g158256.Translucency = In_Translucency3_g158256;
				Data3_g158256.Transmission = In_Transmission3_g158256;
				Data3_g158256.Thickness = In_Thickness3_g158256;
				Data3_g158256.Diffusion = In_Diffusion3_g158256;
				}
				TVEVisualData Data4_g158262 = Data3_g158256;
				float Out_Dummy4_g158262 = 0;
				float3 Out_Albedo4_g158262 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158262 = float2( 0,0 );
				float3 Out_NormalWS4_g158262 = float3( 0,0,0 );
				float4 Out_Shader4_g158262 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158262 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158262 = 0;
				float Out_Grayscale4_g158262 = 0;
				float Out_Luminosity4_g158262 = 0;
				float Out_AlphaClip4_g158262 = 0;
				float Out_AlphaFade4_g158262 = 0;
				float3 Out_Translucency4_g158262 = float3( 0,0,0 );
				float Out_Transmission4_g158262 = 0;
				float Out_Thickness4_g158262 = 0;
				float Out_Diffusion4_g158262 = 0;
				{
				Out_Dummy4_g158262 = Data4_g158262.Dummy;
				Out_Albedo4_g158262 = Data4_g158262.Albedo;
				Out_NormalTS4_g158262 = Data4_g158262.NormalTS;
				Out_NormalWS4_g158262 = Data4_g158262.NormalWS;
				Out_Shader4_g158262 = Data4_g158262.Shader;
				Out_Emissive4_g158262= Data4_g158262.Emissive;
				Out_MultiMask4_g158262 = Data4_g158262.MultiMask;
				Out_Grayscale4_g158262 = Data4_g158262.Grayscale;
				Out_Luminosity4_g158262= Data4_g158262.Luminosity;
				Out_AlphaClip4_g158262 = Data4_g158262.AlphaClip;
				Out_AlphaFade4_g158262 = Data4_g158262.AlphaFade;
				Out_Translucency4_g158262 = Data4_g158262.Translucency;
				Out_Transmission4_g158262 = Data4_g158262.Transmission;
				Out_Thickness4_g158262 = Data4_g158262.Thickness;
				Out_Diffusion4_g158262 = Data4_g158262.Diffusion;
				}
				half3 Visual_Albedo199_g158261 = Out_Albedo4_g158262;
				half3 Final_Albedo312_g158261 = Visual_Albedo199_g158261;
				float3 In_Albedo3_g158263 = Final_Albedo312_g158261;
				float2 In_NormalTS3_g158263 = Out_NormalTS4_g158262;
				float3 In_NormalWS3_g158263 = Out_NormalWS4_g158262;
				float4 In_Shader3_g158263 = Out_Shader4_g158262;
				float4 In_Emissive3_g158263 = Out_Emissive4_g158262;
				float In_Grayscale3_g158263 = Out_Grayscale4_g158262;
				float In_Luminosity3_g158263 = Out_Luminosity4_g158262;
				float temp_output_301_11_g158261 = Out_MultiMask4_g158262;
				float In_MultiMask3_g158263 = temp_output_301_11_g158261;
				float In_AlphaClip3_g158263 = Out_AlphaClip4_g158262;
				float In_AlphaFade3_g158263 = Out_AlphaFade4_g158262;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g158261 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g158261 );
				half Visual_Transmission138_g158261 = Out_Transmission4_g158262;
				half Subsurface_Value268_g158261 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g158265 = Data204_g158069;
				float Out_Dummy15_g158265 = 0;
				float4 Out_CoatParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158265 = Data15_g158265.Dummy;
				Out_CoatParams15_g158265 = Data15_g158265.CoatParams;
				Out_PaintParams15_g158265 = Data15_g158265.PaintParams;
				Out_GlowParams15_g158265 = Data15_g158265.GlowParams;
				Out_AtmoParams15_g158265= Data15_g158265.AtmoParams;
				Out_FormParams15_g158265 = Data15_g158265.FormParams;
				Out_LandParams15_g158265 = Data15_g158265.LandParams;
				Out_WindParams15_g158265 = Data15_g158265.WindParams;
				Out_PushParams15_g158265 = Data15_g158265.PushParams;
				}
				half4 Global_GlowParams373_g158261 = Out_GlowParams15_g158265;
				float lerpResult403_g158261 = lerp( 1.0 , saturate( (Global_GlowParams373_g158261).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g158261 = lerpResult403_g158261;
				#else
				float staticSwitch367_g158261 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g158261 = staticSwitch367_g158261;
				half Visual_MultiMask292_g158261 = temp_output_301_11_g158261;
				float lerpResult293_g158261 = lerp( 1.0 , Visual_MultiMask292_g158261 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g158261 = lerpResult293_g158261;
				half Custom_Mask363_g158261 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g158261 = ( Visual_Transmission138_g158261 * Subsurface_Value268_g158261 * Subsurface_GlobalMask369_g158261 * Subsurface_MultiMask296_g158261 * Custom_Mask363_g158261 );
				#else
				float staticSwitch345_g158261 = 0.0;
				#endif
				half Final_Transmission269_g158261 = staticSwitch345_g158261;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g158261 = ( Subsurface_Color264_g158261 * Final_Transmission269_g158261 * 10.0 );
				#else
				float3 staticSwitch348_g158261 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g158261 = staticSwitch348_g158261;
				float3 In_Translucency3_g158263 = Final_Translucency254_g158261;
				float In_Transmission3_g158263 = Final_Transmission269_g158261;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g158261 = 0.0;
				#else
				float staticSwitch351_g158261 = 1.0;
				#endif
				half Final_Thickness275_g158261 = staticSwitch351_g158261;
				float In_Thickness3_g158263 = Final_Thickness275_g158261;
				float Final_Diffusion340_g158261 = _SubsurfaceDiffusion;
				float In_Diffusion3_g158263 = Final_Diffusion340_g158261;
				{
				Data3_g158263.Dummy = In_Dummy3_g158263;
				Data3_g158263.Albedo = In_Albedo3_g158263;
				Data3_g158263.NormalTS = In_NormalTS3_g158263;
				Data3_g158263.NormalWS = In_NormalWS3_g158263;
				Data3_g158263.Shader = In_Shader3_g158263;
				Data3_g158263.Emissive= In_Emissive3_g158263;
				Data3_g158263.MultiMask = In_MultiMask3_g158263;
				Data3_g158263.Grayscale = In_Grayscale3_g158263;
				Data3_g158263.Luminosity = In_Luminosity3_g158263;
				Data3_g158263.AlphaClip = In_AlphaClip3_g158263;
				Data3_g158263.AlphaFade = In_AlphaFade3_g158263;
				Data3_g158263.Translucency = In_Translucency3_g158263;
				Data3_g158263.Transmission = In_Transmission3_g158263;
				Data3_g158263.Thickness = In_Thickness3_g158263;
				Data3_g158263.Diffusion = In_Diffusion3_g158263;
				}
				TVEVisualData Data4_g158294 = Data3_g158263;
				float Out_Dummy4_g158294 = 0;
				float3 Out_Albedo4_g158294 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158294 = float2( 0,0 );
				float3 Out_NormalWS4_g158294 = float3( 0,0,0 );
				float4 Out_Shader4_g158294 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158294 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158294 = 0;
				float Out_Grayscale4_g158294 = 0;
				float Out_Luminosity4_g158294 = 0;
				float Out_AlphaClip4_g158294 = 0;
				float Out_AlphaFade4_g158294 = 0;
				float3 Out_Translucency4_g158294 = float3( 0,0,0 );
				float Out_Transmission4_g158294 = 0;
				float Out_Thickness4_g158294 = 0;
				float Out_Diffusion4_g158294 = 0;
				{
				Out_Dummy4_g158294 = Data4_g158294.Dummy;
				Out_Albedo4_g158294 = Data4_g158294.Albedo;
				Out_NormalTS4_g158294 = Data4_g158294.NormalTS;
				Out_NormalWS4_g158294 = Data4_g158294.NormalWS;
				Out_Shader4_g158294 = Data4_g158294.Shader;
				Out_Emissive4_g158294= Data4_g158294.Emissive;
				Out_MultiMask4_g158294 = Data4_g158294.MultiMask;
				Out_Grayscale4_g158294 = Data4_g158294.Grayscale;
				Out_Luminosity4_g158294= Data4_g158294.Luminosity;
				Out_AlphaClip4_g158294 = Data4_g158294.AlphaClip;
				Out_AlphaFade4_g158294 = Data4_g158294.AlphaFade;
				Out_Translucency4_g158294 = Data4_g158294.Translucency;
				Out_Transmission4_g158294 = Data4_g158294.Transmission;
				Out_Thickness4_g158294 = Data4_g158294.Thickness;
				Out_Diffusion4_g158294 = Data4_g158294.Diffusion;
				}
				half3 Input_Albedo24_g158293 = Out_Albedo4_g158294;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g158293 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g158293 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g158293 = staticSwitch22_g158293;
				float4 break24_g158288 = Out_Shader4_g158294;
				half Metallic95_g158288 = break24_g158288.x;
				half Input_Metallic25_g158293 = Metallic95_g158288;
				half OneMinusReflectivity31_g158293 = ( (ColorSpaceDielectricSpec23_g158293).w - ( (ColorSpaceDielectricSpec23_g158293).w * Input_Metallic25_g158293 ) );
				
				float3 appendResult23_g158288 = (float3(Out_NormalTS4_g158294 , 1.0));
				float3 temp_output_13_0_g158292 = appendResult23_g158288;
				float3 temp_output_33_0_g158292 = ( temp_output_13_0_g158292 * _render_normal );
				float3 switchResult12_g158292 = (((ase_vface>0)?(temp_output_13_0_g158292):(temp_output_33_0_g158292)));
				
				float3 lerpResult28_g158293 = lerp( (ColorSpaceDielectricSpec23_g158293).xyz , Input_Albedo24_g158293 , Input_Metallic25_g158293);
				half RenderSpec102_g158288 = _RenderSpecular;
				
				float localCustomAlphaClip19_g158295 = ( 0.0 );
				float temp_output_3_0_g158295 = Out_AlphaClip4_g158294;
				float Alpha19_g158295 = temp_output_3_0_g158295;
				float temp_output_15_0_g158295 = 0.0;
				float Treshold19_g158295 = temp_output_15_0_g158295;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#else
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g158293 * OneMinusReflectivity31_g158293 );
				o.Normal = switchResult12_g158292;
				o.Emission = (Out_Emissive4_g158294).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 0;
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g158293 * RenderSpec102_g158288 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g158288.y;
					o.Smoothness = break24_g158288.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g158295 * Out_AlphaFade4_g158294 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = Out_Translucency4_g158294;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float3 ase_normal : NORMAL;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = v.vertex.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g152464 = ase_worldPos;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float4x4 break19_g152466 = unity_ObjectToWorld;
				float3 appendResult20_g152466 = (float3(break19_g152466[ 0 ][ 3 ] , break19_g152466[ 1 ][ 3 ] , break19_g152466[ 2 ][ 3 ]));
				half3 ObjectData20_g152468 = appendResult20_g152466;
				half3 WorldData19_g152468 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152468 = WorldData19_g152468;
				#else
				float3 staticSwitch14_g152468 = ObjectData20_g152468;
				#endif
				float3 temp_output_124_0_g152466 = staticSwitch14_g152468;
				float3 temp_output_239_7_g152464 = temp_output_124_0_g152466;
				float4x4 break19_g152470 = unity_ObjectToWorld;
				float3 appendResult20_g152470 = (float3(break19_g152470[ 0 ][ 3 ] , break19_g152470[ 1 ][ 3 ] , break19_g152470[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 temp_output_122_0_g152470 = PivotOS149_g152464;
				float3 PivotsOnly105_g152470 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g152470 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g152472 = ( appendResult20_g152470 + PivotsOnly105_g152470 );
				half3 WorldData19_g152472 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152472 = WorldData19_g152472;
				#else
				float3 staticSwitch14_g152472 = ObjectData20_g152472;
				#endif
				float3 temp_output_124_0_g152470 = staticSwitch14_g152472;
				float3 temp_output_237_7_g152464 = temp_output_124_0_g152470;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#else
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#endif
				float3 vertexToFrag76_g152464 = staticSwitch236_g152464;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = v.normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = v.tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = v.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( v.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( v.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( v.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( v.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ), 0.0 );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158291 = Data16_g158068;
				float Out_Dummy15_g158291 = 0;
				float3 Out_PositionOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158291 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158291 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158291 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158291 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158291 = float3( 0,0,0 );
				float4 Out_VertexData15_g158291 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158291 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158291 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158291 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158291 = Data15_g158291.Dummy;
				Out_PositionOS15_g158291 = Data15_g158291.PositionOS;
				Out_PositionWS15_g158291 = Data15_g158291.PositionWS;
				Out_PositionWO15_g158291 = Data15_g158291.PositionWO;
				Out_PositionRawOS15_g158291 = Data15_g158291.PositionRawOS;
				Out_PositionAddOS15_g158291 = Data15_g158291.PositionAddOS;
				Out_PivotOS15_g158291 = Data15_g158291.PivotOS;
				Out_PivotWS15_g158291 = Data15_g158291.PivotWS;
				Out_PivotWO15_g158291 = Data15_g158291.PivotWO;
				Out_NormalOS15_g158291 = Data15_g158291.NormalOS;
				Out_NormalWS15_g158291 = Data15_g158291.NormalWS;
				Out_NormalRawOS15_g158291 = Data15_g158291.NormalRawOS;
				Out_NormalRawWS15_g158291 = Data15_g158291.NormalRawWS;
				Out_TangentOS15_g158291 = Data15_g158291.TangentOS;
				Out_ViewDirWS15_g158291 = Data15_g158291.ViewDirWS;
				Out_VertexData15_g158291 = Data15_g158291.VertexData;
				Out_MotionData15_g158291 = Data15_g158291.MotionData;
				Out_BoundsData15_g158291 = Data15_g158291.BoundsData;
				Out_RotationData15_g158291 = Data15_g158291.RotationData;
				Out_FragmentData15_g158291 = Data15_g158291.FragmentData;
				}
				float3 temp_output_31_0_g158288 = Out_PositionOS15_g158291;
				
				float4 temp_output_6_0_g158303 = Out_TangentOS15_g158291;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158303 = ( temp_output_6_0_g158303 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158303 = temp_output_6_0_g158303;
				#endif
				
				o.ase_texcoord7.xyz = vertexToFrag73_g152464;
				o.ase_texcoord8.xyz = vertexToFrag76_g152464;
				o.ase_texcoord10.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord11.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord12.xyz = ase_worldBitangent;
				TVEModelData Data15_g158215 = Data16_g158068;
				float Out_Dummy15_g158215 = 0;
				float3 Out_PositionOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158215 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158215 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158215 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158215 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158215 = float3( 0,0,0 );
				float4 Out_VertexData15_g158215 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158215 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158215 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158215 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158215 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158215 = Data15_g158215.Dummy;
				Out_PositionOS15_g158215 = Data15_g158215.PositionOS;
				Out_PositionWS15_g158215 = Data15_g158215.PositionWS;
				Out_PositionWO15_g158215 = Data15_g158215.PositionWO;
				Out_PositionRawOS15_g158215 = Data15_g158215.PositionRawOS;
				Out_PositionAddOS15_g158215 = Data15_g158215.PositionAddOS;
				Out_PivotOS15_g158215 = Data15_g158215.PivotOS;
				Out_PivotWS15_g158215 = Data15_g158215.PivotWS;
				Out_PivotWO15_g158215 = Data15_g158215.PivotWO;
				Out_NormalOS15_g158215 = Data15_g158215.NormalOS;
				Out_NormalWS15_g158215 = Data15_g158215.NormalWS;
				Out_NormalRawOS15_g158215 = Data15_g158215.NormalRawOS;
				Out_NormalRawWS15_g158215 = Data15_g158215.NormalRawWS;
				Out_TangentOS15_g158215 = Data15_g158215.TangentOS;
				Out_ViewDirWS15_g158215 = Data15_g158215.ViewDirWS;
				Out_VertexData15_g158215 = Data15_g158215.VertexData;
				Out_MotionData15_g158215 = Data15_g158215.MotionData;
				Out_BoundsData15_g158215 = Data15_g158215.BoundsData;
				Out_RotationData15_g158215 = Data15_g158215.RotationData;
				Out_FragmentData15_g158215 = Data15_g158215.FragmentData;
				}
				half4 Model_FragmentData196_g158213 = Out_FragmentData15_g158215;
				float vertexToFrag203_g158213 = (Model_FragmentData196_g158213).w;
				o.ase_texcoord4.z = vertexToFrag203_g158213;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord5 = v.texcoord1.xyzw;
				o.ase_texcoord6 = v.vertex;
				o.ase_texcoord9 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord10.w = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g158288 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g158291;
				v.tangent = staticSwitch14_g158303;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g158294 = ( 0.0 );
				float localCompData3_g158263 = ( 0.0 );
				TVEVisualData Data3_g158263 = (TVEVisualData)0;
				half Dummy145_g158261 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g158263 = Dummy145_g158261;
				float localBreakData4_g158262 = ( 0.0 );
				float localCompData3_g158256 = ( 0.0 );
				TVEVisualData Data3_g158256 = (TVEVisualData)0;
				half Dummy145_g158244 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g158256 = Dummy145_g158244;
				float localBreakData4_g158255 = ( 0.0 );
				float localCompData3_g158220 = ( 0.0 );
				TVEVisualData Data3_g158220 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord3.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g158217 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g158220 = Dummy594_g158217.r;
				float localBreakData4_g158218 = ( 0.0 );
				float localCompData3_g158216 = ( 0.0 );
				TVEVisualData Data3_g158216 = (TVEVisualData)0;
				float In_Dummy3_g158216 = 0.0;
				float localBreakData4_g158214 = ( 0.0 );
				float localCompData3_g158207 = ( 0.0 );
				TVEVisualData Data3_g158207 = (TVEVisualData)0;
				half Dummy220_g158203 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g158207 = Dummy220_g158203;
				float localBreakData4_g158206 = ( 0.0 );
				float localCompData3_g158195 = ( 0.0 );
				TVEVisualData Data3_g158195 = (TVEVisualData)0;
				half Dummy202_g158193 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g158195 = Dummy202_g158193;
				float localBreakData4_g158194 = ( 0.0 );
				float localCompData3_g158182 = ( 0.0 );
				TVEVisualData Data3_g158182 = (TVEVisualData)0;
				half4 Dummy944_g158164 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g158182 = Dummy944_g158164.x;
				float localBreakData4_g158181 = ( 0.0 );
				float localCompData3_g158145 = ( 0.0 );
				TVEVisualData Data3_g158145 = (TVEVisualData)0;
				half4 Dummy946_g158134 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g158145 = Dummy946_g158134.x;
				float localBreakData4_g158148 = ( 0.0 );
				float localCompData3_g158130 = ( 0.0 );
				TVEVisualData Data3_g158130 = (TVEVisualData)0;
				half4 Dummy130_g158120 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g158130 = Dummy130_g158120.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158131) = _MainAlbedoTex;
				SamplerState Sampler276_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g158120 = _main_coord_value;
				float4 temp_output_37_0_g158131 = Local_Coords180_g158120;
				half4 Coords276_g158131 = temp_output_37_0_g158131;
				half2 TexCoord276_g158131 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158131 = SampleMain( Texture276_g158131 , Sampler276_g158131 , Coords276_g158131 , TexCoord276_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158131) = _MainAlbedoTex;
				SamplerState Sampler275_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158131 = temp_output_37_0_g158131;
				float2 appendResult289_g158131 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158131 = appendResult289_g158131;
				#else
				float2 staticSwitch288_g158131 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158131 = staticSwitch288_g158131;
				half4 localSampleExtra275_g158131 = SampleExtra( Texture275_g158131 , Sampler275_g158131 , Coords275_g158131 , TexCoord275_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158131) = _MainAlbedoTex;
				SamplerState Sampler238_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158131 = temp_output_37_0_g158131;
				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = IN.ase_texcoord6.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 vertexToFrag73_g152464 = IN.ase_texcoord7.xyz;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float3 vertexToFrag76_g152464 = IN.ase_texcoord8.xyz;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(IN.ase_texcoord9.x , 0.0 , IN.ase_texcoord9.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = IN.ase_normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = IN.ase_texcoord10.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = IN.ase_tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = IN.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( IN.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( IN.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( IN.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( IN.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = IN.ase_texcoord3.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ) );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158121 = Data16_g158068;
				float Out_Dummy15_g158121 = 0;
				float3 Out_PositionOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158121 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158121 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158121 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158121 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158121 = float3( 0,0,0 );
				float4 Out_VertexData15_g158121 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158121 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158121 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158121 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158121 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158121 = Data15_g158121.Dummy;
				Out_PositionOS15_g158121 = Data15_g158121.PositionOS;
				Out_PositionWS15_g158121 = Data15_g158121.PositionWS;
				Out_PositionWO15_g158121 = Data15_g158121.PositionWO;
				Out_PositionRawOS15_g158121 = Data15_g158121.PositionRawOS;
				Out_PositionAddOS15_g158121 = Data15_g158121.PositionAddOS;
				Out_PivotOS15_g158121 = Data15_g158121.PivotOS;
				Out_PivotWS15_g158121 = Data15_g158121.PivotWS;
				Out_PivotWO15_g158121 = Data15_g158121.PivotWO;
				Out_NormalOS15_g158121 = Data15_g158121.NormalOS;
				Out_NormalWS15_g158121 = Data15_g158121.NormalWS;
				Out_NormalRawOS15_g158121 = Data15_g158121.NormalRawOS;
				Out_NormalRawWS15_g158121 = Data15_g158121.NormalRawWS;
				Out_TangentOS15_g158121 = Data15_g158121.TangentOS;
				Out_ViewDirWS15_g158121 = Data15_g158121.ViewDirWS;
				Out_VertexData15_g158121 = Data15_g158121.VertexData;
				Out_MotionData15_g158121 = Data15_g158121.MotionData;
				Out_BoundsData15_g158121 = Data15_g158121.BoundsData;
				Out_RotationData15_g158121 = Data15_g158121.RotationData;
				Out_FragmentData15_g158121 = Data15_g158121.FragmentData;
				}
				half3 Model_PositionWO222_g158120 = Out_PositionWO15_g158121;
				float3 temp_output_279_0_g158131 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158131 = temp_output_279_0_g158131;
				half4 localSamplePlanar2D238_g158131 = SamplePlanar2D( Texture238_g158131 , Sampler238_g158131 , Coords238_g158131 , WorldPosition238_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158131) = _MainAlbedoTex;
				SamplerState Sampler246_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition246_g158131 = temp_output_279_0_g158131;
				half3 Model_NormalWS226_g158120 = Out_NormalWS15_g158121;
				float3 temp_output_280_0_g158131 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158131 = temp_output_280_0_g158131;
				half4 localSamplePlanar3D246_g158131 = SamplePlanar3D( Texture246_g158131 , Sampler246_g158131 , Coords246_g158131 , WorldPosition246_g158131 , WorldNormal246_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158131) = _MainAlbedoTex;
				SamplerState Sampler234_g158131 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158131 = temp_output_37_0_g158131;
				float3 WorldPosition234_g158131 = temp_output_279_0_g158131;
				float4 localSampleStochastic2D234_g158131 = SampleStochastic2D( Texture234_g158131 , Sampler234_g158131 , Coords234_g158131 , WorldPosition234_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158131) = _MainAlbedoTex;
				SamplerState Sampler263_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition263_g158131 = temp_output_279_0_g158131;
				half3 WorldNormal263_g158131 = temp_output_280_0_g158131;
				half4 localSampleStochastic3D263_g158131 = SampleStochastic3D( Texture263_g158131 , Sampler263_g158131 , Coords263_g158131 , WorldPosition263_g158131 , WorldNormal263_g158131 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g158120 = localSampleExtra275_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g158120 = localSamplePlanar2D238_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g158120 = localSamplePlanar3D246_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g158120 = localSampleStochastic2D234_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g158120 = localSampleStochastic3D263_g158131;
				#else
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#endif
				half4 Local_AlbedoTex185_g158120 = staticSwitch184_g158120;
				float3 lerpResult53_g158120 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g158120).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g158120 = lerpResult53_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158133) = _MainShaderTex;
				SamplerState Sampler276_g158133 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158133 = Local_Coords180_g158120;
				half4 Coords276_g158133 = temp_output_37_0_g158133;
				half2 TexCoord276_g158133 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158133 = SampleMain( Texture276_g158133 , Sampler276_g158133 , Coords276_g158133 , TexCoord276_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158133) = _MainShaderTex;
				SamplerState Sampler275_g158133 = sampler_Linear_Repeat;
				half4 Coords275_g158133 = temp_output_37_0_g158133;
				float2 appendResult289_g158133 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158133 = appendResult289_g158133;
				#else
				float2 staticSwitch288_g158133 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158133 = staticSwitch288_g158133;
				half4 localSampleExtra275_g158133 = SampleExtra( Texture275_g158133 , Sampler275_g158133 , Coords275_g158133 , TexCoord275_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158133) = _MainShaderTex;
				SamplerState Sampler238_g158133 = sampler_Linear_Repeat;
				half4 Coords238_g158133 = temp_output_37_0_g158133;
				float3 temp_output_279_0_g158133 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158133 = temp_output_279_0_g158133;
				half4 localSamplePlanar2D238_g158133 = SamplePlanar2D( Texture238_g158133 , Sampler238_g158133 , Coords238_g158133 , WorldPosition238_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158133) = _MainShaderTex;
				SamplerState Sampler246_g158133 = sampler_Linear_Repeat;
				half4 Coords246_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition246_g158133 = temp_output_279_0_g158133;
				float3 temp_output_280_0_g158133 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158133 = temp_output_280_0_g158133;
				half4 localSamplePlanar3D246_g158133 = SamplePlanar3D( Texture246_g158133 , Sampler246_g158133 , Coords246_g158133 , WorldPosition246_g158133 , WorldNormal246_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158133) = _MainShaderTex;
				SamplerState Sampler234_g158133 = sampler_Linear_Repeat;
				float4 Coords234_g158133 = temp_output_37_0_g158133;
				float3 WorldPosition234_g158133 = temp_output_279_0_g158133;
				float4 localSampleStochastic2D234_g158133 = SampleStochastic2D( Texture234_g158133 , Sampler234_g158133 , Coords234_g158133 , WorldPosition234_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158133) = _MainShaderTex;
				SamplerState Sampler263_g158133 = sampler_Linear_Repeat;
				half4 Coords263_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition263_g158133 = temp_output_279_0_g158133;
				half3 WorldNormal263_g158133 = temp_output_280_0_g158133;
				half4 localSampleStochastic3D263_g158133 = SampleStochastic3D( Texture263_g158133 , Sampler263_g158133 , Coords263_g158133 , WorldPosition263_g158133 , WorldNormal263_g158133 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g158120 = localSampleExtra275_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g158120 = localSamplePlanar2D238_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g158120 = localSamplePlanar3D246_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g158120 = localSampleStochastic2D234_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g158120 = localSampleStochastic3D263_g158133;
				#else
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#endif
				half4 Local_MasksTex199_g158120 = staticSwitch198_g158120;
				float lerpResult23_g158120 = lerp( 1.0 , (Local_MasksTex199_g158120).y , _MainOcclusionValue);
				float4 appendResult73_g158120 = (float4(( (Local_MasksTex199_g158120).x * _MainMetallicValue ) , lerpResult23_g158120 , (Local_MasksTex199_g158120).z , ( (Local_MasksTex199_g158120).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g158120 = appendResult73_g158120;
				float clampResult17_g158126 = clamp( (Local_Masks109_g158120).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158127 = _MainMultiRemap.x;
				float temp_output_10_0_g158127 = ( _MainMultiRemap.y - temp_output_7_0_g158127 );
				half Local_MultiMask78_g158120 = saturate( ( ( clampResult17_g158126 - temp_output_7_0_g158127 ) / ( temp_output_10_0_g158127 + 0.0001 ) ) );
				float lerpResult58_g158120 = lerp( 1.0 , Local_MultiMask78_g158120 , _MainColorMode);
				float4 lerpResult62_g158120 = lerp( _MainColorTwo , _MainColor , lerpResult58_g158120);
				half3 Local_ColorRGB93_g158120 = (lerpResult62_g158120).rgb;
				half3 Local_Albedo139_g158120 = ( Local_AlbedoRGB107_g158120 * Local_ColorRGB93_g158120 );
				float3 In_Albedo3_g158130 = Local_Albedo139_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158132) = _MainNormalTex;
				SamplerState Sampler276_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g158132 = Local_Coords180_g158120;
				half4 Coords276_g158132 = temp_output_37_0_g158132;
				half2 TexCoord276_g158132 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158132 = SampleMain( Texture276_g158132 , Sampler276_g158132 , Coords276_g158132 , TexCoord276_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158132) = _MainNormalTex;
				SamplerState Sampler275_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158132 = temp_output_37_0_g158132;
				float2 appendResult289_g158132 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158132 = appendResult289_g158132;
				#else
				float2 staticSwitch288_g158132 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158132 = staticSwitch288_g158132;
				half4 localSampleExtra275_g158132 = SampleExtra( Texture275_g158132 , Sampler275_g158132 , Coords275_g158132 , TexCoord275_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158132) = _MainNormalTex;
				SamplerState Sampler238_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158132 = temp_output_37_0_g158132;
				float3 temp_output_279_0_g158132 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158132 = temp_output_279_0_g158132;
				half4 localSamplePlanar2D238_g158132 = SamplePlanar2D( Texture238_g158132 , Sampler238_g158132 , Coords238_g158132 , WorldPosition238_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158132) = _MainNormalTex;
				SamplerState Sampler246_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition246_g158132 = temp_output_279_0_g158132;
				float3 temp_output_280_0_g158132 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158132 = temp_output_280_0_g158132;
				half4 localSamplePlanar3D246_g158132 = SamplePlanar3D( Texture246_g158132 , Sampler246_g158132 , Coords246_g158132 , WorldPosition246_g158132 , WorldNormal246_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158132) = _MainNormalTex;
				SamplerState Sampler234_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158132 = temp_output_37_0_g158132;
				float3 WorldPosition234_g158132 = temp_output_279_0_g158132;
				float4 localSampleStochastic2D234_g158132 = SampleStochastic2D( Texture234_g158132 , Sampler234_g158132 , Coords234_g158132 , WorldPosition234_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158132) = _MainNormalTex;
				SamplerState Sampler263_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition263_g158132 = temp_output_279_0_g158132;
				half3 WorldNormal263_g158132 = temp_output_280_0_g158132;
				half4 localSampleStochastic3D263_g158132 = SampleStochastic3D( Texture263_g158132 , Sampler263_g158132 , Coords263_g158132 , WorldPosition263_g158132 , WorldNormal263_g158132 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g158120 = localSampleExtra275_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g158120 = localSamplePlanar2D238_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g158120 = localSamplePlanar3D246_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g158120 = localSampleStochastic2D234_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g158120 = localSampleStochastic3D263_g158132;
				#else
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#endif
				half4 Local_NormaTex191_g158120 = staticSwitch193_g158120;
				half4 Normal_Packed45_g158122 = Local_NormaTex191_g158120;
				float2 appendResult58_g158122 = (float2(( (Normal_Packed45_g158122).x * (Normal_Packed45_g158122).w ) , (Normal_Packed45_g158122).y));
				half2 Normal_Default50_g158122 = appendResult58_g158122;
				half2 Normal_ASTC41_g158122 = (Normal_Packed45_g158122).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158122 = Normal_ASTC41_g158122;
				#else
				float2 staticSwitch38_g158122 = Normal_Default50_g158122;
				#endif
				half2 Normal_NO_DTX544_g158122 = (Normal_Packed45_g158122).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158122 = Normal_NO_DTX544_g158122;
				#else
				float2 staticSwitch37_g158122 = staticSwitch38_g158122;
				#endif
				float2 temp_output_26_0_g158120 = ( (staticSwitch37_g158122*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord11.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord12.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g158123 = temp_output_26_0_g158120;
				float2 break71_g158123 = Normal_Planar45_g158123;
				float3 appendResult72_g158123 = (float3(break71_g158123.x , 0.0 , break71_g158123.y));
				float2 temp_output_205_0_g158120 = (mul( ase_worldToTangent, appendResult72_g158123 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#else
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#endif
				half2 Local_NormalTS108_g158120 = staticSwitch204_g158120;
				float2 In_NormalTS3_g158130 = Local_NormalTS108_g158120;
				float3 appendResult68_g158124 = (float3(Local_NormalTS108_g158120 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g158124 = appendResult68_g158124;
				float3 worldNormal74_g158124 = normalize( float3(dot(tanToWorld0,tanNormal74_g158124), dot(tanToWorld1,tanNormal74_g158124), dot(tanToWorld2,tanNormal74_g158124)) );
				half3 Local_NormalWS250_g158120 = worldNormal74_g158124;
				float3 In_NormalWS3_g158130 = Local_NormalWS250_g158120;
				float4 In_Shader3_g158130 = Local_Masks109_g158120;
				float4 In_Emissive3_g158130 = half4(1,1,1,1);
				float3 temp_output_3_0_g158125 = Local_Albedo139_g158120;
				float dotResult20_g158125 = dot( temp_output_3_0_g158125 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g158120 = dotResult20_g158125;
				float In_Grayscale3_g158130 = Local_Grayscale110_g158120;
				float clampResult144_g158120 = clamp( saturate( ( Local_Grayscale110_g158120 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g158120 = clampResult144_g158120;
				float In_Luminosity3_g158130 = Local_Luminosity145_g158120;
				float In_MultiMask3_g158130 = Local_MultiMask78_g158120;
				float temp_output_187_0_g158120 = (Local_AlbedoTex185_g158120).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g158120 = ( temp_output_187_0_g158120 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g158120 = temp_output_187_0_g158120;
				#endif
				half Local_AlphaClip111_g158120 = staticSwitch236_g158120;
				float In_AlphaClip3_g158130 = Local_AlphaClip111_g158120;
				half Local_AlphaFade246_g158120 = (lerpResult62_g158120).a;
				float In_AlphaFade3_g158130 = Local_AlphaFade246_g158120;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g158130 = temp_cast_22;
				float In_Transmission3_g158130 = 1.0;
				float In_Thickness3_g158130 = 0.0;
				float In_Diffusion3_g158130 = 0.0;
				{
				Data3_g158130.Dummy = In_Dummy3_g158130;
				Data3_g158130.Albedo = In_Albedo3_g158130;
				Data3_g158130.NormalTS = In_NormalTS3_g158130;
				Data3_g158130.NormalWS = In_NormalWS3_g158130;
				Data3_g158130.Shader = In_Shader3_g158130;
				Data3_g158130.Emissive= In_Emissive3_g158130;
				Data3_g158130.MultiMask = In_MultiMask3_g158130;
				Data3_g158130.Grayscale = In_Grayscale3_g158130;
				Data3_g158130.Luminosity = In_Luminosity3_g158130;
				Data3_g158130.AlphaClip = In_AlphaClip3_g158130;
				Data3_g158130.AlphaFade = In_AlphaFade3_g158130;
				Data3_g158130.Translucency = In_Translucency3_g158130;
				Data3_g158130.Transmission = In_Transmission3_g158130;
				Data3_g158130.Thickness = In_Thickness3_g158130;
				Data3_g158130.Diffusion = In_Diffusion3_g158130;
				}
				TVEVisualData Data4_g158148 = Data3_g158130;
				float Out_Dummy4_g158148 = 0;
				float3 Out_Albedo4_g158148 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158148 = float2( 0,0 );
				float3 Out_NormalWS4_g158148 = float3( 0,0,0 );
				float4 Out_Shader4_g158148 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158148 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158148 = 0;
				float Out_Grayscale4_g158148 = 0;
				float Out_Luminosity4_g158148 = 0;
				float Out_AlphaClip4_g158148 = 0;
				float Out_AlphaFade4_g158148 = 0;
				float3 Out_Translucency4_g158148 = float3( 0,0,0 );
				float Out_Transmission4_g158148 = 0;
				float Out_Thickness4_g158148 = 0;
				float Out_Diffusion4_g158148 = 0;
				{
				Out_Dummy4_g158148 = Data4_g158148.Dummy;
				Out_Albedo4_g158148 = Data4_g158148.Albedo;
				Out_NormalTS4_g158148 = Data4_g158148.NormalTS;
				Out_NormalWS4_g158148 = Data4_g158148.NormalWS;
				Out_Shader4_g158148 = Data4_g158148.Shader;
				Out_Emissive4_g158148= Data4_g158148.Emissive;
				Out_MultiMask4_g158148 = Data4_g158148.MultiMask;
				Out_Grayscale4_g158148 = Data4_g158148.Grayscale;
				Out_Luminosity4_g158148= Data4_g158148.Luminosity;
				Out_AlphaClip4_g158148 = Data4_g158148.AlphaClip;
				Out_AlphaFade4_g158148 = Data4_g158148.AlphaFade;
				Out_Translucency4_g158148 = Data4_g158148.Translucency;
				Out_Transmission4_g158148 = Data4_g158148.Transmission;
				Out_Thickness4_g158148 = Data4_g158148.Thickness;
				Out_Diffusion4_g158148 = Data4_g158148.Diffusion;
				}
				half3 Visual_Albedo527_g158134 = Out_Albedo4_g158148;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158135) = _SecondAlbedoTex;
				SamplerState Sampler276_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158134 = _second_coord_value;
				float4 temp_output_37_0_g158135 = Local_LayerCoords790_g158134;
				half4 Coords276_g158135 = temp_output_37_0_g158135;
				half2 TexCoord276_g158135 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158135 = SampleMain( Texture276_g158135 , Sampler276_g158135 , Coords276_g158135 , TexCoord276_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158135) = _SecondAlbedoTex;
				SamplerState Sampler275_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158135 = temp_output_37_0_g158135;
				float2 appendResult289_g158135 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158135 = appendResult289_g158135;
				#else
				float2 staticSwitch288_g158135 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158135 = staticSwitch288_g158135;
				half4 localSampleExtra275_g158135 = SampleExtra( Texture275_g158135 , Sampler275_g158135 , Coords275_g158135 , TexCoord275_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158135) = _SecondAlbedoTex;
				SamplerState Sampler238_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158135 = temp_output_37_0_g158135;
				TVEModelData Data15_g158146 = Data16_g158068;
				float Out_Dummy15_g158146 = 0;
				float3 Out_PositionOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158146 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158146 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158146 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158146 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158146 = float3( 0,0,0 );
				float4 Out_VertexData15_g158146 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158146 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158146 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158146 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158146 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158146 = Data15_g158146.Dummy;
				Out_PositionOS15_g158146 = Data15_g158146.PositionOS;
				Out_PositionWS15_g158146 = Data15_g158146.PositionWS;
				Out_PositionWO15_g158146 = Data15_g158146.PositionWO;
				Out_PositionRawOS15_g158146 = Data15_g158146.PositionRawOS;
				Out_PositionAddOS15_g158146 = Data15_g158146.PositionAddOS;
				Out_PivotOS15_g158146 = Data15_g158146.PivotOS;
				Out_PivotWS15_g158146 = Data15_g158146.PivotWS;
				Out_PivotWO15_g158146 = Data15_g158146.PivotWO;
				Out_NormalOS15_g158146 = Data15_g158146.NormalOS;
				Out_NormalWS15_g158146 = Data15_g158146.NormalWS;
				Out_NormalRawOS15_g158146 = Data15_g158146.NormalRawOS;
				Out_NormalRawWS15_g158146 = Data15_g158146.NormalRawWS;
				Out_TangentOS15_g158146 = Data15_g158146.TangentOS;
				Out_ViewDirWS15_g158146 = Data15_g158146.ViewDirWS;
				Out_VertexData15_g158146 = Data15_g158146.VertexData;
				Out_MotionData15_g158146 = Data15_g158146.MotionData;
				Out_BoundsData15_g158146 = Data15_g158146.BoundsData;
				Out_RotationData15_g158146 = Data15_g158146.RotationData;
				Out_FragmentData15_g158146 = Data15_g158146.FragmentData;
				}
				half3 Model_PositionWO636_g158134 = Out_PositionWO15_g158146;
				float3 temp_output_279_0_g158135 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158135 = temp_output_279_0_g158135;
				half4 localSamplePlanar2D238_g158135 = SamplePlanar2D( Texture238_g158135 , Sampler238_g158135 , Coords238_g158135 , WorldPosition238_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158135) = _SecondAlbedoTex;
				SamplerState Sampler246_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition246_g158135 = temp_output_279_0_g158135;
				half3 Model_NormalWS869_g158134 = Out_NormalWS15_g158146;
				float3 temp_output_280_0_g158135 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158135 = temp_output_280_0_g158135;
				half4 localSamplePlanar3D246_g158135 = SamplePlanar3D( Texture246_g158135 , Sampler246_g158135 , Coords246_g158135 , WorldPosition246_g158135 , WorldNormal246_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158135) = _SecondAlbedoTex;
				SamplerState Sampler234_g158135 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158135 = temp_output_37_0_g158135;
				float3 WorldPosition234_g158135 = temp_output_279_0_g158135;
				float4 localSampleStochastic2D234_g158135 = SampleStochastic2D( Texture234_g158135 , Sampler234_g158135 , Coords234_g158135 , WorldPosition234_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158135) = _SecondAlbedoTex;
				SamplerState Sampler263_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition263_g158135 = temp_output_279_0_g158135;
				half3 WorldNormal263_g158135 = temp_output_280_0_g158135;
				half4 localSampleStochastic3D263_g158135 = SampleStochastic3D( Texture263_g158135 , Sampler263_g158135 , Coords263_g158135 , WorldPosition263_g158135 , WorldNormal263_g158135 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158134 = localSampleExtra275_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158134 = localSamplePlanar2D238_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158134 = localSamplePlanar3D246_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158134 = localSampleStochastic2D234_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158134 = localSampleStochastic3D263_g158135;
				#else
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#endif
				half4 Local_AlbedoTex777_g158134 = staticSwitch693_g158134;
				float3 lerpResult716_g158134 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158134).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g158134 = lerpResult716_g158134;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158137) = _SecondShaderTex;
				SamplerState Sampler276_g158137 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158137 = Local_LayerCoords790_g158134;
				half4 Coords276_g158137 = temp_output_37_0_g158137;
				half2 TexCoord276_g158137 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158137 = SampleMain( Texture276_g158137 , Sampler276_g158137 , Coords276_g158137 , TexCoord276_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158137) = _SecondShaderTex;
				SamplerState Sampler275_g158137 = sampler_Linear_Repeat;
				half4 Coords275_g158137 = temp_output_37_0_g158137;
				float2 appendResult289_g158137 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158137 = appendResult289_g158137;
				#else
				float2 staticSwitch288_g158137 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158137 = staticSwitch288_g158137;
				half4 localSampleExtra275_g158137 = SampleExtra( Texture275_g158137 , Sampler275_g158137 , Coords275_g158137 , TexCoord275_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158137) = _SecondShaderTex;
				SamplerState Sampler238_g158137 = sampler_Linear_Repeat;
				half4 Coords238_g158137 = temp_output_37_0_g158137;
				float3 temp_output_279_0_g158137 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158137 = temp_output_279_0_g158137;
				half4 localSamplePlanar2D238_g158137 = SamplePlanar2D( Texture238_g158137 , Sampler238_g158137 , Coords238_g158137 , WorldPosition238_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158137) = _SecondShaderTex;
				SamplerState Sampler246_g158137 = sampler_Linear_Repeat;
				half4 Coords246_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition246_g158137 = temp_output_279_0_g158137;
				float3 temp_output_280_0_g158137 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158137 = temp_output_280_0_g158137;
				half4 localSamplePlanar3D246_g158137 = SamplePlanar3D( Texture246_g158137 , Sampler246_g158137 , Coords246_g158137 , WorldPosition246_g158137 , WorldNormal246_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158137) = _SecondShaderTex;
				SamplerState Sampler234_g158137 = sampler_Linear_Repeat;
				float4 Coords234_g158137 = temp_output_37_0_g158137;
				float3 WorldPosition234_g158137 = temp_output_279_0_g158137;
				float4 localSampleStochastic2D234_g158137 = SampleStochastic2D( Texture234_g158137 , Sampler234_g158137 , Coords234_g158137 , WorldPosition234_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158137) = _SecondShaderTex;
				SamplerState Sampler263_g158137 = sampler_Linear_Repeat;
				half4 Coords263_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition263_g158137 = temp_output_279_0_g158137;
				half3 WorldNormal263_g158137 = temp_output_280_0_g158137;
				half4 localSampleStochastic3D263_g158137 = SampleStochastic3D( Texture263_g158137 , Sampler263_g158137 , Coords263_g158137 , WorldPosition263_g158137 , WorldNormal263_g158137 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158134 = localSampleExtra275_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158134 = localSamplePlanar2D238_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158134 = localSamplePlanar3D246_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158134 = localSampleStochastic2D234_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158134 = localSampleStochastic3D263_g158137;
				#else
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#endif
				half4 Local_ShaderTex775_g158134 = staticSwitch722_g158134;
				float lerpResult739_g158134 = lerp( 1.0 , (Local_ShaderTex775_g158134).y , _SecondOcclusionValue);
				float4 appendResult749_g158134 = (float4(( (Local_ShaderTex775_g158134).x * _SecondMetallicValue ) , lerpResult739_g158134 , (Local_ShaderTex775_g158134).z , ( (Local_ShaderTex775_g158134).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g158134 = appendResult749_g158134;
				float clampResult17_g158141 = clamp( (Local_Masks750_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158142 = _SecondMultiRemap.x;
				float temp_output_10_0_g158142 = ( _SecondMultiRemap.y - temp_output_7_0_g158142 );
				float temp_output_765_0_g158134 = saturate( ( ( clampResult17_g158141 - temp_output_7_0_g158142 ) / ( temp_output_10_0_g158142 + 0.0001 ) ) );
				half Local_MultiMask767_g158134 = temp_output_765_0_g158134;
				float lerpResult705_g158134 = lerp( 1.0 , Local_MultiMask767_g158134 , _SecondColorMode);
				float4 lerpResult706_g158134 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g158134);
				half3 Local_ColorRGB774_g158134 = (lerpResult706_g158134).rgb;
				half3 Local_Albedo768_g158134 = ( Local_AlbedoRGB771_g158134 * Local_ColorRGB774_g158134 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158161 = 2.0;
				#else
				float staticSwitch1_g158161 = 4.594794;
				#endif
				float3 lerpResult985_g158134 = lerp( Local_Albedo768_g158134 , ( Visual_Albedo527_g158134 * Local_Albedo768_g158134 * staticSwitch1_g158161 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158138) = _SecondMaskTex;
				SamplerState Sampler276_g158138 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g158134 = _second_mask_coord_value;
				float4 temp_output_37_0_g158138 = Local_BlendCoords813_g158134;
				half4 Coords276_g158138 = temp_output_37_0_g158138;
				half2 TexCoord276_g158138 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158138 = SampleMain( Texture276_g158138 , Sampler276_g158138 , Coords276_g158138 , TexCoord276_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158138) = _SecondMaskTex;
				SamplerState Sampler275_g158138 = sampler_Linear_Repeat;
				half4 Coords275_g158138 = temp_output_37_0_g158138;
				float2 appendResult289_g158138 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158138 = appendResult289_g158138;
				#else
				float2 staticSwitch288_g158138 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158138 = staticSwitch288_g158138;
				half4 localSampleExtra275_g158138 = SampleExtra( Texture275_g158138 , Sampler275_g158138 , Coords275_g158138 , TexCoord275_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158138) = _SecondMaskTex;
				SamplerState Sampler238_g158138 = sampler_Linear_Repeat;
				half4 Coords238_g158138 = temp_output_37_0_g158138;
				float3 temp_output_279_0_g158138 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158138 = temp_output_279_0_g158138;
				half4 localSamplePlanar2D238_g158138 = SamplePlanar2D( Texture238_g158138 , Sampler238_g158138 , Coords238_g158138 , WorldPosition238_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158138) = _SecondMaskTex;
				SamplerState Sampler246_g158138 = sampler_Linear_Repeat;
				half4 Coords246_g158138 = temp_output_37_0_g158138;
				half3 WorldPosition246_g158138 = temp_output_279_0_g158138;
				float3 temp_output_280_0_g158138 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158138 = temp_output_280_0_g158138;
				half4 localSamplePlanar3D246_g158138 = SamplePlanar3D( Texture246_g158138 , Sampler246_g158138 , Coords246_g158138 , WorldPosition246_g158138 , WorldNormal246_g158138 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158134 = localSampleExtra275_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158134 = localSamplePlanar2D238_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158134 = localSamplePlanar3D246_g158138;
				#else
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#endif
				half4 Local_MaskTex861_g158134 = staticSwitch817_g158134;
				float clampResult17_g158152 = clamp( (Local_MaskTex861_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158151 = _SecondMaskRemap.x;
				float temp_output_10_0_g158151 = ( _SecondMaskRemap.y - temp_output_7_0_g158151 );
				float lerpResult1015_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158152 - temp_output_7_0_g158151 ) / ( temp_output_10_0_g158151 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g158134 = lerpResult1015_g158134;
				#else
				float staticSwitch893_g158134 = 1.0;
				#endif
				half Blend_TexMask429_g158134 = staticSwitch893_g158134;
				half3 Visual_NormalWS951_g158134 = Out_NormalWS4_g158148;
				float clampResult17_g158153 = clamp( saturate( (Visual_NormalWS951_g158134).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158154 = _SecondProjRemap.x;
				float temp_output_10_0_g158154 = ( _SecondProjRemap.y - temp_output_7_0_g158154 );
				float lerpResult996_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158153 - temp_output_7_0_g158154 ) / ( temp_output_10_0_g158154 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g158134 = lerpResult996_g158134;
				#else
				float staticSwitch878_g158134 = 1.0;
				#endif
				half Blend_ProjMask434_g158134 = staticSwitch878_g158134;
				half4 Model_VertexMasks964_g158134 = Out_VertexData15_g158146;
				float4 break965_g158134 = Model_VertexMasks964_g158134;
				float4 break33_g158155 = _second_vert_mode;
				float temp_output_30_0_g158155 = ( break965_g158134.x * break33_g158155.x );
				float temp_output_29_0_g158155 = ( break965_g158134.y * break33_g158155.y );
				float temp_output_31_0_g158155 = ( break965_g158134.z * break33_g158155.z );
				float temp_output_28_0_g158155 = ( temp_output_30_0_g158155 + temp_output_29_0_g158155 + temp_output_31_0_g158155 + ( break965_g158134.w * break33_g158155.w ) );
				float clampResult17_g158149 = clamp( temp_output_28_0_g158155 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158150 = _SecondMeshRemap.x;
				float temp_output_10_0_g158150 = ( _SecondMeshRemap.y - temp_output_7_0_g158150 );
				float lerpResult1017_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158149 - temp_output_7_0_g158150 ) / ( temp_output_10_0_g158150 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g158163 = lerpResult1017_g158134;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158163 = ( temp_output_6_0_g158163 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158163 = temp_output_6_0_g158163;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g158134 = staticSwitch14_g158163;
				#else
				float staticSwitch917_g158134 = 1.0;
				#endif
				half Blend_VertMask918_g158134 = staticSwitch917_g158134;
				float localBuildGlobalData204_g158069 = ( 0.0 );
				TVEGlobalData Data204_g158069 = (TVEGlobalData)0;
				half Dummy211_g158069 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g158069 = Dummy211_g158069;
				float4 temp_output_362_164_g158069 = TVE_CoatParams;
				half4 Coat_Params302_g158069 = temp_output_362_164_g158069;
				float4 In_CoatParams204_g158069 = Coat_Params302_g158069;
				float4 temp_output_361_164_g158069 = TVE_PaintParams;
				half4 Paint_Params71_g158069 = temp_output_361_164_g158069;
				float4 In_PaintParams204_g158069 = Paint_Params71_g158069;
				float4 temp_output_365_163_g158069 = TVE_GlowParams;
				half4 Glow_Params248_g158069 = temp_output_365_163_g158069;
				float4 In_GlowParams204_g158069 = Glow_Params248_g158069;
				float4 temp_output_363_141_g158069 = TVE_AtmoParams;
				half4 Atmo_Params80_g158069 = temp_output_363_141_g158069;
				float4 In_AtmoParams204_g158069 = Atmo_Params80_g158069;
				float4 temp_output_364_139_g158069 = TVE_FormParams;
				half4 Form_Params112_g158069 = temp_output_364_139_g158069;
				float4 In_FormParams204_g158069 = Form_Params112_g158069;
				float4 temp_output_366_145_g158069 = TVE_WindParams;
				half4 Wind_Params88_g158069 = temp_output_366_145_g158069;
				float4 In_WindParams204_g158069 = Wind_Params88_g158069;
				float4 temp_output_367_145_g158069 = TVE_PushParams;
				half4 Push_Params335_g158069 = temp_output_367_145_g158069;
				float4 In_PushParams204_g158069 = Push_Params335_g158069;
				{
				Data204_g158069.Dummy = In_Dummy204_g158069;
				Data204_g158069.CoatParams = In_CoatParams204_g158069;
				Data204_g158069.PaintParams = In_PaintParams204_g158069;
				Data204_g158069.GlowParams = In_GlowParams204_g158069;
				Data204_g158069.AtmoParams = In_AtmoParams204_g158069;
				Data204_g158069.FormParams= In_FormParams204_g158069;
				Data204_g158069.WindParams = In_WindParams204_g158069;
				Data204_g158069.PushParams = In_PushParams204_g158069;
				}
				TVEGlobalData Data15_g158147 = Data204_g158069;
				float Out_Dummy15_g158147 = 0;
				float4 Out_CoatParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158147 = Data15_g158147.Dummy;
				Out_CoatParams15_g158147 = Data15_g158147.CoatParams;
				Out_PaintParams15_g158147 = Data15_g158147.PaintParams;
				Out_GlowParams15_g158147 = Data15_g158147.GlowParams;
				Out_AtmoParams15_g158147= Data15_g158147.AtmoParams;
				Out_FormParams15_g158147 = Data15_g158147.FormParams;
				Out_LandParams15_g158147 = Data15_g158147.LandParams;
				Out_WindParams15_g158147 = Data15_g158147.WindParams;
				Out_PushParams15_g158147 = Data15_g158147.PushParams;
				}
				half4 Global_CoatParams975_g158134 = Out_CoatParams15_g158147;
				float lerpResult1013_g158134 = lerp( 1.0 , (Global_CoatParams975_g158134).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g158134 = lerpResult1013_g158134;
				#else
				float staticSwitch971_g158134 = 1.0;
				#endif
				half Blend_GlobalMask972_g158134 = staticSwitch971_g158134;
				float temp_output_432_0_g158134 = ( _SecondIntensityValue * Blend_TexMask429_g158134 * Blend_ProjMask434_g158134 * Blend_VertMask918_g158134 * Blend_GlobalMask972_g158134 );
				float clampResult17_g158157 = clamp( temp_output_432_0_g158134 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158156 = _SecondBlendRemap.x;
				float temp_output_10_0_g158156 = ( _SecondBlendRemap.y - temp_output_7_0_g158156 );
				half Blend_Mask412_g158134 = ( saturate( ( ( clampResult17_g158157 - temp_output_7_0_g158156 ) / ( temp_output_10_0_g158156 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g158134 = lerp( Visual_Albedo527_g158134 , lerpResult985_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g158134 = lerpResult403_g158134;
				#else
				float3 staticSwitch415_g158134 = Visual_Albedo527_g158134;
				#endif
				half3 Final_Albedo601_g158134 = staticSwitch415_g158134;
				float3 In_Albedo3_g158145 = Final_Albedo601_g158134;
				half2 Visual_NormalTS529_g158134 = Out_NormalTS4_g158148;
				float2 lerpResult40_g158159 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158134 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158136) = _SecondNormalTex;
				SamplerState Sampler276_g158136 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158136 = Local_LayerCoords790_g158134;
				half4 Coords276_g158136 = temp_output_37_0_g158136;
				half2 TexCoord276_g158136 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158136 = SampleMain( Texture276_g158136 , Sampler276_g158136 , Coords276_g158136 , TexCoord276_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158136) = _SecondNormalTex;
				SamplerState Sampler275_g158136 = sampler_Linear_Repeat;
				half4 Coords275_g158136 = temp_output_37_0_g158136;
				float2 appendResult289_g158136 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158136 = appendResult289_g158136;
				#else
				float2 staticSwitch288_g158136 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158136 = staticSwitch288_g158136;
				half4 localSampleExtra275_g158136 = SampleExtra( Texture275_g158136 , Sampler275_g158136 , Coords275_g158136 , TexCoord275_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158136) = _SecondNormalTex;
				SamplerState Sampler238_g158136 = sampler_Linear_Repeat;
				half4 Coords238_g158136 = temp_output_37_0_g158136;
				float3 temp_output_279_0_g158136 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158136 = temp_output_279_0_g158136;
				half4 localSamplePlanar2D238_g158136 = SamplePlanar2D( Texture238_g158136 , Sampler238_g158136 , Coords238_g158136 , WorldPosition238_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158136) = _SecondNormalTex;
				SamplerState Sampler246_g158136 = sampler_Linear_Repeat;
				half4 Coords246_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition246_g158136 = temp_output_279_0_g158136;
				float3 temp_output_280_0_g158136 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158136 = temp_output_280_0_g158136;
				half4 localSamplePlanar3D246_g158136 = SamplePlanar3D( Texture246_g158136 , Sampler246_g158136 , Coords246_g158136 , WorldPosition246_g158136 , WorldNormal246_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158136) = _SecondNormalTex;
				SamplerState Sampler234_g158136 = sampler_Linear_Repeat;
				float4 Coords234_g158136 = temp_output_37_0_g158136;
				float3 WorldPosition234_g158136 = temp_output_279_0_g158136;
				float4 localSampleStochastic2D234_g158136 = SampleStochastic2D( Texture234_g158136 , Sampler234_g158136 , Coords234_g158136 , WorldPosition234_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158136) = _SecondNormalTex;
				SamplerState Sampler263_g158136 = sampler_Linear_Repeat;
				half4 Coords263_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition263_g158136 = temp_output_279_0_g158136;
				half3 WorldNormal263_g158136 = temp_output_280_0_g158136;
				half4 localSampleStochastic3D263_g158136 = SampleStochastic3D( Texture263_g158136 , Sampler263_g158136 , Coords263_g158136 , WorldPosition263_g158136 , WorldNormal263_g158136 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158134 = localSampleExtra275_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158134 = localSamplePlanar2D238_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158134 = localSamplePlanar3D246_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158134 = localSampleStochastic2D234_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158134 = localSampleStochastic3D263_g158136;
				#else
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#endif
				half4 Local_NormalTex776_g158134 = staticSwitch698_g158134;
				half4 Normal_Packed45_g158139 = Local_NormalTex776_g158134;
				float2 appendResult58_g158139 = (float2(( (Normal_Packed45_g158139).x * (Normal_Packed45_g158139).w ) , (Normal_Packed45_g158139).y));
				half2 Normal_Default50_g158139 = appendResult58_g158139;
				half2 Normal_ASTC41_g158139 = (Normal_Packed45_g158139).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158139 = Normal_ASTC41_g158139;
				#else
				float2 staticSwitch38_g158139 = Normal_Default50_g158139;
				#endif
				half2 Normal_NO_DTX544_g158139 = (Normal_Packed45_g158139).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158139 = Normal_NO_DTX544_g158139;
				#else
				float2 staticSwitch37_g158139 = staticSwitch38_g158139;
				#endif
				float2 temp_output_724_0_g158134 = ( (staticSwitch37_g158139*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g158140 = temp_output_724_0_g158134;
				float2 break71_g158140 = Normal_Planar45_g158140;
				float3 appendResult72_g158140 = (float3(break71_g158140.x , 0.0 , break71_g158140.y));
				float2 temp_output_858_0_g158134 = (mul( ase_worldToTangent, appendResult72_g158140 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#endif
				half2 Local_NormalTS729_g158134 = staticSwitch727_g158134;
				float2 temp_output_36_0_g158159 = ( lerpResult40_g158159 + Local_NormalTS729_g158134 );
				float2 lerpResult405_g158134 = lerp( Visual_NormalTS529_g158134 , temp_output_36_0_g158159 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g158134 = lerpResult405_g158134;
				#else
				float2 staticSwitch418_g158134 = Visual_NormalTS529_g158134;
				#endif
				half2 Final_NormalTS612_g158134 = staticSwitch418_g158134;
				float2 In_NormalTS3_g158145 = Final_NormalTS612_g158134;
				float3 appendResult68_g158160 = (float3(Final_NormalTS612_g158134 , 1.0));
				float3 tanNormal74_g158160 = appendResult68_g158160;
				float3 worldNormal74_g158160 = normalize( float3(dot(tanToWorld0,tanNormal74_g158160), dot(tanToWorld1,tanNormal74_g158160), dot(tanToWorld2,tanNormal74_g158160)) );
				half3 Final_NormalWS950_g158134 = worldNormal74_g158160;
				float3 In_NormalWS3_g158145 = Final_NormalWS950_g158134;
				half4 Visual_Shader531_g158134 = Out_Shader4_g158148;
				float4 lerpResult994_g158134 = lerp( Local_Masks750_g158134 , ( Visual_Shader531_g158134 * Local_Masks750_g158134 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g158134 = lerp( Visual_Shader531_g158134 , lerpResult994_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g158134 = lerpResult440_g158134;
				#else
				float4 staticSwitch451_g158134 = Visual_Shader531_g158134;
				#endif
				half4 Final_Masks613_g158134 = staticSwitch451_g158134;
				float4 In_Shader3_g158145 = Final_Masks613_g158134;
				float4 In_Emissive3_g158145 = Out_Emissive4_g158148;
				float3 temp_output_3_0_g158162 = Final_Albedo601_g158134;
				float dotResult20_g158162 = dot( temp_output_3_0_g158162 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158134 = dotResult20_g158162;
				float In_Grayscale3_g158145 = Final_Grayscale615_g158134;
				float clampResult651_g158134 = clamp( saturate( ( Final_Grayscale615_g158134 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158134 = clampResult651_g158134;
				float In_Luminosity3_g158145 = Final_Luminosity652_g158134;
				half Visual_MultiMask547_g158134 = Out_MultiMask4_g158148;
				float lerpResult477_g158134 = lerp( Visual_MultiMask547_g158134 , Local_MultiMask767_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch482_g158134 = lerpResult477_g158134;
				#else
				float staticSwitch482_g158134 = Visual_MultiMask547_g158134;
				#endif
				half Final_MultiMask572_g158134 = staticSwitch482_g158134;
				float In_MultiMask3_g158145 = Final_MultiMask572_g158134;
				half Visual_AlphaClip559_g158134 = Out_AlphaClip4_g158148;
				float temp_output_718_0_g158134 = (Local_AlbedoTex777_g158134).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g158134 = ( temp_output_718_0_g158134 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g158134 = temp_output_718_0_g158134;
				#endif
				half Local_AlphaClip772_g158134 = staticSwitch932_g158134;
				float lerpResult448_g158134 = lerp( Visual_AlphaClip559_g158134 , Local_AlphaClip772_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch564_g158134 = lerpResult448_g158134;
				#else
				float staticSwitch564_g158134 = Visual_AlphaClip559_g158134;
				#endif
				half Final_AlphaClip602_g158134 = staticSwitch564_g158134;
				float In_AlphaClip3_g158145 = Final_AlphaClip602_g158134;
				half Visual_AlphaFade588_g158134 = Out_AlphaFade4_g158148;
				half Local_AlphaFade773_g158134 = (lerpResult706_g158134).a;
				float lerpResult604_g158134 = lerp( Visual_AlphaFade588_g158134 , Local_AlphaFade773_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch608_g158134 = lerpResult604_g158134;
				#else
				float staticSwitch608_g158134 = Visual_AlphaFade588_g158134;
				#endif
				half Final_AlphaFade611_g158134 = staticSwitch608_g158134;
				float In_AlphaFade3_g158145 = Final_AlphaFade611_g158134;
				float3 In_Translucency3_g158145 = Out_Translucency4_g158148;
				float In_Transmission3_g158145 = Out_Transmission4_g158148;
				float In_Thickness3_g158145 = Out_Thickness4_g158148;
				float In_Diffusion3_g158145 = Out_Diffusion4_g158148;
				{
				Data3_g158145.Dummy = In_Dummy3_g158145;
				Data3_g158145.Albedo = In_Albedo3_g158145;
				Data3_g158145.NormalTS = In_NormalTS3_g158145;
				Data3_g158145.NormalWS = In_NormalWS3_g158145;
				Data3_g158145.Shader = In_Shader3_g158145;
				Data3_g158145.Emissive= In_Emissive3_g158145;
				Data3_g158145.MultiMask = In_MultiMask3_g158145;
				Data3_g158145.Grayscale = In_Grayscale3_g158145;
				Data3_g158145.Luminosity = In_Luminosity3_g158145;
				Data3_g158145.AlphaClip = In_AlphaClip3_g158145;
				Data3_g158145.AlphaFade = In_AlphaFade3_g158145;
				Data3_g158145.Translucency = In_Translucency3_g158145;
				Data3_g158145.Transmission = In_Transmission3_g158145;
				Data3_g158145.Thickness = In_Thickness3_g158145;
				Data3_g158145.Diffusion = In_Diffusion3_g158145;
				}
				TVEVisualData Data4_g158181 = Data3_g158145;
				float Out_Dummy4_g158181 = 0;
				float3 Out_Albedo4_g158181 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158181 = float2( 0,0 );
				float3 Out_NormalWS4_g158181 = float3( 0,0,0 );
				float4 Out_Shader4_g158181 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158181 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158181 = 0;
				float Out_Grayscale4_g158181 = 0;
				float Out_Luminosity4_g158181 = 0;
				float Out_AlphaClip4_g158181 = 0;
				float Out_AlphaFade4_g158181 = 0;
				float3 Out_Translucency4_g158181 = float3( 0,0,0 );
				float Out_Transmission4_g158181 = 0;
				float Out_Thickness4_g158181 = 0;
				float Out_Diffusion4_g158181 = 0;
				{
				Out_Dummy4_g158181 = Data4_g158181.Dummy;
				Out_Albedo4_g158181 = Data4_g158181.Albedo;
				Out_NormalTS4_g158181 = Data4_g158181.NormalTS;
				Out_NormalWS4_g158181 = Data4_g158181.NormalWS;
				Out_Shader4_g158181 = Data4_g158181.Shader;
				Out_Emissive4_g158181= Data4_g158181.Emissive;
				Out_MultiMask4_g158181 = Data4_g158181.MultiMask;
				Out_Grayscale4_g158181 = Data4_g158181.Grayscale;
				Out_Luminosity4_g158181= Data4_g158181.Luminosity;
				Out_AlphaClip4_g158181 = Data4_g158181.AlphaClip;
				Out_AlphaFade4_g158181 = Data4_g158181.AlphaFade;
				Out_Translucency4_g158181 = Data4_g158181.Translucency;
				Out_Transmission4_g158181 = Data4_g158181.Transmission;
				Out_Thickness4_g158181 = Data4_g158181.Thickness;
				Out_Diffusion4_g158181 = Data4_g158181.Diffusion;
				}
				half3 Visual_Albedo527_g158164 = Out_Albedo4_g158181;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler276_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158164 = _third_coord_value;
				float4 temp_output_37_0_g158165 = Local_LayerCoords790_g158164;
				half4 Coords276_g158165 = temp_output_37_0_g158165;
				half2 TexCoord276_g158165 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158165 = SampleMain( Texture276_g158165 , Sampler276_g158165 , Coords276_g158165 , TexCoord276_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler275_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158165 = temp_output_37_0_g158165;
				float2 appendResult289_g158165 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158165 = appendResult289_g158165;
				#else
				float2 staticSwitch288_g158165 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158165 = staticSwitch288_g158165;
				half4 localSampleExtra275_g158165 = SampleExtra( Texture275_g158165 , Sampler275_g158165 , Coords275_g158165 , TexCoord275_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler238_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158165 = temp_output_37_0_g158165;
				TVEModelData Data15_g158180 = Data16_g158068;
				float Out_Dummy15_g158180 = 0;
				float3 Out_PositionOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158180 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158180 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158180 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158180 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158180 = float3( 0,0,0 );
				float4 Out_VertexData15_g158180 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158180 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158180 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158180 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158180 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158180 = Data15_g158180.Dummy;
				Out_PositionOS15_g158180 = Data15_g158180.PositionOS;
				Out_PositionWS15_g158180 = Data15_g158180.PositionWS;
				Out_PositionWO15_g158180 = Data15_g158180.PositionWO;
				Out_PositionRawOS15_g158180 = Data15_g158180.PositionRawOS;
				Out_PositionAddOS15_g158180 = Data15_g158180.PositionAddOS;
				Out_PivotOS15_g158180 = Data15_g158180.PivotOS;
				Out_PivotWS15_g158180 = Data15_g158180.PivotWS;
				Out_PivotWO15_g158180 = Data15_g158180.PivotWO;
				Out_NormalOS15_g158180 = Data15_g158180.NormalOS;
				Out_NormalWS15_g158180 = Data15_g158180.NormalWS;
				Out_NormalRawOS15_g158180 = Data15_g158180.NormalRawOS;
				Out_NormalRawWS15_g158180 = Data15_g158180.NormalRawWS;
				Out_TangentOS15_g158180 = Data15_g158180.TangentOS;
				Out_ViewDirWS15_g158180 = Data15_g158180.ViewDirWS;
				Out_VertexData15_g158180 = Data15_g158180.VertexData;
				Out_MotionData15_g158180 = Data15_g158180.MotionData;
				Out_BoundsData15_g158180 = Data15_g158180.BoundsData;
				Out_RotationData15_g158180 = Data15_g158180.RotationData;
				Out_FragmentData15_g158180 = Data15_g158180.FragmentData;
				}
				half3 Model_PositionWO636_g158164 = Out_PositionWO15_g158180;
				float3 temp_output_279_0_g158165 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158165 = temp_output_279_0_g158165;
				half4 localSamplePlanar2D238_g158165 = SamplePlanar2D( Texture238_g158165 , Sampler238_g158165 , Coords238_g158165 , WorldPosition238_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler246_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition246_g158165 = temp_output_279_0_g158165;
				half3 Model_NormalWS869_g158164 = Out_NormalWS15_g158180;
				float3 temp_output_280_0_g158165 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158165 = temp_output_280_0_g158165;
				half4 localSamplePlanar3D246_g158165 = SamplePlanar3D( Texture246_g158165 , Sampler246_g158165 , Coords246_g158165 , WorldPosition246_g158165 , WorldNormal246_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler234_g158165 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158165 = temp_output_37_0_g158165;
				float3 WorldPosition234_g158165 = temp_output_279_0_g158165;
				float4 localSampleStochastic2D234_g158165 = SampleStochastic2D( Texture234_g158165 , Sampler234_g158165 , Coords234_g158165 , WorldPosition234_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler263_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition263_g158165 = temp_output_279_0_g158165;
				half3 WorldNormal263_g158165 = temp_output_280_0_g158165;
				half4 localSampleStochastic3D263_g158165 = SampleStochastic3D( Texture263_g158165 , Sampler263_g158165 , Coords263_g158165 , WorldPosition263_g158165 , WorldNormal263_g158165 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158164 = localSampleExtra275_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158164 = localSamplePlanar2D238_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158164 = localSamplePlanar3D246_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158164 = localSampleStochastic2D234_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158164 = localSampleStochastic3D263_g158165;
				#else
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#endif
				half4 Local_AlbedoTex777_g158164 = staticSwitch693_g158164;
				float3 lerpResult716_g158164 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158164).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g158164 = lerpResult716_g158164;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158167) = _ThirdShaderTex;
				SamplerState Sampler276_g158167 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158167 = Local_LayerCoords790_g158164;
				half4 Coords276_g158167 = temp_output_37_0_g158167;
				half2 TexCoord276_g158167 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158167 = SampleMain( Texture276_g158167 , Sampler276_g158167 , Coords276_g158167 , TexCoord276_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158167) = _ThirdShaderTex;
				SamplerState Sampler275_g158167 = sampler_Linear_Repeat;
				half4 Coords275_g158167 = temp_output_37_0_g158167;
				float2 appendResult289_g158167 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158167 = appendResult289_g158167;
				#else
				float2 staticSwitch288_g158167 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158167 = staticSwitch288_g158167;
				half4 localSampleExtra275_g158167 = SampleExtra( Texture275_g158167 , Sampler275_g158167 , Coords275_g158167 , TexCoord275_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158167) = _ThirdShaderTex;
				SamplerState Sampler238_g158167 = sampler_Linear_Repeat;
				half4 Coords238_g158167 = temp_output_37_0_g158167;
				float3 temp_output_279_0_g158167 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158167 = temp_output_279_0_g158167;
				half4 localSamplePlanar2D238_g158167 = SamplePlanar2D( Texture238_g158167 , Sampler238_g158167 , Coords238_g158167 , WorldPosition238_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158167) = _ThirdShaderTex;
				SamplerState Sampler246_g158167 = sampler_Linear_Repeat;
				half4 Coords246_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition246_g158167 = temp_output_279_0_g158167;
				float3 temp_output_280_0_g158167 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158167 = temp_output_280_0_g158167;
				half4 localSamplePlanar3D246_g158167 = SamplePlanar3D( Texture246_g158167 , Sampler246_g158167 , Coords246_g158167 , WorldPosition246_g158167 , WorldNormal246_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158167) = _ThirdShaderTex;
				SamplerState Sampler234_g158167 = sampler_Linear_Repeat;
				float4 Coords234_g158167 = temp_output_37_0_g158167;
				float3 WorldPosition234_g158167 = temp_output_279_0_g158167;
				float4 localSampleStochastic2D234_g158167 = SampleStochastic2D( Texture234_g158167 , Sampler234_g158167 , Coords234_g158167 , WorldPosition234_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158167) = _ThirdShaderTex;
				SamplerState Sampler263_g158167 = sampler_Linear_Repeat;
				half4 Coords263_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition263_g158167 = temp_output_279_0_g158167;
				half3 WorldNormal263_g158167 = temp_output_280_0_g158167;
				half4 localSampleStochastic3D263_g158167 = SampleStochastic3D( Texture263_g158167 , Sampler263_g158167 , Coords263_g158167 , WorldPosition263_g158167 , WorldNormal263_g158167 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158164 = localSampleExtra275_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158164 = localSamplePlanar2D238_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158164 = localSamplePlanar3D246_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158164 = localSampleStochastic2D234_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158164 = localSampleStochastic3D263_g158167;
				#else
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#endif
				half4 Local_ShaderTex775_g158164 = staticSwitch722_g158164;
				float lerpResult739_g158164 = lerp( 1.0 , (Local_ShaderTex775_g158164).y , _ThirdOcclusionValue);
				float4 appendResult749_g158164 = (float4(( (Local_ShaderTex775_g158164).x * _ThirdMetallicValue ) , lerpResult739_g158164 , (Local_ShaderTex775_g158164).z , ( (Local_ShaderTex775_g158164).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g158164 = appendResult749_g158164;
				float clampResult17_g158170 = clamp( (Local_Masks750_g158164).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158171 = _ThirdMultiRemap.x;
				float temp_output_10_0_g158171 = ( _ThirdMultiRemap.y - temp_output_7_0_g158171 );
				float temp_output_765_0_g158164 = saturate( ( ( clampResult17_g158170 - temp_output_7_0_g158171 ) / ( temp_output_10_0_g158171 + 0.0001 ) ) );
				half Local_MultiMask767_g158164 = temp_output_765_0_g158164;
				float lerpResult705_g158164 = lerp( 1.0 , Local_MultiMask767_g158164 , _ThirdColorMode);
				float4 lerpResult706_g158164 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g158164);
				half3 Local_ColorRGB774_g158164 = (lerpResult706_g158164).rgb;
				half3 Local_Albedo768_g158164 = ( Local_AlbedoRGB771_g158164 * Local_ColorRGB774_g158164 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158189 = 2.0;
				#else
				float staticSwitch1_g158189 = 4.594794;
				#endif
				float3 lerpResult985_g158164 = lerp( Local_Albedo768_g158164 , ( Visual_Albedo527_g158164 * Local_Albedo768_g158164 * staticSwitch1_g158189 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158192) = _ThirdMaskTex;
				SamplerState Sampler276_g158192 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g158164 = _third_mask_coord_value;
				float4 temp_output_37_0_g158192 = Local_MaskCoords813_g158164;
				half4 Coords276_g158192 = temp_output_37_0_g158192;
				half2 TexCoord276_g158192 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158192 = SampleMain( Texture276_g158192 , Sampler276_g158192 , Coords276_g158192 , TexCoord276_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158192) = _ThirdMaskTex;
				SamplerState Sampler275_g158192 = sampler_Linear_Repeat;
				half4 Coords275_g158192 = temp_output_37_0_g158192;
				float2 appendResult289_g158192 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158192 = appendResult289_g158192;
				#else
				float2 staticSwitch288_g158192 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158192 = staticSwitch288_g158192;
				half4 localSampleExtra275_g158192 = SampleExtra( Texture275_g158192 , Sampler275_g158192 , Coords275_g158192 , TexCoord275_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158192) = _ThirdMaskTex;
				SamplerState Sampler238_g158192 = sampler_Linear_Repeat;
				half4 Coords238_g158192 = temp_output_37_0_g158192;
				float3 temp_output_279_0_g158192 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158192 = temp_output_279_0_g158192;
				half4 localSamplePlanar2D238_g158192 = SamplePlanar2D( Texture238_g158192 , Sampler238_g158192 , Coords238_g158192 , WorldPosition238_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158192) = _ThirdMaskTex;
				SamplerState Sampler246_g158192 = sampler_Linear_Repeat;
				half4 Coords246_g158192 = temp_output_37_0_g158192;
				half3 WorldPosition246_g158192 = temp_output_279_0_g158192;
				float3 temp_output_280_0_g158192 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158192 = temp_output_280_0_g158192;
				half4 localSamplePlanar3D246_g158192 = SamplePlanar3D( Texture246_g158192 , Sampler246_g158192 , Coords246_g158192 , WorldPosition246_g158192 , WorldNormal246_g158192 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158164 = localSampleExtra275_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158164 = localSamplePlanar2D238_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158164 = localSamplePlanar3D246_g158192;
				#else
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#endif
				half4 Local_MaskTex861_g158164 = staticSwitch817_g158164;
				float clampResult17_g158175 = clamp( (Local_MaskTex861_g158164).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g158176 = _ThirdMaskRemap.x;
				float temp_output_10_0_g158176 = ( _ThirdMaskRemap.y - temp_output_7_0_g158176 );
				float lerpResult1028_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158175 - temp_output_7_0_g158176 ) / ( temp_output_10_0_g158176 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g158164 = lerpResult1028_g158164;
				#else
				float staticSwitch892_g158164 = 1.0;
				#endif
				half Detail_TexMask429_g158164 = staticSwitch892_g158164;
				half4 Model_VertexMasks960_g158164 = Out_VertexData15_g158180;
				float4 break961_g158164 = Model_VertexMasks960_g158164;
				float4 break33_g158179 = _third_vert_mode;
				float temp_output_30_0_g158179 = ( break961_g158164.x * break33_g158179.x );
				float temp_output_29_0_g158179 = ( break961_g158164.y * break33_g158179.y );
				float temp_output_31_0_g158179 = ( break961_g158164.z * break33_g158179.z );
				float temp_output_28_0_g158179 = ( temp_output_30_0_g158179 + temp_output_29_0_g158179 + temp_output_31_0_g158179 + ( break961_g158164.w * break33_g158179.w ) );
				float clampResult17_g158173 = clamp( temp_output_28_0_g158179 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158174 = _ThirdMeshRemap.x;
				float temp_output_10_0_g158174 = ( _ThirdMeshRemap.y - temp_output_7_0_g158174 );
				float lerpResult1026_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158173 - temp_output_7_0_g158174 ) / ( temp_output_10_0_g158174 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g158191 = lerpResult1026_g158164;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158191 = ( temp_output_6_0_g158191 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158191 = temp_output_6_0_g158191;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g158164 = staticSwitch14_g158191;
				#else
				float staticSwitch917_g158164 = 1.0;
				#endif
				half Blend_VertMask913_g158164 = staticSwitch917_g158164;
				half3 Visual_NormalWS953_g158164 = Out_NormalWS4_g158181;
				float clampResult17_g158177 = clamp( saturate( (Visual_NormalWS953_g158164).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158178 = _ThirdProjRemap.x;
				float temp_output_10_0_g158178 = ( _ThirdProjRemap.y - temp_output_7_0_g158178 );
				float lerpResult1004_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158177 - temp_output_7_0_g158178 ) / ( temp_output_10_0_g158178 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g158164 = lerpResult1004_g158164;
				#else
				float staticSwitch908_g158164 = 1.0;
				#endif
				half Blend_ProjMask912_g158164 = staticSwitch908_g158164;
				TVEGlobalData Data15_g158183 = Data204_g158069;
				float Out_Dummy15_g158183 = 0;
				float4 Out_CoatParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158183 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158183 = Data15_g158183.Dummy;
				Out_CoatParams15_g158183 = Data15_g158183.CoatParams;
				Out_PaintParams15_g158183 = Data15_g158183.PaintParams;
				Out_GlowParams15_g158183 = Data15_g158183.GlowParams;
				Out_AtmoParams15_g158183= Data15_g158183.AtmoParams;
				Out_FormParams15_g158183 = Data15_g158183.FormParams;
				Out_LandParams15_g158183 = Data15_g158183.LandParams;
				Out_WindParams15_g158183 = Data15_g158183.WindParams;
				Out_PushParams15_g158183 = Data15_g158183.PushParams;
				}
				half4 Global_CoatParams972_g158164 = Out_CoatParams15_g158183;
				float lerpResult1023_g158164 = lerp( 1.0 , (Global_CoatParams972_g158164).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g158164 = lerpResult1023_g158164;
				#else
				float staticSwitch965_g158164 = 1.0;
				#endif
				half Blend_GlobalMask968_g158164 = staticSwitch965_g158164;
				float temp_output_432_0_g158164 = ( _ThirdIntensityValue * Detail_TexMask429_g158164 * Blend_VertMask913_g158164 * Blend_ProjMask912_g158164 * Blend_GlobalMask968_g158164 );
				float clampResult17_g158185 = clamp( temp_output_432_0_g158164 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158184 = _ThirdBlendRemap.x;
				float temp_output_10_0_g158184 = ( _ThirdBlendRemap.y - temp_output_7_0_g158184 );
				half Detail_Mask412_g158164 = ( saturate( ( ( clampResult17_g158185 - temp_output_7_0_g158184 ) / ( temp_output_10_0_g158184 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g158164 = lerp( Visual_Albedo527_g158164 , lerpResult985_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g158164 = lerpResult989_g158164;
				#else
				float3 staticSwitch415_g158164 = Visual_Albedo527_g158164;
				#endif
				half3 Final_Albedo601_g158164 = staticSwitch415_g158164;
				float3 In_Albedo3_g158182 = Final_Albedo601_g158164;
				half2 Visual_NormalTS529_g158164 = Out_NormalTS4_g158181;
				float2 lerpResult40_g158187 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158164 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158166) = _ThirdNormalTex;
				SamplerState Sampler276_g158166 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158166 = Local_LayerCoords790_g158164;
				half4 Coords276_g158166 = temp_output_37_0_g158166;
				half2 TexCoord276_g158166 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158166 = SampleMain( Texture276_g158166 , Sampler276_g158166 , Coords276_g158166 , TexCoord276_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158166) = _ThirdNormalTex;
				SamplerState Sampler275_g158166 = sampler_Linear_Repeat;
				half4 Coords275_g158166 = temp_output_37_0_g158166;
				float2 appendResult289_g158166 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158166 = appendResult289_g158166;
				#else
				float2 staticSwitch288_g158166 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158166 = staticSwitch288_g158166;
				half4 localSampleExtra275_g158166 = SampleExtra( Texture275_g158166 , Sampler275_g158166 , Coords275_g158166 , TexCoord275_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158166) = _ThirdNormalTex;
				SamplerState Sampler238_g158166 = sampler_Linear_Repeat;
				half4 Coords238_g158166 = temp_output_37_0_g158166;
				float3 temp_output_279_0_g158166 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158166 = temp_output_279_0_g158166;
				half4 localSamplePlanar2D238_g158166 = SamplePlanar2D( Texture238_g158166 , Sampler238_g158166 , Coords238_g158166 , WorldPosition238_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158166) = _ThirdNormalTex;
				SamplerState Sampler246_g158166 = sampler_Linear_Repeat;
				half4 Coords246_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition246_g158166 = temp_output_279_0_g158166;
				float3 temp_output_280_0_g158166 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158166 = temp_output_280_0_g158166;
				half4 localSamplePlanar3D246_g158166 = SamplePlanar3D( Texture246_g158166 , Sampler246_g158166 , Coords246_g158166 , WorldPosition246_g158166 , WorldNormal246_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158166) = _ThirdNormalTex;
				SamplerState Sampler234_g158166 = sampler_Linear_Repeat;
				float4 Coords234_g158166 = temp_output_37_0_g158166;
				float3 WorldPosition234_g158166 = temp_output_279_0_g158166;
				float4 localSampleStochastic2D234_g158166 = SampleStochastic2D( Texture234_g158166 , Sampler234_g158166 , Coords234_g158166 , WorldPosition234_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158166) = _ThirdNormalTex;
				SamplerState Sampler263_g158166 = sampler_Linear_Repeat;
				half4 Coords263_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition263_g158166 = temp_output_279_0_g158166;
				half3 WorldNormal263_g158166 = temp_output_280_0_g158166;
				half4 localSampleStochastic3D263_g158166 = SampleStochastic3D( Texture263_g158166 , Sampler263_g158166 , Coords263_g158166 , WorldPosition263_g158166 , WorldNormal263_g158166 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158164 = localSampleExtra275_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158164 = localSamplePlanar2D238_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158164 = localSamplePlanar3D246_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158164 = localSampleStochastic2D234_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158164 = localSampleStochastic3D263_g158166;
				#else
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#endif
				half4 Local_NormalTex776_g158164 = staticSwitch698_g158164;
				half4 Normal_Packed45_g158168 = Local_NormalTex776_g158164;
				float2 appendResult58_g158168 = (float2(( (Normal_Packed45_g158168).x * (Normal_Packed45_g158168).w ) , (Normal_Packed45_g158168).y));
				half2 Normal_Default50_g158168 = appendResult58_g158168;
				half2 Normal_ASTC41_g158168 = (Normal_Packed45_g158168).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158168 = Normal_ASTC41_g158168;
				#else
				float2 staticSwitch38_g158168 = Normal_Default50_g158168;
				#endif
				half2 Normal_NO_DTX544_g158168 = (Normal_Packed45_g158168).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158168 = Normal_NO_DTX544_g158168;
				#else
				float2 staticSwitch37_g158168 = staticSwitch38_g158168;
				#endif
				float2 temp_output_724_0_g158164 = ( (staticSwitch37_g158168*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g158169 = temp_output_724_0_g158164;
				float2 break71_g158169 = Normal_Planar45_g158169;
				float3 appendResult72_g158169 = (float3(break71_g158169.x , 0.0 , break71_g158169.y));
				float2 temp_output_858_0_g158164 = (mul( ase_worldToTangent, appendResult72_g158169 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#endif
				half2 Local_NormalTS729_g158164 = staticSwitch727_g158164;
				float2 temp_output_36_0_g158187 = ( lerpResult40_g158187 + Local_NormalTS729_g158164 );
				float2 lerpResult405_g158164 = lerp( Visual_NormalTS529_g158164 , temp_output_36_0_g158187 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g158164 = lerpResult405_g158164;
				#else
				float2 staticSwitch418_g158164 = Visual_NormalTS529_g158164;
				#endif
				half2 Final_NormalTS612_g158164 = staticSwitch418_g158164;
				float2 In_NormalTS3_g158182 = Final_NormalTS612_g158164;
				float3 appendResult68_g158188 = (float3(Final_NormalTS612_g158164 , 1.0));
				float3 tanNormal74_g158188 = appendResult68_g158188;
				float3 worldNormal74_g158188 = normalize( float3(dot(tanToWorld0,tanNormal74_g158188), dot(tanToWorld1,tanNormal74_g158188), dot(tanToWorld2,tanNormal74_g158188)) );
				half3 Final_NormalWS956_g158164 = worldNormal74_g158188;
				float3 In_NormalWS3_g158182 = Final_NormalWS956_g158164;
				half4 Visual_Shader531_g158164 = Out_Shader4_g158181;
				float4 lerpResult1000_g158164 = lerp( Local_Masks750_g158164 , ( Visual_Shader531_g158164 * Local_Masks750_g158164 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g158164 = lerp( Visual_Shader531_g158164 , lerpResult1000_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g158164 = lerpResult998_g158164;
				#else
				float4 staticSwitch451_g158164 = Visual_Shader531_g158164;
				#endif
				half4 Final_Masks613_g158164 = staticSwitch451_g158164;
				float4 In_Shader3_g158182 = Final_Masks613_g158164;
				float4 In_Emissive3_g158182 = Out_Emissive4_g158181;
				float3 temp_output_3_0_g158190 = Final_Albedo601_g158164;
				float dotResult20_g158190 = dot( temp_output_3_0_g158190 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158164 = dotResult20_g158190;
				float In_Grayscale3_g158182 = Final_Grayscale615_g158164;
				float clampResult651_g158164 = clamp( saturate( ( Final_Grayscale615_g158164 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158164 = clampResult651_g158164;
				float In_Luminosity3_g158182 = Final_Luminosity652_g158164;
				half Visual_MultiMask547_g158164 = Out_MultiMask4_g158181;
				float lerpResult477_g158164 = lerp( Visual_MultiMask547_g158164 , Local_MultiMask767_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch482_g158164 = lerpResult477_g158164;
				#else
				float staticSwitch482_g158164 = Visual_MultiMask547_g158164;
				#endif
				half Final_MultiMask572_g158164 = staticSwitch482_g158164;
				float In_MultiMask3_g158182 = Final_MultiMask572_g158164;
				half Visual_AlphaClip559_g158164 = Out_AlphaClip4_g158181;
				float temp_output_718_0_g158164 = (Local_AlbedoTex777_g158164).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g158164 = ( temp_output_718_0_g158164 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g158164 = temp_output_718_0_g158164;
				#endif
				half Local_AlphaClip772_g158164 = staticSwitch924_g158164;
				float lerpResult448_g158164 = lerp( Visual_AlphaClip559_g158164 , Local_AlphaClip772_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch564_g158164 = lerpResult448_g158164;
				#else
				float staticSwitch564_g158164 = Visual_AlphaClip559_g158164;
				#endif
				half Final_AlphaClip602_g158164 = staticSwitch564_g158164;
				float In_AlphaClip3_g158182 = Final_AlphaClip602_g158164;
				half Visual_AlphaFade588_g158164 = Out_AlphaFade4_g158181;
				half Local_AlphaFade773_g158164 = (lerpResult706_g158164).a;
				float lerpResult604_g158164 = lerp( Visual_AlphaFade588_g158164 , Local_AlphaFade773_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch608_g158164 = lerpResult604_g158164;
				#else
				float staticSwitch608_g158164 = Visual_AlphaFade588_g158164;
				#endif
				half Final_AlphaFade611_g158164 = staticSwitch608_g158164;
				float In_AlphaFade3_g158182 = Final_AlphaFade611_g158164;
				float3 In_Translucency3_g158182 = Out_Translucency4_g158181;
				float In_Transmission3_g158182 = Out_Transmission4_g158181;
				float In_Thickness3_g158182 = Out_Thickness4_g158181;
				float In_Diffusion3_g158182 = Out_Diffusion4_g158181;
				{
				Data3_g158182.Dummy = In_Dummy3_g158182;
				Data3_g158182.Albedo = In_Albedo3_g158182;
				Data3_g158182.NormalTS = In_NormalTS3_g158182;
				Data3_g158182.NormalWS = In_NormalWS3_g158182;
				Data3_g158182.Shader = In_Shader3_g158182;
				Data3_g158182.Emissive= In_Emissive3_g158182;
				Data3_g158182.MultiMask = In_MultiMask3_g158182;
				Data3_g158182.Grayscale = In_Grayscale3_g158182;
				Data3_g158182.Luminosity = In_Luminosity3_g158182;
				Data3_g158182.AlphaClip = In_AlphaClip3_g158182;
				Data3_g158182.AlphaFade = In_AlphaFade3_g158182;
				Data3_g158182.Translucency = In_Translucency3_g158182;
				Data3_g158182.Transmission = In_Transmission3_g158182;
				Data3_g158182.Thickness = In_Thickness3_g158182;
				Data3_g158182.Diffusion = In_Diffusion3_g158182;
				}
				TVEVisualData Data4_g158194 = Data3_g158182;
				float Out_Dummy4_g158194 = 0;
				float3 Out_Albedo4_g158194 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158194 = float2( 0,0 );
				float3 Out_NormalWS4_g158194 = float3( 0,0,0 );
				float4 Out_Shader4_g158194 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158194 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158194 = 0;
				float Out_Grayscale4_g158194 = 0;
				float Out_Luminosity4_g158194 = 0;
				float Out_AlphaClip4_g158194 = 0;
				float Out_AlphaFade4_g158194 = 0;
				float3 Out_Translucency4_g158194 = float3( 0,0,0 );
				float Out_Transmission4_g158194 = 0;
				float Out_Thickness4_g158194 = 0;
				float Out_Diffusion4_g158194 = 0;
				{
				Out_Dummy4_g158194 = Data4_g158194.Dummy;
				Out_Albedo4_g158194 = Data4_g158194.Albedo;
				Out_NormalTS4_g158194 = Data4_g158194.NormalTS;
				Out_NormalWS4_g158194 = Data4_g158194.NormalWS;
				Out_Shader4_g158194 = Data4_g158194.Shader;
				Out_Emissive4_g158194= Data4_g158194.Emissive;
				Out_MultiMask4_g158194 = Data4_g158194.MultiMask;
				Out_Grayscale4_g158194 = Data4_g158194.Grayscale;
				Out_Luminosity4_g158194= Data4_g158194.Luminosity;
				Out_AlphaClip4_g158194 = Data4_g158194.AlphaClip;
				Out_AlphaFade4_g158194 = Data4_g158194.AlphaFade;
				Out_Translucency4_g158194 = Data4_g158194.Translucency;
				Out_Transmission4_g158194 = Data4_g158194.Transmission;
				Out_Thickness4_g158194 = Data4_g158194.Thickness;
				Out_Diffusion4_g158194 = Data4_g158194.Diffusion;
				}
				half3 Visual_Albedo127_g158193 = Out_Albedo4_g158194;
				TVEModelData Data15_g158196 = Data16_g158068;
				float Out_Dummy15_g158196 = 0;
				float3 Out_PositionOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158196 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158196 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158196 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158196 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158196 = float3( 0,0,0 );
				float4 Out_VertexData15_g158196 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158196 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158196 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158196 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158196 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158196 = Data15_g158196.Dummy;
				Out_PositionOS15_g158196 = Data15_g158196.PositionOS;
				Out_PositionWS15_g158196 = Data15_g158196.PositionWS;
				Out_PositionWO15_g158196 = Data15_g158196.PositionWO;
				Out_PositionRawOS15_g158196 = Data15_g158196.PositionRawOS;
				Out_PositionAddOS15_g158196 = Data15_g158196.PositionAddOS;
				Out_PivotOS15_g158196 = Data15_g158196.PivotOS;
				Out_PivotWS15_g158196 = Data15_g158196.PivotWS;
				Out_PivotWO15_g158196 = Data15_g158196.PivotWO;
				Out_NormalOS15_g158196 = Data15_g158196.NormalOS;
				Out_NormalWS15_g158196 = Data15_g158196.NormalWS;
				Out_NormalRawOS15_g158196 = Data15_g158196.NormalRawOS;
				Out_NormalRawWS15_g158196 = Data15_g158196.NormalRawWS;
				Out_TangentOS15_g158196 = Data15_g158196.TangentOS;
				Out_ViewDirWS15_g158196 = Data15_g158196.ViewDirWS;
				Out_VertexData15_g158196 = Data15_g158196.VertexData;
				Out_MotionData15_g158196 = Data15_g158196.MotionData;
				Out_BoundsData15_g158196 = Data15_g158196.BoundsData;
				Out_RotationData15_g158196 = Data15_g158196.RotationData;
				Out_FragmentData15_g158196 = Data15_g158196.FragmentData;
				}
				half4 Model_VertexData206_g158193 = Out_VertexData15_g158196;
				float4 break208_g158193 = Model_VertexData206_g158193;
				float4 break33_g158201 = _occlusion_vert_mode;
				float temp_output_30_0_g158201 = ( break208_g158193.x * break33_g158201.x );
				float temp_output_29_0_g158201 = ( break208_g158193.y * break33_g158201.y );
				float temp_output_31_0_g158201 = ( break208_g158193.z * break33_g158201.z );
				float temp_output_28_0_g158201 = ( temp_output_30_0_g158201 + temp_output_29_0_g158201 + temp_output_31_0_g158201 + ( break208_g158193.w * break33_g158201.w ) );
				float temp_output_194_0_g158193 = temp_output_28_0_g158201;
				float clampResult17_g158199 = clamp( temp_output_194_0_g158193 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158198 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g158198 = ( _OcclusionMeshRemap.y - temp_output_7_0_g158198 );
				float temp_output_6_0_g158200 = saturate( ( ( clampResult17_g158199 - temp_output_7_0_g158198 ) / ( temp_output_10_0_g158198 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158200 = ( temp_output_6_0_g158200 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158200 = temp_output_6_0_g158200;
				#endif
				half Occlusion_Mask82_g158193 = staticSwitch14_g158200;
				float3 lerpResult75_g158193 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g158193);
				float3 lerpResult186_g158193 = lerp( Visual_Albedo127_g158193 , ( Visual_Albedo127_g158193 * lerpResult75_g158193 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g158193 = lerpResult186_g158193;
				#else
				float3 staticSwitch171_g158193 = Visual_Albedo127_g158193;
				#endif
				half3 Final_Albedo160_g158193 = staticSwitch171_g158193;
				float3 In_Albedo3_g158195 = Final_Albedo160_g158193;
				float2 In_NormalTS3_g158195 = Out_NormalTS4_g158194;
				float3 In_NormalWS3_g158195 = Out_NormalWS4_g158194;
				float4 In_Shader3_g158195 = Out_Shader4_g158194;
				float4 In_Emissive3_g158195 = Out_Emissive4_g158194;
				float3 temp_output_3_0_g158197 = Final_Albedo160_g158193;
				float dotResult20_g158197 = dot( temp_output_3_0_g158197 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158193 = dotResult20_g158197;
				float In_Grayscale3_g158195 = Final_Grayscale164_g158193;
				float clampResult180_g158193 = clamp( saturate( ( Final_Grayscale164_g158193 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g158193 = clampResult180_g158193;
				float In_Luminosity3_g158195 = Final_Shading181_g158193;
				float In_MultiMask3_g158195 = Out_MultiMask4_g158194;
				float In_AlphaClip3_g158195 = Out_AlphaClip4_g158194;
				float In_AlphaFade3_g158195 = Out_AlphaFade4_g158194;
				float3 In_Translucency3_g158195 = Out_Translucency4_g158194;
				float In_Transmission3_g158195 = Out_Transmission4_g158194;
				float In_Thickness3_g158195 = Out_Thickness4_g158194;
				float In_Diffusion3_g158195 = Out_Diffusion4_g158194;
				{
				Data3_g158195.Dummy = In_Dummy3_g158195;
				Data3_g158195.Albedo = In_Albedo3_g158195;
				Data3_g158195.NormalTS = In_NormalTS3_g158195;
				Data3_g158195.NormalWS = In_NormalWS3_g158195;
				Data3_g158195.Shader = In_Shader3_g158195;
				Data3_g158195.Emissive= In_Emissive3_g158195;
				Data3_g158195.MultiMask = In_MultiMask3_g158195;
				Data3_g158195.Grayscale = In_Grayscale3_g158195;
				Data3_g158195.Luminosity = In_Luminosity3_g158195;
				Data3_g158195.AlphaClip = In_AlphaClip3_g158195;
				Data3_g158195.AlphaFade = In_AlphaFade3_g158195;
				Data3_g158195.Translucency = In_Translucency3_g158195;
				Data3_g158195.Transmission = In_Transmission3_g158195;
				Data3_g158195.Thickness = In_Thickness3_g158195;
				Data3_g158195.Diffusion = In_Diffusion3_g158195;
				}
				TVEVisualData Data4_g158206 = Data3_g158195;
				float Out_Dummy4_g158206 = 0;
				float3 Out_Albedo4_g158206 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158206 = float2( 0,0 );
				float3 Out_NormalWS4_g158206 = float3( 0,0,0 );
				float4 Out_Shader4_g158206 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158206 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158206 = 0;
				float Out_Grayscale4_g158206 = 0;
				float Out_Luminosity4_g158206 = 0;
				float Out_AlphaClip4_g158206 = 0;
				float Out_AlphaFade4_g158206 = 0;
				float3 Out_Translucency4_g158206 = float3( 0,0,0 );
				float Out_Transmission4_g158206 = 0;
				float Out_Thickness4_g158206 = 0;
				float Out_Diffusion4_g158206 = 0;
				{
				Out_Dummy4_g158206 = Data4_g158206.Dummy;
				Out_Albedo4_g158206 = Data4_g158206.Albedo;
				Out_NormalTS4_g158206 = Data4_g158206.NormalTS;
				Out_NormalWS4_g158206 = Data4_g158206.NormalWS;
				Out_Shader4_g158206 = Data4_g158206.Shader;
				Out_Emissive4_g158206= Data4_g158206.Emissive;
				Out_MultiMask4_g158206 = Data4_g158206.MultiMask;
				Out_Grayscale4_g158206 = Data4_g158206.Grayscale;
				Out_Luminosity4_g158206= Data4_g158206.Luminosity;
				Out_AlphaClip4_g158206 = Data4_g158206.AlphaClip;
				Out_AlphaFade4_g158206 = Data4_g158206.AlphaFade;
				Out_Translucency4_g158206 = Data4_g158206.Translucency;
				Out_Transmission4_g158206 = Data4_g158206.Transmission;
				Out_Thickness4_g158206 = Data4_g158206.Thickness;
				Out_Diffusion4_g158206 = Data4_g158206.Diffusion;
				}
				half3 Visual_Albedo127_g158203 = Out_Albedo4_g158206;
				float temp_output_162_11_g158203 = Out_MultiMask4_g158206;
				half Visual_MultiMask196_g158203 = temp_output_162_11_g158203;
				float lerpResult190_g158203 = lerp( 1.0 , Visual_MultiMask196_g158203 , _GradientMultiValue);
				half Gradient_MultiMask194_g158203 = lerpResult190_g158203;
				TVEModelData Data15_g158204 = Data16_g158068;
				float Out_Dummy15_g158204 = 0;
				float3 Out_PositionOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158204 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158204 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158204 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158204 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158204 = float3( 0,0,0 );
				float4 Out_VertexData15_g158204 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158204 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158204 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158204 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158204 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158204 = Data15_g158204.Dummy;
				Out_PositionOS15_g158204 = Data15_g158204.PositionOS;
				Out_PositionWS15_g158204 = Data15_g158204.PositionWS;
				Out_PositionWO15_g158204 = Data15_g158204.PositionWO;
				Out_PositionRawOS15_g158204 = Data15_g158204.PositionRawOS;
				Out_PositionAddOS15_g158204 = Data15_g158204.PositionAddOS;
				Out_PivotOS15_g158204 = Data15_g158204.PivotOS;
				Out_PivotWS15_g158204 = Data15_g158204.PivotWS;
				Out_PivotWO15_g158204 = Data15_g158204.PivotWO;
				Out_NormalOS15_g158204 = Data15_g158204.NormalOS;
				Out_NormalWS15_g158204 = Data15_g158204.NormalWS;
				Out_NormalRawOS15_g158204 = Data15_g158204.NormalRawOS;
				Out_NormalRawWS15_g158204 = Data15_g158204.NormalRawWS;
				Out_TangentOS15_g158204 = Data15_g158204.TangentOS;
				Out_ViewDirWS15_g158204 = Data15_g158204.ViewDirWS;
				Out_VertexData15_g158204 = Data15_g158204.VertexData;
				Out_MotionData15_g158204 = Data15_g158204.MotionData;
				Out_BoundsData15_g158204 = Data15_g158204.BoundsData;
				Out_RotationData15_g158204 = Data15_g158204.RotationData;
				Out_FragmentData15_g158204 = Data15_g158204.FragmentData;
				}
				half4 Model_VertexData224_g158203 = Out_VertexData15_g158204;
				float4 break226_g158203 = Model_VertexData224_g158203;
				float4 break33_g158205 = _gradient_vert_mode;
				float temp_output_30_0_g158205 = ( break226_g158203.x * break33_g158205.x );
				float temp_output_29_0_g158205 = ( break226_g158203.y * break33_g158205.y );
				float temp_output_31_0_g158205 = ( break226_g158203.z * break33_g158205.z );
				float temp_output_28_0_g158205 = ( temp_output_30_0_g158205 + temp_output_29_0_g158205 + temp_output_31_0_g158205 + ( break226_g158203.w * break33_g158205.w ) );
				float temp_output_211_0_g158203 = temp_output_28_0_g158205;
				float clampResult17_g158210 = clamp( temp_output_211_0_g158203 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158211 = _GradientMeshRemap.x;
				float temp_output_10_0_g158211 = ( _GradientMeshRemap.y - temp_output_7_0_g158211 );
				float temp_output_6_0_g158212 = saturate( ( ( clampResult17_g158210 - temp_output_7_0_g158211 ) / ( temp_output_10_0_g158211 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158212 = ( temp_output_6_0_g158212 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158212 = temp_output_6_0_g158212;
				#endif
				half Gradient_VertMask82_g158203 = staticSwitch14_g158212;
				half Gradient_Mask200_g158203 = ( Gradient_MultiMask194_g158203 * Gradient_VertMask82_g158203 );
				float3 lerpResult75_g158203 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g158203);
				float3 lerpResult186_g158203 = lerp( Visual_Albedo127_g158203 , ( Visual_Albedo127_g158203 * lerpResult75_g158203 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g158203 = lerpResult186_g158203;
				#else
				float3 staticSwitch171_g158203 = Visual_Albedo127_g158203;
				#endif
				half3 Final_Albedo160_g158203 = staticSwitch171_g158203;
				float3 In_Albedo3_g158207 = Final_Albedo160_g158203;
				float2 In_NormalTS3_g158207 = Out_NormalTS4_g158206;
				float3 In_NormalWS3_g158207 = Out_NormalWS4_g158206;
				float4 In_Shader3_g158207 = Out_Shader4_g158206;
				float4 In_Emissive3_g158207 = Out_Emissive4_g158206;
				float3 temp_output_3_0_g158208 = Final_Albedo160_g158203;
				float dotResult20_g158208 = dot( temp_output_3_0_g158208 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158203 = dotResult20_g158208;
				float In_Grayscale3_g158207 = Final_Grayscale164_g158203;
				float clampResult180_g158203 = clamp( saturate( ( Final_Grayscale164_g158203 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g158203 = clampResult180_g158203;
				float In_Luminosity3_g158207 = Final_Luminosity181_g158203;
				float In_MultiMask3_g158207 = temp_output_162_11_g158203;
				float In_AlphaClip3_g158207 = Out_AlphaClip4_g158206;
				float In_AlphaFade3_g158207 = Out_AlphaFade4_g158206;
				float3 In_Translucency3_g158207 = Out_Translucency4_g158206;
				float In_Transmission3_g158207 = Out_Transmission4_g158206;
				float In_Thickness3_g158207 = Out_Thickness4_g158206;
				float In_Diffusion3_g158207 = Out_Diffusion4_g158206;
				{
				Data3_g158207.Dummy = In_Dummy3_g158207;
				Data3_g158207.Albedo = In_Albedo3_g158207;
				Data3_g158207.NormalTS = In_NormalTS3_g158207;
				Data3_g158207.NormalWS = In_NormalWS3_g158207;
				Data3_g158207.Shader = In_Shader3_g158207;
				Data3_g158207.Emissive= In_Emissive3_g158207;
				Data3_g158207.MultiMask = In_MultiMask3_g158207;
				Data3_g158207.Grayscale = In_Grayscale3_g158207;
				Data3_g158207.Luminosity = In_Luminosity3_g158207;
				Data3_g158207.AlphaClip = In_AlphaClip3_g158207;
				Data3_g158207.AlphaFade = In_AlphaFade3_g158207;
				Data3_g158207.Translucency = In_Translucency3_g158207;
				Data3_g158207.Transmission = In_Transmission3_g158207;
				Data3_g158207.Thickness = In_Thickness3_g158207;
				Data3_g158207.Diffusion = In_Diffusion3_g158207;
				}
				TVEVisualData Data4_g158214 = Data3_g158207;
				float Out_Dummy4_g158214 = 0;
				float3 Out_Albedo4_g158214 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158214 = float2( 0,0 );
				float3 Out_NormalWS4_g158214 = float3( 0,0,0 );
				float4 Out_Shader4_g158214 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158214 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158214 = 0;
				float Out_Grayscale4_g158214 = 0;
				float Out_Luminosity4_g158214 = 0;
				float Out_AlphaClip4_g158214 = 0;
				float Out_AlphaFade4_g158214 = 0;
				float3 Out_Translucency4_g158214 = float3( 0,0,0 );
				float Out_Transmission4_g158214 = 0;
				float Out_Thickness4_g158214 = 0;
				float Out_Diffusion4_g158214 = 0;
				{
				Out_Dummy4_g158214 = Data4_g158214.Dummy;
				Out_Albedo4_g158214 = Data4_g158214.Albedo;
				Out_NormalTS4_g158214 = Data4_g158214.NormalTS;
				Out_NormalWS4_g158214 = Data4_g158214.NormalWS;
				Out_Shader4_g158214 = Data4_g158214.Shader;
				Out_Emissive4_g158214= Data4_g158214.Emissive;
				Out_MultiMask4_g158214 = Data4_g158214.MultiMask;
				Out_Grayscale4_g158214 = Data4_g158214.Grayscale;
				Out_Luminosity4_g158214= Data4_g158214.Luminosity;
				Out_AlphaClip4_g158214 = Data4_g158214.AlphaClip;
				Out_AlphaFade4_g158214 = Data4_g158214.AlphaFade;
				Out_Translucency4_g158214 = Data4_g158214.Translucency;
				Out_Transmission4_g158214 = Data4_g158214.Transmission;
				Out_Thickness4_g158214 = Data4_g158214.Thickness;
				Out_Diffusion4_g158214 = Data4_g158214.Diffusion;
				}
				half3 Visual_Albedo127_g158213 = Out_Albedo4_g158214;
				float vertexToFrag203_g158213 = IN.ase_texcoord4.z;
				float clampResult208_g158213 = clamp( vertexToFrag203_g158213 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g158213 = ( Visual_Albedo127_g158213 + ( ( Visual_Albedo127_g158213 * Visual_Albedo127_g158213 * 200.0 * _motion_highlight_color ) * clampResult208_g158213 ) );
				#else
				float3 staticSwitch209_g158213 = Visual_Albedo127_g158213;
				#endif
				half3 Final_Albedo160_g158213 = staticSwitch209_g158213;
				float3 In_Albedo3_g158216 = Final_Albedo160_g158213;
				float2 In_NormalTS3_g158216 = Out_NormalTS4_g158214;
				float3 In_NormalWS3_g158216 = Out_NormalWS4_g158214;
				float4 In_Shader3_g158216 = Out_Shader4_g158214;
				float4 In_Emissive3_g158216 = Out_Emissive4_g158214;
				float In_Grayscale3_g158216 = Out_Grayscale4_g158214;
				float In_Luminosity3_g158216 = Out_Luminosity4_g158214;
				float In_MultiMask3_g158216 = Out_MultiMask4_g158214;
				float In_AlphaClip3_g158216 = Out_AlphaClip4_g158214;
				float In_AlphaFade3_g158216 = Out_AlphaFade4_g158214;
				float3 In_Translucency3_g158216 = Out_Translucency4_g158214;
				float In_Transmission3_g158216 = Out_Transmission4_g158214;
				float In_Thickness3_g158216 = Out_Thickness4_g158214;
				float In_Diffusion3_g158216 = Out_Diffusion4_g158214;
				{
				Data3_g158216.Dummy = In_Dummy3_g158216;
				Data3_g158216.Albedo = In_Albedo3_g158216;
				Data3_g158216.NormalTS = In_NormalTS3_g158216;
				Data3_g158216.NormalWS = In_NormalWS3_g158216;
				Data3_g158216.Shader = In_Shader3_g158216;
				Data3_g158216.Emissive= In_Emissive3_g158216;
				Data3_g158216.MultiMask = In_MultiMask3_g158216;
				Data3_g158216.Grayscale = In_Grayscale3_g158216;
				Data3_g158216.Luminosity = In_Luminosity3_g158216;
				Data3_g158216.AlphaClip = In_AlphaClip3_g158216;
				Data3_g158216.AlphaFade = In_AlphaFade3_g158216;
				Data3_g158216.Translucency = In_Translucency3_g158216;
				Data3_g158216.Transmission = In_Transmission3_g158216;
				Data3_g158216.Thickness = In_Thickness3_g158216;
				Data3_g158216.Diffusion = In_Diffusion3_g158216;
				}
				TVEVisualData Data4_g158218 = Data3_g158216;
				float Out_Dummy4_g158218 = 0;
				float3 Out_Albedo4_g158218 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158218 = float2( 0,0 );
				float3 Out_NormalWS4_g158218 = float3( 0,0,0 );
				float4 Out_Shader4_g158218 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158218 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158218 = 0;
				float Out_Grayscale4_g158218 = 0;
				float Out_Luminosity4_g158218 = 0;
				float Out_AlphaClip4_g158218 = 0;
				float Out_AlphaFade4_g158218 = 0;
				float3 Out_Translucency4_g158218 = float3( 0,0,0 );
				float Out_Transmission4_g158218 = 0;
				float Out_Thickness4_g158218 = 0;
				float Out_Diffusion4_g158218 = 0;
				{
				Out_Dummy4_g158218 = Data4_g158218.Dummy;
				Out_Albedo4_g158218 = Data4_g158218.Albedo;
				Out_NormalTS4_g158218 = Data4_g158218.NormalTS;
				Out_NormalWS4_g158218 = Data4_g158218.NormalWS;
				Out_Shader4_g158218 = Data4_g158218.Shader;
				Out_Emissive4_g158218= Data4_g158218.Emissive;
				Out_MultiMask4_g158218 = Data4_g158218.MultiMask;
				Out_Grayscale4_g158218 = Data4_g158218.Grayscale;
				Out_Luminosity4_g158218= Data4_g158218.Luminosity;
				Out_AlphaClip4_g158218 = Data4_g158218.AlphaClip;
				Out_AlphaFade4_g158218 = Data4_g158218.AlphaFade;
				Out_Translucency4_g158218 = Data4_g158218.Translucency;
				Out_Transmission4_g158218 = Data4_g158218.Transmission;
				Out_Thickness4_g158218 = Data4_g158218.Thickness;
				Out_Diffusion4_g158218 = Data4_g158218.Diffusion;
				}
				half3 Visual_Albedo127_g158217 = Out_Albedo4_g158218;
				float3 temp_output_622_0_g158217 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler238_g158221 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158224 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158224 = ( temp_output_6_0_g158224 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158224 = temp_output_6_0_g158224;
				#endif
				half4 Overlay_Coords639_g158217 = staticSwitch14_g158224;
				float4 temp_output_37_0_g158221 = Overlay_Coords639_g158217;
				half4 Coords238_g158221 = temp_output_37_0_g158221;
				TVEModelData Data15_g158225 = Data16_g158068;
				float Out_Dummy15_g158225 = 0;
				float3 Out_PositionOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158225 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158225 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158225 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158225 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158225 = float3( 0,0,0 );
				float4 Out_VertexData15_g158225 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158225 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158225 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158225 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158225 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158225 = Data15_g158225.Dummy;
				Out_PositionOS15_g158225 = Data15_g158225.PositionOS;
				Out_PositionWS15_g158225 = Data15_g158225.PositionWS;
				Out_PositionWO15_g158225 = Data15_g158225.PositionWO;
				Out_PositionRawOS15_g158225 = Data15_g158225.PositionRawOS;
				Out_PositionAddOS15_g158225 = Data15_g158225.PositionAddOS;
				Out_PivotOS15_g158225 = Data15_g158225.PivotOS;
				Out_PivotWS15_g158225 = Data15_g158225.PivotWS;
				Out_PivotWO15_g158225 = Data15_g158225.PivotWO;
				Out_NormalOS15_g158225 = Data15_g158225.NormalOS;
				Out_NormalWS15_g158225 = Data15_g158225.NormalWS;
				Out_NormalRawOS15_g158225 = Data15_g158225.NormalRawOS;
				Out_NormalRawWS15_g158225 = Data15_g158225.NormalRawWS;
				Out_TangentOS15_g158225 = Data15_g158225.TangentOS;
				Out_ViewDirWS15_g158225 = Data15_g158225.ViewDirWS;
				Out_VertexData15_g158225 = Data15_g158225.VertexData;
				Out_MotionData15_g158225 = Data15_g158225.MotionData;
				Out_BoundsData15_g158225 = Data15_g158225.BoundsData;
				Out_RotationData15_g158225 = Data15_g158225.RotationData;
				Out_FragmentData15_g158225 = Data15_g158225.FragmentData;
				}
				half3 Model_PositionWO602_g158217 = Out_PositionWO15_g158225;
				float3 temp_output_279_0_g158221 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158221 = temp_output_279_0_g158221;
				half4 localSamplePlanar2D238_g158221 = SamplePlanar2D( Texture238_g158221 , Sampler238_g158221 , Coords238_g158221 , WorldPosition238_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler246_g158221 = sampler_Linear_Repeat;
				half4 Coords246_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition246_g158221 = temp_output_279_0_g158221;
				half3 Model_NormalWS712_g158217 = Out_NormalWS15_g158225;
				float3 temp_output_280_0_g158221 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158221 = temp_output_280_0_g158221;
				half4 localSamplePlanar3D246_g158221 = SamplePlanar3D( Texture246_g158221 , Sampler246_g158221 , Coords246_g158221 , WorldPosition246_g158221 , WorldNormal246_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler234_g158221 = sampler_Linear_Repeat;
				float4 Coords234_g158221 = temp_output_37_0_g158221;
				float3 WorldPosition234_g158221 = temp_output_279_0_g158221;
				float4 localSampleStochastic2D234_g158221 = SampleStochastic2D( Texture234_g158221 , Sampler234_g158221 , Coords234_g158221 , WorldPosition234_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler263_g158221 = sampler_Linear_Repeat;
				half4 Coords263_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition263_g158221 = temp_output_279_0_g158221;
				half3 WorldNormal263_g158221 = temp_output_280_0_g158221;
				half4 localSampleStochastic3D263_g158221 = SampleStochastic3D( Texture263_g158221 , Sampler263_g158221 , Coords263_g158221 , WorldPosition263_g158221 , WorldNormal263_g158221 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g158217 = localSamplePlanar3D246_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g158217 = localSampleStochastic2D234_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g158217 = localSampleStochastic3D263_g158221;
				#else
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#endif
				half3 Overlay_Albedo526_g158217 = (staticSwitch676_g158217).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g158217 = ( temp_output_622_0_g158217 * Overlay_Albedo526_g158217 );
				#else
				float3 staticSwitch578_g158217 = temp_output_622_0_g158217;
				#endif
				float3 temp_output_6_0_g158240 = staticSwitch578_g158217;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g158240 = ( temp_output_6_0_g158240 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g158240 = temp_output_6_0_g158240;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158227) = _OverlayMaskTex;
				SamplerState Sampler276_g158227 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158228 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158228 = ( temp_output_6_0_g158228 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158228 = temp_output_6_0_g158228;
				#endif
				half4 Local_MaskCoords886_g158217 = staticSwitch14_g158228;
				float4 temp_output_37_0_g158227 = Local_MaskCoords886_g158217;
				half4 Coords276_g158227 = temp_output_37_0_g158227;
				half2 TexCoord276_g158227 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158227 = SampleMain( Texture276_g158227 , Sampler276_g158227 , Coords276_g158227 , TexCoord276_g158227 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158227) = _OverlayMaskTex;
				SamplerState Sampler275_g158227 = sampler_Linear_Repeat;
				half4 Coords275_g158227 = temp_output_37_0_g158227;
				float2 appendResult289_g158227 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158227 = appendResult289_g158227;
				#else
				float2 staticSwitch288_g158227 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158227 = staticSwitch288_g158227;
				half4 localSampleExtra275_g158227 = SampleExtra( Texture275_g158227 , Sampler275_g158227 , Coords275_g158227 , TexCoord275_g158227 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g158217 = localSampleExtra275_g158227;
				#else
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#endif
				half4 Local_MaskTex885_g158217 = staticSwitch894_g158217;
				float clampResult17_g158242 = clamp( (Local_MaskTex885_g158217).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158243 = _OverlayMaskRemap.x;
				float temp_output_10_0_g158243 = ( _OverlayMaskRemap.y - temp_output_7_0_g158243 );
				float lerpResult898_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158242 - temp_output_7_0_g158243 ) / ( temp_output_10_0_g158243 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g158217 = lerpResult898_g158217;
				#else
				float staticSwitch904_g158217 = 1.0;
				#endif
				half Overlay_TexMask906_g158217 = staticSwitch904_g158217;
				float3 temp_output_739_21_g158217 = Out_NormalWS4_g158218;
				half3 Visual_NormalWS749_g158217 = temp_output_739_21_g158217;
				float clampResult17_g158237 = clamp( saturate( (Visual_NormalWS749_g158217).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158236 = _OverlayProjRemap.x;
				float temp_output_10_0_g158236 = ( _OverlayProjRemap.y - temp_output_7_0_g158236 );
				float lerpResult842_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158237 - temp_output_7_0_g158236 ) / ( temp_output_10_0_g158236 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g158217 = lerpResult842_g158217;
				#else
				float staticSwitch734_g158217 = 1.0;
				#endif
				half Overlay_MaskProj457_g158217 = staticSwitch734_g158217;
				float temp_output_739_15_g158217 = Out_Luminosity4_g158218;
				half Visual_Luminosity654_g158217 = temp_output_739_15_g158217;
				float clampResult17_g158239 = clamp( Visual_Luminosity654_g158217 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158238 = _OverlayLumaRemap.x;
				float temp_output_10_0_g158238 = ( _OverlayLumaRemap.y - temp_output_7_0_g158238 );
				float lerpResult587_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158239 - temp_output_7_0_g158238 ) / ( temp_output_10_0_g158238 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g158217 = lerpResult587_g158217;
				half4 Model_VertexMasks791_g158217 = Out_VertexData15_g158225;
				float4 break792_g158217 = Model_VertexMasks791_g158217;
				float4 break33_g158229 = _overlay_vert_mode;
				float temp_output_30_0_g158229 = ( break792_g158217.x * break33_g158229.x );
				float temp_output_29_0_g158229 = ( break792_g158217.y * break33_g158229.y );
				float temp_output_31_0_g158229 = ( break792_g158217.z * break33_g158229.z );
				float temp_output_28_0_g158229 = ( temp_output_30_0_g158229 + temp_output_29_0_g158229 + temp_output_31_0_g158229 + ( break792_g158217.w * break33_g158229.w ) );
				float clampResult17_g158230 = clamp( temp_output_28_0_g158229 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158232 = _OverlayMeshRemap.x;
				float temp_output_10_0_g158232 = ( _OverlayMeshRemap.y - temp_output_7_0_g158232 );
				float lerpResult879_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158230 - temp_output_7_0_g158232 ) / ( temp_output_10_0_g158232 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g158241 = lerpResult879_g158217;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158241 = ( temp_output_6_0_g158241 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158241 = temp_output_6_0_g158241;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g158217 = staticSwitch14_g158241;
				#else
				float staticSwitch800_g158217 = 1.0;
				#endif
				half Overlay_VertMask801_g158217 = staticSwitch800_g158217;
				half Overlay_MaskNoise427_g158217 = 1.0;
				TVEGlobalData Data15_g158219 = Data204_g158069;
				float Out_Dummy15_g158219 = 0;
				float4 Out_CoatParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158219 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158219 = Data15_g158219.Dummy;
				Out_CoatParams15_g158219 = Data15_g158219.CoatParams;
				Out_PaintParams15_g158219 = Data15_g158219.PaintParams;
				Out_GlowParams15_g158219 = Data15_g158219.GlowParams;
				Out_AtmoParams15_g158219= Data15_g158219.AtmoParams;
				Out_FormParams15_g158219 = Data15_g158219.FormParams;
				Out_LandParams15_g158219 = Data15_g158219.LandParams;
				Out_WindParams15_g158219 = Data15_g158219.WindParams;
				Out_PushParams15_g158219 = Data15_g158219.PushParams;
				}
				half4 Global_AtmoParams516_g158217 = Out_AtmoParams15_g158219;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g158217 = (Global_AtmoParams516_g158217).z;
				#else
				float staticSwitch705_g158217 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g158217 = staticSwitch705_g158217;
				half Custom_Mask646_g158217 = 1.0;
				float temp_output_7_0_g158235 = 0.1;
				float temp_output_10_0_g158235 = ( 0.2 - temp_output_7_0_g158235 );
				half Overlay_Mask494_g158217 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g158217 * Overlay_MaskProj457_g158217 * Overlay_MaskLuma438_g158217 * Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 * Custom_Mask646_g158217 ) - temp_output_7_0_g158235 ) / ( temp_output_10_0_g158235 + 0.0001 ) ) );
				float3 lerpResult467_g158217 = lerp( Visual_Albedo127_g158217 , staticSwitch14_g158240 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g158217 = lerpResult467_g158217;
				#else
				float3 staticSwitch577_g158217 = Visual_Albedo127_g158217;
				#endif
				half3 Final_Albedo493_g158217 = staticSwitch577_g158217;
				float3 In_Albedo3_g158220 = Final_Albedo493_g158217;
				half2 Visual_NormalTS535_g158217 = Out_NormalTS4_g158218;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158226) = _OverlayNormalTex;
				SamplerState Sampler238_g158226 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158226 = Overlay_Coords639_g158217;
				half4 Coords238_g158226 = temp_output_37_0_g158226;
				float3 temp_output_279_0_g158226 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158226 = temp_output_279_0_g158226;
				half4 localSamplePlanar2D238_g158226 = SamplePlanar2D( Texture238_g158226 , Sampler238_g158226 , Coords238_g158226 , WorldPosition238_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158226) = _OverlayNormalTex;
				SamplerState Sampler246_g158226 = sampler_Linear_Repeat;
				half4 Coords246_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition246_g158226 = temp_output_279_0_g158226;
				float3 temp_output_280_0_g158226 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158226 = temp_output_280_0_g158226;
				half4 localSamplePlanar3D246_g158226 = SamplePlanar3D( Texture246_g158226 , Sampler246_g158226 , Coords246_g158226 , WorldPosition246_g158226 , WorldNormal246_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158226) = _OverlayNormalTex;
				SamplerState Sampler234_g158226 = sampler_Linear_Repeat;
				float4 Coords234_g158226 = temp_output_37_0_g158226;
				float3 WorldPosition234_g158226 = temp_output_279_0_g158226;
				float4 localSampleStochastic2D234_g158226 = SampleStochastic2D( Texture234_g158226 , Sampler234_g158226 , Coords234_g158226 , WorldPosition234_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158226) = _OverlayNormalTex;
				SamplerState Sampler263_g158226 = sampler_Linear_Repeat;
				half4 Coords263_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition263_g158226 = temp_output_279_0_g158226;
				half3 WorldNormal263_g158226 = temp_output_280_0_g158226;
				half4 localSampleStochastic3D263_g158226 = SampleStochastic3D( Texture263_g158226 , Sampler263_g158226 , Coords263_g158226 , WorldPosition263_g158226 , WorldNormal263_g158226 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g158217 = localSamplePlanar3D246_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g158217 = localSampleStochastic2D234_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g158217 = localSampleStochastic3D263_g158226;
				#else
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#endif
				half4 Normal_Packed45_g158223 = staticSwitch686_g158217;
				float2 appendResult58_g158223 = (float2(( (Normal_Packed45_g158223).x * (Normal_Packed45_g158223).w ) , (Normal_Packed45_g158223).y));
				half2 Normal_Default50_g158223 = appendResult58_g158223;
				half2 Normal_ASTC41_g158223 = (Normal_Packed45_g158223).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158223 = Normal_ASTC41_g158223;
				#else
				float2 staticSwitch38_g158223 = Normal_Default50_g158223;
				#endif
				half2 Normal_NO_DTX544_g158223 = (Normal_Packed45_g158223).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158223 = Normal_NO_DTX544_g158223;
				#else
				float2 staticSwitch37_g158223 = staticSwitch38_g158223;
				#endif
				half2 Normal_Planar45_g158222 = (staticSwitch37_g158223*2.0 + -1.0);
				float2 break71_g158222 = Normal_Planar45_g158222;
				float3 appendResult72_g158222 = (float3(break71_g158222.x , 0.0 , break71_g158222.y));
				half2 Overlay_Normal528_g158217 = (mul( ase_worldToTangent, appendResult72_g158222 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g158217 = Overlay_Normal528_g158217;
				#else
				float2 staticSwitch579_g158217 = Visual_NormalTS535_g158217;
				#endif
				float2 lerpResult551_g158217 = lerp( Visual_NormalTS535_g158217 , ( staticSwitch579_g158217 * _OverlayNormalValue ) , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g158217 = lerpResult551_g158217;
				#else
				float2 staticSwitch583_g158217 = Visual_NormalTS535_g158217;
				#endif
				half2 Final_NormalTS499_g158217 = staticSwitch583_g158217;
				float2 In_NormalTS3_g158220 = Final_NormalTS499_g158217;
				float3 In_NormalWS3_g158220 = temp_output_739_21_g158217;
				half4 Visual_Masks536_g158217 = Out_Shader4_g158218;
				float4 appendResult585_g158217 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g158217 = lerp( Visual_Masks536_g158217 , appendResult585_g158217 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g158217 = lerpResult584_g158217;
				#else
				float4 staticSwitch586_g158217 = Visual_Masks536_g158217;
				#endif
				half4 Final_Masks482_g158217 = staticSwitch586_g158217;
				float4 In_Shader3_g158220 = Final_Masks482_g158217;
				float4 In_Emissive3_g158220 = Out_Emissive4_g158218;
				float temp_output_739_12_g158217 = Out_Grayscale4_g158218;
				float In_Grayscale3_g158220 = temp_output_739_12_g158217;
				float In_Luminosity3_g158220 = temp_output_739_15_g158217;
				float In_MultiMask3_g158220 = Out_MultiMask4_g158218;
				float In_AlphaClip3_g158220 = Out_AlphaClip4_g158218;
				float In_AlphaFade3_g158220 = Out_AlphaFade4_g158218;
				float3 In_Translucency3_g158220 = Out_Translucency4_g158218;
				half Visual_Transmission699_g158217 = Out_Transmission4_g158218;
				float lerpResult746_g158217 = lerp( Visual_Transmission699_g158217 , ( Visual_Transmission699_g158217 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g158217 = lerpResult746_g158217;
				#else
				float staticSwitch703_g158217 = Visual_Transmission699_g158217;
				#endif
				half Final_Transmission702_g158217 = staticSwitch703_g158217;
				float In_Transmission3_g158220 = Final_Transmission702_g158217;
				float In_Thickness3_g158220 = Out_Thickness4_g158218;
				float In_Diffusion3_g158220 = Out_Diffusion4_g158218;
				{
				Data3_g158220.Dummy = In_Dummy3_g158220;
				Data3_g158220.Albedo = In_Albedo3_g158220;
				Data3_g158220.NormalTS = In_NormalTS3_g158220;
				Data3_g158220.NormalWS = In_NormalWS3_g158220;
				Data3_g158220.Shader = In_Shader3_g158220;
				Data3_g158220.Emissive= In_Emissive3_g158220;
				Data3_g158220.MultiMask = In_MultiMask3_g158220;
				Data3_g158220.Grayscale = In_Grayscale3_g158220;
				Data3_g158220.Luminosity = In_Luminosity3_g158220;
				Data3_g158220.AlphaClip = In_AlphaClip3_g158220;
				Data3_g158220.AlphaFade = In_AlphaFade3_g158220;
				Data3_g158220.Translucency = In_Translucency3_g158220;
				Data3_g158220.Transmission = In_Transmission3_g158220;
				Data3_g158220.Thickness = In_Thickness3_g158220;
				Data3_g158220.Diffusion = In_Diffusion3_g158220;
				}
				TVEVisualData Data4_g158255 = Data3_g158220;
				float Out_Dummy4_g158255 = 0;
				float3 Out_Albedo4_g158255 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158255 = float2( 0,0 );
				float3 Out_NormalWS4_g158255 = float3( 0,0,0 );
				float4 Out_Shader4_g158255 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158255 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158255 = 0;
				float Out_Grayscale4_g158255 = 0;
				float Out_Luminosity4_g158255 = 0;
				float Out_AlphaClip4_g158255 = 0;
				float Out_AlphaFade4_g158255 = 0;
				float3 Out_Translucency4_g158255 = float3( 0,0,0 );
				float Out_Transmission4_g158255 = 0;
				float Out_Thickness4_g158255 = 0;
				float Out_Diffusion4_g158255 = 0;
				{
				Out_Dummy4_g158255 = Data4_g158255.Dummy;
				Out_Albedo4_g158255 = Data4_g158255.Albedo;
				Out_NormalTS4_g158255 = Data4_g158255.NormalTS;
				Out_NormalWS4_g158255 = Data4_g158255.NormalWS;
				Out_Shader4_g158255 = Data4_g158255.Shader;
				Out_Emissive4_g158255= Data4_g158255.Emissive;
				Out_MultiMask4_g158255 = Data4_g158255.MultiMask;
				Out_Grayscale4_g158255 = Data4_g158255.Grayscale;
				Out_Luminosity4_g158255= Data4_g158255.Luminosity;
				Out_AlphaClip4_g158255 = Data4_g158255.AlphaClip;
				Out_AlphaFade4_g158255 = Data4_g158255.AlphaFade;
				Out_Translucency4_g158255 = Data4_g158255.Translucency;
				Out_Transmission4_g158255 = Data4_g158255.Transmission;
				Out_Thickness4_g158255 = Data4_g158255.Thickness;
				Out_Diffusion4_g158255 = Data4_g158255.Diffusion;
				}
				float3 temp_output_297_0_g158244 = Out_Albedo4_g158255;
				float3 In_Albedo3_g158256 = temp_output_297_0_g158244;
				float2 In_NormalTS3_g158256 = Out_NormalTS4_g158255;
				float3 In_NormalWS3_g158256 = Out_NormalWS4_g158255;
				float4 In_Shader3_g158256 = Out_Shader4_g158255;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g158244 = Out_Emissive4_g158255;
				TVEModelData Data15_g158245 = Data16_g158068;
				float Out_Dummy15_g158245 = 0;
				float3 Out_PositionOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158245 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158245 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158245 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158245 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158245 = float3( 0,0,0 );
				float4 Out_VertexData15_g158245 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158245 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158245 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158245 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158245 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158245 = Data15_g158245.Dummy;
				Out_PositionOS15_g158245 = Data15_g158245.PositionOS;
				Out_PositionWS15_g158245 = Data15_g158245.PositionWS;
				Out_PositionWO15_g158245 = Data15_g158245.PositionWO;
				Out_PositionRawOS15_g158245 = Data15_g158245.PositionRawOS;
				Out_PositionAddOS15_g158245 = Data15_g158245.PositionAddOS;
				Out_PivotOS15_g158245 = Data15_g158245.PivotOS;
				Out_PivotWS15_g158245 = Data15_g158245.PivotWS;
				Out_PivotWO15_g158245 = Data15_g158245.PivotWO;
				Out_NormalOS15_g158245 = Data15_g158245.NormalOS;
				Out_NormalWS15_g158245 = Data15_g158245.NormalWS;
				Out_NormalRawOS15_g158245 = Data15_g158245.NormalRawOS;
				Out_NormalRawWS15_g158245 = Data15_g158245.NormalRawWS;
				Out_TangentOS15_g158245 = Data15_g158245.TangentOS;
				Out_ViewDirWS15_g158245 = Data15_g158245.ViewDirWS;
				Out_VertexData15_g158245 = Data15_g158245.VertexData;
				Out_MotionData15_g158245 = Data15_g158245.MotionData;
				Out_BoundsData15_g158245 = Data15_g158245.BoundsData;
				Out_RotationData15_g158245 = Data15_g158245.RotationData;
				Out_FragmentData15_g158245 = Data15_g158245.FragmentData;
				}
				half4 Model_VertexMasks216_g158244 = Out_VertexData15_g158245;
				float4 break251_g158244 = Model_VertexMasks216_g158244;
				float4 break33_g158249 = _emissive_vert_mode;
				float temp_output_30_0_g158249 = ( break251_g158244.x * break33_g158249.x );
				float temp_output_29_0_g158249 = ( break251_g158244.y * break33_g158249.y );
				float temp_output_31_0_g158249 = ( break251_g158244.z * break33_g158249.z );
				float temp_output_28_0_g158249 = ( temp_output_30_0_g158249 + temp_output_29_0_g158249 + temp_output_31_0_g158249 + ( break251_g158244.w * break33_g158249.w ) );
				float clampResult17_g158248 = clamp( temp_output_28_0_g158249 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158252 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g158252 = ( _EmissiveMeshRemap.y - temp_output_7_0_g158252 );
				float lerpResult303_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158248 - temp_output_7_0_g158252 ) / ( temp_output_10_0_g158252 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g158258 = lerpResult303_g158244;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158258 = ( temp_output_6_0_g158258 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158258 = temp_output_6_0_g158258;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g158244 = staticSwitch14_g158258;
				#else
				float staticSwitch242_g158244 = 1.0;
				#endif
				half Emissive_MeshMask221_g158244 = staticSwitch242_g158244;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158247) = _EmissiveMaskTex;
				SamplerState Sampler276_g158247 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158253 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158253 = ( temp_output_6_0_g158253 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158253 = temp_output_6_0_g158253;
				#endif
				half4 Emissive_Coords167_g158244 = staticSwitch14_g158253;
				float4 temp_output_37_0_g158247 = Emissive_Coords167_g158244;
				half4 Coords276_g158247 = temp_output_37_0_g158247;
				half2 TexCoord276_g158247 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g158247 = SampleMain( Texture276_g158247 , Sampler276_g158247 , Coords276_g158247 , TexCoord276_g158247 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158247) = _EmissiveMaskTex;
				SamplerState Sampler275_g158247 = sampler_Linear_Repeat;
				half4 Coords275_g158247 = temp_output_37_0_g158247;
				float2 appendResult289_g158247 = (float2(IN.ase_texcoord5.z , IN.ase_texcoord5.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158247 = appendResult289_g158247;
				#else
				float2 staticSwitch288_g158247 = IN.ase_texcoord4.xy;
				#endif
				half2 TexCoord275_g158247 = staticSwitch288_g158247;
				half4 localSampleExtra275_g158247 = SampleExtra( Texture275_g158247 , Sampler275_g158247 , Coords275_g158247 , TexCoord275_g158247 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g158244 = localSampleExtra275_g158247;
				#else
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#endif
				half4 Emissive_MaskTex201_g158244 = staticSwitch176_g158244;
				float clampResult17_g158251 = clamp( (Emissive_MaskTex201_g158244).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g158250 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g158250 = ( _EmissiveMaskRemap.y - temp_output_7_0_g158250 );
				float lerpResult302_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158251 - temp_output_7_0_g158250 ) / ( temp_output_10_0_g158250 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g158244 = lerpResult302_g158244;
				#else
				float staticSwitch190_g158244 = 1.0;
				#endif
				half Emissive_Mask103_g158244 = staticSwitch190_g158244;
				float temp_output_279_0_g158244 = ( Emissive_MeshMask221_g158244 * Emissive_Mask103_g158244 );
				float3 appendResult293_g158244 = (float3(temp_output_279_0_g158244 , temp_output_279_0_g158244 , temp_output_279_0_g158244));
				half3 Local_EmissiveColor278_g158244 = appendResult293_g158244;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g158246 = Data204_g158069;
				float Out_Dummy15_g158246 = 0;
				float4 Out_CoatParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158246 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158246 = Data15_g158246.Dummy;
				Out_CoatParams15_g158246 = Data15_g158246.CoatParams;
				Out_PaintParams15_g158246 = Data15_g158246.PaintParams;
				Out_GlowParams15_g158246 = Data15_g158246.GlowParams;
				Out_AtmoParams15_g158246= Data15_g158246.AtmoParams;
				Out_FormParams15_g158246 = Data15_g158246.FormParams;
				Out_LandParams15_g158246 = Data15_g158246.LandParams;
				Out_WindParams15_g158246 = Data15_g158246.WindParams;
				Out_PushParams15_g158246 = Data15_g158246.PushParams;
				}
				half4 Global_GlowParams179_g158244 = Out_GlowParams15_g158246;
				float3 lerpResult299_g158244 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g158244).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g158244 = lerpResult299_g158244;
				#else
				float3 staticSwitch228_g158244 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g158244 = staticSwitch228_g158244;
				half3 Local_EmissiveValue88_g158244 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g158244 );
				half3 Emissive_Blend260_g158244 = ( ( (Visual_Emissive255_g158244).xyz * Local_EmissiveColor278_g158244 ) * Local_EmissiveValue88_g158244 );
				float3 temp_output_3_0_g158254 = Emissive_Blend260_g158244;
				float temp_output_15_0_g158254 = _emissive_power_value;
				float3 temp_output_23_0_g158254 = ( temp_output_3_0_g158254 * temp_output_15_0_g158254 );
				float4 appendResult295_g158244 = (float4(temp_output_23_0_g158254 , Emissive_Mask103_g158244));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g158244 = appendResult295_g158244;
				#else
				float4 staticSwitch129_g158244 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g158244 = staticSwitch129_g158244;
				float4 In_Emissive3_g158256 = Final_Emissive184_g158244;
				float In_Grayscale3_g158256 = Out_Grayscale4_g158255;
				float In_Luminosity3_g158256 = Out_Luminosity4_g158255;
				float temp_output_297_11_g158244 = Out_MultiMask4_g158255;
				float In_MultiMask3_g158256 = temp_output_297_11_g158244;
				float In_AlphaClip3_g158256 = Out_AlphaClip4_g158255;
				float In_AlphaFade3_g158256 = Out_AlphaFade4_g158255;
				float3 In_Translucency3_g158256 = Out_Translucency4_g158255;
				float In_Transmission3_g158256 = Out_Transmission4_g158255;
				float In_Thickness3_g158256 = Out_Thickness4_g158255;
				float In_Diffusion3_g158256 = Out_Diffusion4_g158255;
				{
				Data3_g158256.Dummy = In_Dummy3_g158256;
				Data3_g158256.Albedo = In_Albedo3_g158256;
				Data3_g158256.NormalTS = In_NormalTS3_g158256;
				Data3_g158256.NormalWS = In_NormalWS3_g158256;
				Data3_g158256.Shader = In_Shader3_g158256;
				Data3_g158256.Emissive= In_Emissive3_g158256;
				Data3_g158256.MultiMask = In_MultiMask3_g158256;
				Data3_g158256.Grayscale = In_Grayscale3_g158256;
				Data3_g158256.Luminosity = In_Luminosity3_g158256;
				Data3_g158256.AlphaClip = In_AlphaClip3_g158256;
				Data3_g158256.AlphaFade = In_AlphaFade3_g158256;
				Data3_g158256.Translucency = In_Translucency3_g158256;
				Data3_g158256.Transmission = In_Transmission3_g158256;
				Data3_g158256.Thickness = In_Thickness3_g158256;
				Data3_g158256.Diffusion = In_Diffusion3_g158256;
				}
				TVEVisualData Data4_g158262 = Data3_g158256;
				float Out_Dummy4_g158262 = 0;
				float3 Out_Albedo4_g158262 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158262 = float2( 0,0 );
				float3 Out_NormalWS4_g158262 = float3( 0,0,0 );
				float4 Out_Shader4_g158262 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158262 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158262 = 0;
				float Out_Grayscale4_g158262 = 0;
				float Out_Luminosity4_g158262 = 0;
				float Out_AlphaClip4_g158262 = 0;
				float Out_AlphaFade4_g158262 = 0;
				float3 Out_Translucency4_g158262 = float3( 0,0,0 );
				float Out_Transmission4_g158262 = 0;
				float Out_Thickness4_g158262 = 0;
				float Out_Diffusion4_g158262 = 0;
				{
				Out_Dummy4_g158262 = Data4_g158262.Dummy;
				Out_Albedo4_g158262 = Data4_g158262.Albedo;
				Out_NormalTS4_g158262 = Data4_g158262.NormalTS;
				Out_NormalWS4_g158262 = Data4_g158262.NormalWS;
				Out_Shader4_g158262 = Data4_g158262.Shader;
				Out_Emissive4_g158262= Data4_g158262.Emissive;
				Out_MultiMask4_g158262 = Data4_g158262.MultiMask;
				Out_Grayscale4_g158262 = Data4_g158262.Grayscale;
				Out_Luminosity4_g158262= Data4_g158262.Luminosity;
				Out_AlphaClip4_g158262 = Data4_g158262.AlphaClip;
				Out_AlphaFade4_g158262 = Data4_g158262.AlphaFade;
				Out_Translucency4_g158262 = Data4_g158262.Translucency;
				Out_Transmission4_g158262 = Data4_g158262.Transmission;
				Out_Thickness4_g158262 = Data4_g158262.Thickness;
				Out_Diffusion4_g158262 = Data4_g158262.Diffusion;
				}
				half3 Visual_Albedo199_g158261 = Out_Albedo4_g158262;
				half3 Final_Albedo312_g158261 = Visual_Albedo199_g158261;
				float3 In_Albedo3_g158263 = Final_Albedo312_g158261;
				float2 In_NormalTS3_g158263 = Out_NormalTS4_g158262;
				float3 In_NormalWS3_g158263 = Out_NormalWS4_g158262;
				float4 In_Shader3_g158263 = Out_Shader4_g158262;
				float4 In_Emissive3_g158263 = Out_Emissive4_g158262;
				float In_Grayscale3_g158263 = Out_Grayscale4_g158262;
				float In_Luminosity3_g158263 = Out_Luminosity4_g158262;
				float temp_output_301_11_g158261 = Out_MultiMask4_g158262;
				float In_MultiMask3_g158263 = temp_output_301_11_g158261;
				float In_AlphaClip3_g158263 = Out_AlphaClip4_g158262;
				float In_AlphaFade3_g158263 = Out_AlphaFade4_g158262;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g158261 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g158261 );
				half Visual_Transmission138_g158261 = Out_Transmission4_g158262;
				half Subsurface_Value268_g158261 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g158265 = Data204_g158069;
				float Out_Dummy15_g158265 = 0;
				float4 Out_CoatParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158265 = Data15_g158265.Dummy;
				Out_CoatParams15_g158265 = Data15_g158265.CoatParams;
				Out_PaintParams15_g158265 = Data15_g158265.PaintParams;
				Out_GlowParams15_g158265 = Data15_g158265.GlowParams;
				Out_AtmoParams15_g158265= Data15_g158265.AtmoParams;
				Out_FormParams15_g158265 = Data15_g158265.FormParams;
				Out_LandParams15_g158265 = Data15_g158265.LandParams;
				Out_WindParams15_g158265 = Data15_g158265.WindParams;
				Out_PushParams15_g158265 = Data15_g158265.PushParams;
				}
				half4 Global_GlowParams373_g158261 = Out_GlowParams15_g158265;
				float lerpResult403_g158261 = lerp( 1.0 , saturate( (Global_GlowParams373_g158261).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g158261 = lerpResult403_g158261;
				#else
				float staticSwitch367_g158261 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g158261 = staticSwitch367_g158261;
				half Visual_MultiMask292_g158261 = temp_output_301_11_g158261;
				float lerpResult293_g158261 = lerp( 1.0 , Visual_MultiMask292_g158261 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g158261 = lerpResult293_g158261;
				half Custom_Mask363_g158261 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g158261 = ( Visual_Transmission138_g158261 * Subsurface_Value268_g158261 * Subsurface_GlobalMask369_g158261 * Subsurface_MultiMask296_g158261 * Custom_Mask363_g158261 );
				#else
				float staticSwitch345_g158261 = 0.0;
				#endif
				half Final_Transmission269_g158261 = staticSwitch345_g158261;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g158261 = ( Subsurface_Color264_g158261 * Final_Transmission269_g158261 * 10.0 );
				#else
				float3 staticSwitch348_g158261 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g158261 = staticSwitch348_g158261;
				float3 In_Translucency3_g158263 = Final_Translucency254_g158261;
				float In_Transmission3_g158263 = Final_Transmission269_g158261;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g158261 = 0.0;
				#else
				float staticSwitch351_g158261 = 1.0;
				#endif
				half Final_Thickness275_g158261 = staticSwitch351_g158261;
				float In_Thickness3_g158263 = Final_Thickness275_g158261;
				float Final_Diffusion340_g158261 = _SubsurfaceDiffusion;
				float In_Diffusion3_g158263 = Final_Diffusion340_g158261;
				{
				Data3_g158263.Dummy = In_Dummy3_g158263;
				Data3_g158263.Albedo = In_Albedo3_g158263;
				Data3_g158263.NormalTS = In_NormalTS3_g158263;
				Data3_g158263.NormalWS = In_NormalWS3_g158263;
				Data3_g158263.Shader = In_Shader3_g158263;
				Data3_g158263.Emissive= In_Emissive3_g158263;
				Data3_g158263.MultiMask = In_MultiMask3_g158263;
				Data3_g158263.Grayscale = In_Grayscale3_g158263;
				Data3_g158263.Luminosity = In_Luminosity3_g158263;
				Data3_g158263.AlphaClip = In_AlphaClip3_g158263;
				Data3_g158263.AlphaFade = In_AlphaFade3_g158263;
				Data3_g158263.Translucency = In_Translucency3_g158263;
				Data3_g158263.Transmission = In_Transmission3_g158263;
				Data3_g158263.Thickness = In_Thickness3_g158263;
				Data3_g158263.Diffusion = In_Diffusion3_g158263;
				}
				TVEVisualData Data4_g158294 = Data3_g158263;
				float Out_Dummy4_g158294 = 0;
				float3 Out_Albedo4_g158294 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158294 = float2( 0,0 );
				float3 Out_NormalWS4_g158294 = float3( 0,0,0 );
				float4 Out_Shader4_g158294 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158294 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158294 = 0;
				float Out_Grayscale4_g158294 = 0;
				float Out_Luminosity4_g158294 = 0;
				float Out_AlphaClip4_g158294 = 0;
				float Out_AlphaFade4_g158294 = 0;
				float3 Out_Translucency4_g158294 = float3( 0,0,0 );
				float Out_Transmission4_g158294 = 0;
				float Out_Thickness4_g158294 = 0;
				float Out_Diffusion4_g158294 = 0;
				{
				Out_Dummy4_g158294 = Data4_g158294.Dummy;
				Out_Albedo4_g158294 = Data4_g158294.Albedo;
				Out_NormalTS4_g158294 = Data4_g158294.NormalTS;
				Out_NormalWS4_g158294 = Data4_g158294.NormalWS;
				Out_Shader4_g158294 = Data4_g158294.Shader;
				Out_Emissive4_g158294= Data4_g158294.Emissive;
				Out_MultiMask4_g158294 = Data4_g158294.MultiMask;
				Out_Grayscale4_g158294 = Data4_g158294.Grayscale;
				Out_Luminosity4_g158294= Data4_g158294.Luminosity;
				Out_AlphaClip4_g158294 = Data4_g158294.AlphaClip;
				Out_AlphaFade4_g158294 = Data4_g158294.AlphaFade;
				Out_Translucency4_g158294 = Data4_g158294.Translucency;
				Out_Transmission4_g158294 = Data4_g158294.Transmission;
				Out_Thickness4_g158294 = Data4_g158294.Thickness;
				Out_Diffusion4_g158294 = Data4_g158294.Diffusion;
				}
				half3 Input_Albedo24_g158293 = Out_Albedo4_g158294;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g158293 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g158293 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g158293 = staticSwitch22_g158293;
				float4 break24_g158288 = Out_Shader4_g158294;
				half Metallic95_g158288 = break24_g158288.x;
				half Input_Metallic25_g158293 = Metallic95_g158288;
				half OneMinusReflectivity31_g158293 = ( (ColorSpaceDielectricSpec23_g158293).w - ( (ColorSpaceDielectricSpec23_g158293).w * Input_Metallic25_g158293 ) );
				
				float localCustomAlphaClip19_g158295 = ( 0.0 );
				float temp_output_3_0_g158295 = Out_AlphaClip4_g158294;
				float Alpha19_g158295 = temp_output_3_0_g158295;
				float temp_output_15_0_g158295 = 0.0;
				float Treshold19_g158295 = temp_output_15_0_g158295;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#else
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g158293 * OneMinusReflectivity31_g158293 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g158294).xyz;
				o.Alpha = saturate( ( Alpha19_g158295 * Out_AlphaFade4_g158294 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_NORMAL
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_VERT TVE_MOTION_SMALL_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_VERT TVE_MOTION_TINY_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_VERT TVE_MOTION_BASE_PROC
			#pragma shader_feature_local_vertex TVE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_PROJ
			#pragma shader_feature_local_fragment TVE_SECOND_VERT
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_VERT
			#pragma shader_feature_local_fragment TVE_THIRD_PROJ
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_PROJ
			#pragma shader_feature_local_fragment TVE_OVERLAY_VERT
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_VERT
			#pragma shader_feature_local_fragment TVE_EMISSIVE_MASK
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
				float4 FragmentData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float3 ase_normal : NORMAL;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_tangent : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoring;
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceHDRPInfo;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderQueue;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderPriority;
			uniform half _RenderSSR;
			uniform half _RenderDecals;
			uniform half _RenderClip;
			uniform half _RenderBakeGI;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			uniform half TVE_IsEnabled;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			uniform half4 TVE_TimeParams;
			uniform half _MotionSpeedValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionNoiseValue;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half4 _WetnessWaterColor;
			uniform half4 _WetnessWaterBaseRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _WetnessDropsProjRemap;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MessageMainMask;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThitdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThitdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMultiValue;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half3 _motion_highlight_color;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = v.vertex.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g152464 = ase_worldPos;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float4x4 break19_g152466 = unity_ObjectToWorld;
				float3 appendResult20_g152466 = (float3(break19_g152466[ 0 ][ 3 ] , break19_g152466[ 1 ][ 3 ] , break19_g152466[ 2 ][ 3 ]));
				half3 ObjectData20_g152468 = appendResult20_g152466;
				half3 WorldData19_g152468 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152468 = WorldData19_g152468;
				#else
				float3 staticSwitch14_g152468 = ObjectData20_g152468;
				#endif
				float3 temp_output_124_0_g152466 = staticSwitch14_g152468;
				float3 temp_output_239_7_g152464 = temp_output_124_0_g152466;
				float4x4 break19_g152470 = unity_ObjectToWorld;
				float3 appendResult20_g152470 = (float3(break19_g152470[ 0 ][ 3 ] , break19_g152470[ 1 ][ 3 ] , break19_g152470[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 temp_output_122_0_g152470 = PivotOS149_g152464;
				float3 PivotsOnly105_g152470 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g152470 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g152472 = ( appendResult20_g152470 + PivotsOnly105_g152470 );
				half3 WorldData19_g152472 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g152472 = WorldData19_g152472;
				#else
				float3 staticSwitch14_g152472 = ObjectData20_g152472;
				#endif
				float3 temp_output_124_0_g152470 = staticSwitch14_g152472;
				float3 temp_output_237_7_g152464 = temp_output_124_0_g152470;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g152464 = temp_output_237_7_g152464;
				#else
				float3 staticSwitch236_g152464 = temp_output_239_7_g152464;
				#endif
				float3 vertexToFrag76_g152464 = staticSwitch236_g152464;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = v.normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = v.tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = v.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( v.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( v.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( v.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( v.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ), 0.0 );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_17 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158291 = Data16_g158068;
				float Out_Dummy15_g158291 = 0;
				float3 Out_PositionOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158291 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158291 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158291 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158291 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158291 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158291 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158291 = float3( 0,0,0 );
				float4 Out_VertexData15_g158291 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158291 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158291 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158291 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158291 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158291 = Data15_g158291.Dummy;
				Out_PositionOS15_g158291 = Data15_g158291.PositionOS;
				Out_PositionWS15_g158291 = Data15_g158291.PositionWS;
				Out_PositionWO15_g158291 = Data15_g158291.PositionWO;
				Out_PositionRawOS15_g158291 = Data15_g158291.PositionRawOS;
				Out_PositionAddOS15_g158291 = Data15_g158291.PositionAddOS;
				Out_PivotOS15_g158291 = Data15_g158291.PivotOS;
				Out_PivotWS15_g158291 = Data15_g158291.PivotWS;
				Out_PivotWO15_g158291 = Data15_g158291.PivotWO;
				Out_NormalOS15_g158291 = Data15_g158291.NormalOS;
				Out_NormalWS15_g158291 = Data15_g158291.NormalWS;
				Out_NormalRawOS15_g158291 = Data15_g158291.NormalRawOS;
				Out_NormalRawWS15_g158291 = Data15_g158291.NormalRawWS;
				Out_TangentOS15_g158291 = Data15_g158291.TangentOS;
				Out_ViewDirWS15_g158291 = Data15_g158291.ViewDirWS;
				Out_VertexData15_g158291 = Data15_g158291.VertexData;
				Out_MotionData15_g158291 = Data15_g158291.MotionData;
				Out_BoundsData15_g158291 = Data15_g158291.BoundsData;
				Out_RotationData15_g158291 = Data15_g158291.RotationData;
				Out_FragmentData15_g158291 = Data15_g158291.FragmentData;
				}
				float3 temp_output_31_0_g158288 = Out_PositionOS15_g158291;
				
				float4 temp_output_6_0_g158303 = Out_TangentOS15_g158291;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue + _WetnessWaterColor + _WetnessWaterBaseRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue + _WetnessDropsProjRemap ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158303 = ( temp_output_6_0_g158303 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158303 = temp_output_6_0_g158303;
				#endif
				
				o.ase_texcoord6.xyz = vertexToFrag73_g152464;
				o.ase_texcoord7.xyz = vertexToFrag76_g152464;
				o.ase_texcoord9.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord10.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord11.xyz = ase_worldBitangent;
				TVEModelData Data15_g158215 = Data16_g158068;
				float Out_Dummy15_g158215 = 0;
				float3 Out_PositionOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158215 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158215 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158215 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158215 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158215 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158215 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158215 = float3( 0,0,0 );
				float4 Out_VertexData15_g158215 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158215 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158215 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158215 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158215 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158215 = Data15_g158215.Dummy;
				Out_PositionOS15_g158215 = Data15_g158215.PositionOS;
				Out_PositionWS15_g158215 = Data15_g158215.PositionWS;
				Out_PositionWO15_g158215 = Data15_g158215.PositionWO;
				Out_PositionRawOS15_g158215 = Data15_g158215.PositionRawOS;
				Out_PositionAddOS15_g158215 = Data15_g158215.PositionAddOS;
				Out_PivotOS15_g158215 = Data15_g158215.PivotOS;
				Out_PivotWS15_g158215 = Data15_g158215.PivotWS;
				Out_PivotWO15_g158215 = Data15_g158215.PivotWO;
				Out_NormalOS15_g158215 = Data15_g158215.NormalOS;
				Out_NormalWS15_g158215 = Data15_g158215.NormalWS;
				Out_NormalRawOS15_g158215 = Data15_g158215.NormalRawOS;
				Out_NormalRawWS15_g158215 = Data15_g158215.NormalRawWS;
				Out_TangentOS15_g158215 = Data15_g158215.TangentOS;
				Out_ViewDirWS15_g158215 = Data15_g158215.ViewDirWS;
				Out_VertexData15_g158215 = Data15_g158215.VertexData;
				Out_MotionData15_g158215 = Data15_g158215.MotionData;
				Out_BoundsData15_g158215 = Data15_g158215.BoundsData;
				Out_RotationData15_g158215 = Data15_g158215.RotationData;
				Out_FragmentData15_g158215 = Data15_g158215.FragmentData;
				}
				half4 Model_FragmentData196_g158213 = Out_FragmentData15_g158215;
				float vertexToFrag203_g158213 = (Model_FragmentData196_g158213).w;
				o.ase_texcoord3.z = vertexToFrag203_g158213;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_texcoord4 = v.texcoord1.xyzw;
				o.ase_texcoord5 = v.vertex;
				o.ase_texcoord8 = v.ase_texcoord3;
				o.ase_normal = v.normal;
				o.ase_tangent = v.tangent;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord10.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g158288 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g158291;
				v.tangent = staticSwitch14_g158303;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g158295 = ( 0.0 );
				float localBreakData4_g158294 = ( 0.0 );
				float localCompData3_g158263 = ( 0.0 );
				TVEVisualData Data3_g158263 = (TVEVisualData)0;
				half Dummy145_g158261 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g158263 = Dummy145_g158261;
				float localBreakData4_g158262 = ( 0.0 );
				float localCompData3_g158256 = ( 0.0 );
				TVEVisualData Data3_g158256 = (TVEVisualData)0;
				half Dummy145_g158244 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g158256 = Dummy145_g158244;
				float localBreakData4_g158255 = ( 0.0 );
				float localCompData3_g158220 = ( 0.0 );
				TVEVisualData Data3_g158220 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord2.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g158217 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g158220 = Dummy594_g158217.r;
				float localBreakData4_g158218 = ( 0.0 );
				float localCompData3_g158216 = ( 0.0 );
				TVEVisualData Data3_g158216 = (TVEVisualData)0;
				float In_Dummy3_g158216 = 0.0;
				float localBreakData4_g158214 = ( 0.0 );
				float localCompData3_g158207 = ( 0.0 );
				TVEVisualData Data3_g158207 = (TVEVisualData)0;
				half Dummy220_g158203 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g158207 = Dummy220_g158203;
				float localBreakData4_g158206 = ( 0.0 );
				float localCompData3_g158195 = ( 0.0 );
				TVEVisualData Data3_g158195 = (TVEVisualData)0;
				half Dummy202_g158193 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g158195 = Dummy202_g158193;
				float localBreakData4_g158194 = ( 0.0 );
				float localCompData3_g158182 = ( 0.0 );
				TVEVisualData Data3_g158182 = (TVEVisualData)0;
				half4 Dummy944_g158164 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g158182 = Dummy944_g158164.x;
				float localBreakData4_g158181 = ( 0.0 );
				float localCompData3_g158145 = ( 0.0 );
				TVEVisualData Data3_g158145 = (TVEVisualData)0;
				half4 Dummy946_g158134 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g158145 = Dummy946_g158134.x;
				float localBreakData4_g158148 = ( 0.0 );
				float localCompData3_g158130 = ( 0.0 );
				TVEVisualData Data3_g158130 = (TVEVisualData)0;
				half4 Dummy130_g158120 = ( _MainCategory + _MainEnd + _MessageMainMask + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g158130 = Dummy130_g158120.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158131) = _MainAlbedoTex;
				SamplerState Sampler276_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Local_Coords180_g158120 = _main_coord_value;
				float4 temp_output_37_0_g158131 = Local_Coords180_g158120;
				half4 Coords276_g158131 = temp_output_37_0_g158131;
				half2 TexCoord276_g158131 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158131 = SampleMain( Texture276_g158131 , Sampler276_g158131 , Coords276_g158131 , TexCoord276_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158131) = _MainAlbedoTex;
				SamplerState Sampler275_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158131 = temp_output_37_0_g158131;
				float2 appendResult289_g158131 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158131 = appendResult289_g158131;
				#else
				float2 staticSwitch288_g158131 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158131 = staticSwitch288_g158131;
				half4 localSampleExtra275_g158131 = SampleExtra( Texture275_g158131 , Sampler275_g158131 , Coords275_g158131 , TexCoord275_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158131) = _MainAlbedoTex;
				SamplerState Sampler238_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158131 = temp_output_37_0_g158131;
				TVEModelData Data16_g158068 = (TVEModelData)0;
				float In_Dummy16_g158068 = 0.0;
				TVEModelData Data16_g158062 = (TVEModelData)0;
				half Dummy1575_g158060 = ( _NormalCategory + _NormalEnd );
				float In_Dummy16_g158062 = Dummy1575_g158060;
				TVEModelData Data16_g158055 = (TVEModelData)0;
				float In_Dummy16_g158055 = 0.0;
				TVEModelData Data16_g158016 = (TVEModelData)0;
				half4 Dummy181_g158005 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g158016 = Dummy181_g158005.r;
				TVEModelData Data16_g152480 = (TVEModelData)0;
				float In_Dummy16_g152480 = 0.0;
				TVEModelData Data16_g152478 = (TVEModelData)0;
				half Dummy207_g152464 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g152478 = Dummy207_g152464;
				half3 PositionOS131_g152464 = IN.ase_texcoord5.xyz;
				float3 In_PositionOS16_g152478 = PositionOS131_g152464;
				float3 vertexToFrag73_g152464 = IN.ase_texcoord6.xyz;
				half3 PositionWS122_g152464 = vertexToFrag73_g152464;
				float3 In_PositionWS16_g152478 = PositionWS122_g152464;
				float3 vertexToFrag76_g152464 = IN.ase_texcoord7.xyz;
				half3 PivotWS121_g152464 = vertexToFrag76_g152464;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g152464 = ( PositionWS122_g152464 - PivotWS121_g152464 );
				#else
				float3 staticSwitch204_g152464 = PositionWS122_g152464;
				#endif
				half3 PositionWO132_g152464 = ( staticSwitch204_g152464 - TVE_WorldOrigin );
				float3 In_PositionWO16_g152478 = PositionWO132_g152464;
				float3 In_PositionRawOS16_g152478 = PositionOS131_g152464;
				float3 In_PositionAddOS16_g152478 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g152474 = (float3(IN.ase_texcoord8.x , 0.0 , IN.ase_texcoord8.y));
				float3 break233_g152464 = PositionOS131_g152464;
				float3 appendResult234_g152464 = (float3(break233_g152464.x , 0.0 , break233_g152464.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g152464 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g152464 = appendResult60_g152474;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g152464 = appendResult234_g152464;
				#else
				float3 staticSwitch229_g152464 = _Vector0;
				#endif
				half3 PivotOS149_g152464 = staticSwitch229_g152464;
				float3 In_PivotOS16_g152478 = PivotOS149_g152464;
				float3 In_PivotWS16_g152478 = PivotWS121_g152464;
				half3 PivotWO133_g152464 = ( PivotWS121_g152464 - TVE_WorldOrigin );
				float3 In_PivotWO16_g152478 = PivotWO133_g152464;
				half3 NormalOS134_g152464 = IN.ase_normal;
				float3 In_NormalOS16_g152478 = NormalOS134_g152464;
				float3 ase_worldNormal = IN.ase_texcoord9.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g152464 = normalizedWorldNormal;
				float3 In_NormalWS16_g152478 = Normal_WS95_g152464;
				float3 In_NormalRawOS16_g152478 = NormalOS134_g152464;
				float3 objToWorldDir298_g152464 = normalize( mul( unity_ObjectToWorld, float4( IN.ase_normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g152464 = objToWorldDir298_g152464;
				float3 In_NormalRawWS16_g152478 = Normal_RawWS136_g152464;
				half4 TangentlOS153_g152464 = IN.ase_tangent;
				float4 In_TangentOS16_g152478 = TangentlOS153_g152464;
				float3 normalizeResult296_g152464 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g152464 ) );
				half3 ViewDirWS169_g152464 = normalizeResult296_g152464;
				float3 In_ViewDirWS16_g152478 = ViewDirWS169_g152464;
				half4 VertexMasks171_g152464 = IN.ase_color;
				float4 In_VertexData16_g152478 = VertexMasks171_g152464;
				float4 break33_g152477 = _object_phase_mode;
				float temp_output_30_0_g152477 = ( IN.ase_color.r * break33_g152477.x );
				float temp_output_29_0_g152477 = ( IN.ase_color.g * break33_g152477.y );
				float temp_output_31_0_g152477 = ( IN.ase_color.b * break33_g152477.z );
				float temp_output_28_0_g152477 = ( temp_output_30_0_g152477 + temp_output_29_0_g152477 + temp_output_31_0_g152477 + ( IN.ase_color.a * break33_g152477.w ) );
				float3 break243_g152464 = PivotWO133_g152464;
				float4 appendResult177_g152464 = (float4(1.0 , 1.0 , ( frac( ( temp_output_28_0_g152477 + ( break243_g152464.x + break243_g152464.z ) ) ) * 4.0 ) , 1.0));
				half4 MotionMasks176_g152464 = appendResult177_g152464;
				float4 In_MotionData16_g152478 = MotionMasks176_g152464;
				half Object_HeightValue267_g152464 = _ObjectHeightValue;
				half Object_RadiusValue268_g152464 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g152464 = saturate( ( (PositionOS131_g152464).y / Object_HeightValue267_g152464 ) );
				half Bounds_SphereMask282_g152464 = saturate( ( length( PositionOS131_g152464 ) / max( Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 ) ) );
				float4 appendResult253_g152464 = (float4(Object_HeightValue267_g152464 , Object_RadiusValue268_g152464 , Bounds_HeightMask274_g152464 , Bounds_SphereMask282_g152464));
				half4 BoundsData254_g152464 = appendResult253_g152464;
				float4 In_BoundsData16_g152478 = BoundsData254_g152464;
				float4 In_RotationData16_g152478 = float4( 0,0,0,0 );
				float4 In_FragmentData16_g152478 = float4( 0,0,0,0 );
				{
				Data16_g152478.Dummy = In_Dummy16_g152478;
				Data16_g152478.PositionOS = In_PositionOS16_g152478;
				Data16_g152478.PositionWS = In_PositionWS16_g152478;
				Data16_g152478.PositionWO = In_PositionWO16_g152478;
				Data16_g152478.PositionRawOS = In_PositionRawOS16_g152478;
				Data16_g152478.PositionAddOS = In_PositionAddOS16_g152478;
				Data16_g152478.PivotOS = In_PivotOS16_g152478;
				Data16_g152478.PivotWS = In_PivotWS16_g152478;
				Data16_g152478.PivotWO = In_PivotWO16_g152478;
				Data16_g152478.NormalOS = In_NormalOS16_g152478;
				Data16_g152478.NormalWS = In_NormalWS16_g152478;
				Data16_g152478.NormalRawOS = In_NormalRawOS16_g152478;
				Data16_g152478.NormalRawWS = In_NormalRawWS16_g152478;
				Data16_g152478.TangentOS = In_TangentOS16_g152478;
				Data16_g152478.ViewDirWS = In_ViewDirWS16_g152478;
				Data16_g152478.VertexData = In_VertexData16_g152478;
				Data16_g152478.MotionData = In_MotionData16_g152478;
				Data16_g152478.BoundsData = In_BoundsData16_g152478;
				Data16_g152478.RotationData = In_RotationData16_g152478;
				Data16_g152478.FragmentData = In_FragmentData16_g152478;
				}
				TVEModelData Data15_g152481 = Data16_g152478;
				float Out_Dummy15_g152481 = 0;
				float3 Out_PositionOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionWO15_g152481 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotOS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWS15_g152481 = float3( 0,0,0 );
				float3 Out_PivotWO15_g152481 = float3( 0,0,0 );
				float3 Out_NormalOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalWS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g152481 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g152481 = float3( 0,0,0 );
				float4 Out_TangentOS15_g152481 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g152481 = float3( 0,0,0 );
				float4 Out_VertexData15_g152481 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g152481 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g152481 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g152481 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g152481 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g152481 = Data15_g152481.Dummy;
				Out_PositionOS15_g152481 = Data15_g152481.PositionOS;
				Out_PositionWS15_g152481 = Data15_g152481.PositionWS;
				Out_PositionWO15_g152481 = Data15_g152481.PositionWO;
				Out_PositionRawOS15_g152481 = Data15_g152481.PositionRawOS;
				Out_PositionAddOS15_g152481 = Data15_g152481.PositionAddOS;
				Out_PivotOS15_g152481 = Data15_g152481.PivotOS;
				Out_PivotWS15_g152481 = Data15_g152481.PivotWS;
				Out_PivotWO15_g152481 = Data15_g152481.PivotWO;
				Out_NormalOS15_g152481 = Data15_g152481.NormalOS;
				Out_NormalWS15_g152481 = Data15_g152481.NormalWS;
				Out_NormalRawOS15_g152481 = Data15_g152481.NormalRawOS;
				Out_NormalRawWS15_g152481 = Data15_g152481.NormalRawWS;
				Out_TangentOS15_g152481 = Data15_g152481.TangentOS;
				Out_ViewDirWS15_g152481 = Data15_g152481.ViewDirWS;
				Out_VertexData15_g152481 = Data15_g152481.VertexData;
				Out_MotionData15_g152481 = Data15_g152481.MotionData;
				Out_BoundsData15_g152481 = Data15_g152481.BoundsData;
				Out_RotationData15_g152481 = Data15_g152481.RotationData;
				Out_FragmentData15_g152481 = Data15_g152481.FragmentData;
				}
				float3 temp_output_218_24_g152479 = Out_PivotOS15_g152481;
				float3 In_PositionOS16_g152480 = ( Out_PositionOS15_g152481 - temp_output_218_24_g152479 );
				float3 In_PositionWS16_g152480 = Out_PositionWS15_g152481;
				float3 In_PositionWO16_g152480 = Out_PositionWO15_g152481;
				float3 In_PositionRawOS16_g152480 = Out_PositionRawOS15_g152481;
				float3 In_PositionAddOS16_g152480 = Out_PositionAddOS15_g152481;
				float3 In_PivotOS16_g152480 = temp_output_218_24_g152479;
				float3 In_PivotWS16_g152480 = Out_PivotWS15_g152481;
				float3 In_PivotWO16_g152480 = Out_PivotWO15_g152481;
				float3 In_NormalOS16_g152480 = Out_NormalOS15_g152481;
				float3 In_NormalWS16_g152480 = Out_NormalWS15_g152481;
				float3 In_NormalRawOS16_g152480 = Out_NormalRawOS15_g152481;
				float3 In_NormalRawWS16_g152480 = Out_NormalRawWS15_g152481;
				float4 In_TangentOS16_g152480 = Out_TangentOS15_g152481;
				float3 In_ViewDirWS16_g152480 = Out_ViewDirWS15_g152481;
				float4 In_VertexData16_g152480 = Out_VertexData15_g152481;
				float4 In_MotionData16_g152480 = Out_MotionData15_g152481;
				float4 In_BoundsData16_g152480 = Out_BoundsData15_g152481;
				float4 In_RotationData16_g152480 = Out_RotationData15_g152481;
				float4 In_FragmentData16_g152480 = Out_FragmentData15_g152481;
				{
				Data16_g152480.Dummy = In_Dummy16_g152480;
				Data16_g152480.PositionOS = In_PositionOS16_g152480;
				Data16_g152480.PositionWS = In_PositionWS16_g152480;
				Data16_g152480.PositionWO = In_PositionWO16_g152480;
				Data16_g152480.PositionRawOS = In_PositionRawOS16_g152480;
				Data16_g152480.PositionAddOS = In_PositionAddOS16_g152480;
				Data16_g152480.PivotOS = In_PivotOS16_g152480;
				Data16_g152480.PivotWS = In_PivotWS16_g152480;
				Data16_g152480.PivotWO = In_PivotWO16_g152480;
				Data16_g152480.NormalOS = In_NormalOS16_g152480;
				Data16_g152480.NormalWS = In_NormalWS16_g152480;
				Data16_g152480.NormalRawOS = In_NormalRawOS16_g152480;
				Data16_g152480.NormalRawWS = In_NormalRawWS16_g152480;
				Data16_g152480.TangentOS = In_TangentOS16_g152480;
				Data16_g152480.ViewDirWS = In_ViewDirWS16_g152480;
				Data16_g152480.VertexData = In_VertexData16_g152480;
				Data16_g152480.MotionData = In_MotionData16_g152480;
				Data16_g152480.BoundsData = In_BoundsData16_g152480;
				Data16_g152480.RotationData = In_RotationData16_g152480;
				Data16_g152480.FragmentData = In_FragmentData16_g152480;
				}
				TVEModelData Data15_g158008 = Data16_g152480;
				float Out_Dummy15_g158008 = 0;
				float3 Out_PositionOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158008 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158008 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158008 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158008 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158008 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158008 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158008 = float3( 0,0,0 );
				float4 Out_VertexData15_g158008 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158008 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158008 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158008 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158008 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158008 = Data15_g158008.Dummy;
				Out_PositionOS15_g158008 = Data15_g158008.PositionOS;
				Out_PositionWS15_g158008 = Data15_g158008.PositionWS;
				Out_PositionWO15_g158008 = Data15_g158008.PositionWO;
				Out_PositionRawOS15_g158008 = Data15_g158008.PositionRawOS;
				Out_PositionAddOS15_g158008 = Data15_g158008.PositionAddOS;
				Out_PivotOS15_g158008 = Data15_g158008.PivotOS;
				Out_PivotWS15_g158008 = Data15_g158008.PivotWS;
				Out_PivotWO15_g158008 = Data15_g158008.PivotWO;
				Out_NormalOS15_g158008 = Data15_g158008.NormalOS;
				Out_NormalWS15_g158008 = Data15_g158008.NormalWS;
				Out_NormalRawOS15_g158008 = Data15_g158008.NormalRawOS;
				Out_NormalRawWS15_g158008 = Data15_g158008.NormalRawWS;
				Out_TangentOS15_g158008 = Data15_g158008.TangentOS;
				Out_ViewDirWS15_g158008 = Data15_g158008.ViewDirWS;
				Out_VertexData15_g158008 = Data15_g158008.VertexData;
				Out_MotionData15_g158008 = Data15_g158008.MotionData;
				Out_BoundsData15_g158008 = Data15_g158008.BoundsData;
				Out_RotationData15_g158008 = Data15_g158008.RotationData;
				Out_FragmentData15_g158008 = Data15_g158008.FragmentData;
				}
				float3 temp_output_1567_0_g158005 = Out_PositionOS15_g158008;
				float3 In_PositionOS16_g158016 = temp_output_1567_0_g158005;
				float3 temp_output_1567_16_g158005 = Out_PositionWS15_g158008;
				float3 In_PositionWS16_g158016 = temp_output_1567_16_g158005;
				float3 temp_output_1567_17_g158005 = Out_PositionWO15_g158008;
				float3 In_PositionWO16_g158016 = temp_output_1567_17_g158005;
				float3 In_PositionRawOS16_g158016 = Out_PositionRawOS15_g158008;
				float3 temp_cast_7 = (0.0).xxx;
				float4 temp_output_1567_29_g158005 = Out_VertexData15_g158008;
				half4 Model_VertexMasks518_g158005 = temp_output_1567_29_g158005;
				float4 break1689_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158013 = _motion_small_vert_mode;
				float temp_output_30_0_g158013 = ( break1689_g158005.x * break33_g158013.x );
				float temp_output_29_0_g158013 = ( break1689_g158005.y * break33_g158013.y );
				float temp_output_31_0_g158013 = ( break1689_g158005.z * break33_g158013.z );
				float temp_output_28_0_g158013 = ( temp_output_30_0_g158013 + temp_output_29_0_g158013 + temp_output_31_0_g158013 + ( break1689_g158005.w * break33_g158013.w ) );
				float4 temp_output_1567_30_g158005 = Out_BoundsData15_g158008;
				half4 Model_BoundsData1322_g158005 = temp_output_1567_30_g158005;
				float4 break33_g158018 = _motion_small_proc_mode;
				float temp_output_30_0_g158018 = ( (Model_BoundsData1322_g158005).z * break33_g158018.x );
				float temp_output_29_0_g158018 = ( (Model_BoundsData1322_g158005).w * break33_g158018.y );
				#if defined( TVE_MOTION_SMALL_VERT )
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#elif defined( TVE_MOTION_SMALL_PROC )
				float staticSwitch1691_g158005 = ( temp_output_30_0_g158018 + temp_output_29_0_g158018 );
				#else
				float staticSwitch1691_g158005 = temp_output_28_0_g158013;
				#endif
				float enc1805_g158005 = IN.ase_texcoord2.z;
				float2 localDecodeFloatToVector21805_g158005 = DecodeFloatToVector2( enc1805_g158005 );
				float2 break1804_g158005 = localDecodeFloatToVector21805_g158005;
				half Small_Mask_Legacy1806_g158005 = break1804_g158005.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g158005 = Small_Mask_Legacy1806_g158005;
				#else
				float staticSwitch1800_g158005 = staticSwitch1691_g158005;
				#endif
				float clampResult17_g158042 = clamp( staticSwitch1800_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158043 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g158043 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g158043 );
				float temp_output_6_0_g158044 = saturate( ( ( clampResult17_g158042 - temp_output_7_0_g158043 ) / ( temp_output_10_0_g158043 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158044 = ( temp_output_6_0_g158044 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158044 = temp_output_6_0_g158044;
				#endif
				half Small_Mask640_g158005 = staticSwitch14_g158044;
				half3 Model_PositionOS147_g158005 = temp_output_1567_0_g158005;
				float3 normalizeResult1832_g158005 = normalize( Model_PositionOS147_g158005 );
				float4 lerpResult627_g158031 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158031 = (lerpResult627_g158031).xy;
				half3 Model_PositionWO162_g158005 = temp_output_1567_17_g158005;
				float3 temp_output_1567_19_g158005 = Out_PivotWO15_g158008;
				half3 Model_PivotWO402_g158005 = temp_output_1567_19_g158005;
				float3 lerpResult829_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g158005 = Out_MotionData15_g158008;
				half4 Model_MotionMasks489_g158005 = temp_output_1567_27_g158005;
				half3 Base_Position1394_g158005 = ( lerpResult829_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g158031 = Base_Position1394_g158005;
				half Flow_Tillling1397_g158005 = _MotionTillingValue;
				half Input_MotionTilling321_g158031 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158031 = ( -(Input_PositionWO419_g158031).xz * Input_MotionTilling321_g158031 * 0.005 );
				float2 temp_output_3_0_g158033 = Noise_Coord515_g158031;
				float2 temp_output_606_0_g158031 = (Global_WindDirection593_g158031*2.0 + -1.0);
				float2 temp_output_21_0_g158033 = temp_output_606_0_g158031;
				float lerpResult128_g158032 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Flow_Speed1398_g158005 = _MotionSpeedValue;
				half Input_MotionSpeed62_g158031 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158031 = ( lerpResult128_g158032 * Input_MotionSpeed62_g158031 );
				half Noise_Speed516_g158031 = ( temp_output_505_0_g158031 * 0.02 );
				float temp_output_15_0_g158033 = Noise_Speed516_g158031;
				float temp_output_23_0_g158033 = frac( temp_output_15_0_g158033 );
				float4 lerpResult39_g158033 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * temp_output_23_0_g158033 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158033 + ( temp_output_21_0_g158033 * frac( ( temp_output_15_0_g158033 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158033 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158031 = lerpResult39_g158033;
				half Flow_Noise1845_g158005 = _MotionNoiseValue;
				half Input_MotionNoise552_g158031 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158031 = lerp( Global_WindDirection593_g158031 , (Noise_Params535_g158031).rg , Input_MotionNoise552_g158031);
				half Global_WindIntensity576_g158031 = (lerpResult627_g158031).z;
				half Flow_Value1858_g158005 = _MotionIntensityValue;
				half Input_MotionValue629_g158031 = Flow_Value1858_g158005;
				float2 lerpResult574_g158031 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158031 , ( Global_WindIntensity576_g158031 * Input_MotionValue629_g158031 ));
				float3 appendResult566_g158031 = (float3(lerpResult574_g158031 , (Noise_Params535_g158031).b));
				float temp_output_136_0_g158034 = _global_wind_layer_value;
				float temp_output_19_0_g158036 = TVE_WindLayers[(int)temp_output_136_0_g158034];
				half3 Input_Position180_g158037 = Input_PositionWO419_g158031;
				float2 temp_output_75_0_g158037 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_82_0_g158037 = temp_output_136_0_g158034;
				float2 temp_output_119_0_g158037 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158037).xz ) );
				float temp_output_7_0_g158040 = 1.0;
				float temp_output_10_0_g158040 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158040 );
				float temp_output_198_0_g158037 = saturate( ( ( saturate( ( distance( Input_Position180_g158037 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158040 ) / temp_output_10_0_g158040 ) );
				float4 lerpResult131_g158037 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158037,temp_output_82_0_g158037), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158037,temp_output_82_0_g158037), 0.0 ) , temp_output_198_0_g158037);
				float4 temp_output_17_0_g158036 = lerpResult131_g158037;
				float4 temp_output_3_0_g158036 = TVE_WindParams;
				float4 ifLocalVar18_g158036 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158036 >= 0.5 )
				ifLocalVar18_g158036 = temp_output_17_0_g158036;
				else
				ifLocalVar18_g158036 = temp_output_3_0_g158036;
				float4 lerpResult22_g158036 = lerp( temp_output_3_0_g158036 , temp_output_17_0_g158036 , temp_output_19_0_g158036);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158036 = lerpResult22_g158036;
				#else
				float4 staticSwitch24_g158036 = ifLocalVar18_g158036;
				#endif
				float4 temp_output_610_0_g158031 = staticSwitch24_g158036;
				float3 lerpResult623_g158031 = lerp( appendResult566_g158031 , (temp_output_610_0_g158031).rgb , (temp_output_610_0_g158031).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158031 = lerpResult623_g158031;
				#else
				float3 staticSwitch612_g158031 = appendResult566_g158031;
				#endif
				float3 temp_output_1797_567_g158005 = staticSwitch612_g158031;
				float2 break83_g158006 = ((temp_output_1797_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158006 = (float3(break83_g158006.x , 0.0 , break83_g158006.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158006 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float4 lerpResult627_g158020 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_IsEnabled);
				half2 Global_WindDirection593_g158020 = (lerpResult627_g158020).xy;
				float3 lerpResult1411_g158005 = lerp( Model_PositionWO162_g158005 , Model_PivotWO402_g158005 , _MotionSmallPivotValue);
				half3 Small_Position1421_g158005 = ( lerpResult1411_g158005 + ( (Model_MotionMasks489_g158005).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g158020 = Small_Position1421_g158005;
				half Input_MotionTilling321_g158020 = ( Flow_Tillling1397_g158005 + 0.2 );
				half2 Noise_Coord515_g158020 = ( -(Input_PositionWO419_g158020).xz * Input_MotionTilling321_g158020 * 0.005 );
				float2 temp_output_3_0_g158022 = Noise_Coord515_g158020;
				float2 temp_output_606_0_g158020 = (Global_WindDirection593_g158020*2.0 + -1.0);
				float2 temp_output_21_0_g158022 = temp_output_606_0_g158020;
				float lerpResult128_g158021 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158020 = Flow_Speed1398_g158005;
				float temp_output_505_0_g158020 = ( lerpResult128_g158021 * Input_MotionSpeed62_g158020 );
				half Noise_Speed516_g158020 = ( temp_output_505_0_g158020 * 0.02 );
				float temp_output_15_0_g158022 = Noise_Speed516_g158020;
				float temp_output_23_0_g158022 = frac( temp_output_15_0_g158022 );
				float4 lerpResult39_g158022 = lerp( SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * temp_output_23_0_g158022 ) ) ) , SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g158022 + ( temp_output_21_0_g158022 * frac( ( temp_output_15_0_g158022 + 0.5 ) ) ) ) ) , ( abs( ( temp_output_23_0_g158022 - 0.5 ) ) / 0.5 ));
				half4 Noise_Params535_g158020 = lerpResult39_g158022;
				half Input_MotionNoise552_g158020 = Flow_Noise1845_g158005;
				float2 lerpResult560_g158020 = lerp( Global_WindDirection593_g158020 , (Noise_Params535_g158020).rg , Input_MotionNoise552_g158020);
				half Global_WindIntensity576_g158020 = (lerpResult627_g158020).z;
				half Input_MotionValue629_g158020 = Flow_Value1858_g158005;
				float2 lerpResult574_g158020 = lerp( float2( 0.5,0.5 ) , lerpResult560_g158020 , ( Global_WindIntensity576_g158020 * Input_MotionValue629_g158020 ));
				float3 appendResult566_g158020 = (float3(lerpResult574_g158020 , (Noise_Params535_g158020).b));
				float temp_output_136_0_g158023 = _global_wind_layer_value;
				float temp_output_19_0_g158025 = TVE_WindLayers[(int)temp_output_136_0_g158023];
				half3 Input_Position180_g158026 = Input_PositionWO419_g158020;
				float2 temp_output_75_0_g158026 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_82_0_g158026 = temp_output_136_0_g158023;
				float2 temp_output_119_0_g158026 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g158026).xz ) );
				float temp_output_7_0_g158029 = 1.0;
				float temp_output_10_0_g158029 = ( TVE_RenderNearFadeValue - temp_output_7_0_g158029 );
				float temp_output_198_0_g158026 = saturate( ( ( saturate( ( distance( Input_Position180_g158026 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g158029 ) / temp_output_10_0_g158029 ) );
				float4 lerpResult131_g158026 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_75_0_g158026,temp_output_82_0_g158026), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Clamp_Aniso8, float3(temp_output_119_0_g158026,temp_output_82_0_g158026), 0.0 ) , temp_output_198_0_g158026);
				float4 temp_output_17_0_g158025 = lerpResult131_g158026;
				float4 temp_output_3_0_g158025 = TVE_WindParams;
				float4 ifLocalVar18_g158025 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g158025 >= 0.5 )
				ifLocalVar18_g158025 = temp_output_17_0_g158025;
				else
				ifLocalVar18_g158025 = temp_output_3_0_g158025;
				float4 lerpResult22_g158025 = lerp( temp_output_3_0_g158025 , temp_output_17_0_g158025 , temp_output_19_0_g158025);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g158025 = lerpResult22_g158025;
				#else
				float4 staticSwitch24_g158025 = ifLocalVar18_g158025;
				#endif
				float4 temp_output_610_0_g158020 = staticSwitch24_g158025;
				float3 lerpResult623_g158020 = lerp( appendResult566_g158020 , (temp_output_610_0_g158020).rgb , (temp_output_610_0_g158020).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g158020 = lerpResult623_g158020;
				#else
				float3 staticSwitch612_g158020 = appendResult566_g158020;
				#endif
				float3 temp_output_1798_567_g158005 = staticSwitch612_g158020;
				float2 break83_g158007 = ((temp_output_1798_567_g158005).xy*2.0 + -1.0);
				float3 appendResult79_g158007 = (float3(break83_g158007.x , 0.0 , break83_g158007.y));
				half2 Small_Direction1489_g158005 = (( mul( unity_WorldToObject, float4( appendResult79_g158007 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g158005 = Small_Direction1489_g158005;
				#else
				float2 staticSwitch1485_g158005 = Base_Direction893_g158005;
				#endif
				half2 Wind_Direction1486_g158005 = staticSwitch1485_g158005;
				float2 break1828_g158005 = -Wind_Direction1486_g158005;
				float3 appendResult1830_g158005 = (float3(break1828_g158005.x , 0.0 , break1828_g158005.y));
				float dotResult1831_g158005 = dot( normalizeResult1832_g158005 , appendResult1830_g158005 );
				float lerpResult1826_g158005 = lerp( 1.0 , (dotResult1831_g158005*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g158005 = lerpResult1826_g158005;
				float2 break1433_g158005 = Small_Direction1489_g158005;
				float3 appendResult1434_g158005 = (float3(break1433_g158005.x , length( Small_Direction1489_g158005 ) , break1433_g158005.y));
				half Small_Noise1427_g158005 = abs( (temp_output_1798_567_g158005).z );
				float3 appendResult1786_g158005 = (float3(Small_Noise1427_g158005 , (Small_Noise1427_g158005*0.4 + -0.2) , Small_Noise1427_g158005));
				half3 Small_Motion789_g158005 = ( _MotionSmallIntensityValue * Small_Mask640_g158005 * Motion_FrontMask1142_g158005 * appendResult1434_g158005 * appendResult1786_g158005 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g158005 = Small_Motion789_g158005;
				#else
				float3 staticSwitch495_g158005 = temp_cast_7;
				#endif
				float3 temp_cast_18 = (0.0).xxx;
				float4 break1710_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158014 = _motion_tiny_vert_mode;
				float temp_output_30_0_g158014 = ( break1710_g158005.x * break33_g158014.x );
				float temp_output_29_0_g158014 = ( break1710_g158005.y * break33_g158014.y );
				float temp_output_31_0_g158014 = ( break1710_g158005.z * break33_g158014.z );
				float temp_output_28_0_g158014 = ( temp_output_30_0_g158014 + temp_output_29_0_g158014 + temp_output_31_0_g158014 + ( break1710_g158005.w * break33_g158014.w ) );
				float4 break33_g158019 = _motion_tiny_proc_mode;
				float temp_output_30_0_g158019 = ( (Model_BoundsData1322_g158005).z * break33_g158019.x );
				float temp_output_29_0_g158019 = ( (Model_BoundsData1322_g158005).w * break33_g158019.y );
				#if defined( TVE_MOTION_TINY_VERT )
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#elif defined( TVE_MOTION_TINY_PROC )
				float staticSwitch1712_g158005 = ( temp_output_30_0_g158019 + temp_output_29_0_g158019 );
				#else
				float staticSwitch1712_g158005 = temp_output_28_0_g158014;
				#endif
				half Tiny_Mask_Legacy1807_g158005 = break1804_g158005.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g158005 = Tiny_Mask_Legacy1807_g158005;
				#else
				float staticSwitch1810_g158005 = staticSwitch1712_g158005;
				#endif
				float clampResult17_g158045 = clamp( staticSwitch1810_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158046 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g158046 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g158046 );
				float temp_output_6_0_g158047 = saturate( ( ( clampResult17_g158045 - temp_output_7_0_g158046 ) / ( temp_output_10_0_g158046 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158047 = ( temp_output_6_0_g158047 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158047 = temp_output_6_0_g158047;
				#endif
				half Tiny_Mask218_g158005 = staticSwitch14_g158047;
				half3 Input_Position500_g158048 = Model_PositionWO162_g158005;
				half Input_MotionTilling321_g158048 = _MotionTinyTillingValue;
				half Input_MotionPhase330_g158048 = 0.0;
				float lerpResult128_g158050 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g158048 = _MotionTinySpeedValue;
				float4 tex2DNode460_g158048 = SAMPLE_TEXTURE2D( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g158048).xz * Input_MotionTilling321_g158048 * 0.03 ) + Input_MotionPhase330_g158048 + ( lerpResult128_g158050 * Input_MotionSpeed62_g158048 * 0.01 ) ) );
				float3 appendResult462_g158048 = (float3(tex2DNode460_g158048.r , tex2DNode460_g158048.g , tex2DNode460_g158048.b));
				half3 Flutter_Texture489_g158048 = (appendResult462_g158048*2.0 + -1.0);
				half3 Tiny_Direction859_g158005 = Flutter_Texture489_g158048;
				half Base_Noise1159_g158005 = abs( (temp_output_1797_567_g158005).z );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g158005 = Small_Noise1427_g158005;
				#else
				float staticSwitch1453_g158005 = Base_Noise1159_g158005;
				#endif
				half Wind_Noise1475_g158005 = staticSwitch1453_g158005;
				half3 Model_PositionWS1819_g158005 = temp_output_1567_16_g158005;
				half Motion_FadeMask1820_g158005 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g158005 ) / _MotionDistValue ) ) );
				half3 Tiny_Motion1451_g158005 = ( _MotionTinyIntensityValue * Tiny_Mask218_g158005 * Tiny_Direction859_g158005 * length( Wind_Direction1486_g158005 ) * Wind_Noise1475_g158005 * Motion_FrontMask1142_g158005 * Motion_FadeMask1820_g158005 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g158005 = Tiny_Motion1451_g158005;
				#else
				float3 staticSwitch414_g158005 = temp_cast_18;
				#endif
				half3 Final_PositionADD1569_g158005 = ( staticSwitch495_g158005 + staticSwitch414_g158005 );
				float3 In_PositionAddOS16_g158016 = Final_PositionADD1569_g158005;
				float3 temp_output_1567_24_g158005 = Out_PivotOS15_g158008;
				float3 In_PivotOS16_g158016 = temp_output_1567_24_g158005;
				float3 In_PivotWS16_g158016 = Out_PivotWS15_g158008;
				float3 In_PivotWO16_g158016 = temp_output_1567_19_g158005;
				float3 temp_output_1567_20_g158005 = Out_NormalOS15_g158008;
				float3 In_NormalOS16_g158016 = temp_output_1567_20_g158005;
				float3 In_NormalWS16_g158016 = Out_NormalWS15_g158008;
				float3 In_NormalRawOS16_g158016 = Out_NormalRawOS15_g158008;
				float3 In_NormalRawWS16_g158016 = Out_NormalRawWS15_g158008;
				float4 In_TangentOS16_g158016 = Out_TangentOS15_g158008;
				float3 In_ViewDirWS16_g158016 = Out_ViewDirWS15_g158008;
				float4 In_VertexData16_g158016 = temp_output_1567_29_g158005;
				float4 In_MotionData16_g158016 = temp_output_1567_27_g158005;
				float4 In_BoundsData16_g158016 = temp_output_1567_30_g158005;
				float2 temp_cast_19 = (0.0).xx;
				half Base_Intensity1855_g158005 = _MotionBaseIntensityValue;
				float4 break748_g158005 = Model_VertexMasks518_g158005;
				float4 break33_g158015 = _motion_base_vert_mode;
				float temp_output_30_0_g158015 = ( break748_g158005.x * break33_g158015.x );
				float temp_output_29_0_g158015 = ( break748_g158005.y * break33_g158015.y );
				float temp_output_31_0_g158015 = ( break748_g158005.z * break33_g158015.z );
				float temp_output_28_0_g158015 = ( temp_output_30_0_g158015 + temp_output_29_0_g158015 + temp_output_31_0_g158015 + ( break748_g158005.w * break33_g158015.w ) );
				float4 break33_g158017 = _motion_base_proc_mode;
				float temp_output_30_0_g158017 = ( (Model_BoundsData1322_g158005).z * break33_g158017.x );
				float temp_output_29_0_g158017 = ( (Model_BoundsData1322_g158005).w * break33_g158017.y );
				#if defined( TVE_MOTION_BASE_VERT )
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#elif defined( TVE_MOTION_BASE_PROC )
				float staticSwitch590_g158005 = ( temp_output_30_0_g158017 + temp_output_29_0_g158017 );
				#else
				float staticSwitch590_g158005 = temp_output_28_0_g158015;
				#endif
				float clampResult17_g158010 = clamp( staticSwitch590_g158005 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158011 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g158011 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g158011 );
				float temp_output_6_0_g158012 = saturate( ( ( clampResult17_g158010 - temp_output_7_0_g158011 ) / ( temp_output_10_0_g158011 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158012 = ( temp_output_6_0_g158012 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g158012 = temp_output_6_0_g158012;
				#endif
				half Base_Mask217_g158005 = staticSwitch14_g158012;
				float lerpResult1768_g158005 = lerp( (Base_Noise1159_g158005*2.0 + -1.0) , Base_Noise1159_g158005 , length( Base_Direction893_g158005 ));
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g158005 = ( ( Base_Intensity1855_g158005 * Base_Mask217_g158005 * lerpResult1768_g158005 ) * Base_Direction893_g158005 );
				#else
				float2 staticSwitch1573_g158005 = temp_cast_19;
				#endif
				half2 Base_Motion1440_g158005 = staticSwitch1573_g158005;
				half2 Final_VertexBend1570_g158005 = Base_Motion1440_g158005;
				float4 In_RotationData16_g158016 = float4( Final_VertexBend1570_g158005, 0.0 , 0.0 );
				float temp_output_6_0_g158052 = ( _MotionHighlightValue * length( Wind_Direction1486_g158005 ) * Motion_FadeMask1820_g158005 * ( Base_Mask217_g158005 * Base_Mask217_g158005 ) * ( Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 * Wind_Noise1475_g158005 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158052 = ( temp_output_6_0_g158052 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g158052 = temp_output_6_0_g158052;
				#endif
				float temp_output_1852_0_g158005 = staticSwitch14_g158052;
				half Motion_Highlight301_g158005 = temp_output_1852_0_g158005;
				float4 appendResult454_g158005 = (float4(0.0 , 0.0 , 0.0 , Motion_Highlight301_g158005));
				half4 Final_FragmentData457_g158005 = appendResult454_g158005;
				float4 In_FragmentData16_g158016 = Final_FragmentData457_g158005;
				{
				Data16_g158016.Dummy = In_Dummy16_g158016;
				Data16_g158016.PositionOS = In_PositionOS16_g158016;
				Data16_g158016.PositionWS = In_PositionWS16_g158016;
				Data16_g158016.PositionWO = In_PositionWO16_g158016;
				Data16_g158016.PositionRawOS = In_PositionRawOS16_g158016;
				Data16_g158016.PositionAddOS = In_PositionAddOS16_g158016;
				Data16_g158016.PivotOS = In_PivotOS16_g158016;
				Data16_g158016.PivotWS = In_PivotWS16_g158016;
				Data16_g158016.PivotWO = In_PivotWO16_g158016;
				Data16_g158016.NormalOS = In_NormalOS16_g158016;
				Data16_g158016.NormalWS = In_NormalWS16_g158016;
				Data16_g158016.NormalRawOS = In_NormalRawOS16_g158016;
				Data16_g158016.NormalRawWS = In_NormalRawWS16_g158016;
				Data16_g158016.TangentOS = In_TangentOS16_g158016;
				Data16_g158016.ViewDirWS = In_ViewDirWS16_g158016;
				Data16_g158016.VertexData = In_VertexData16_g158016;
				Data16_g158016.MotionData = In_MotionData16_g158016;
				Data16_g158016.BoundsData = In_BoundsData16_g158016;
				Data16_g158016.RotationData = In_RotationData16_g158016;
				Data16_g158016.FragmentData = In_FragmentData16_g158016;
				}
				TVEModelData Data15_g158054 = Data16_g158016;
				float Out_Dummy15_g158054 = 0;
				float3 Out_PositionOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158054 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158054 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158054 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158054 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158054 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158054 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158054 = float3( 0,0,0 );
				float4 Out_VertexData15_g158054 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158054 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158054 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158054 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158054 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158054 = Data15_g158054.Dummy;
				Out_PositionOS15_g158054 = Data15_g158054.PositionOS;
				Out_PositionWS15_g158054 = Data15_g158054.PositionWS;
				Out_PositionWO15_g158054 = Data15_g158054.PositionWO;
				Out_PositionRawOS15_g158054 = Data15_g158054.PositionRawOS;
				Out_PositionAddOS15_g158054 = Data15_g158054.PositionAddOS;
				Out_PivotOS15_g158054 = Data15_g158054.PivotOS;
				Out_PivotWS15_g158054 = Data15_g158054.PivotWS;
				Out_PivotWO15_g158054 = Data15_g158054.PivotWO;
				Out_NormalOS15_g158054 = Data15_g158054.NormalOS;
				Out_NormalWS15_g158054 = Data15_g158054.NormalWS;
				Out_NormalRawOS15_g158054 = Data15_g158054.NormalRawOS;
				Out_NormalRawWS15_g158054 = Data15_g158054.NormalRawWS;
				Out_TangentOS15_g158054 = Data15_g158054.TangentOS;
				Out_ViewDirWS15_g158054 = Data15_g158054.ViewDirWS;
				Out_VertexData15_g158054 = Data15_g158054.VertexData;
				Out_MotionData15_g158054 = Data15_g158054.MotionData;
				Out_BoundsData15_g158054 = Data15_g158054.BoundsData;
				Out_RotationData15_g158054 = Data15_g158054.RotationData;
				Out_FragmentData15_g158054 = Data15_g158054.FragmentData;
				}
				half3 Model_PositionOS147_g158053 = Out_PositionOS15_g158054;
				half3 Input_False58_g158059 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158056 = Model_PositionOS147_g158053;
				half3 VertexPos40_g158057 = VertexPos40_g158056;
				float3 appendResult74_g158057 = (float3(VertexPos40_g158057.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158057 = appendResult74_g158057;
				float3 break84_g158057 = VertexPos40_g158057;
				float3 appendResult81_g158057 = (float3(0.0 , break84_g158057.y , break84_g158057.z));
				half3 VertexPosOtherAxis82_g158057 = appendResult81_g158057;
				float4 temp_output_1567_33_g158053 = Out_RotationData15_g158054;
				half4 Model_VertexBend1569_g158053 = temp_output_1567_33_g158053;
				half2 Angle44_g158056 = (Model_VertexBend1569_g158053).xy;
				half Angle44_g158057 = (Angle44_g158056).y;
				half3 VertexPos40_g158058 = ( VertexPosRotationAxis50_g158057 + ( VertexPosOtherAxis82_g158057 * cos( Angle44_g158057 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158057 ) * sin( Angle44_g158057 ) ) );
				float3 appendResult74_g158058 = (float3(0.0 , 0.0 , VertexPos40_g158058.z));
				half3 VertexPosRotationAxis50_g158058 = appendResult74_g158058;
				float3 break84_g158058 = VertexPos40_g158058;
				float3 appendResult81_g158058 = (float3(break84_g158058.x , break84_g158058.y , 0.0));
				half3 VertexPosOtherAxis82_g158058 = appendResult81_g158058;
				half Angle44_g158058 = -(Angle44_g158056).x;
				half3 Input_True57_g158059 = ( VertexPosRotationAxis50_g158058 + ( VertexPosOtherAxis82_g158058 * cos( Angle44_g158058 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158058 ) * sin( Angle44_g158058 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch65_g158059 = Input_False58_g158059;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch67_g158059 = staticSwitch65_g158059;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g158059 = Input_True57_g158059;
				#else
				float3 staticSwitch69_g158059 = staticSwitch67_g158059;
				#endif
				float3 temp_output_1567_31_g158053 = Out_PositionAddOS15_g158054;
				half3 Model_PositionADD1568_g158053 = temp_output_1567_31_g158053;
				half3 Final_PositionOS178_g158053 = ( staticSwitch69_g158059 + Model_PositionADD1568_g158053 );
				float3 In_PositionOS16_g158055 = Final_PositionOS178_g158053;
				float3 In_PositionWS16_g158055 = Out_PositionWS15_g158054;
				float3 In_PositionWO16_g158055 = Out_PositionWO15_g158054;
				float3 In_PositionRawOS16_g158055 = Out_PositionRawOS15_g158054;
				float3 In_PositionAddOS16_g158055 = temp_output_1567_31_g158053;
				float3 In_PivotOS16_g158055 = Out_PivotOS15_g158054;
				float3 In_PivotWS16_g158055 = Out_PivotWS15_g158054;
				float3 In_PivotWO16_g158055 = Out_PivotWO15_g158054;
				float3 In_NormalOS16_g158055 = Out_NormalOS15_g158054;
				float3 In_NormalWS16_g158055 = Out_NormalWS15_g158054;
				float3 In_NormalRawOS16_g158055 = Out_NormalRawOS15_g158054;
				float3 In_NormalRawWS16_g158055 = Out_NormalRawWS15_g158054;
				float4 In_TangentOS16_g158055 = Out_TangentOS15_g158054;
				float3 In_ViewDirWS16_g158055 = Out_ViewDirWS15_g158054;
				float4 In_VertexData16_g158055 = Out_VertexData15_g158054;
				float4 In_MotionData16_g158055 = Out_MotionData15_g158054;
				float4 In_BoundsData16_g158055 = Out_BoundsData15_g158054;
				float4 In_RotationData16_g158055 = temp_output_1567_33_g158053;
				float4 In_FragmentData16_g158055 = Out_FragmentData15_g158054;
				{
				Data16_g158055.Dummy = In_Dummy16_g158055;
				Data16_g158055.PositionOS = In_PositionOS16_g158055;
				Data16_g158055.PositionWS = In_PositionWS16_g158055;
				Data16_g158055.PositionWO = In_PositionWO16_g158055;
				Data16_g158055.PositionRawOS = In_PositionRawOS16_g158055;
				Data16_g158055.PositionAddOS = In_PositionAddOS16_g158055;
				Data16_g158055.PivotOS = In_PivotOS16_g158055;
				Data16_g158055.PivotWS = In_PivotWS16_g158055;
				Data16_g158055.PivotWO = In_PivotWO16_g158055;
				Data16_g158055.NormalOS = In_NormalOS16_g158055;
				Data16_g158055.NormalWS = In_NormalWS16_g158055;
				Data16_g158055.NormalRawOS = In_NormalRawOS16_g158055;
				Data16_g158055.NormalRawWS = In_NormalRawWS16_g158055;
				Data16_g158055.TangentOS = In_TangentOS16_g158055;
				Data16_g158055.ViewDirWS = In_ViewDirWS16_g158055;
				Data16_g158055.VertexData = In_VertexData16_g158055;
				Data16_g158055.MotionData = In_MotionData16_g158055;
				Data16_g158055.BoundsData = In_BoundsData16_g158055;
				Data16_g158055.RotationData = In_RotationData16_g158055;
				Data16_g158055.FragmentData = In_FragmentData16_g158055;
				}
				TVEModelData Data15_g158061 = Data16_g158055;
				float Out_Dummy15_g158061 = 0;
				float3 Out_PositionOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158061 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158061 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158061 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158061 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158061 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158061 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158061 = float3( 0,0,0 );
				float4 Out_VertexData15_g158061 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158061 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158061 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158061 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158061 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158061 = Data15_g158061.Dummy;
				Out_PositionOS15_g158061 = Data15_g158061.PositionOS;
				Out_PositionWS15_g158061 = Data15_g158061.PositionWS;
				Out_PositionWO15_g158061 = Data15_g158061.PositionWO;
				Out_PositionRawOS15_g158061 = Data15_g158061.PositionRawOS;
				Out_PositionAddOS15_g158061 = Data15_g158061.PositionAddOS;
				Out_PivotOS15_g158061 = Data15_g158061.PivotOS;
				Out_PivotWS15_g158061 = Data15_g158061.PivotWS;
				Out_PivotWO15_g158061 = Data15_g158061.PivotWO;
				Out_NormalOS15_g158061 = Data15_g158061.NormalOS;
				Out_NormalWS15_g158061 = Data15_g158061.NormalWS;
				Out_NormalRawOS15_g158061 = Data15_g158061.NormalRawOS;
				Out_NormalRawWS15_g158061 = Data15_g158061.NormalRawWS;
				Out_TangentOS15_g158061 = Data15_g158061.TangentOS;
				Out_ViewDirWS15_g158061 = Data15_g158061.ViewDirWS;
				Out_VertexData15_g158061 = Data15_g158061.VertexData;
				Out_MotionData15_g158061 = Data15_g158061.MotionData;
				Out_BoundsData15_g158061 = Data15_g158061.BoundsData;
				Out_RotationData15_g158061 = Data15_g158061.RotationData;
				Out_FragmentData15_g158061 = Data15_g158061.FragmentData;
				}
				float3 In_PositionOS16_g158062 = Out_PositionOS15_g158061;
				float3 In_PositionWS16_g158062 = Out_PositionWS15_g158061;
				float3 In_PositionWO16_g158062 = Out_PositionWO15_g158061;
				float3 temp_output_1567_26_g158060 = Out_PositionRawOS15_g158061;
				float3 In_PositionRawOS16_g158062 = temp_output_1567_26_g158060;
				float3 In_PositionAddOS16_g158062 = Out_PositionAddOS15_g158061;
				float3 In_PivotOS16_g158062 = Out_PivotOS15_g158061;
				float3 In_PivotWS16_g158062 = Out_PivotWS15_g158061;
				float3 In_PivotWO16_g158062 = Out_PivotWO15_g158061;
				half3 Model_NormalOS1568_g158060 = Out_NormalOS15_g158061;
				float3 lerpResult1589_g158060 = lerp( Model_NormalOS1568_g158060 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g158060 = temp_output_1567_26_g158060;
				float3 normalizeResult1594_g158060 = ASESafeNormalize( ( Model_PositionRAW1592_g158060 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g158060 = lerp( lerpResult1589_g158060 , normalizeResult1594_g158060 , _NormalSphereValue);
				half3 Local_NormalOS1601_g158060 = lerpResult1585_g158060;
				half3 VertexPos40_g158063 = Local_NormalOS1601_g158060;
				half3 VertexPos40_g158064 = VertexPos40_g158063;
				float3 appendResult74_g158064 = (float3(VertexPos40_g158064.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g158064 = appendResult74_g158064;
				float3 break84_g158064 = VertexPos40_g158064;
				float3 appendResult81_g158064 = (float3(0.0 , break84_g158064.y , break84_g158064.z));
				half3 VertexPosOtherAxis82_g158064 = appendResult81_g158064;
				float4 temp_output_1567_33_g158060 = Out_RotationData15_g158061;
				half4 Model_RotationData1583_g158060 = temp_output_1567_33_g158060;
				half2 Angle44_g158063 = Model_RotationData1583_g158060.xy;
				half Angle44_g158064 = (Angle44_g158063).y;
				half3 VertexPos40_g158065 = ( VertexPosRotationAxis50_g158064 + ( VertexPosOtherAxis82_g158064 * cos( Angle44_g158064 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g158064 ) * sin( Angle44_g158064 ) ) );
				float3 appendResult74_g158065 = (float3(0.0 , 0.0 , VertexPos40_g158065.z));
				half3 VertexPosRotationAxis50_g158065 = appendResult74_g158065;
				float3 break84_g158065 = VertexPos40_g158065;
				float3 appendResult81_g158065 = (float3(break84_g158065.x , break84_g158065.y , 0.0));
				half3 VertexPosOtherAxis82_g158065 = appendResult81_g158065;
				half Angle44_g158065 = -(Angle44_g158063).x;
				float3 lerpResult1591_g158060 = lerp( Local_NormalOS1601_g158060 , ( VertexPosRotationAxis50_g158065 + ( VertexPosOtherAxis82_g158065 * cos( Angle44_g158065 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g158065 ) * sin( Angle44_g158065 ) ) ) , _NormalComputeValue);
				#ifdef TVE_BENDING
				float3 staticSwitch413_g158060 = lerpResult1591_g158060;
				#else
				float3 staticSwitch413_g158060 = Local_NormalOS1601_g158060;
				#endif
				half3 Final_NormalOS178_g158060 = staticSwitch413_g158060;
				float3 In_NormalOS16_g158062 = Final_NormalOS178_g158060;
				float3 In_NormalWS16_g158062 = Out_NormalWS15_g158061;
				float3 In_NormalRawOS16_g158062 = Out_NormalRawOS15_g158061;
				float3 In_NormalRawWS16_g158062 = Out_NormalRawWS15_g158061;
				float4 In_TangentOS16_g158062 = Out_TangentOS15_g158061;
				float3 In_ViewDirWS16_g158062 = Out_ViewDirWS15_g158061;
				float4 In_VertexData16_g158062 = Out_VertexData15_g158061;
				float4 In_MotionData16_g158062 = Out_MotionData15_g158061;
				float4 temp_output_1567_30_g158060 = Out_BoundsData15_g158061;
				float4 In_BoundsData16_g158062 = temp_output_1567_30_g158060;
				float4 In_RotationData16_g158062 = temp_output_1567_33_g158060;
				float4 In_FragmentData16_g158062 = Out_FragmentData15_g158061;
				{
				Data16_g158062.Dummy = In_Dummy16_g158062;
				Data16_g158062.PositionOS = In_PositionOS16_g158062;
				Data16_g158062.PositionWS = In_PositionWS16_g158062;
				Data16_g158062.PositionWO = In_PositionWO16_g158062;
				Data16_g158062.PositionRawOS = In_PositionRawOS16_g158062;
				Data16_g158062.PositionAddOS = In_PositionAddOS16_g158062;
				Data16_g158062.PivotOS = In_PivotOS16_g158062;
				Data16_g158062.PivotWS = In_PivotWS16_g158062;
				Data16_g158062.PivotWO = In_PivotWO16_g158062;
				Data16_g158062.NormalOS = In_NormalOS16_g158062;
				Data16_g158062.NormalWS = In_NormalWS16_g158062;
				Data16_g158062.NormalRawOS = In_NormalRawOS16_g158062;
				Data16_g158062.NormalRawWS = In_NormalRawWS16_g158062;
				Data16_g158062.TangentOS = In_TangentOS16_g158062;
				Data16_g158062.ViewDirWS = In_ViewDirWS16_g158062;
				Data16_g158062.VertexData = In_VertexData16_g158062;
				Data16_g158062.MotionData = In_MotionData16_g158062;
				Data16_g158062.BoundsData = In_BoundsData16_g158062;
				Data16_g158062.RotationData = In_RotationData16_g158062;
				Data16_g158062.FragmentData = In_FragmentData16_g158062;
				}
				TVEModelData Data15_g158067 = Data16_g158062;
				float Out_Dummy15_g158067 = 0;
				float3 Out_PositionOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158067 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158067 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158067 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158067 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158067 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158067 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158067 = float3( 0,0,0 );
				float4 Out_VertexData15_g158067 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158067 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158067 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158067 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158067 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158067 = Data15_g158067.Dummy;
				Out_PositionOS15_g158067 = Data15_g158067.PositionOS;
				Out_PositionWS15_g158067 = Data15_g158067.PositionWS;
				Out_PositionWO15_g158067 = Data15_g158067.PositionWO;
				Out_PositionRawOS15_g158067 = Data15_g158067.PositionRawOS;
				Out_PositionAddOS15_g158067 = Data15_g158067.PositionAddOS;
				Out_PivotOS15_g158067 = Data15_g158067.PivotOS;
				Out_PivotWS15_g158067 = Data15_g158067.PivotWS;
				Out_PivotWO15_g158067 = Data15_g158067.PivotWO;
				Out_NormalOS15_g158067 = Data15_g158067.NormalOS;
				Out_NormalWS15_g158067 = Data15_g158067.NormalWS;
				Out_NormalRawOS15_g158067 = Data15_g158067.NormalRawOS;
				Out_NormalRawWS15_g158067 = Data15_g158067.NormalRawWS;
				Out_TangentOS15_g158067 = Data15_g158067.TangentOS;
				Out_ViewDirWS15_g158067 = Data15_g158067.ViewDirWS;
				Out_VertexData15_g158067 = Data15_g158067.VertexData;
				Out_MotionData15_g158067 = Data15_g158067.MotionData;
				Out_BoundsData15_g158067 = Data15_g158067.BoundsData;
				Out_RotationData15_g158067 = Data15_g158067.RotationData;
				Out_FragmentData15_g158067 = Data15_g158067.FragmentData;
				}
				float3 temp_output_217_24_g158066 = Out_PivotOS15_g158067;
				float3 In_PositionOS16_g158068 = ( Out_PositionOS15_g158067 + temp_output_217_24_g158066 );
				float3 In_PositionWS16_g158068 = Out_PositionWS15_g158067;
				float3 In_PositionWO16_g158068 = Out_PositionWO15_g158067;
				float3 In_PositionRawOS16_g158068 = Out_PositionRawOS15_g158067;
				float3 In_PositionAddOS16_g158068 = Out_PositionAddOS15_g158067;
				float3 In_PivotOS16_g158068 = temp_output_217_24_g158066;
				float3 In_PivotWS16_g158068 = Out_PivotWS15_g158067;
				float3 In_PivotWO16_g158068 = Out_PivotWO15_g158067;
				float3 In_NormalOS16_g158068 = Out_NormalOS15_g158067;
				float3 In_NormalWS16_g158068 = Out_NormalWS15_g158067;
				float3 In_NormalRawOS16_g158068 = Out_NormalRawOS15_g158067;
				float3 In_NormalRawWS16_g158068 = Out_NormalRawWS15_g158067;
				float4 In_TangentOS16_g158068 = Out_TangentOS15_g158067;
				float3 In_ViewDirWS16_g158068 = Out_ViewDirWS15_g158067;
				float4 In_VertexData16_g158068 = Out_VertexData15_g158067;
				float4 In_MotionData16_g158068 = Out_MotionData15_g158067;
				float4 In_BoundsData16_g158068 = Out_BoundsData15_g158067;
				float4 In_RotationData16_g158068 = Out_RotationData15_g158067;
				float4 In_FragmentData16_g158068 = Out_FragmentData15_g158067;
				{
				Data16_g158068.Dummy = In_Dummy16_g158068;
				Data16_g158068.PositionOS = In_PositionOS16_g158068;
				Data16_g158068.PositionWS = In_PositionWS16_g158068;
				Data16_g158068.PositionWO = In_PositionWO16_g158068;
				Data16_g158068.PositionRawOS = In_PositionRawOS16_g158068;
				Data16_g158068.PositionAddOS = In_PositionAddOS16_g158068;
				Data16_g158068.PivotOS = In_PivotOS16_g158068;
				Data16_g158068.PivotWS = In_PivotWS16_g158068;
				Data16_g158068.PivotWO = In_PivotWO16_g158068;
				Data16_g158068.NormalOS = In_NormalOS16_g158068;
				Data16_g158068.NormalWS = In_NormalWS16_g158068;
				Data16_g158068.NormalRawOS = In_NormalRawOS16_g158068;
				Data16_g158068.NormalRawWS = In_NormalRawWS16_g158068;
				Data16_g158068.TangentOS = In_TangentOS16_g158068;
				Data16_g158068.ViewDirWS = In_ViewDirWS16_g158068;
				Data16_g158068.VertexData = In_VertexData16_g158068;
				Data16_g158068.MotionData = In_MotionData16_g158068;
				Data16_g158068.BoundsData = In_BoundsData16_g158068;
				Data16_g158068.RotationData = In_RotationData16_g158068;
				Data16_g158068.FragmentData = In_FragmentData16_g158068;
				}
				TVEModelData Data15_g158121 = Data16_g158068;
				float Out_Dummy15_g158121 = 0;
				float3 Out_PositionOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158121 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158121 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158121 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158121 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158121 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158121 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158121 = float3( 0,0,0 );
				float4 Out_VertexData15_g158121 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158121 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158121 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158121 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158121 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158121 = Data15_g158121.Dummy;
				Out_PositionOS15_g158121 = Data15_g158121.PositionOS;
				Out_PositionWS15_g158121 = Data15_g158121.PositionWS;
				Out_PositionWO15_g158121 = Data15_g158121.PositionWO;
				Out_PositionRawOS15_g158121 = Data15_g158121.PositionRawOS;
				Out_PositionAddOS15_g158121 = Data15_g158121.PositionAddOS;
				Out_PivotOS15_g158121 = Data15_g158121.PivotOS;
				Out_PivotWS15_g158121 = Data15_g158121.PivotWS;
				Out_PivotWO15_g158121 = Data15_g158121.PivotWO;
				Out_NormalOS15_g158121 = Data15_g158121.NormalOS;
				Out_NormalWS15_g158121 = Data15_g158121.NormalWS;
				Out_NormalRawOS15_g158121 = Data15_g158121.NormalRawOS;
				Out_NormalRawWS15_g158121 = Data15_g158121.NormalRawWS;
				Out_TangentOS15_g158121 = Data15_g158121.TangentOS;
				Out_ViewDirWS15_g158121 = Data15_g158121.ViewDirWS;
				Out_VertexData15_g158121 = Data15_g158121.VertexData;
				Out_MotionData15_g158121 = Data15_g158121.MotionData;
				Out_BoundsData15_g158121 = Data15_g158121.BoundsData;
				Out_RotationData15_g158121 = Data15_g158121.RotationData;
				Out_FragmentData15_g158121 = Data15_g158121.FragmentData;
				}
				half3 Model_PositionWO222_g158120 = Out_PositionWO15_g158121;
				float3 temp_output_279_0_g158131 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158131 = temp_output_279_0_g158131;
				half4 localSamplePlanar2D238_g158131 = SamplePlanar2D( Texture238_g158131 , Sampler238_g158131 , Coords238_g158131 , WorldPosition238_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158131) = _MainAlbedoTex;
				SamplerState Sampler246_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition246_g158131 = temp_output_279_0_g158131;
				half3 Model_NormalWS226_g158120 = Out_NormalWS15_g158121;
				float3 temp_output_280_0_g158131 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158131 = temp_output_280_0_g158131;
				half4 localSamplePlanar3D246_g158131 = SamplePlanar3D( Texture246_g158131 , Sampler246_g158131 , Coords246_g158131 , WorldPosition246_g158131 , WorldNormal246_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158131) = _MainAlbedoTex;
				SamplerState Sampler234_g158131 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158131 = temp_output_37_0_g158131;
				float3 WorldPosition234_g158131 = temp_output_279_0_g158131;
				float4 localSampleStochastic2D234_g158131 = SampleStochastic2D( Texture234_g158131 , Sampler234_g158131 , Coords234_g158131 , WorldPosition234_g158131 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158131) = _MainAlbedoTex;
				SamplerState Sampler263_g158131 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158131 = temp_output_37_0_g158131;
				half3 WorldPosition263_g158131 = temp_output_279_0_g158131;
				half3 WorldNormal263_g158131 = temp_output_280_0_g158131;
				half4 localSampleStochastic3D263_g158131 = SampleStochastic3D( Texture263_g158131 , Sampler263_g158131 , Coords263_g158131 , WorldPosition263_g158131 , WorldNormal263_g158131 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g158120 = localSampleExtra275_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g158120 = localSamplePlanar2D238_g158131;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g158120 = localSamplePlanar3D246_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g158120 = localSampleStochastic2D234_g158131;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g158120 = localSampleStochastic3D263_g158131;
				#else
				float4 staticSwitch184_g158120 = localSampleMain276_g158131;
				#endif
				half4 Local_AlbedoTex185_g158120 = staticSwitch184_g158120;
				float3 lerpResult53_g158120 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g158120).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g158120 = lerpResult53_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158133) = _MainShaderTex;
				SamplerState Sampler276_g158133 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158133 = Local_Coords180_g158120;
				half4 Coords276_g158133 = temp_output_37_0_g158133;
				half2 TexCoord276_g158133 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158133 = SampleMain( Texture276_g158133 , Sampler276_g158133 , Coords276_g158133 , TexCoord276_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158133) = _MainShaderTex;
				SamplerState Sampler275_g158133 = sampler_Linear_Repeat;
				half4 Coords275_g158133 = temp_output_37_0_g158133;
				float2 appendResult289_g158133 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158133 = appendResult289_g158133;
				#else
				float2 staticSwitch288_g158133 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158133 = staticSwitch288_g158133;
				half4 localSampleExtra275_g158133 = SampleExtra( Texture275_g158133 , Sampler275_g158133 , Coords275_g158133 , TexCoord275_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158133) = _MainShaderTex;
				SamplerState Sampler238_g158133 = sampler_Linear_Repeat;
				half4 Coords238_g158133 = temp_output_37_0_g158133;
				float3 temp_output_279_0_g158133 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158133 = temp_output_279_0_g158133;
				half4 localSamplePlanar2D238_g158133 = SamplePlanar2D( Texture238_g158133 , Sampler238_g158133 , Coords238_g158133 , WorldPosition238_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158133) = _MainShaderTex;
				SamplerState Sampler246_g158133 = sampler_Linear_Repeat;
				half4 Coords246_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition246_g158133 = temp_output_279_0_g158133;
				float3 temp_output_280_0_g158133 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158133 = temp_output_280_0_g158133;
				half4 localSamplePlanar3D246_g158133 = SamplePlanar3D( Texture246_g158133 , Sampler246_g158133 , Coords246_g158133 , WorldPosition246_g158133 , WorldNormal246_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158133) = _MainShaderTex;
				SamplerState Sampler234_g158133 = sampler_Linear_Repeat;
				float4 Coords234_g158133 = temp_output_37_0_g158133;
				float3 WorldPosition234_g158133 = temp_output_279_0_g158133;
				float4 localSampleStochastic2D234_g158133 = SampleStochastic2D( Texture234_g158133 , Sampler234_g158133 , Coords234_g158133 , WorldPosition234_g158133 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158133) = _MainShaderTex;
				SamplerState Sampler263_g158133 = sampler_Linear_Repeat;
				half4 Coords263_g158133 = temp_output_37_0_g158133;
				half3 WorldPosition263_g158133 = temp_output_279_0_g158133;
				half3 WorldNormal263_g158133 = temp_output_280_0_g158133;
				half4 localSampleStochastic3D263_g158133 = SampleStochastic3D( Texture263_g158133 , Sampler263_g158133 , Coords263_g158133 , WorldPosition263_g158133 , WorldNormal263_g158133 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g158120 = localSampleExtra275_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g158120 = localSamplePlanar2D238_g158133;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g158120 = localSamplePlanar3D246_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g158120 = localSampleStochastic2D234_g158133;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g158120 = localSampleStochastic3D263_g158133;
				#else
				float4 staticSwitch198_g158120 = localSampleMain276_g158133;
				#endif
				half4 Local_MasksTex199_g158120 = staticSwitch198_g158120;
				float lerpResult23_g158120 = lerp( 1.0 , (Local_MasksTex199_g158120).y , _MainOcclusionValue);
				float4 appendResult73_g158120 = (float4(( (Local_MasksTex199_g158120).x * _MainMetallicValue ) , lerpResult23_g158120 , (Local_MasksTex199_g158120).z , ( (Local_MasksTex199_g158120).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g158120 = appendResult73_g158120;
				float clampResult17_g158126 = clamp( (Local_Masks109_g158120).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158127 = _MainMultiRemap.x;
				float temp_output_10_0_g158127 = ( _MainMultiRemap.y - temp_output_7_0_g158127 );
				half Local_MultiMask78_g158120 = saturate( ( ( clampResult17_g158126 - temp_output_7_0_g158127 ) / ( temp_output_10_0_g158127 + 0.0001 ) ) );
				float lerpResult58_g158120 = lerp( 1.0 , Local_MultiMask78_g158120 , _MainColorMode);
				float4 lerpResult62_g158120 = lerp( _MainColorTwo , _MainColor , lerpResult58_g158120);
				half3 Local_ColorRGB93_g158120 = (lerpResult62_g158120).rgb;
				half3 Local_Albedo139_g158120 = ( Local_AlbedoRGB107_g158120 * Local_ColorRGB93_g158120 );
				float3 In_Albedo3_g158130 = Local_Albedo139_g158120;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158132) = _MainNormalTex;
				SamplerState Sampler276_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g158132 = Local_Coords180_g158120;
				half4 Coords276_g158132 = temp_output_37_0_g158132;
				half2 TexCoord276_g158132 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158132 = SampleMain( Texture276_g158132 , Sampler276_g158132 , Coords276_g158132 , TexCoord276_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158132) = _MainNormalTex;
				SamplerState Sampler275_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158132 = temp_output_37_0_g158132;
				float2 appendResult289_g158132 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158132 = appendResult289_g158132;
				#else
				float2 staticSwitch288_g158132 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158132 = staticSwitch288_g158132;
				half4 localSampleExtra275_g158132 = SampleExtra( Texture275_g158132 , Sampler275_g158132 , Coords275_g158132 , TexCoord275_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158132) = _MainNormalTex;
				SamplerState Sampler238_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158132 = temp_output_37_0_g158132;
				float3 temp_output_279_0_g158132 = Model_PositionWO222_g158120;
				half3 WorldPosition238_g158132 = temp_output_279_0_g158132;
				half4 localSamplePlanar2D238_g158132 = SamplePlanar2D( Texture238_g158132 , Sampler238_g158132 , Coords238_g158132 , WorldPosition238_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158132) = _MainNormalTex;
				SamplerState Sampler246_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition246_g158132 = temp_output_279_0_g158132;
				float3 temp_output_280_0_g158132 = Model_NormalWS226_g158120;
				half3 WorldNormal246_g158132 = temp_output_280_0_g158132;
				half4 localSamplePlanar3D246_g158132 = SamplePlanar3D( Texture246_g158132 , Sampler246_g158132 , Coords246_g158132 , WorldPosition246_g158132 , WorldNormal246_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158132) = _MainNormalTex;
				SamplerState Sampler234_g158132 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158132 = temp_output_37_0_g158132;
				float3 WorldPosition234_g158132 = temp_output_279_0_g158132;
				float4 localSampleStochastic2D234_g158132 = SampleStochastic2D( Texture234_g158132 , Sampler234_g158132 , Coords234_g158132 , WorldPosition234_g158132 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158132) = _MainNormalTex;
				SamplerState Sampler263_g158132 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158132 = temp_output_37_0_g158132;
				half3 WorldPosition263_g158132 = temp_output_279_0_g158132;
				half3 WorldNormal263_g158132 = temp_output_280_0_g158132;
				half4 localSampleStochastic3D263_g158132 = SampleStochastic3D( Texture263_g158132 , Sampler263_g158132 , Coords263_g158132 , WorldPosition263_g158132 , WorldNormal263_g158132 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g158120 = localSampleExtra275_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g158120 = localSamplePlanar2D238_g158132;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g158120 = localSamplePlanar3D246_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g158120 = localSampleStochastic2D234_g158132;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g158120 = localSampleStochastic3D263_g158132;
				#else
				float4 staticSwitch193_g158120 = localSampleMain276_g158132;
				#endif
				half4 Local_NormaTex191_g158120 = staticSwitch193_g158120;
				half4 Normal_Packed45_g158122 = Local_NormaTex191_g158120;
				float2 appendResult58_g158122 = (float2(( (Normal_Packed45_g158122).x * (Normal_Packed45_g158122).w ) , (Normal_Packed45_g158122).y));
				half2 Normal_Default50_g158122 = appendResult58_g158122;
				half2 Normal_ASTC41_g158122 = (Normal_Packed45_g158122).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158122 = Normal_ASTC41_g158122;
				#else
				float2 staticSwitch38_g158122 = Normal_Default50_g158122;
				#endif
				half2 Normal_NO_DTX544_g158122 = (Normal_Packed45_g158122).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158122 = Normal_NO_DTX544_g158122;
				#else
				float2 staticSwitch37_g158122 = staticSwitch38_g158122;
				#endif
				float2 temp_output_26_0_g158120 = ( (staticSwitch37_g158122*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord10.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord11.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g158123 = temp_output_26_0_g158120;
				float2 break71_g158123 = Normal_Planar45_g158123;
				float3 appendResult72_g158123 = (float3(break71_g158123.x , 0.0 , break71_g158123.y));
				float2 temp_output_205_0_g158120 = (mul( ase_worldToTangent, appendResult72_g158123 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g158120 = temp_output_205_0_g158120;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g158120 = float2( 0,0 );
				#else
				float2 staticSwitch204_g158120 = temp_output_26_0_g158120;
				#endif
				half2 Local_NormalTS108_g158120 = staticSwitch204_g158120;
				float2 In_NormalTS3_g158130 = Local_NormalTS108_g158120;
				float3 appendResult68_g158124 = (float3(Local_NormalTS108_g158120 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g158124 = appendResult68_g158124;
				float3 worldNormal74_g158124 = normalize( float3(dot(tanToWorld0,tanNormal74_g158124), dot(tanToWorld1,tanNormal74_g158124), dot(tanToWorld2,tanNormal74_g158124)) );
				half3 Local_NormalWS250_g158120 = worldNormal74_g158124;
				float3 In_NormalWS3_g158130 = Local_NormalWS250_g158120;
				float4 In_Shader3_g158130 = Local_Masks109_g158120;
				float4 In_Emissive3_g158130 = half4(1,1,1,1);
				float3 temp_output_3_0_g158125 = Local_Albedo139_g158120;
				float dotResult20_g158125 = dot( temp_output_3_0_g158125 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g158120 = dotResult20_g158125;
				float In_Grayscale3_g158130 = Local_Grayscale110_g158120;
				float clampResult144_g158120 = clamp( saturate( ( Local_Grayscale110_g158120 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g158120 = clampResult144_g158120;
				float In_Luminosity3_g158130 = Local_Luminosity145_g158120;
				float In_MultiMask3_g158130 = Local_MultiMask78_g158120;
				float temp_output_187_0_g158120 = (Local_AlbedoTex185_g158120).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g158120 = ( temp_output_187_0_g158120 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g158120 = temp_output_187_0_g158120;
				#endif
				half Local_AlphaClip111_g158120 = staticSwitch236_g158120;
				float In_AlphaClip3_g158130 = Local_AlphaClip111_g158120;
				half Local_AlphaFade246_g158120 = (lerpResult62_g158120).a;
				float In_AlphaFade3_g158130 = Local_AlphaFade246_g158120;
				float3 temp_cast_22 = (1.0).xxx;
				float3 In_Translucency3_g158130 = temp_cast_22;
				float In_Transmission3_g158130 = 1.0;
				float In_Thickness3_g158130 = 0.0;
				float In_Diffusion3_g158130 = 0.0;
				{
				Data3_g158130.Dummy = In_Dummy3_g158130;
				Data3_g158130.Albedo = In_Albedo3_g158130;
				Data3_g158130.NormalTS = In_NormalTS3_g158130;
				Data3_g158130.NormalWS = In_NormalWS3_g158130;
				Data3_g158130.Shader = In_Shader3_g158130;
				Data3_g158130.Emissive= In_Emissive3_g158130;
				Data3_g158130.MultiMask = In_MultiMask3_g158130;
				Data3_g158130.Grayscale = In_Grayscale3_g158130;
				Data3_g158130.Luminosity = In_Luminosity3_g158130;
				Data3_g158130.AlphaClip = In_AlphaClip3_g158130;
				Data3_g158130.AlphaFade = In_AlphaFade3_g158130;
				Data3_g158130.Translucency = In_Translucency3_g158130;
				Data3_g158130.Transmission = In_Transmission3_g158130;
				Data3_g158130.Thickness = In_Thickness3_g158130;
				Data3_g158130.Diffusion = In_Diffusion3_g158130;
				}
				TVEVisualData Data4_g158148 = Data3_g158130;
				float Out_Dummy4_g158148 = 0;
				float3 Out_Albedo4_g158148 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158148 = float2( 0,0 );
				float3 Out_NormalWS4_g158148 = float3( 0,0,0 );
				float4 Out_Shader4_g158148 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158148 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158148 = 0;
				float Out_Grayscale4_g158148 = 0;
				float Out_Luminosity4_g158148 = 0;
				float Out_AlphaClip4_g158148 = 0;
				float Out_AlphaFade4_g158148 = 0;
				float3 Out_Translucency4_g158148 = float3( 0,0,0 );
				float Out_Transmission4_g158148 = 0;
				float Out_Thickness4_g158148 = 0;
				float Out_Diffusion4_g158148 = 0;
				{
				Out_Dummy4_g158148 = Data4_g158148.Dummy;
				Out_Albedo4_g158148 = Data4_g158148.Albedo;
				Out_NormalTS4_g158148 = Data4_g158148.NormalTS;
				Out_NormalWS4_g158148 = Data4_g158148.NormalWS;
				Out_Shader4_g158148 = Data4_g158148.Shader;
				Out_Emissive4_g158148= Data4_g158148.Emissive;
				Out_MultiMask4_g158148 = Data4_g158148.MultiMask;
				Out_Grayscale4_g158148 = Data4_g158148.Grayscale;
				Out_Luminosity4_g158148= Data4_g158148.Luminosity;
				Out_AlphaClip4_g158148 = Data4_g158148.AlphaClip;
				Out_AlphaFade4_g158148 = Data4_g158148.AlphaFade;
				Out_Translucency4_g158148 = Data4_g158148.Translucency;
				Out_Transmission4_g158148 = Data4_g158148.Transmission;
				Out_Thickness4_g158148 = Data4_g158148.Thickness;
				Out_Diffusion4_g158148 = Data4_g158148.Diffusion;
				}
				half3 Visual_Albedo527_g158134 = Out_Albedo4_g158148;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158135) = _SecondAlbedoTex;
				SamplerState Sampler276_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158134 = _second_coord_value;
				float4 temp_output_37_0_g158135 = Local_LayerCoords790_g158134;
				half4 Coords276_g158135 = temp_output_37_0_g158135;
				half2 TexCoord276_g158135 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158135 = SampleMain( Texture276_g158135 , Sampler276_g158135 , Coords276_g158135 , TexCoord276_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158135) = _SecondAlbedoTex;
				SamplerState Sampler275_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158135 = temp_output_37_0_g158135;
				float2 appendResult289_g158135 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158135 = appendResult289_g158135;
				#else
				float2 staticSwitch288_g158135 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158135 = staticSwitch288_g158135;
				half4 localSampleExtra275_g158135 = SampleExtra( Texture275_g158135 , Sampler275_g158135 , Coords275_g158135 , TexCoord275_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158135) = _SecondAlbedoTex;
				SamplerState Sampler238_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158135 = temp_output_37_0_g158135;
				TVEModelData Data15_g158146 = Data16_g158068;
				float Out_Dummy15_g158146 = 0;
				float3 Out_PositionOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158146 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158146 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158146 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158146 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158146 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158146 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158146 = float3( 0,0,0 );
				float4 Out_VertexData15_g158146 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158146 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158146 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158146 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158146 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158146 = Data15_g158146.Dummy;
				Out_PositionOS15_g158146 = Data15_g158146.PositionOS;
				Out_PositionWS15_g158146 = Data15_g158146.PositionWS;
				Out_PositionWO15_g158146 = Data15_g158146.PositionWO;
				Out_PositionRawOS15_g158146 = Data15_g158146.PositionRawOS;
				Out_PositionAddOS15_g158146 = Data15_g158146.PositionAddOS;
				Out_PivotOS15_g158146 = Data15_g158146.PivotOS;
				Out_PivotWS15_g158146 = Data15_g158146.PivotWS;
				Out_PivotWO15_g158146 = Data15_g158146.PivotWO;
				Out_NormalOS15_g158146 = Data15_g158146.NormalOS;
				Out_NormalWS15_g158146 = Data15_g158146.NormalWS;
				Out_NormalRawOS15_g158146 = Data15_g158146.NormalRawOS;
				Out_NormalRawWS15_g158146 = Data15_g158146.NormalRawWS;
				Out_TangentOS15_g158146 = Data15_g158146.TangentOS;
				Out_ViewDirWS15_g158146 = Data15_g158146.ViewDirWS;
				Out_VertexData15_g158146 = Data15_g158146.VertexData;
				Out_MotionData15_g158146 = Data15_g158146.MotionData;
				Out_BoundsData15_g158146 = Data15_g158146.BoundsData;
				Out_RotationData15_g158146 = Data15_g158146.RotationData;
				Out_FragmentData15_g158146 = Data15_g158146.FragmentData;
				}
				half3 Model_PositionWO636_g158134 = Out_PositionWO15_g158146;
				float3 temp_output_279_0_g158135 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158135 = temp_output_279_0_g158135;
				half4 localSamplePlanar2D238_g158135 = SamplePlanar2D( Texture238_g158135 , Sampler238_g158135 , Coords238_g158135 , WorldPosition238_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158135) = _SecondAlbedoTex;
				SamplerState Sampler246_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition246_g158135 = temp_output_279_0_g158135;
				half3 Model_NormalWS869_g158134 = Out_NormalWS15_g158146;
				float3 temp_output_280_0_g158135 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158135 = temp_output_280_0_g158135;
				half4 localSamplePlanar3D246_g158135 = SamplePlanar3D( Texture246_g158135 , Sampler246_g158135 , Coords246_g158135 , WorldPosition246_g158135 , WorldNormal246_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158135) = _SecondAlbedoTex;
				SamplerState Sampler234_g158135 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158135 = temp_output_37_0_g158135;
				float3 WorldPosition234_g158135 = temp_output_279_0_g158135;
				float4 localSampleStochastic2D234_g158135 = SampleStochastic2D( Texture234_g158135 , Sampler234_g158135 , Coords234_g158135 , WorldPosition234_g158135 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158135) = _SecondAlbedoTex;
				SamplerState Sampler263_g158135 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158135 = temp_output_37_0_g158135;
				half3 WorldPosition263_g158135 = temp_output_279_0_g158135;
				half3 WorldNormal263_g158135 = temp_output_280_0_g158135;
				half4 localSampleStochastic3D263_g158135 = SampleStochastic3D( Texture263_g158135 , Sampler263_g158135 , Coords263_g158135 , WorldPosition263_g158135 , WorldNormal263_g158135 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158134 = localSampleExtra275_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158134 = localSamplePlanar2D238_g158135;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158134 = localSamplePlanar3D246_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158134 = localSampleStochastic2D234_g158135;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158134 = localSampleStochastic3D263_g158135;
				#else
				float4 staticSwitch693_g158134 = localSampleMain276_g158135;
				#endif
				half4 Local_AlbedoTex777_g158134 = staticSwitch693_g158134;
				float3 lerpResult716_g158134 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158134).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g158134 = lerpResult716_g158134;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158137) = _SecondShaderTex;
				SamplerState Sampler276_g158137 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158137 = Local_LayerCoords790_g158134;
				half4 Coords276_g158137 = temp_output_37_0_g158137;
				half2 TexCoord276_g158137 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158137 = SampleMain( Texture276_g158137 , Sampler276_g158137 , Coords276_g158137 , TexCoord276_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158137) = _SecondShaderTex;
				SamplerState Sampler275_g158137 = sampler_Linear_Repeat;
				half4 Coords275_g158137 = temp_output_37_0_g158137;
				float2 appendResult289_g158137 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158137 = appendResult289_g158137;
				#else
				float2 staticSwitch288_g158137 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158137 = staticSwitch288_g158137;
				half4 localSampleExtra275_g158137 = SampleExtra( Texture275_g158137 , Sampler275_g158137 , Coords275_g158137 , TexCoord275_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158137) = _SecondShaderTex;
				SamplerState Sampler238_g158137 = sampler_Linear_Repeat;
				half4 Coords238_g158137 = temp_output_37_0_g158137;
				float3 temp_output_279_0_g158137 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158137 = temp_output_279_0_g158137;
				half4 localSamplePlanar2D238_g158137 = SamplePlanar2D( Texture238_g158137 , Sampler238_g158137 , Coords238_g158137 , WorldPosition238_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158137) = _SecondShaderTex;
				SamplerState Sampler246_g158137 = sampler_Linear_Repeat;
				half4 Coords246_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition246_g158137 = temp_output_279_0_g158137;
				float3 temp_output_280_0_g158137 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158137 = temp_output_280_0_g158137;
				half4 localSamplePlanar3D246_g158137 = SamplePlanar3D( Texture246_g158137 , Sampler246_g158137 , Coords246_g158137 , WorldPosition246_g158137 , WorldNormal246_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158137) = _SecondShaderTex;
				SamplerState Sampler234_g158137 = sampler_Linear_Repeat;
				float4 Coords234_g158137 = temp_output_37_0_g158137;
				float3 WorldPosition234_g158137 = temp_output_279_0_g158137;
				float4 localSampleStochastic2D234_g158137 = SampleStochastic2D( Texture234_g158137 , Sampler234_g158137 , Coords234_g158137 , WorldPosition234_g158137 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158137) = _SecondShaderTex;
				SamplerState Sampler263_g158137 = sampler_Linear_Repeat;
				half4 Coords263_g158137 = temp_output_37_0_g158137;
				half3 WorldPosition263_g158137 = temp_output_279_0_g158137;
				half3 WorldNormal263_g158137 = temp_output_280_0_g158137;
				half4 localSampleStochastic3D263_g158137 = SampleStochastic3D( Texture263_g158137 , Sampler263_g158137 , Coords263_g158137 , WorldPosition263_g158137 , WorldNormal263_g158137 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158134 = localSampleExtra275_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158134 = localSamplePlanar2D238_g158137;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158134 = localSamplePlanar3D246_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158134 = localSampleStochastic2D234_g158137;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158134 = localSampleStochastic3D263_g158137;
				#else
				float4 staticSwitch722_g158134 = localSampleMain276_g158137;
				#endif
				half4 Local_ShaderTex775_g158134 = staticSwitch722_g158134;
				float lerpResult739_g158134 = lerp( 1.0 , (Local_ShaderTex775_g158134).y , _SecondOcclusionValue);
				float4 appendResult749_g158134 = (float4(( (Local_ShaderTex775_g158134).x * _SecondMetallicValue ) , lerpResult739_g158134 , (Local_ShaderTex775_g158134).z , ( (Local_ShaderTex775_g158134).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g158134 = appendResult749_g158134;
				float clampResult17_g158141 = clamp( (Local_Masks750_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158142 = _SecondMultiRemap.x;
				float temp_output_10_0_g158142 = ( _SecondMultiRemap.y - temp_output_7_0_g158142 );
				float temp_output_765_0_g158134 = saturate( ( ( clampResult17_g158141 - temp_output_7_0_g158142 ) / ( temp_output_10_0_g158142 + 0.0001 ) ) );
				half Local_MultiMask767_g158134 = temp_output_765_0_g158134;
				float lerpResult705_g158134 = lerp( 1.0 , Local_MultiMask767_g158134 , _SecondColorMode);
				float4 lerpResult706_g158134 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g158134);
				half3 Local_ColorRGB774_g158134 = (lerpResult706_g158134).rgb;
				half3 Local_Albedo768_g158134 = ( Local_AlbedoRGB771_g158134 * Local_ColorRGB774_g158134 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158161 = 2.0;
				#else
				float staticSwitch1_g158161 = 4.594794;
				#endif
				float3 lerpResult985_g158134 = lerp( Local_Albedo768_g158134 , ( Visual_Albedo527_g158134 * Local_Albedo768_g158134 * staticSwitch1_g158161 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158138) = _SecondMaskTex;
				SamplerState Sampler276_g158138 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g158134 = _second_mask_coord_value;
				float4 temp_output_37_0_g158138 = Local_BlendCoords813_g158134;
				half4 Coords276_g158138 = temp_output_37_0_g158138;
				half2 TexCoord276_g158138 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158138 = SampleMain( Texture276_g158138 , Sampler276_g158138 , Coords276_g158138 , TexCoord276_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158138) = _SecondMaskTex;
				SamplerState Sampler275_g158138 = sampler_Linear_Repeat;
				half4 Coords275_g158138 = temp_output_37_0_g158138;
				float2 appendResult289_g158138 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158138 = appendResult289_g158138;
				#else
				float2 staticSwitch288_g158138 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158138 = staticSwitch288_g158138;
				half4 localSampleExtra275_g158138 = SampleExtra( Texture275_g158138 , Sampler275_g158138 , Coords275_g158138 , TexCoord275_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158138) = _SecondMaskTex;
				SamplerState Sampler238_g158138 = sampler_Linear_Repeat;
				half4 Coords238_g158138 = temp_output_37_0_g158138;
				float3 temp_output_279_0_g158138 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158138 = temp_output_279_0_g158138;
				half4 localSamplePlanar2D238_g158138 = SamplePlanar2D( Texture238_g158138 , Sampler238_g158138 , Coords238_g158138 , WorldPosition238_g158138 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158138) = _SecondMaskTex;
				SamplerState Sampler246_g158138 = sampler_Linear_Repeat;
				half4 Coords246_g158138 = temp_output_37_0_g158138;
				half3 WorldPosition246_g158138 = temp_output_279_0_g158138;
				float3 temp_output_280_0_g158138 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158138 = temp_output_280_0_g158138;
				half4 localSamplePlanar3D246_g158138 = SamplePlanar3D( Texture246_g158138 , Sampler246_g158138 , Coords246_g158138 , WorldPosition246_g158138 , WorldNormal246_g158138 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158134 = localSampleExtra275_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158134 = localSamplePlanar2D238_g158138;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158134 = localSamplePlanar3D246_g158138;
				#else
				float4 staticSwitch817_g158134 = localSampleMain276_g158138;
				#endif
				half4 Local_MaskTex861_g158134 = staticSwitch817_g158134;
				float clampResult17_g158152 = clamp( (Local_MaskTex861_g158134).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158151 = _SecondMaskRemap.x;
				float temp_output_10_0_g158151 = ( _SecondMaskRemap.y - temp_output_7_0_g158151 );
				float lerpResult1015_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158152 - temp_output_7_0_g158151 ) / ( temp_output_10_0_g158151 + 0.0001 ) ) ) , _SecondMaskValue);
				#ifdef TVE_SECOND_MASK
				float staticSwitch893_g158134 = lerpResult1015_g158134;
				#else
				float staticSwitch893_g158134 = 1.0;
				#endif
				half Blend_TexMask429_g158134 = staticSwitch893_g158134;
				half3 Visual_NormalWS951_g158134 = Out_NormalWS4_g158148;
				float clampResult17_g158153 = clamp( saturate( (Visual_NormalWS951_g158134).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158154 = _SecondProjRemap.x;
				float temp_output_10_0_g158154 = ( _SecondProjRemap.y - temp_output_7_0_g158154 );
				float lerpResult996_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158153 - temp_output_7_0_g158154 ) / ( temp_output_10_0_g158154 + 0.0001 ) ) ) , _SecondProjValue);
				#ifdef TVE_SECOND_PROJ
				float staticSwitch878_g158134 = lerpResult996_g158134;
				#else
				float staticSwitch878_g158134 = 1.0;
				#endif
				half Blend_ProjMask434_g158134 = staticSwitch878_g158134;
				half4 Model_VertexMasks964_g158134 = Out_VertexData15_g158146;
				float4 break965_g158134 = Model_VertexMasks964_g158134;
				float4 break33_g158155 = _second_vert_mode;
				float temp_output_30_0_g158155 = ( break965_g158134.x * break33_g158155.x );
				float temp_output_29_0_g158155 = ( break965_g158134.y * break33_g158155.y );
				float temp_output_31_0_g158155 = ( break965_g158134.z * break33_g158155.z );
				float temp_output_28_0_g158155 = ( temp_output_30_0_g158155 + temp_output_29_0_g158155 + temp_output_31_0_g158155 + ( break965_g158134.w * break33_g158155.w ) );
				float clampResult17_g158149 = clamp( temp_output_28_0_g158155 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158150 = _SecondMeshRemap.x;
				float temp_output_10_0_g158150 = ( _SecondMeshRemap.y - temp_output_7_0_g158150 );
				float lerpResult1017_g158134 = lerp( 1.0 , saturate( ( ( clampResult17_g158149 - temp_output_7_0_g158150 ) / ( temp_output_10_0_g158150 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g158163 = lerpResult1017_g158134;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158163 = ( temp_output_6_0_g158163 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158163 = temp_output_6_0_g158163;
				#endif
				#ifdef TVE_SECOND_VERT
				float staticSwitch917_g158134 = staticSwitch14_g158163;
				#else
				float staticSwitch917_g158134 = 1.0;
				#endif
				half Blend_VertMask918_g158134 = staticSwitch917_g158134;
				float localBuildGlobalData204_g158069 = ( 0.0 );
				TVEGlobalData Data204_g158069 = (TVEGlobalData)0;
				half Dummy211_g158069 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g158069 = Dummy211_g158069;
				float4 temp_output_362_164_g158069 = TVE_CoatParams;
				half4 Coat_Params302_g158069 = temp_output_362_164_g158069;
				float4 In_CoatParams204_g158069 = Coat_Params302_g158069;
				float4 temp_output_361_164_g158069 = TVE_PaintParams;
				half4 Paint_Params71_g158069 = temp_output_361_164_g158069;
				float4 In_PaintParams204_g158069 = Paint_Params71_g158069;
				float4 temp_output_365_163_g158069 = TVE_GlowParams;
				half4 Glow_Params248_g158069 = temp_output_365_163_g158069;
				float4 In_GlowParams204_g158069 = Glow_Params248_g158069;
				float4 temp_output_363_141_g158069 = TVE_AtmoParams;
				half4 Atmo_Params80_g158069 = temp_output_363_141_g158069;
				float4 In_AtmoParams204_g158069 = Atmo_Params80_g158069;
				float4 temp_output_364_139_g158069 = TVE_FormParams;
				half4 Form_Params112_g158069 = temp_output_364_139_g158069;
				float4 In_FormParams204_g158069 = Form_Params112_g158069;
				float4 temp_output_366_145_g158069 = TVE_WindParams;
				half4 Wind_Params88_g158069 = temp_output_366_145_g158069;
				float4 In_WindParams204_g158069 = Wind_Params88_g158069;
				float4 temp_output_367_145_g158069 = TVE_PushParams;
				half4 Push_Params335_g158069 = temp_output_367_145_g158069;
				float4 In_PushParams204_g158069 = Push_Params335_g158069;
				{
				Data204_g158069.Dummy = In_Dummy204_g158069;
				Data204_g158069.CoatParams = In_CoatParams204_g158069;
				Data204_g158069.PaintParams = In_PaintParams204_g158069;
				Data204_g158069.GlowParams = In_GlowParams204_g158069;
				Data204_g158069.AtmoParams = In_AtmoParams204_g158069;
				Data204_g158069.FormParams= In_FormParams204_g158069;
				Data204_g158069.WindParams = In_WindParams204_g158069;
				Data204_g158069.PushParams = In_PushParams204_g158069;
				}
				TVEGlobalData Data15_g158147 = Data204_g158069;
				float Out_Dummy15_g158147 = 0;
				float4 Out_CoatParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158147 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158147 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158147 = Data15_g158147.Dummy;
				Out_CoatParams15_g158147 = Data15_g158147.CoatParams;
				Out_PaintParams15_g158147 = Data15_g158147.PaintParams;
				Out_GlowParams15_g158147 = Data15_g158147.GlowParams;
				Out_AtmoParams15_g158147= Data15_g158147.AtmoParams;
				Out_FormParams15_g158147 = Data15_g158147.FormParams;
				Out_LandParams15_g158147 = Data15_g158147.LandParams;
				Out_WindParams15_g158147 = Data15_g158147.WindParams;
				Out_PushParams15_g158147 = Data15_g158147.PushParams;
				}
				half4 Global_CoatParams975_g158134 = Out_CoatParams15_g158147;
				float lerpResult1013_g158134 = lerp( 1.0 , (Global_CoatParams975_g158134).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g158134 = lerpResult1013_g158134;
				#else
				float staticSwitch971_g158134 = 1.0;
				#endif
				half Blend_GlobalMask972_g158134 = staticSwitch971_g158134;
				float temp_output_432_0_g158134 = ( _SecondIntensityValue * Blend_TexMask429_g158134 * Blend_ProjMask434_g158134 * Blend_VertMask918_g158134 * Blend_GlobalMask972_g158134 );
				float clampResult17_g158157 = clamp( temp_output_432_0_g158134 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158156 = _SecondBlendRemap.x;
				float temp_output_10_0_g158156 = ( _SecondBlendRemap.y - temp_output_7_0_g158156 );
				half Blend_Mask412_g158134 = ( saturate( ( ( clampResult17_g158157 - temp_output_7_0_g158156 ) / ( temp_output_10_0_g158156 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g158134 = lerp( Visual_Albedo527_g158134 , lerpResult985_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g158134 = lerpResult403_g158134;
				#else
				float3 staticSwitch415_g158134 = Visual_Albedo527_g158134;
				#endif
				half3 Final_Albedo601_g158134 = staticSwitch415_g158134;
				float3 In_Albedo3_g158145 = Final_Albedo601_g158134;
				half2 Visual_NormalTS529_g158134 = Out_NormalTS4_g158148;
				float2 lerpResult40_g158159 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158134 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158136) = _SecondNormalTex;
				SamplerState Sampler276_g158136 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158136 = Local_LayerCoords790_g158134;
				half4 Coords276_g158136 = temp_output_37_0_g158136;
				half2 TexCoord276_g158136 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158136 = SampleMain( Texture276_g158136 , Sampler276_g158136 , Coords276_g158136 , TexCoord276_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158136) = _SecondNormalTex;
				SamplerState Sampler275_g158136 = sampler_Linear_Repeat;
				half4 Coords275_g158136 = temp_output_37_0_g158136;
				float2 appendResult289_g158136 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158136 = appendResult289_g158136;
				#else
				float2 staticSwitch288_g158136 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158136 = staticSwitch288_g158136;
				half4 localSampleExtra275_g158136 = SampleExtra( Texture275_g158136 , Sampler275_g158136 , Coords275_g158136 , TexCoord275_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158136) = _SecondNormalTex;
				SamplerState Sampler238_g158136 = sampler_Linear_Repeat;
				half4 Coords238_g158136 = temp_output_37_0_g158136;
				float3 temp_output_279_0_g158136 = Model_PositionWO636_g158134;
				half3 WorldPosition238_g158136 = temp_output_279_0_g158136;
				half4 localSamplePlanar2D238_g158136 = SamplePlanar2D( Texture238_g158136 , Sampler238_g158136 , Coords238_g158136 , WorldPosition238_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158136) = _SecondNormalTex;
				SamplerState Sampler246_g158136 = sampler_Linear_Repeat;
				half4 Coords246_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition246_g158136 = temp_output_279_0_g158136;
				float3 temp_output_280_0_g158136 = Model_NormalWS869_g158134;
				half3 WorldNormal246_g158136 = temp_output_280_0_g158136;
				half4 localSamplePlanar3D246_g158136 = SamplePlanar3D( Texture246_g158136 , Sampler246_g158136 , Coords246_g158136 , WorldPosition246_g158136 , WorldNormal246_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158136) = _SecondNormalTex;
				SamplerState Sampler234_g158136 = sampler_Linear_Repeat;
				float4 Coords234_g158136 = temp_output_37_0_g158136;
				float3 WorldPosition234_g158136 = temp_output_279_0_g158136;
				float4 localSampleStochastic2D234_g158136 = SampleStochastic2D( Texture234_g158136 , Sampler234_g158136 , Coords234_g158136 , WorldPosition234_g158136 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158136) = _SecondNormalTex;
				SamplerState Sampler263_g158136 = sampler_Linear_Repeat;
				half4 Coords263_g158136 = temp_output_37_0_g158136;
				half3 WorldPosition263_g158136 = temp_output_279_0_g158136;
				half3 WorldNormal263_g158136 = temp_output_280_0_g158136;
				half4 localSampleStochastic3D263_g158136 = SampleStochastic3D( Texture263_g158136 , Sampler263_g158136 , Coords263_g158136 , WorldPosition263_g158136 , WorldNormal263_g158136 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158134 = localSampleExtra275_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158134 = localSamplePlanar2D238_g158136;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158134 = localSamplePlanar3D246_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158134 = localSampleStochastic2D234_g158136;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158134 = localSampleStochastic3D263_g158136;
				#else
				float4 staticSwitch698_g158134 = localSampleMain276_g158136;
				#endif
				half4 Local_NormalTex776_g158134 = staticSwitch698_g158134;
				half4 Normal_Packed45_g158139 = Local_NormalTex776_g158134;
				float2 appendResult58_g158139 = (float2(( (Normal_Packed45_g158139).x * (Normal_Packed45_g158139).w ) , (Normal_Packed45_g158139).y));
				half2 Normal_Default50_g158139 = appendResult58_g158139;
				half2 Normal_ASTC41_g158139 = (Normal_Packed45_g158139).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158139 = Normal_ASTC41_g158139;
				#else
				float2 staticSwitch38_g158139 = Normal_Default50_g158139;
				#endif
				half2 Normal_NO_DTX544_g158139 = (Normal_Packed45_g158139).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158139 = Normal_NO_DTX544_g158139;
				#else
				float2 staticSwitch37_g158139 = staticSwitch38_g158139;
				#endif
				float2 temp_output_724_0_g158134 = ( (staticSwitch37_g158139*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g158140 = temp_output_724_0_g158134;
				float2 break71_g158140 = Normal_Planar45_g158140;
				float3 appendResult72_g158140 = (float3(break71_g158140.x , 0.0 , break71_g158140.y));
				float2 temp_output_858_0_g158134 = (mul( ase_worldToTangent, appendResult72_g158140 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158134 = temp_output_858_0_g158134;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158134 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158134 = temp_output_724_0_g158134;
				#endif
				half2 Local_NormalTS729_g158134 = staticSwitch727_g158134;
				float2 temp_output_36_0_g158159 = ( lerpResult40_g158159 + Local_NormalTS729_g158134 );
				float2 lerpResult405_g158134 = lerp( Visual_NormalTS529_g158134 , temp_output_36_0_g158159 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g158134 = lerpResult405_g158134;
				#else
				float2 staticSwitch418_g158134 = Visual_NormalTS529_g158134;
				#endif
				half2 Final_NormalTS612_g158134 = staticSwitch418_g158134;
				float2 In_NormalTS3_g158145 = Final_NormalTS612_g158134;
				float3 appendResult68_g158160 = (float3(Final_NormalTS612_g158134 , 1.0));
				float3 tanNormal74_g158160 = appendResult68_g158160;
				float3 worldNormal74_g158160 = normalize( float3(dot(tanToWorld0,tanNormal74_g158160), dot(tanToWorld1,tanNormal74_g158160), dot(tanToWorld2,tanNormal74_g158160)) );
				half3 Final_NormalWS950_g158134 = worldNormal74_g158160;
				float3 In_NormalWS3_g158145 = Final_NormalWS950_g158134;
				half4 Visual_Shader531_g158134 = Out_Shader4_g158148;
				float4 lerpResult994_g158134 = lerp( Local_Masks750_g158134 , ( Visual_Shader531_g158134 * Local_Masks750_g158134 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g158134 = lerp( Visual_Shader531_g158134 , lerpResult994_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g158134 = lerpResult440_g158134;
				#else
				float4 staticSwitch451_g158134 = Visual_Shader531_g158134;
				#endif
				half4 Final_Masks613_g158134 = staticSwitch451_g158134;
				float4 In_Shader3_g158145 = Final_Masks613_g158134;
				float4 In_Emissive3_g158145 = Out_Emissive4_g158148;
				float3 temp_output_3_0_g158162 = Final_Albedo601_g158134;
				float dotResult20_g158162 = dot( temp_output_3_0_g158162 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158134 = dotResult20_g158162;
				float In_Grayscale3_g158145 = Final_Grayscale615_g158134;
				float clampResult651_g158134 = clamp( saturate( ( Final_Grayscale615_g158134 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158134 = clampResult651_g158134;
				float In_Luminosity3_g158145 = Final_Luminosity652_g158134;
				half Visual_MultiMask547_g158134 = Out_MultiMask4_g158148;
				float lerpResult477_g158134 = lerp( Visual_MultiMask547_g158134 , Local_MultiMask767_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch482_g158134 = lerpResult477_g158134;
				#else
				float staticSwitch482_g158134 = Visual_MultiMask547_g158134;
				#endif
				half Final_MultiMask572_g158134 = staticSwitch482_g158134;
				float In_MultiMask3_g158145 = Final_MultiMask572_g158134;
				half Visual_AlphaClip559_g158134 = Out_AlphaClip4_g158148;
				float temp_output_718_0_g158134 = (Local_AlbedoTex777_g158134).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g158134 = ( temp_output_718_0_g158134 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g158134 = temp_output_718_0_g158134;
				#endif
				half Local_AlphaClip772_g158134 = staticSwitch932_g158134;
				float lerpResult448_g158134 = lerp( Visual_AlphaClip559_g158134 , Local_AlphaClip772_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch564_g158134 = lerpResult448_g158134;
				#else
				float staticSwitch564_g158134 = Visual_AlphaClip559_g158134;
				#endif
				half Final_AlphaClip602_g158134 = staticSwitch564_g158134;
				float In_AlphaClip3_g158145 = Final_AlphaClip602_g158134;
				half Visual_AlphaFade588_g158134 = Out_AlphaFade4_g158148;
				half Local_AlphaFade773_g158134 = (lerpResult706_g158134).a;
				float lerpResult604_g158134 = lerp( Visual_AlphaFade588_g158134 , Local_AlphaFade773_g158134 , Blend_Mask412_g158134);
				#ifdef TVE_SECOND
				float staticSwitch608_g158134 = lerpResult604_g158134;
				#else
				float staticSwitch608_g158134 = Visual_AlphaFade588_g158134;
				#endif
				half Final_AlphaFade611_g158134 = staticSwitch608_g158134;
				float In_AlphaFade3_g158145 = Final_AlphaFade611_g158134;
				float3 In_Translucency3_g158145 = Out_Translucency4_g158148;
				float In_Transmission3_g158145 = Out_Transmission4_g158148;
				float In_Thickness3_g158145 = Out_Thickness4_g158148;
				float In_Diffusion3_g158145 = Out_Diffusion4_g158148;
				{
				Data3_g158145.Dummy = In_Dummy3_g158145;
				Data3_g158145.Albedo = In_Albedo3_g158145;
				Data3_g158145.NormalTS = In_NormalTS3_g158145;
				Data3_g158145.NormalWS = In_NormalWS3_g158145;
				Data3_g158145.Shader = In_Shader3_g158145;
				Data3_g158145.Emissive= In_Emissive3_g158145;
				Data3_g158145.MultiMask = In_MultiMask3_g158145;
				Data3_g158145.Grayscale = In_Grayscale3_g158145;
				Data3_g158145.Luminosity = In_Luminosity3_g158145;
				Data3_g158145.AlphaClip = In_AlphaClip3_g158145;
				Data3_g158145.AlphaFade = In_AlphaFade3_g158145;
				Data3_g158145.Translucency = In_Translucency3_g158145;
				Data3_g158145.Transmission = In_Transmission3_g158145;
				Data3_g158145.Thickness = In_Thickness3_g158145;
				Data3_g158145.Diffusion = In_Diffusion3_g158145;
				}
				TVEVisualData Data4_g158181 = Data3_g158145;
				float Out_Dummy4_g158181 = 0;
				float3 Out_Albedo4_g158181 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158181 = float2( 0,0 );
				float3 Out_NormalWS4_g158181 = float3( 0,0,0 );
				float4 Out_Shader4_g158181 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158181 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158181 = 0;
				float Out_Grayscale4_g158181 = 0;
				float Out_Luminosity4_g158181 = 0;
				float Out_AlphaClip4_g158181 = 0;
				float Out_AlphaFade4_g158181 = 0;
				float3 Out_Translucency4_g158181 = float3( 0,0,0 );
				float Out_Transmission4_g158181 = 0;
				float Out_Thickness4_g158181 = 0;
				float Out_Diffusion4_g158181 = 0;
				{
				Out_Dummy4_g158181 = Data4_g158181.Dummy;
				Out_Albedo4_g158181 = Data4_g158181.Albedo;
				Out_NormalTS4_g158181 = Data4_g158181.NormalTS;
				Out_NormalWS4_g158181 = Data4_g158181.NormalWS;
				Out_Shader4_g158181 = Data4_g158181.Shader;
				Out_Emissive4_g158181= Data4_g158181.Emissive;
				Out_MultiMask4_g158181 = Data4_g158181.MultiMask;
				Out_Grayscale4_g158181 = Data4_g158181.Grayscale;
				Out_Luminosity4_g158181= Data4_g158181.Luminosity;
				Out_AlphaClip4_g158181 = Data4_g158181.AlphaClip;
				Out_AlphaFade4_g158181 = Data4_g158181.AlphaFade;
				Out_Translucency4_g158181 = Data4_g158181.Translucency;
				Out_Transmission4_g158181 = Data4_g158181.Transmission;
				Out_Thickness4_g158181 = Data4_g158181.Thickness;
				Out_Diffusion4_g158181 = Data4_g158181.Diffusion;
				}
				half3 Visual_Albedo527_g158164 = Out_Albedo4_g158181;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler276_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Local_LayerCoords790_g158164 = _third_coord_value;
				float4 temp_output_37_0_g158165 = Local_LayerCoords790_g158164;
				half4 Coords276_g158165 = temp_output_37_0_g158165;
				half2 TexCoord276_g158165 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158165 = SampleMain( Texture276_g158165 , Sampler276_g158165 , Coords276_g158165 , TexCoord276_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler275_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords275_g158165 = temp_output_37_0_g158165;
				float2 appendResult289_g158165 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158165 = appendResult289_g158165;
				#else
				float2 staticSwitch288_g158165 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158165 = staticSwitch288_g158165;
				half4 localSampleExtra275_g158165 = SampleExtra( Texture275_g158165 , Sampler275_g158165 , Coords275_g158165 , TexCoord275_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler238_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords238_g158165 = temp_output_37_0_g158165;
				TVEModelData Data15_g158180 = Data16_g158068;
				float Out_Dummy15_g158180 = 0;
				float3 Out_PositionOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158180 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158180 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158180 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158180 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158180 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158180 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158180 = float3( 0,0,0 );
				float4 Out_VertexData15_g158180 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158180 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158180 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158180 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158180 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158180 = Data15_g158180.Dummy;
				Out_PositionOS15_g158180 = Data15_g158180.PositionOS;
				Out_PositionWS15_g158180 = Data15_g158180.PositionWS;
				Out_PositionWO15_g158180 = Data15_g158180.PositionWO;
				Out_PositionRawOS15_g158180 = Data15_g158180.PositionRawOS;
				Out_PositionAddOS15_g158180 = Data15_g158180.PositionAddOS;
				Out_PivotOS15_g158180 = Data15_g158180.PivotOS;
				Out_PivotWS15_g158180 = Data15_g158180.PivotWS;
				Out_PivotWO15_g158180 = Data15_g158180.PivotWO;
				Out_NormalOS15_g158180 = Data15_g158180.NormalOS;
				Out_NormalWS15_g158180 = Data15_g158180.NormalWS;
				Out_NormalRawOS15_g158180 = Data15_g158180.NormalRawOS;
				Out_NormalRawWS15_g158180 = Data15_g158180.NormalRawWS;
				Out_TangentOS15_g158180 = Data15_g158180.TangentOS;
				Out_ViewDirWS15_g158180 = Data15_g158180.ViewDirWS;
				Out_VertexData15_g158180 = Data15_g158180.VertexData;
				Out_MotionData15_g158180 = Data15_g158180.MotionData;
				Out_BoundsData15_g158180 = Data15_g158180.BoundsData;
				Out_RotationData15_g158180 = Data15_g158180.RotationData;
				Out_FragmentData15_g158180 = Data15_g158180.FragmentData;
				}
				half3 Model_PositionWO636_g158164 = Out_PositionWO15_g158180;
				float3 temp_output_279_0_g158165 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158165 = temp_output_279_0_g158165;
				half4 localSamplePlanar2D238_g158165 = SamplePlanar2D( Texture238_g158165 , Sampler238_g158165 , Coords238_g158165 , WorldPosition238_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler246_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition246_g158165 = temp_output_279_0_g158165;
				half3 Model_NormalWS869_g158164 = Out_NormalWS15_g158180;
				float3 temp_output_280_0_g158165 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158165 = temp_output_280_0_g158165;
				half4 localSamplePlanar3D246_g158165 = SamplePlanar3D( Texture246_g158165 , Sampler246_g158165 , Coords246_g158165 , WorldPosition246_g158165 , WorldNormal246_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler234_g158165 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g158165 = temp_output_37_0_g158165;
				float3 WorldPosition234_g158165 = temp_output_279_0_g158165;
				float4 localSampleStochastic2D234_g158165 = SampleStochastic2D( Texture234_g158165 , Sampler234_g158165 , Coords234_g158165 , WorldPosition234_g158165 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158165) = _ThirdAlbedoTex;
				SamplerState Sampler263_g158165 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g158165 = temp_output_37_0_g158165;
				half3 WorldPosition263_g158165 = temp_output_279_0_g158165;
				half3 WorldNormal263_g158165 = temp_output_280_0_g158165;
				half4 localSampleStochastic3D263_g158165 = SampleStochastic3D( Texture263_g158165 , Sampler263_g158165 , Coords263_g158165 , WorldPosition263_g158165 , WorldNormal263_g158165 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g158164 = localSampleExtra275_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g158164 = localSamplePlanar2D238_g158165;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g158164 = localSamplePlanar3D246_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g158164 = localSampleStochastic2D234_g158165;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g158164 = localSampleStochastic3D263_g158165;
				#else
				float4 staticSwitch693_g158164 = localSampleMain276_g158165;
				#endif
				half4 Local_AlbedoTex777_g158164 = staticSwitch693_g158164;
				float3 lerpResult716_g158164 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g158164).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g158164 = lerpResult716_g158164;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158167) = _ThirdShaderTex;
				SamplerState Sampler276_g158167 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158167 = Local_LayerCoords790_g158164;
				half4 Coords276_g158167 = temp_output_37_0_g158167;
				half2 TexCoord276_g158167 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158167 = SampleMain( Texture276_g158167 , Sampler276_g158167 , Coords276_g158167 , TexCoord276_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158167) = _ThirdShaderTex;
				SamplerState Sampler275_g158167 = sampler_Linear_Repeat;
				half4 Coords275_g158167 = temp_output_37_0_g158167;
				float2 appendResult289_g158167 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158167 = appendResult289_g158167;
				#else
				float2 staticSwitch288_g158167 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158167 = staticSwitch288_g158167;
				half4 localSampleExtra275_g158167 = SampleExtra( Texture275_g158167 , Sampler275_g158167 , Coords275_g158167 , TexCoord275_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158167) = _ThirdShaderTex;
				SamplerState Sampler238_g158167 = sampler_Linear_Repeat;
				half4 Coords238_g158167 = temp_output_37_0_g158167;
				float3 temp_output_279_0_g158167 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158167 = temp_output_279_0_g158167;
				half4 localSamplePlanar2D238_g158167 = SamplePlanar2D( Texture238_g158167 , Sampler238_g158167 , Coords238_g158167 , WorldPosition238_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158167) = _ThirdShaderTex;
				SamplerState Sampler246_g158167 = sampler_Linear_Repeat;
				half4 Coords246_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition246_g158167 = temp_output_279_0_g158167;
				float3 temp_output_280_0_g158167 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158167 = temp_output_280_0_g158167;
				half4 localSamplePlanar3D246_g158167 = SamplePlanar3D( Texture246_g158167 , Sampler246_g158167 , Coords246_g158167 , WorldPosition246_g158167 , WorldNormal246_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158167) = _ThirdShaderTex;
				SamplerState Sampler234_g158167 = sampler_Linear_Repeat;
				float4 Coords234_g158167 = temp_output_37_0_g158167;
				float3 WorldPosition234_g158167 = temp_output_279_0_g158167;
				float4 localSampleStochastic2D234_g158167 = SampleStochastic2D( Texture234_g158167 , Sampler234_g158167 , Coords234_g158167 , WorldPosition234_g158167 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158167) = _ThirdShaderTex;
				SamplerState Sampler263_g158167 = sampler_Linear_Repeat;
				half4 Coords263_g158167 = temp_output_37_0_g158167;
				half3 WorldPosition263_g158167 = temp_output_279_0_g158167;
				half3 WorldNormal263_g158167 = temp_output_280_0_g158167;
				half4 localSampleStochastic3D263_g158167 = SampleStochastic3D( Texture263_g158167 , Sampler263_g158167 , Coords263_g158167 , WorldPosition263_g158167 , WorldNormal263_g158167 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g158164 = localSampleExtra275_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g158164 = localSamplePlanar2D238_g158167;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g158164 = localSamplePlanar3D246_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g158164 = localSampleStochastic2D234_g158167;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g158164 = localSampleStochastic3D263_g158167;
				#else
				float4 staticSwitch722_g158164 = localSampleMain276_g158167;
				#endif
				half4 Local_ShaderTex775_g158164 = staticSwitch722_g158164;
				float lerpResult739_g158164 = lerp( 1.0 , (Local_ShaderTex775_g158164).y , _ThirdOcclusionValue);
				float4 appendResult749_g158164 = (float4(( (Local_ShaderTex775_g158164).x * _ThirdMetallicValue ) , lerpResult739_g158164 , (Local_ShaderTex775_g158164).z , ( (Local_ShaderTex775_g158164).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g158164 = appendResult749_g158164;
				float clampResult17_g158170 = clamp( (Local_Masks750_g158164).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158171 = _ThirdMultiRemap.x;
				float temp_output_10_0_g158171 = ( _ThirdMultiRemap.y - temp_output_7_0_g158171 );
				float temp_output_765_0_g158164 = saturate( ( ( clampResult17_g158170 - temp_output_7_0_g158171 ) / ( temp_output_10_0_g158171 + 0.0001 ) ) );
				half Local_MultiMask767_g158164 = temp_output_765_0_g158164;
				float lerpResult705_g158164 = lerp( 1.0 , Local_MultiMask767_g158164 , _ThirdColorMode);
				float4 lerpResult706_g158164 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g158164);
				half3 Local_ColorRGB774_g158164 = (lerpResult706_g158164).rgb;
				half3 Local_Albedo768_g158164 = ( Local_AlbedoRGB771_g158164 * Local_ColorRGB774_g158164 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g158189 = 2.0;
				#else
				float staticSwitch1_g158189 = 4.594794;
				#endif
				float3 lerpResult985_g158164 = lerp( Local_Albedo768_g158164 , ( Visual_Albedo527_g158164 * Local_Albedo768_g158164 * staticSwitch1_g158189 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158192) = _ThirdMaskTex;
				SamplerState Sampler276_g158192 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g158164 = _third_mask_coord_value;
				float4 temp_output_37_0_g158192 = Local_MaskCoords813_g158164;
				half4 Coords276_g158192 = temp_output_37_0_g158192;
				half2 TexCoord276_g158192 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158192 = SampleMain( Texture276_g158192 , Sampler276_g158192 , Coords276_g158192 , TexCoord276_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158192) = _ThirdMaskTex;
				SamplerState Sampler275_g158192 = sampler_Linear_Repeat;
				half4 Coords275_g158192 = temp_output_37_0_g158192;
				float2 appendResult289_g158192 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158192 = appendResult289_g158192;
				#else
				float2 staticSwitch288_g158192 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158192 = staticSwitch288_g158192;
				half4 localSampleExtra275_g158192 = SampleExtra( Texture275_g158192 , Sampler275_g158192 , Coords275_g158192 , TexCoord275_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158192) = _ThirdMaskTex;
				SamplerState Sampler238_g158192 = sampler_Linear_Repeat;
				half4 Coords238_g158192 = temp_output_37_0_g158192;
				float3 temp_output_279_0_g158192 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158192 = temp_output_279_0_g158192;
				half4 localSamplePlanar2D238_g158192 = SamplePlanar2D( Texture238_g158192 , Sampler238_g158192 , Coords238_g158192 , WorldPosition238_g158192 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158192) = _ThirdMaskTex;
				SamplerState Sampler246_g158192 = sampler_Linear_Repeat;
				half4 Coords246_g158192 = temp_output_37_0_g158192;
				half3 WorldPosition246_g158192 = temp_output_279_0_g158192;
				float3 temp_output_280_0_g158192 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158192 = temp_output_280_0_g158192;
				half4 localSamplePlanar3D246_g158192 = SamplePlanar3D( Texture246_g158192 , Sampler246_g158192 , Coords246_g158192 , WorldPosition246_g158192 , WorldNormal246_g158192 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g158164 = localSampleExtra275_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g158164 = localSamplePlanar2D238_g158192;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g158164 = localSamplePlanar3D246_g158192;
				#else
				float4 staticSwitch817_g158164 = localSampleMain276_g158192;
				#endif
				half4 Local_MaskTex861_g158164 = staticSwitch817_g158164;
				float clampResult17_g158175 = clamp( (Local_MaskTex861_g158164).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g158176 = _ThirdMaskRemap.x;
				float temp_output_10_0_g158176 = ( _ThirdMaskRemap.y - temp_output_7_0_g158176 );
				float lerpResult1028_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158175 - temp_output_7_0_g158176 ) / ( temp_output_10_0_g158176 + 0.0001 ) ) ) , _ThirdMaskValue);
				#ifdef TVE_THIRD_MASK
				float staticSwitch892_g158164 = lerpResult1028_g158164;
				#else
				float staticSwitch892_g158164 = 1.0;
				#endif
				half Detail_TexMask429_g158164 = staticSwitch892_g158164;
				half4 Model_VertexMasks960_g158164 = Out_VertexData15_g158180;
				float4 break961_g158164 = Model_VertexMasks960_g158164;
				float4 break33_g158179 = _third_vert_mode;
				float temp_output_30_0_g158179 = ( break961_g158164.x * break33_g158179.x );
				float temp_output_29_0_g158179 = ( break961_g158164.y * break33_g158179.y );
				float temp_output_31_0_g158179 = ( break961_g158164.z * break33_g158179.z );
				float temp_output_28_0_g158179 = ( temp_output_30_0_g158179 + temp_output_29_0_g158179 + temp_output_31_0_g158179 + ( break961_g158164.w * break33_g158179.w ) );
				float clampResult17_g158173 = clamp( temp_output_28_0_g158179 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158174 = _ThirdMeshRemap.x;
				float temp_output_10_0_g158174 = ( _ThirdMeshRemap.y - temp_output_7_0_g158174 );
				float lerpResult1026_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158173 - temp_output_7_0_g158174 ) / ( temp_output_10_0_g158174 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g158191 = lerpResult1026_g158164;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158191 = ( temp_output_6_0_g158191 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158191 = temp_output_6_0_g158191;
				#endif
				#ifdef TVE_THIRD_VERT
				float staticSwitch917_g158164 = staticSwitch14_g158191;
				#else
				float staticSwitch917_g158164 = 1.0;
				#endif
				half Blend_VertMask913_g158164 = staticSwitch917_g158164;
				half3 Visual_NormalWS953_g158164 = Out_NormalWS4_g158181;
				float clampResult17_g158177 = clamp( saturate( (Visual_NormalWS953_g158164).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158178 = _ThirdProjRemap.x;
				float temp_output_10_0_g158178 = ( _ThirdProjRemap.y - temp_output_7_0_g158178 );
				float lerpResult1004_g158164 = lerp( 1.0 , saturate( ( ( clampResult17_g158177 - temp_output_7_0_g158178 ) / ( temp_output_10_0_g158178 + 0.0001 ) ) ) , _ThirdProjValue);
				#ifdef TVE_THIRD_PROJ
				float staticSwitch908_g158164 = lerpResult1004_g158164;
				#else
				float staticSwitch908_g158164 = 1.0;
				#endif
				half Blend_ProjMask912_g158164 = staticSwitch908_g158164;
				TVEGlobalData Data15_g158183 = Data204_g158069;
				float Out_Dummy15_g158183 = 0;
				float4 Out_CoatParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158183 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158183 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158183 = Data15_g158183.Dummy;
				Out_CoatParams15_g158183 = Data15_g158183.CoatParams;
				Out_PaintParams15_g158183 = Data15_g158183.PaintParams;
				Out_GlowParams15_g158183 = Data15_g158183.GlowParams;
				Out_AtmoParams15_g158183= Data15_g158183.AtmoParams;
				Out_FormParams15_g158183 = Data15_g158183.FormParams;
				Out_LandParams15_g158183 = Data15_g158183.LandParams;
				Out_WindParams15_g158183 = Data15_g158183.WindParams;
				Out_PushParams15_g158183 = Data15_g158183.PushParams;
				}
				half4 Global_CoatParams972_g158164 = Out_CoatParams15_g158183;
				float lerpResult1023_g158164 = lerp( 1.0 , (Global_CoatParams972_g158164).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g158164 = lerpResult1023_g158164;
				#else
				float staticSwitch965_g158164 = 1.0;
				#endif
				half Blend_GlobalMask968_g158164 = staticSwitch965_g158164;
				float temp_output_432_0_g158164 = ( _ThirdIntensityValue * Detail_TexMask429_g158164 * Blend_VertMask913_g158164 * Blend_ProjMask912_g158164 * Blend_GlobalMask968_g158164 );
				float clampResult17_g158185 = clamp( temp_output_432_0_g158164 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158184 = _ThirdBlendRemap.x;
				float temp_output_10_0_g158184 = ( _ThirdBlendRemap.y - temp_output_7_0_g158184 );
				half Detail_Mask412_g158164 = ( saturate( ( ( clampResult17_g158185 - temp_output_7_0_g158184 ) / ( temp_output_10_0_g158184 + 0.0001 ) ) ) * _ThitdBlendIntensityValue );
				float3 lerpResult989_g158164 = lerp( Visual_Albedo527_g158164 , lerpResult985_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g158164 = lerpResult989_g158164;
				#else
				float3 staticSwitch415_g158164 = Visual_Albedo527_g158164;
				#endif
				half3 Final_Albedo601_g158164 = staticSwitch415_g158164;
				float3 In_Albedo3_g158182 = Final_Albedo601_g158164;
				half2 Visual_NormalTS529_g158164 = Out_NormalTS4_g158181;
				float2 lerpResult40_g158187 = lerp( float2( 0,0 ) , Visual_NormalTS529_g158164 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158166) = _ThirdNormalTex;
				SamplerState Sampler276_g158166 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158166 = Local_LayerCoords790_g158164;
				half4 Coords276_g158166 = temp_output_37_0_g158166;
				half2 TexCoord276_g158166 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158166 = SampleMain( Texture276_g158166 , Sampler276_g158166 , Coords276_g158166 , TexCoord276_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158166) = _ThirdNormalTex;
				SamplerState Sampler275_g158166 = sampler_Linear_Repeat;
				half4 Coords275_g158166 = temp_output_37_0_g158166;
				float2 appendResult289_g158166 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158166 = appendResult289_g158166;
				#else
				float2 staticSwitch288_g158166 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158166 = staticSwitch288_g158166;
				half4 localSampleExtra275_g158166 = SampleExtra( Texture275_g158166 , Sampler275_g158166 , Coords275_g158166 , TexCoord275_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158166) = _ThirdNormalTex;
				SamplerState Sampler238_g158166 = sampler_Linear_Repeat;
				half4 Coords238_g158166 = temp_output_37_0_g158166;
				float3 temp_output_279_0_g158166 = Model_PositionWO636_g158164;
				half3 WorldPosition238_g158166 = temp_output_279_0_g158166;
				half4 localSamplePlanar2D238_g158166 = SamplePlanar2D( Texture238_g158166 , Sampler238_g158166 , Coords238_g158166 , WorldPosition238_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158166) = _ThirdNormalTex;
				SamplerState Sampler246_g158166 = sampler_Linear_Repeat;
				half4 Coords246_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition246_g158166 = temp_output_279_0_g158166;
				float3 temp_output_280_0_g158166 = Model_NormalWS869_g158164;
				half3 WorldNormal246_g158166 = temp_output_280_0_g158166;
				half4 localSamplePlanar3D246_g158166 = SamplePlanar3D( Texture246_g158166 , Sampler246_g158166 , Coords246_g158166 , WorldPosition246_g158166 , WorldNormal246_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158166) = _ThirdNormalTex;
				SamplerState Sampler234_g158166 = sampler_Linear_Repeat;
				float4 Coords234_g158166 = temp_output_37_0_g158166;
				float3 WorldPosition234_g158166 = temp_output_279_0_g158166;
				float4 localSampleStochastic2D234_g158166 = SampleStochastic2D( Texture234_g158166 , Sampler234_g158166 , Coords234_g158166 , WorldPosition234_g158166 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158166) = _ThirdNormalTex;
				SamplerState Sampler263_g158166 = sampler_Linear_Repeat;
				half4 Coords263_g158166 = temp_output_37_0_g158166;
				half3 WorldPosition263_g158166 = temp_output_279_0_g158166;
				half3 WorldNormal263_g158166 = temp_output_280_0_g158166;
				half4 localSampleStochastic3D263_g158166 = SampleStochastic3D( Texture263_g158166 , Sampler263_g158166 , Coords263_g158166 , WorldPosition263_g158166 , WorldNormal263_g158166 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g158164 = localSampleExtra275_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g158164 = localSamplePlanar2D238_g158166;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g158164 = localSamplePlanar3D246_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g158164 = localSampleStochastic2D234_g158166;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g158164 = localSampleStochastic3D263_g158166;
				#else
				float4 staticSwitch698_g158164 = localSampleMain276_g158166;
				#endif
				half4 Local_NormalTex776_g158164 = staticSwitch698_g158164;
				half4 Normal_Packed45_g158168 = Local_NormalTex776_g158164;
				float2 appendResult58_g158168 = (float2(( (Normal_Packed45_g158168).x * (Normal_Packed45_g158168).w ) , (Normal_Packed45_g158168).y));
				half2 Normal_Default50_g158168 = appendResult58_g158168;
				half2 Normal_ASTC41_g158168 = (Normal_Packed45_g158168).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158168 = Normal_ASTC41_g158168;
				#else
				float2 staticSwitch38_g158168 = Normal_Default50_g158168;
				#endif
				half2 Normal_NO_DTX544_g158168 = (Normal_Packed45_g158168).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158168 = Normal_NO_DTX544_g158168;
				#else
				float2 staticSwitch37_g158168 = staticSwitch38_g158168;
				#endif
				float2 temp_output_724_0_g158164 = ( (staticSwitch37_g158168*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g158169 = temp_output_724_0_g158164;
				float2 break71_g158169 = Normal_Planar45_g158169;
				float3 appendResult72_g158169 = (float3(break71_g158169.x , 0.0 , break71_g158169.y));
				float2 temp_output_858_0_g158164 = (mul( ase_worldToTangent, appendResult72_g158169 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g158164 = temp_output_858_0_g158164;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g158164 = float2( 0,0 );
				#else
				float2 staticSwitch727_g158164 = temp_output_724_0_g158164;
				#endif
				half2 Local_NormalTS729_g158164 = staticSwitch727_g158164;
				float2 temp_output_36_0_g158187 = ( lerpResult40_g158187 + Local_NormalTS729_g158164 );
				float2 lerpResult405_g158164 = lerp( Visual_NormalTS529_g158164 , temp_output_36_0_g158187 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g158164 = lerpResult405_g158164;
				#else
				float2 staticSwitch418_g158164 = Visual_NormalTS529_g158164;
				#endif
				half2 Final_NormalTS612_g158164 = staticSwitch418_g158164;
				float2 In_NormalTS3_g158182 = Final_NormalTS612_g158164;
				float3 appendResult68_g158188 = (float3(Final_NormalTS612_g158164 , 1.0));
				float3 tanNormal74_g158188 = appendResult68_g158188;
				float3 worldNormal74_g158188 = normalize( float3(dot(tanToWorld0,tanNormal74_g158188), dot(tanToWorld1,tanNormal74_g158188), dot(tanToWorld2,tanNormal74_g158188)) );
				half3 Final_NormalWS956_g158164 = worldNormal74_g158188;
				float3 In_NormalWS3_g158182 = Final_NormalWS956_g158164;
				half4 Visual_Shader531_g158164 = Out_Shader4_g158181;
				float4 lerpResult1000_g158164 = lerp( Local_Masks750_g158164 , ( Visual_Shader531_g158164 * Local_Masks750_g158164 ) , _ThitdBlendShaderValue);
				float4 lerpResult998_g158164 = lerp( Visual_Shader531_g158164 , lerpResult1000_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g158164 = lerpResult998_g158164;
				#else
				float4 staticSwitch451_g158164 = Visual_Shader531_g158164;
				#endif
				half4 Final_Masks613_g158164 = staticSwitch451_g158164;
				float4 In_Shader3_g158182 = Final_Masks613_g158164;
				float4 In_Emissive3_g158182 = Out_Emissive4_g158181;
				float3 temp_output_3_0_g158190 = Final_Albedo601_g158164;
				float dotResult20_g158190 = dot( temp_output_3_0_g158190 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g158164 = dotResult20_g158190;
				float In_Grayscale3_g158182 = Final_Grayscale615_g158164;
				float clampResult651_g158164 = clamp( saturate( ( Final_Grayscale615_g158164 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g158164 = clampResult651_g158164;
				float In_Luminosity3_g158182 = Final_Luminosity652_g158164;
				half Visual_MultiMask547_g158164 = Out_MultiMask4_g158181;
				float lerpResult477_g158164 = lerp( Visual_MultiMask547_g158164 , Local_MultiMask767_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch482_g158164 = lerpResult477_g158164;
				#else
				float staticSwitch482_g158164 = Visual_MultiMask547_g158164;
				#endif
				half Final_MultiMask572_g158164 = staticSwitch482_g158164;
				float In_MultiMask3_g158182 = Final_MultiMask572_g158164;
				half Visual_AlphaClip559_g158164 = Out_AlphaClip4_g158181;
				float temp_output_718_0_g158164 = (Local_AlbedoTex777_g158164).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g158164 = ( temp_output_718_0_g158164 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g158164 = temp_output_718_0_g158164;
				#endif
				half Local_AlphaClip772_g158164 = staticSwitch924_g158164;
				float lerpResult448_g158164 = lerp( Visual_AlphaClip559_g158164 , Local_AlphaClip772_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch564_g158164 = lerpResult448_g158164;
				#else
				float staticSwitch564_g158164 = Visual_AlphaClip559_g158164;
				#endif
				half Final_AlphaClip602_g158164 = staticSwitch564_g158164;
				float In_AlphaClip3_g158182 = Final_AlphaClip602_g158164;
				half Visual_AlphaFade588_g158164 = Out_AlphaFade4_g158181;
				half Local_AlphaFade773_g158164 = (lerpResult706_g158164).a;
				float lerpResult604_g158164 = lerp( Visual_AlphaFade588_g158164 , Local_AlphaFade773_g158164 , Detail_Mask412_g158164);
				#ifdef TVE_THIRD
				float staticSwitch608_g158164 = lerpResult604_g158164;
				#else
				float staticSwitch608_g158164 = Visual_AlphaFade588_g158164;
				#endif
				half Final_AlphaFade611_g158164 = staticSwitch608_g158164;
				float In_AlphaFade3_g158182 = Final_AlphaFade611_g158164;
				float3 In_Translucency3_g158182 = Out_Translucency4_g158181;
				float In_Transmission3_g158182 = Out_Transmission4_g158181;
				float In_Thickness3_g158182 = Out_Thickness4_g158181;
				float In_Diffusion3_g158182 = Out_Diffusion4_g158181;
				{
				Data3_g158182.Dummy = In_Dummy3_g158182;
				Data3_g158182.Albedo = In_Albedo3_g158182;
				Data3_g158182.NormalTS = In_NormalTS3_g158182;
				Data3_g158182.NormalWS = In_NormalWS3_g158182;
				Data3_g158182.Shader = In_Shader3_g158182;
				Data3_g158182.Emissive= In_Emissive3_g158182;
				Data3_g158182.MultiMask = In_MultiMask3_g158182;
				Data3_g158182.Grayscale = In_Grayscale3_g158182;
				Data3_g158182.Luminosity = In_Luminosity3_g158182;
				Data3_g158182.AlphaClip = In_AlphaClip3_g158182;
				Data3_g158182.AlphaFade = In_AlphaFade3_g158182;
				Data3_g158182.Translucency = In_Translucency3_g158182;
				Data3_g158182.Transmission = In_Transmission3_g158182;
				Data3_g158182.Thickness = In_Thickness3_g158182;
				Data3_g158182.Diffusion = In_Diffusion3_g158182;
				}
				TVEVisualData Data4_g158194 = Data3_g158182;
				float Out_Dummy4_g158194 = 0;
				float3 Out_Albedo4_g158194 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158194 = float2( 0,0 );
				float3 Out_NormalWS4_g158194 = float3( 0,0,0 );
				float4 Out_Shader4_g158194 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158194 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158194 = 0;
				float Out_Grayscale4_g158194 = 0;
				float Out_Luminosity4_g158194 = 0;
				float Out_AlphaClip4_g158194 = 0;
				float Out_AlphaFade4_g158194 = 0;
				float3 Out_Translucency4_g158194 = float3( 0,0,0 );
				float Out_Transmission4_g158194 = 0;
				float Out_Thickness4_g158194 = 0;
				float Out_Diffusion4_g158194 = 0;
				{
				Out_Dummy4_g158194 = Data4_g158194.Dummy;
				Out_Albedo4_g158194 = Data4_g158194.Albedo;
				Out_NormalTS4_g158194 = Data4_g158194.NormalTS;
				Out_NormalWS4_g158194 = Data4_g158194.NormalWS;
				Out_Shader4_g158194 = Data4_g158194.Shader;
				Out_Emissive4_g158194= Data4_g158194.Emissive;
				Out_MultiMask4_g158194 = Data4_g158194.MultiMask;
				Out_Grayscale4_g158194 = Data4_g158194.Grayscale;
				Out_Luminosity4_g158194= Data4_g158194.Luminosity;
				Out_AlphaClip4_g158194 = Data4_g158194.AlphaClip;
				Out_AlphaFade4_g158194 = Data4_g158194.AlphaFade;
				Out_Translucency4_g158194 = Data4_g158194.Translucency;
				Out_Transmission4_g158194 = Data4_g158194.Transmission;
				Out_Thickness4_g158194 = Data4_g158194.Thickness;
				Out_Diffusion4_g158194 = Data4_g158194.Diffusion;
				}
				half3 Visual_Albedo127_g158193 = Out_Albedo4_g158194;
				TVEModelData Data15_g158196 = Data16_g158068;
				float Out_Dummy15_g158196 = 0;
				float3 Out_PositionOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158196 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158196 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158196 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158196 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158196 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158196 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158196 = float3( 0,0,0 );
				float4 Out_VertexData15_g158196 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158196 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158196 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158196 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158196 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158196 = Data15_g158196.Dummy;
				Out_PositionOS15_g158196 = Data15_g158196.PositionOS;
				Out_PositionWS15_g158196 = Data15_g158196.PositionWS;
				Out_PositionWO15_g158196 = Data15_g158196.PositionWO;
				Out_PositionRawOS15_g158196 = Data15_g158196.PositionRawOS;
				Out_PositionAddOS15_g158196 = Data15_g158196.PositionAddOS;
				Out_PivotOS15_g158196 = Data15_g158196.PivotOS;
				Out_PivotWS15_g158196 = Data15_g158196.PivotWS;
				Out_PivotWO15_g158196 = Data15_g158196.PivotWO;
				Out_NormalOS15_g158196 = Data15_g158196.NormalOS;
				Out_NormalWS15_g158196 = Data15_g158196.NormalWS;
				Out_NormalRawOS15_g158196 = Data15_g158196.NormalRawOS;
				Out_NormalRawWS15_g158196 = Data15_g158196.NormalRawWS;
				Out_TangentOS15_g158196 = Data15_g158196.TangentOS;
				Out_ViewDirWS15_g158196 = Data15_g158196.ViewDirWS;
				Out_VertexData15_g158196 = Data15_g158196.VertexData;
				Out_MotionData15_g158196 = Data15_g158196.MotionData;
				Out_BoundsData15_g158196 = Data15_g158196.BoundsData;
				Out_RotationData15_g158196 = Data15_g158196.RotationData;
				Out_FragmentData15_g158196 = Data15_g158196.FragmentData;
				}
				half4 Model_VertexData206_g158193 = Out_VertexData15_g158196;
				float4 break208_g158193 = Model_VertexData206_g158193;
				float4 break33_g158201 = _occlusion_vert_mode;
				float temp_output_30_0_g158201 = ( break208_g158193.x * break33_g158201.x );
				float temp_output_29_0_g158201 = ( break208_g158193.y * break33_g158201.y );
				float temp_output_31_0_g158201 = ( break208_g158193.z * break33_g158201.z );
				float temp_output_28_0_g158201 = ( temp_output_30_0_g158201 + temp_output_29_0_g158201 + temp_output_31_0_g158201 + ( break208_g158193.w * break33_g158201.w ) );
				float temp_output_194_0_g158193 = temp_output_28_0_g158201;
				float clampResult17_g158199 = clamp( temp_output_194_0_g158193 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158198 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g158198 = ( _OcclusionMeshRemap.y - temp_output_7_0_g158198 );
				float temp_output_6_0_g158200 = saturate( ( ( clampResult17_g158199 - temp_output_7_0_g158198 ) / ( temp_output_10_0_g158198 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158200 = ( temp_output_6_0_g158200 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158200 = temp_output_6_0_g158200;
				#endif
				half Occlusion_Mask82_g158193 = staticSwitch14_g158200;
				float3 lerpResult75_g158193 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g158193);
				float3 lerpResult186_g158193 = lerp( Visual_Albedo127_g158193 , ( Visual_Albedo127_g158193 * lerpResult75_g158193 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g158193 = lerpResult186_g158193;
				#else
				float3 staticSwitch171_g158193 = Visual_Albedo127_g158193;
				#endif
				half3 Final_Albedo160_g158193 = staticSwitch171_g158193;
				float3 In_Albedo3_g158195 = Final_Albedo160_g158193;
				float2 In_NormalTS3_g158195 = Out_NormalTS4_g158194;
				float3 In_NormalWS3_g158195 = Out_NormalWS4_g158194;
				float4 In_Shader3_g158195 = Out_Shader4_g158194;
				float4 In_Emissive3_g158195 = Out_Emissive4_g158194;
				float3 temp_output_3_0_g158197 = Final_Albedo160_g158193;
				float dotResult20_g158197 = dot( temp_output_3_0_g158197 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158193 = dotResult20_g158197;
				float In_Grayscale3_g158195 = Final_Grayscale164_g158193;
				float clampResult180_g158193 = clamp( saturate( ( Final_Grayscale164_g158193 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g158193 = clampResult180_g158193;
				float In_Luminosity3_g158195 = Final_Shading181_g158193;
				float In_MultiMask3_g158195 = Out_MultiMask4_g158194;
				float In_AlphaClip3_g158195 = Out_AlphaClip4_g158194;
				float In_AlphaFade3_g158195 = Out_AlphaFade4_g158194;
				float3 In_Translucency3_g158195 = Out_Translucency4_g158194;
				float In_Transmission3_g158195 = Out_Transmission4_g158194;
				float In_Thickness3_g158195 = Out_Thickness4_g158194;
				float In_Diffusion3_g158195 = Out_Diffusion4_g158194;
				{
				Data3_g158195.Dummy = In_Dummy3_g158195;
				Data3_g158195.Albedo = In_Albedo3_g158195;
				Data3_g158195.NormalTS = In_NormalTS3_g158195;
				Data3_g158195.NormalWS = In_NormalWS3_g158195;
				Data3_g158195.Shader = In_Shader3_g158195;
				Data3_g158195.Emissive= In_Emissive3_g158195;
				Data3_g158195.MultiMask = In_MultiMask3_g158195;
				Data3_g158195.Grayscale = In_Grayscale3_g158195;
				Data3_g158195.Luminosity = In_Luminosity3_g158195;
				Data3_g158195.AlphaClip = In_AlphaClip3_g158195;
				Data3_g158195.AlphaFade = In_AlphaFade3_g158195;
				Data3_g158195.Translucency = In_Translucency3_g158195;
				Data3_g158195.Transmission = In_Transmission3_g158195;
				Data3_g158195.Thickness = In_Thickness3_g158195;
				Data3_g158195.Diffusion = In_Diffusion3_g158195;
				}
				TVEVisualData Data4_g158206 = Data3_g158195;
				float Out_Dummy4_g158206 = 0;
				float3 Out_Albedo4_g158206 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158206 = float2( 0,0 );
				float3 Out_NormalWS4_g158206 = float3( 0,0,0 );
				float4 Out_Shader4_g158206 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158206 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158206 = 0;
				float Out_Grayscale4_g158206 = 0;
				float Out_Luminosity4_g158206 = 0;
				float Out_AlphaClip4_g158206 = 0;
				float Out_AlphaFade4_g158206 = 0;
				float3 Out_Translucency4_g158206 = float3( 0,0,0 );
				float Out_Transmission4_g158206 = 0;
				float Out_Thickness4_g158206 = 0;
				float Out_Diffusion4_g158206 = 0;
				{
				Out_Dummy4_g158206 = Data4_g158206.Dummy;
				Out_Albedo4_g158206 = Data4_g158206.Albedo;
				Out_NormalTS4_g158206 = Data4_g158206.NormalTS;
				Out_NormalWS4_g158206 = Data4_g158206.NormalWS;
				Out_Shader4_g158206 = Data4_g158206.Shader;
				Out_Emissive4_g158206= Data4_g158206.Emissive;
				Out_MultiMask4_g158206 = Data4_g158206.MultiMask;
				Out_Grayscale4_g158206 = Data4_g158206.Grayscale;
				Out_Luminosity4_g158206= Data4_g158206.Luminosity;
				Out_AlphaClip4_g158206 = Data4_g158206.AlphaClip;
				Out_AlphaFade4_g158206 = Data4_g158206.AlphaFade;
				Out_Translucency4_g158206 = Data4_g158206.Translucency;
				Out_Transmission4_g158206 = Data4_g158206.Transmission;
				Out_Thickness4_g158206 = Data4_g158206.Thickness;
				Out_Diffusion4_g158206 = Data4_g158206.Diffusion;
				}
				half3 Visual_Albedo127_g158203 = Out_Albedo4_g158206;
				float temp_output_162_11_g158203 = Out_MultiMask4_g158206;
				half Visual_MultiMask196_g158203 = temp_output_162_11_g158203;
				float lerpResult190_g158203 = lerp( 1.0 , Visual_MultiMask196_g158203 , _GradientMultiValue);
				half Gradient_MultiMask194_g158203 = lerpResult190_g158203;
				TVEModelData Data15_g158204 = Data16_g158068;
				float Out_Dummy15_g158204 = 0;
				float3 Out_PositionOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158204 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158204 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158204 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158204 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158204 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158204 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158204 = float3( 0,0,0 );
				float4 Out_VertexData15_g158204 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158204 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158204 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158204 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158204 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158204 = Data15_g158204.Dummy;
				Out_PositionOS15_g158204 = Data15_g158204.PositionOS;
				Out_PositionWS15_g158204 = Data15_g158204.PositionWS;
				Out_PositionWO15_g158204 = Data15_g158204.PositionWO;
				Out_PositionRawOS15_g158204 = Data15_g158204.PositionRawOS;
				Out_PositionAddOS15_g158204 = Data15_g158204.PositionAddOS;
				Out_PivotOS15_g158204 = Data15_g158204.PivotOS;
				Out_PivotWS15_g158204 = Data15_g158204.PivotWS;
				Out_PivotWO15_g158204 = Data15_g158204.PivotWO;
				Out_NormalOS15_g158204 = Data15_g158204.NormalOS;
				Out_NormalWS15_g158204 = Data15_g158204.NormalWS;
				Out_NormalRawOS15_g158204 = Data15_g158204.NormalRawOS;
				Out_NormalRawWS15_g158204 = Data15_g158204.NormalRawWS;
				Out_TangentOS15_g158204 = Data15_g158204.TangentOS;
				Out_ViewDirWS15_g158204 = Data15_g158204.ViewDirWS;
				Out_VertexData15_g158204 = Data15_g158204.VertexData;
				Out_MotionData15_g158204 = Data15_g158204.MotionData;
				Out_BoundsData15_g158204 = Data15_g158204.BoundsData;
				Out_RotationData15_g158204 = Data15_g158204.RotationData;
				Out_FragmentData15_g158204 = Data15_g158204.FragmentData;
				}
				half4 Model_VertexData224_g158203 = Out_VertexData15_g158204;
				float4 break226_g158203 = Model_VertexData224_g158203;
				float4 break33_g158205 = _gradient_vert_mode;
				float temp_output_30_0_g158205 = ( break226_g158203.x * break33_g158205.x );
				float temp_output_29_0_g158205 = ( break226_g158203.y * break33_g158205.y );
				float temp_output_31_0_g158205 = ( break226_g158203.z * break33_g158205.z );
				float temp_output_28_0_g158205 = ( temp_output_30_0_g158205 + temp_output_29_0_g158205 + temp_output_31_0_g158205 + ( break226_g158203.w * break33_g158205.w ) );
				float temp_output_211_0_g158203 = temp_output_28_0_g158205;
				float clampResult17_g158210 = clamp( temp_output_211_0_g158203 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158211 = _GradientMeshRemap.x;
				float temp_output_10_0_g158211 = ( _GradientMeshRemap.y - temp_output_7_0_g158211 );
				float temp_output_6_0_g158212 = saturate( ( ( clampResult17_g158210 - temp_output_7_0_g158211 ) / ( temp_output_10_0_g158211 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g158212 = ( temp_output_6_0_g158212 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158212 = temp_output_6_0_g158212;
				#endif
				half Gradient_VertMask82_g158203 = staticSwitch14_g158212;
				half Gradient_Mask200_g158203 = ( Gradient_MultiMask194_g158203 * Gradient_VertMask82_g158203 );
				float3 lerpResult75_g158203 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g158203);
				float3 lerpResult186_g158203 = lerp( Visual_Albedo127_g158203 , ( Visual_Albedo127_g158203 * lerpResult75_g158203 ) , _GradientIntensityValue);
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g158203 = lerpResult186_g158203;
				#else
				float3 staticSwitch171_g158203 = Visual_Albedo127_g158203;
				#endif
				half3 Final_Albedo160_g158203 = staticSwitch171_g158203;
				float3 In_Albedo3_g158207 = Final_Albedo160_g158203;
				float2 In_NormalTS3_g158207 = Out_NormalTS4_g158206;
				float3 In_NormalWS3_g158207 = Out_NormalWS4_g158206;
				float4 In_Shader3_g158207 = Out_Shader4_g158206;
				float4 In_Emissive3_g158207 = Out_Emissive4_g158206;
				float3 temp_output_3_0_g158208 = Final_Albedo160_g158203;
				float dotResult20_g158208 = dot( temp_output_3_0_g158208 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g158203 = dotResult20_g158208;
				float In_Grayscale3_g158207 = Final_Grayscale164_g158203;
				float clampResult180_g158203 = clamp( saturate( ( Final_Grayscale164_g158203 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g158203 = clampResult180_g158203;
				float In_Luminosity3_g158207 = Final_Luminosity181_g158203;
				float In_MultiMask3_g158207 = temp_output_162_11_g158203;
				float In_AlphaClip3_g158207 = Out_AlphaClip4_g158206;
				float In_AlphaFade3_g158207 = Out_AlphaFade4_g158206;
				float3 In_Translucency3_g158207 = Out_Translucency4_g158206;
				float In_Transmission3_g158207 = Out_Transmission4_g158206;
				float In_Thickness3_g158207 = Out_Thickness4_g158206;
				float In_Diffusion3_g158207 = Out_Diffusion4_g158206;
				{
				Data3_g158207.Dummy = In_Dummy3_g158207;
				Data3_g158207.Albedo = In_Albedo3_g158207;
				Data3_g158207.NormalTS = In_NormalTS3_g158207;
				Data3_g158207.NormalWS = In_NormalWS3_g158207;
				Data3_g158207.Shader = In_Shader3_g158207;
				Data3_g158207.Emissive= In_Emissive3_g158207;
				Data3_g158207.MultiMask = In_MultiMask3_g158207;
				Data3_g158207.Grayscale = In_Grayscale3_g158207;
				Data3_g158207.Luminosity = In_Luminosity3_g158207;
				Data3_g158207.AlphaClip = In_AlphaClip3_g158207;
				Data3_g158207.AlphaFade = In_AlphaFade3_g158207;
				Data3_g158207.Translucency = In_Translucency3_g158207;
				Data3_g158207.Transmission = In_Transmission3_g158207;
				Data3_g158207.Thickness = In_Thickness3_g158207;
				Data3_g158207.Diffusion = In_Diffusion3_g158207;
				}
				TVEVisualData Data4_g158214 = Data3_g158207;
				float Out_Dummy4_g158214 = 0;
				float3 Out_Albedo4_g158214 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158214 = float2( 0,0 );
				float3 Out_NormalWS4_g158214 = float3( 0,0,0 );
				float4 Out_Shader4_g158214 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158214 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158214 = 0;
				float Out_Grayscale4_g158214 = 0;
				float Out_Luminosity4_g158214 = 0;
				float Out_AlphaClip4_g158214 = 0;
				float Out_AlphaFade4_g158214 = 0;
				float3 Out_Translucency4_g158214 = float3( 0,0,0 );
				float Out_Transmission4_g158214 = 0;
				float Out_Thickness4_g158214 = 0;
				float Out_Diffusion4_g158214 = 0;
				{
				Out_Dummy4_g158214 = Data4_g158214.Dummy;
				Out_Albedo4_g158214 = Data4_g158214.Albedo;
				Out_NormalTS4_g158214 = Data4_g158214.NormalTS;
				Out_NormalWS4_g158214 = Data4_g158214.NormalWS;
				Out_Shader4_g158214 = Data4_g158214.Shader;
				Out_Emissive4_g158214= Data4_g158214.Emissive;
				Out_MultiMask4_g158214 = Data4_g158214.MultiMask;
				Out_Grayscale4_g158214 = Data4_g158214.Grayscale;
				Out_Luminosity4_g158214= Data4_g158214.Luminosity;
				Out_AlphaClip4_g158214 = Data4_g158214.AlphaClip;
				Out_AlphaFade4_g158214 = Data4_g158214.AlphaFade;
				Out_Translucency4_g158214 = Data4_g158214.Translucency;
				Out_Transmission4_g158214 = Data4_g158214.Transmission;
				Out_Thickness4_g158214 = Data4_g158214.Thickness;
				Out_Diffusion4_g158214 = Data4_g158214.Diffusion;
				}
				half3 Visual_Albedo127_g158213 = Out_Albedo4_g158214;
				float vertexToFrag203_g158213 = IN.ase_texcoord3.z;
				float clampResult208_g158213 = clamp( vertexToFrag203_g158213 , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch209_g158213 = ( Visual_Albedo127_g158213 + ( ( Visual_Albedo127_g158213 * Visual_Albedo127_g158213 * 200.0 * _motion_highlight_color ) * clampResult208_g158213 ) );
				#else
				float3 staticSwitch209_g158213 = Visual_Albedo127_g158213;
				#endif
				half3 Final_Albedo160_g158213 = staticSwitch209_g158213;
				float3 In_Albedo3_g158216 = Final_Albedo160_g158213;
				float2 In_NormalTS3_g158216 = Out_NormalTS4_g158214;
				float3 In_NormalWS3_g158216 = Out_NormalWS4_g158214;
				float4 In_Shader3_g158216 = Out_Shader4_g158214;
				float4 In_Emissive3_g158216 = Out_Emissive4_g158214;
				float In_Grayscale3_g158216 = Out_Grayscale4_g158214;
				float In_Luminosity3_g158216 = Out_Luminosity4_g158214;
				float In_MultiMask3_g158216 = Out_MultiMask4_g158214;
				float In_AlphaClip3_g158216 = Out_AlphaClip4_g158214;
				float In_AlphaFade3_g158216 = Out_AlphaFade4_g158214;
				float3 In_Translucency3_g158216 = Out_Translucency4_g158214;
				float In_Transmission3_g158216 = Out_Transmission4_g158214;
				float In_Thickness3_g158216 = Out_Thickness4_g158214;
				float In_Diffusion3_g158216 = Out_Diffusion4_g158214;
				{
				Data3_g158216.Dummy = In_Dummy3_g158216;
				Data3_g158216.Albedo = In_Albedo3_g158216;
				Data3_g158216.NormalTS = In_NormalTS3_g158216;
				Data3_g158216.NormalWS = In_NormalWS3_g158216;
				Data3_g158216.Shader = In_Shader3_g158216;
				Data3_g158216.Emissive= In_Emissive3_g158216;
				Data3_g158216.MultiMask = In_MultiMask3_g158216;
				Data3_g158216.Grayscale = In_Grayscale3_g158216;
				Data3_g158216.Luminosity = In_Luminosity3_g158216;
				Data3_g158216.AlphaClip = In_AlphaClip3_g158216;
				Data3_g158216.AlphaFade = In_AlphaFade3_g158216;
				Data3_g158216.Translucency = In_Translucency3_g158216;
				Data3_g158216.Transmission = In_Transmission3_g158216;
				Data3_g158216.Thickness = In_Thickness3_g158216;
				Data3_g158216.Diffusion = In_Diffusion3_g158216;
				}
				TVEVisualData Data4_g158218 = Data3_g158216;
				float Out_Dummy4_g158218 = 0;
				float3 Out_Albedo4_g158218 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158218 = float2( 0,0 );
				float3 Out_NormalWS4_g158218 = float3( 0,0,0 );
				float4 Out_Shader4_g158218 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158218 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158218 = 0;
				float Out_Grayscale4_g158218 = 0;
				float Out_Luminosity4_g158218 = 0;
				float Out_AlphaClip4_g158218 = 0;
				float Out_AlphaFade4_g158218 = 0;
				float3 Out_Translucency4_g158218 = float3( 0,0,0 );
				float Out_Transmission4_g158218 = 0;
				float Out_Thickness4_g158218 = 0;
				float Out_Diffusion4_g158218 = 0;
				{
				Out_Dummy4_g158218 = Data4_g158218.Dummy;
				Out_Albedo4_g158218 = Data4_g158218.Albedo;
				Out_NormalTS4_g158218 = Data4_g158218.NormalTS;
				Out_NormalWS4_g158218 = Data4_g158218.NormalWS;
				Out_Shader4_g158218 = Data4_g158218.Shader;
				Out_Emissive4_g158218= Data4_g158218.Emissive;
				Out_MultiMask4_g158218 = Data4_g158218.MultiMask;
				Out_Grayscale4_g158218 = Data4_g158218.Grayscale;
				Out_Luminosity4_g158218= Data4_g158218.Luminosity;
				Out_AlphaClip4_g158218 = Data4_g158218.AlphaClip;
				Out_AlphaFade4_g158218 = Data4_g158218.AlphaFade;
				Out_Translucency4_g158218 = Data4_g158218.Translucency;
				Out_Transmission4_g158218 = Data4_g158218.Transmission;
				Out_Thickness4_g158218 = Data4_g158218.Thickness;
				Out_Diffusion4_g158218 = Data4_g158218.Diffusion;
				}
				half3 Visual_Albedo127_g158217 = Out_Albedo4_g158218;
				float3 temp_output_622_0_g158217 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler238_g158221 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158224 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158224 = ( temp_output_6_0_g158224 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158224 = temp_output_6_0_g158224;
				#endif
				half4 Overlay_Coords639_g158217 = staticSwitch14_g158224;
				float4 temp_output_37_0_g158221 = Overlay_Coords639_g158217;
				half4 Coords238_g158221 = temp_output_37_0_g158221;
				TVEModelData Data15_g158225 = Data16_g158068;
				float Out_Dummy15_g158225 = 0;
				float3 Out_PositionOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158225 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158225 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158225 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158225 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158225 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158225 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158225 = float3( 0,0,0 );
				float4 Out_VertexData15_g158225 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158225 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158225 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158225 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158225 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158225 = Data15_g158225.Dummy;
				Out_PositionOS15_g158225 = Data15_g158225.PositionOS;
				Out_PositionWS15_g158225 = Data15_g158225.PositionWS;
				Out_PositionWO15_g158225 = Data15_g158225.PositionWO;
				Out_PositionRawOS15_g158225 = Data15_g158225.PositionRawOS;
				Out_PositionAddOS15_g158225 = Data15_g158225.PositionAddOS;
				Out_PivotOS15_g158225 = Data15_g158225.PivotOS;
				Out_PivotWS15_g158225 = Data15_g158225.PivotWS;
				Out_PivotWO15_g158225 = Data15_g158225.PivotWO;
				Out_NormalOS15_g158225 = Data15_g158225.NormalOS;
				Out_NormalWS15_g158225 = Data15_g158225.NormalWS;
				Out_NormalRawOS15_g158225 = Data15_g158225.NormalRawOS;
				Out_NormalRawWS15_g158225 = Data15_g158225.NormalRawWS;
				Out_TangentOS15_g158225 = Data15_g158225.TangentOS;
				Out_ViewDirWS15_g158225 = Data15_g158225.ViewDirWS;
				Out_VertexData15_g158225 = Data15_g158225.VertexData;
				Out_MotionData15_g158225 = Data15_g158225.MotionData;
				Out_BoundsData15_g158225 = Data15_g158225.BoundsData;
				Out_RotationData15_g158225 = Data15_g158225.RotationData;
				Out_FragmentData15_g158225 = Data15_g158225.FragmentData;
				}
				half3 Model_PositionWO602_g158217 = Out_PositionWO15_g158225;
				float3 temp_output_279_0_g158221 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158221 = temp_output_279_0_g158221;
				half4 localSamplePlanar2D238_g158221 = SamplePlanar2D( Texture238_g158221 , Sampler238_g158221 , Coords238_g158221 , WorldPosition238_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler246_g158221 = sampler_Linear_Repeat;
				half4 Coords246_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition246_g158221 = temp_output_279_0_g158221;
				half3 Model_NormalWS712_g158217 = Out_NormalWS15_g158225;
				float3 temp_output_280_0_g158221 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158221 = temp_output_280_0_g158221;
				half4 localSamplePlanar3D246_g158221 = SamplePlanar3D( Texture246_g158221 , Sampler246_g158221 , Coords246_g158221 , WorldPosition246_g158221 , WorldNormal246_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler234_g158221 = sampler_Linear_Repeat;
				float4 Coords234_g158221 = temp_output_37_0_g158221;
				float3 WorldPosition234_g158221 = temp_output_279_0_g158221;
				float4 localSampleStochastic2D234_g158221 = SampleStochastic2D( Texture234_g158221 , Sampler234_g158221 , Coords234_g158221 , WorldPosition234_g158221 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158221) = _OverlayAlbedoTex;
				SamplerState Sampler263_g158221 = sampler_Linear_Repeat;
				half4 Coords263_g158221 = temp_output_37_0_g158221;
				half3 WorldPosition263_g158221 = temp_output_279_0_g158221;
				half3 WorldNormal263_g158221 = temp_output_280_0_g158221;
				half4 localSampleStochastic3D263_g158221 = SampleStochastic3D( Texture263_g158221 , Sampler263_g158221 , Coords263_g158221 , WorldPosition263_g158221 , WorldNormal263_g158221 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g158217 = localSamplePlanar3D246_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g158217 = localSampleStochastic2D234_g158221;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g158217 = localSampleStochastic3D263_g158221;
				#else
				float4 staticSwitch676_g158217 = localSamplePlanar2D238_g158221;
				#endif
				half3 Overlay_Albedo526_g158217 = (staticSwitch676_g158217).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g158217 = ( temp_output_622_0_g158217 * Overlay_Albedo526_g158217 );
				#else
				float3 staticSwitch578_g158217 = temp_output_622_0_g158217;
				#endif
				float3 temp_output_6_0_g158240 = staticSwitch578_g158217;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g158240 = ( temp_output_6_0_g158240 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g158240 = temp_output_6_0_g158240;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158227) = _OverlayMaskTex;
				SamplerState Sampler276_g158227 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158228 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158228 = ( temp_output_6_0_g158228 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158228 = temp_output_6_0_g158228;
				#endif
				half4 Local_MaskCoords886_g158217 = staticSwitch14_g158228;
				float4 temp_output_37_0_g158227 = Local_MaskCoords886_g158217;
				half4 Coords276_g158227 = temp_output_37_0_g158227;
				half2 TexCoord276_g158227 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158227 = SampleMain( Texture276_g158227 , Sampler276_g158227 , Coords276_g158227 , TexCoord276_g158227 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158227) = _OverlayMaskTex;
				SamplerState Sampler275_g158227 = sampler_Linear_Repeat;
				half4 Coords275_g158227 = temp_output_37_0_g158227;
				float2 appendResult289_g158227 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158227 = appendResult289_g158227;
				#else
				float2 staticSwitch288_g158227 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158227 = staticSwitch288_g158227;
				half4 localSampleExtra275_g158227 = SampleExtra( Texture275_g158227 , Sampler275_g158227 , Coords275_g158227 , TexCoord275_g158227 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g158217 = localSampleExtra275_g158227;
				#else
				float4 staticSwitch894_g158217 = localSampleMain276_g158227;
				#endif
				half4 Local_MaskTex885_g158217 = staticSwitch894_g158217;
				float clampResult17_g158242 = clamp( (Local_MaskTex885_g158217).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g158243 = _OverlayMaskRemap.x;
				float temp_output_10_0_g158243 = ( _OverlayMaskRemap.y - temp_output_7_0_g158243 );
				float lerpResult898_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158242 - temp_output_7_0_g158243 ) / ( temp_output_10_0_g158243 + 0.0001 ) ) ) , _OverlayMaskValue);
				#ifdef TVE_OVERLAY_MASK
				float staticSwitch904_g158217 = lerpResult898_g158217;
				#else
				float staticSwitch904_g158217 = 1.0;
				#endif
				half Overlay_TexMask906_g158217 = staticSwitch904_g158217;
				float3 temp_output_739_21_g158217 = Out_NormalWS4_g158218;
				half3 Visual_NormalWS749_g158217 = temp_output_739_21_g158217;
				float clampResult17_g158237 = clamp( saturate( (Visual_NormalWS749_g158217).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g158236 = _OverlayProjRemap.x;
				float temp_output_10_0_g158236 = ( _OverlayProjRemap.y - temp_output_7_0_g158236 );
				float lerpResult842_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158237 - temp_output_7_0_g158236 ) / ( temp_output_10_0_g158236 + 0.0001 ) ) ) , _OverlayProjValue);
				#ifdef TVE_OVERLAY_PROJ
				float staticSwitch734_g158217 = lerpResult842_g158217;
				#else
				float staticSwitch734_g158217 = 1.0;
				#endif
				half Overlay_MaskProj457_g158217 = staticSwitch734_g158217;
				float temp_output_739_15_g158217 = Out_Luminosity4_g158218;
				half Visual_Luminosity654_g158217 = temp_output_739_15_g158217;
				float clampResult17_g158239 = clamp( Visual_Luminosity654_g158217 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158238 = _OverlayLumaRemap.x;
				float temp_output_10_0_g158238 = ( _OverlayLumaRemap.y - temp_output_7_0_g158238 );
				float lerpResult587_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158239 - temp_output_7_0_g158238 ) / ( temp_output_10_0_g158238 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g158217 = lerpResult587_g158217;
				half4 Model_VertexMasks791_g158217 = Out_VertexData15_g158225;
				float4 break792_g158217 = Model_VertexMasks791_g158217;
				float4 break33_g158229 = _overlay_vert_mode;
				float temp_output_30_0_g158229 = ( break792_g158217.x * break33_g158229.x );
				float temp_output_29_0_g158229 = ( break792_g158217.y * break33_g158229.y );
				float temp_output_31_0_g158229 = ( break792_g158217.z * break33_g158229.z );
				float temp_output_28_0_g158229 = ( temp_output_30_0_g158229 + temp_output_29_0_g158229 + temp_output_31_0_g158229 + ( break792_g158217.w * break33_g158229.w ) );
				float clampResult17_g158230 = clamp( temp_output_28_0_g158229 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158232 = _OverlayMeshRemap.x;
				float temp_output_10_0_g158232 = ( _OverlayMeshRemap.y - temp_output_7_0_g158232 );
				float lerpResult879_g158217 = lerp( 1.0 , saturate( ( ( clampResult17_g158230 - temp_output_7_0_g158232 ) / ( temp_output_10_0_g158232 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g158241 = lerpResult879_g158217;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158241 = ( temp_output_6_0_g158241 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158241 = temp_output_6_0_g158241;
				#endif
				#ifdef TVE_OVERLAY_VERT
				float staticSwitch800_g158217 = staticSwitch14_g158241;
				#else
				float staticSwitch800_g158217 = 1.0;
				#endif
				half Overlay_VertMask801_g158217 = staticSwitch800_g158217;
				half Overlay_MaskNoise427_g158217 = 1.0;
				TVEGlobalData Data15_g158219 = Data204_g158069;
				float Out_Dummy15_g158219 = 0;
				float4 Out_CoatParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158219 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158219 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158219 = Data15_g158219.Dummy;
				Out_CoatParams15_g158219 = Data15_g158219.CoatParams;
				Out_PaintParams15_g158219 = Data15_g158219.PaintParams;
				Out_GlowParams15_g158219 = Data15_g158219.GlowParams;
				Out_AtmoParams15_g158219= Data15_g158219.AtmoParams;
				Out_FormParams15_g158219 = Data15_g158219.FormParams;
				Out_LandParams15_g158219 = Data15_g158219.LandParams;
				Out_WindParams15_g158219 = Data15_g158219.WindParams;
				Out_PushParams15_g158219 = Data15_g158219.PushParams;
				}
				half4 Global_AtmoParams516_g158217 = Out_AtmoParams15_g158219;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g158217 = (Global_AtmoParams516_g158217).z;
				#else
				float staticSwitch705_g158217 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g158217 = staticSwitch705_g158217;
				half Custom_Mask646_g158217 = 1.0;
				float temp_output_7_0_g158235 = 0.1;
				float temp_output_10_0_g158235 = ( 0.2 - temp_output_7_0_g158235 );
				half Overlay_Mask494_g158217 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g158217 * Overlay_MaskProj457_g158217 * Overlay_MaskLuma438_g158217 * Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 * Custom_Mask646_g158217 ) - temp_output_7_0_g158235 ) / ( temp_output_10_0_g158235 + 0.0001 ) ) );
				float3 lerpResult467_g158217 = lerp( Visual_Albedo127_g158217 , staticSwitch14_g158240 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g158217 = lerpResult467_g158217;
				#else
				float3 staticSwitch577_g158217 = Visual_Albedo127_g158217;
				#endif
				half3 Final_Albedo493_g158217 = staticSwitch577_g158217;
				float3 In_Albedo3_g158220 = Final_Albedo493_g158217;
				half2 Visual_NormalTS535_g158217 = Out_NormalTS4_g158218;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g158226) = _OverlayNormalTex;
				SamplerState Sampler238_g158226 = sampler_Linear_Repeat;
				float4 temp_output_37_0_g158226 = Overlay_Coords639_g158217;
				half4 Coords238_g158226 = temp_output_37_0_g158226;
				float3 temp_output_279_0_g158226 = Model_PositionWO602_g158217;
				half3 WorldPosition238_g158226 = temp_output_279_0_g158226;
				half4 localSamplePlanar2D238_g158226 = SamplePlanar2D( Texture238_g158226 , Sampler238_g158226 , Coords238_g158226 , WorldPosition238_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g158226) = _OverlayNormalTex;
				SamplerState Sampler246_g158226 = sampler_Linear_Repeat;
				half4 Coords246_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition246_g158226 = temp_output_279_0_g158226;
				float3 temp_output_280_0_g158226 = Model_NormalWS712_g158217;
				half3 WorldNormal246_g158226 = temp_output_280_0_g158226;
				half4 localSamplePlanar3D246_g158226 = SamplePlanar3D( Texture246_g158226 , Sampler246_g158226 , Coords246_g158226 , WorldPosition246_g158226 , WorldNormal246_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g158226) = _OverlayNormalTex;
				SamplerState Sampler234_g158226 = sampler_Linear_Repeat;
				float4 Coords234_g158226 = temp_output_37_0_g158226;
				float3 WorldPosition234_g158226 = temp_output_279_0_g158226;
				float4 localSampleStochastic2D234_g158226 = SampleStochastic2D( Texture234_g158226 , Sampler234_g158226 , Coords234_g158226 , WorldPosition234_g158226 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g158226) = _OverlayNormalTex;
				SamplerState Sampler263_g158226 = sampler_Linear_Repeat;
				half4 Coords263_g158226 = temp_output_37_0_g158226;
				half3 WorldPosition263_g158226 = temp_output_279_0_g158226;
				half3 WorldNormal263_g158226 = temp_output_280_0_g158226;
				half4 localSampleStochastic3D263_g158226 = SampleStochastic3D( Texture263_g158226 , Sampler263_g158226 , Coords263_g158226 , WorldPosition263_g158226 , WorldNormal263_g158226 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g158217 = localSamplePlanar3D246_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g158217 = localSampleStochastic2D234_g158226;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g158217 = localSampleStochastic3D263_g158226;
				#else
				float4 staticSwitch686_g158217 = localSamplePlanar2D238_g158226;
				#endif
				half4 Normal_Packed45_g158223 = staticSwitch686_g158217;
				float2 appendResult58_g158223 = (float2(( (Normal_Packed45_g158223).x * (Normal_Packed45_g158223).w ) , (Normal_Packed45_g158223).y));
				half2 Normal_Default50_g158223 = appendResult58_g158223;
				half2 Normal_ASTC41_g158223 = (Normal_Packed45_g158223).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g158223 = Normal_ASTC41_g158223;
				#else
				float2 staticSwitch38_g158223 = Normal_Default50_g158223;
				#endif
				half2 Normal_NO_DTX544_g158223 = (Normal_Packed45_g158223).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g158223 = Normal_NO_DTX544_g158223;
				#else
				float2 staticSwitch37_g158223 = staticSwitch38_g158223;
				#endif
				half2 Normal_Planar45_g158222 = (staticSwitch37_g158223*2.0 + -1.0);
				float2 break71_g158222 = Normal_Planar45_g158222;
				float3 appendResult72_g158222 = (float3(break71_g158222.x , 0.0 , break71_g158222.y));
				half2 Overlay_Normal528_g158217 = (mul( ase_worldToTangent, appendResult72_g158222 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g158217 = Overlay_Normal528_g158217;
				#else
				float2 staticSwitch579_g158217 = Visual_NormalTS535_g158217;
				#endif
				float2 lerpResult551_g158217 = lerp( Visual_NormalTS535_g158217 , ( staticSwitch579_g158217 * _OverlayNormalValue ) , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g158217 = lerpResult551_g158217;
				#else
				float2 staticSwitch583_g158217 = Visual_NormalTS535_g158217;
				#endif
				half2 Final_NormalTS499_g158217 = staticSwitch583_g158217;
				float2 In_NormalTS3_g158220 = Final_NormalTS499_g158217;
				float3 In_NormalWS3_g158220 = temp_output_739_21_g158217;
				half4 Visual_Masks536_g158217 = Out_Shader4_g158218;
				float4 appendResult585_g158217 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g158217 = lerp( Visual_Masks536_g158217 , appendResult585_g158217 , Overlay_Mask494_g158217);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g158217 = lerpResult584_g158217;
				#else
				float4 staticSwitch586_g158217 = Visual_Masks536_g158217;
				#endif
				half4 Final_Masks482_g158217 = staticSwitch586_g158217;
				float4 In_Shader3_g158220 = Final_Masks482_g158217;
				float4 In_Emissive3_g158220 = Out_Emissive4_g158218;
				float temp_output_739_12_g158217 = Out_Grayscale4_g158218;
				float In_Grayscale3_g158220 = temp_output_739_12_g158217;
				float In_Luminosity3_g158220 = temp_output_739_15_g158217;
				float In_MultiMask3_g158220 = Out_MultiMask4_g158218;
				float In_AlphaClip3_g158220 = Out_AlphaClip4_g158218;
				float In_AlphaFade3_g158220 = Out_AlphaFade4_g158218;
				float3 In_Translucency3_g158220 = Out_Translucency4_g158218;
				half Visual_Transmission699_g158217 = Out_Transmission4_g158218;
				float lerpResult746_g158217 = lerp( Visual_Transmission699_g158217 , ( Visual_Transmission699_g158217 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g158217 * Overlay_MaskNoise427_g158217 * Overlay_MaskGlobal429_g158217 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g158217 = lerpResult746_g158217;
				#else
				float staticSwitch703_g158217 = Visual_Transmission699_g158217;
				#endif
				half Final_Transmission702_g158217 = staticSwitch703_g158217;
				float In_Transmission3_g158220 = Final_Transmission702_g158217;
				float In_Thickness3_g158220 = Out_Thickness4_g158218;
				float In_Diffusion3_g158220 = Out_Diffusion4_g158218;
				{
				Data3_g158220.Dummy = In_Dummy3_g158220;
				Data3_g158220.Albedo = In_Albedo3_g158220;
				Data3_g158220.NormalTS = In_NormalTS3_g158220;
				Data3_g158220.NormalWS = In_NormalWS3_g158220;
				Data3_g158220.Shader = In_Shader3_g158220;
				Data3_g158220.Emissive= In_Emissive3_g158220;
				Data3_g158220.MultiMask = In_MultiMask3_g158220;
				Data3_g158220.Grayscale = In_Grayscale3_g158220;
				Data3_g158220.Luminosity = In_Luminosity3_g158220;
				Data3_g158220.AlphaClip = In_AlphaClip3_g158220;
				Data3_g158220.AlphaFade = In_AlphaFade3_g158220;
				Data3_g158220.Translucency = In_Translucency3_g158220;
				Data3_g158220.Transmission = In_Transmission3_g158220;
				Data3_g158220.Thickness = In_Thickness3_g158220;
				Data3_g158220.Diffusion = In_Diffusion3_g158220;
				}
				TVEVisualData Data4_g158255 = Data3_g158220;
				float Out_Dummy4_g158255 = 0;
				float3 Out_Albedo4_g158255 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158255 = float2( 0,0 );
				float3 Out_NormalWS4_g158255 = float3( 0,0,0 );
				float4 Out_Shader4_g158255 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158255 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158255 = 0;
				float Out_Grayscale4_g158255 = 0;
				float Out_Luminosity4_g158255 = 0;
				float Out_AlphaClip4_g158255 = 0;
				float Out_AlphaFade4_g158255 = 0;
				float3 Out_Translucency4_g158255 = float3( 0,0,0 );
				float Out_Transmission4_g158255 = 0;
				float Out_Thickness4_g158255 = 0;
				float Out_Diffusion4_g158255 = 0;
				{
				Out_Dummy4_g158255 = Data4_g158255.Dummy;
				Out_Albedo4_g158255 = Data4_g158255.Albedo;
				Out_NormalTS4_g158255 = Data4_g158255.NormalTS;
				Out_NormalWS4_g158255 = Data4_g158255.NormalWS;
				Out_Shader4_g158255 = Data4_g158255.Shader;
				Out_Emissive4_g158255= Data4_g158255.Emissive;
				Out_MultiMask4_g158255 = Data4_g158255.MultiMask;
				Out_Grayscale4_g158255 = Data4_g158255.Grayscale;
				Out_Luminosity4_g158255= Data4_g158255.Luminosity;
				Out_AlphaClip4_g158255 = Data4_g158255.AlphaClip;
				Out_AlphaFade4_g158255 = Data4_g158255.AlphaFade;
				Out_Translucency4_g158255 = Data4_g158255.Translucency;
				Out_Transmission4_g158255 = Data4_g158255.Transmission;
				Out_Thickness4_g158255 = Data4_g158255.Thickness;
				Out_Diffusion4_g158255 = Data4_g158255.Diffusion;
				}
				float3 temp_output_297_0_g158244 = Out_Albedo4_g158255;
				float3 In_Albedo3_g158256 = temp_output_297_0_g158244;
				float2 In_NormalTS3_g158256 = Out_NormalTS4_g158255;
				float3 In_NormalWS3_g158256 = Out_NormalWS4_g158255;
				float4 In_Shader3_g158256 = Out_Shader4_g158255;
				float4 temp_cast_23 = (0.0).xxxx;
				half4 Visual_Emissive255_g158244 = Out_Emissive4_g158255;
				TVEModelData Data15_g158245 = Data16_g158068;
				float Out_Dummy15_g158245 = 0;
				float3 Out_PositionOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionWO15_g158245 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotOS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWS15_g158245 = float3( 0,0,0 );
				float3 Out_PivotWO15_g158245 = float3( 0,0,0 );
				float3 Out_NormalOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalWS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g158245 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g158245 = float3( 0,0,0 );
				float4 Out_TangentOS15_g158245 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g158245 = float3( 0,0,0 );
				float4 Out_VertexData15_g158245 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g158245 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g158245 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g158245 = float4( 0,0,0,0 );
				float4 Out_FragmentData15_g158245 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158245 = Data15_g158245.Dummy;
				Out_PositionOS15_g158245 = Data15_g158245.PositionOS;
				Out_PositionWS15_g158245 = Data15_g158245.PositionWS;
				Out_PositionWO15_g158245 = Data15_g158245.PositionWO;
				Out_PositionRawOS15_g158245 = Data15_g158245.PositionRawOS;
				Out_PositionAddOS15_g158245 = Data15_g158245.PositionAddOS;
				Out_PivotOS15_g158245 = Data15_g158245.PivotOS;
				Out_PivotWS15_g158245 = Data15_g158245.PivotWS;
				Out_PivotWO15_g158245 = Data15_g158245.PivotWO;
				Out_NormalOS15_g158245 = Data15_g158245.NormalOS;
				Out_NormalWS15_g158245 = Data15_g158245.NormalWS;
				Out_NormalRawOS15_g158245 = Data15_g158245.NormalRawOS;
				Out_NormalRawWS15_g158245 = Data15_g158245.NormalRawWS;
				Out_TangentOS15_g158245 = Data15_g158245.TangentOS;
				Out_ViewDirWS15_g158245 = Data15_g158245.ViewDirWS;
				Out_VertexData15_g158245 = Data15_g158245.VertexData;
				Out_MotionData15_g158245 = Data15_g158245.MotionData;
				Out_BoundsData15_g158245 = Data15_g158245.BoundsData;
				Out_RotationData15_g158245 = Data15_g158245.RotationData;
				Out_FragmentData15_g158245 = Data15_g158245.FragmentData;
				}
				half4 Model_VertexMasks216_g158244 = Out_VertexData15_g158245;
				float4 break251_g158244 = Model_VertexMasks216_g158244;
				float4 break33_g158249 = _emissive_vert_mode;
				float temp_output_30_0_g158249 = ( break251_g158244.x * break33_g158249.x );
				float temp_output_29_0_g158249 = ( break251_g158244.y * break33_g158249.y );
				float temp_output_31_0_g158249 = ( break251_g158244.z * break33_g158249.z );
				float temp_output_28_0_g158249 = ( temp_output_30_0_g158249 + temp_output_29_0_g158249 + temp_output_31_0_g158249 + ( break251_g158244.w * break33_g158249.w ) );
				float clampResult17_g158248 = clamp( temp_output_28_0_g158249 , 0.0001 , 0.9999 );
				float temp_output_7_0_g158252 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g158252 = ( _EmissiveMeshRemap.y - temp_output_7_0_g158252 );
				float lerpResult303_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158248 - temp_output_7_0_g158252 ) / ( temp_output_10_0_g158252 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g158258 = lerpResult303_g158244;
				#ifdef TVE_REGISTER
				float staticSwitch14_g158258 = ( temp_output_6_0_g158258 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g158258 = temp_output_6_0_g158258;
				#endif
				#ifdef TVE_EMISSIVE_VERT
				float staticSwitch242_g158244 = staticSwitch14_g158258;
				#else
				float staticSwitch242_g158244 = 1.0;
				#endif
				half Emissive_MeshMask221_g158244 = staticSwitch242_g158244;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g158247) = _EmissiveMaskTex;
				SamplerState Sampler276_g158247 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g158253 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g158253 = ( temp_output_6_0_g158253 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g158253 = temp_output_6_0_g158253;
				#endif
				half4 Emissive_Coords167_g158244 = staticSwitch14_g158253;
				float4 temp_output_37_0_g158247 = Emissive_Coords167_g158244;
				half4 Coords276_g158247 = temp_output_37_0_g158247;
				half2 TexCoord276_g158247 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g158247 = SampleMain( Texture276_g158247 , Sampler276_g158247 , Coords276_g158247 , TexCoord276_g158247 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g158247) = _EmissiveMaskTex;
				SamplerState Sampler275_g158247 = sampler_Linear_Repeat;
				half4 Coords275_g158247 = temp_output_37_0_g158247;
				float2 appendResult289_g158247 = (float2(IN.ase_texcoord4.z , IN.ase_texcoord4.w));
				#ifdef TVE_LEGACY
				float2 staticSwitch288_g158247 = appendResult289_g158247;
				#else
				float2 staticSwitch288_g158247 = IN.ase_texcoord3.xy;
				#endif
				half2 TexCoord275_g158247 = staticSwitch288_g158247;
				half4 localSampleExtra275_g158247 = SampleExtra( Texture275_g158247 , Sampler275_g158247 , Coords275_g158247 , TexCoord275_g158247 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g158244 = localSampleExtra275_g158247;
				#else
				float4 staticSwitch176_g158244 = localSampleMain276_g158247;
				#endif
				half4 Emissive_MaskTex201_g158244 = staticSwitch176_g158244;
				float clampResult17_g158251 = clamp( (Emissive_MaskTex201_g158244).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g158250 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g158250 = ( _EmissiveMaskRemap.y - temp_output_7_0_g158250 );
				float lerpResult302_g158244 = lerp( 1.0 , saturate( ( ( clampResult17_g158251 - temp_output_7_0_g158250 ) / ( temp_output_10_0_g158250 + 0.0001 ) ) ) , _EmissiveMaskValue);
				#ifdef TVE_EMISSIVE_MASK
				float staticSwitch190_g158244 = lerpResult302_g158244;
				#else
				float staticSwitch190_g158244 = 1.0;
				#endif
				half Emissive_Mask103_g158244 = staticSwitch190_g158244;
				float temp_output_279_0_g158244 = ( Emissive_MeshMask221_g158244 * Emissive_Mask103_g158244 );
				float3 appendResult293_g158244 = (float3(temp_output_279_0_g158244 , temp_output_279_0_g158244 , temp_output_279_0_g158244));
				half3 Local_EmissiveColor278_g158244 = appendResult293_g158244;
				float3 temp_cast_24 = (1.0).xxx;
				TVEGlobalData Data15_g158246 = Data204_g158069;
				float Out_Dummy15_g158246 = 0;
				float4 Out_CoatParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158246 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158246 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158246 = Data15_g158246.Dummy;
				Out_CoatParams15_g158246 = Data15_g158246.CoatParams;
				Out_PaintParams15_g158246 = Data15_g158246.PaintParams;
				Out_GlowParams15_g158246 = Data15_g158246.GlowParams;
				Out_AtmoParams15_g158246= Data15_g158246.AtmoParams;
				Out_FormParams15_g158246 = Data15_g158246.FormParams;
				Out_LandParams15_g158246 = Data15_g158246.LandParams;
				Out_WindParams15_g158246 = Data15_g158246.WindParams;
				Out_PushParams15_g158246 = Data15_g158246.PushParams;
				}
				half4 Global_GlowParams179_g158244 = Out_GlowParams15_g158246;
				float3 lerpResult299_g158244 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g158244).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g158244 = lerpResult299_g158244;
				#else
				float3 staticSwitch228_g158244 = temp_cast_24;
				#endif
				half3 Emissive_GlobalMask248_g158244 = staticSwitch228_g158244;
				half3 Local_EmissiveValue88_g158244 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g158244 );
				half3 Emissive_Blend260_g158244 = ( ( (Visual_Emissive255_g158244).xyz * Local_EmissiveColor278_g158244 ) * Local_EmissiveValue88_g158244 );
				float3 temp_output_3_0_g158254 = Emissive_Blend260_g158244;
				float temp_output_15_0_g158254 = _emissive_power_value;
				float3 temp_output_23_0_g158254 = ( temp_output_3_0_g158254 * temp_output_15_0_g158254 );
				float4 appendResult295_g158244 = (float4(temp_output_23_0_g158254 , Emissive_Mask103_g158244));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g158244 = appendResult295_g158244;
				#else
				float4 staticSwitch129_g158244 = temp_cast_23;
				#endif
				half4 Final_Emissive184_g158244 = staticSwitch129_g158244;
				float4 In_Emissive3_g158256 = Final_Emissive184_g158244;
				float In_Grayscale3_g158256 = Out_Grayscale4_g158255;
				float In_Luminosity3_g158256 = Out_Luminosity4_g158255;
				float temp_output_297_11_g158244 = Out_MultiMask4_g158255;
				float In_MultiMask3_g158256 = temp_output_297_11_g158244;
				float In_AlphaClip3_g158256 = Out_AlphaClip4_g158255;
				float In_AlphaFade3_g158256 = Out_AlphaFade4_g158255;
				float3 In_Translucency3_g158256 = Out_Translucency4_g158255;
				float In_Transmission3_g158256 = Out_Transmission4_g158255;
				float In_Thickness3_g158256 = Out_Thickness4_g158255;
				float In_Diffusion3_g158256 = Out_Diffusion4_g158255;
				{
				Data3_g158256.Dummy = In_Dummy3_g158256;
				Data3_g158256.Albedo = In_Albedo3_g158256;
				Data3_g158256.NormalTS = In_NormalTS3_g158256;
				Data3_g158256.NormalWS = In_NormalWS3_g158256;
				Data3_g158256.Shader = In_Shader3_g158256;
				Data3_g158256.Emissive= In_Emissive3_g158256;
				Data3_g158256.MultiMask = In_MultiMask3_g158256;
				Data3_g158256.Grayscale = In_Grayscale3_g158256;
				Data3_g158256.Luminosity = In_Luminosity3_g158256;
				Data3_g158256.AlphaClip = In_AlphaClip3_g158256;
				Data3_g158256.AlphaFade = In_AlphaFade3_g158256;
				Data3_g158256.Translucency = In_Translucency3_g158256;
				Data3_g158256.Transmission = In_Transmission3_g158256;
				Data3_g158256.Thickness = In_Thickness3_g158256;
				Data3_g158256.Diffusion = In_Diffusion3_g158256;
				}
				TVEVisualData Data4_g158262 = Data3_g158256;
				float Out_Dummy4_g158262 = 0;
				float3 Out_Albedo4_g158262 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158262 = float2( 0,0 );
				float3 Out_NormalWS4_g158262 = float3( 0,0,0 );
				float4 Out_Shader4_g158262 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158262 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158262 = 0;
				float Out_Grayscale4_g158262 = 0;
				float Out_Luminosity4_g158262 = 0;
				float Out_AlphaClip4_g158262 = 0;
				float Out_AlphaFade4_g158262 = 0;
				float3 Out_Translucency4_g158262 = float3( 0,0,0 );
				float Out_Transmission4_g158262 = 0;
				float Out_Thickness4_g158262 = 0;
				float Out_Diffusion4_g158262 = 0;
				{
				Out_Dummy4_g158262 = Data4_g158262.Dummy;
				Out_Albedo4_g158262 = Data4_g158262.Albedo;
				Out_NormalTS4_g158262 = Data4_g158262.NormalTS;
				Out_NormalWS4_g158262 = Data4_g158262.NormalWS;
				Out_Shader4_g158262 = Data4_g158262.Shader;
				Out_Emissive4_g158262= Data4_g158262.Emissive;
				Out_MultiMask4_g158262 = Data4_g158262.MultiMask;
				Out_Grayscale4_g158262 = Data4_g158262.Grayscale;
				Out_Luminosity4_g158262= Data4_g158262.Luminosity;
				Out_AlphaClip4_g158262 = Data4_g158262.AlphaClip;
				Out_AlphaFade4_g158262 = Data4_g158262.AlphaFade;
				Out_Translucency4_g158262 = Data4_g158262.Translucency;
				Out_Transmission4_g158262 = Data4_g158262.Transmission;
				Out_Thickness4_g158262 = Data4_g158262.Thickness;
				Out_Diffusion4_g158262 = Data4_g158262.Diffusion;
				}
				half3 Visual_Albedo199_g158261 = Out_Albedo4_g158262;
				half3 Final_Albedo312_g158261 = Visual_Albedo199_g158261;
				float3 In_Albedo3_g158263 = Final_Albedo312_g158261;
				float2 In_NormalTS3_g158263 = Out_NormalTS4_g158262;
				float3 In_NormalWS3_g158263 = Out_NormalWS4_g158262;
				float4 In_Shader3_g158263 = Out_Shader4_g158262;
				float4 In_Emissive3_g158263 = Out_Emissive4_g158262;
				float In_Grayscale3_g158263 = Out_Grayscale4_g158262;
				float In_Luminosity3_g158263 = Out_Luminosity4_g158262;
				float temp_output_301_11_g158261 = Out_MultiMask4_g158262;
				float In_MultiMask3_g158263 = temp_output_301_11_g158261;
				float In_AlphaClip3_g158263 = Out_AlphaClip4_g158262;
				float In_AlphaFade3_g158263 = Out_AlphaFade4_g158262;
				float3 temp_cast_25 = (0.0).xxx;
				half3 Subsurface_Color264_g158261 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g158261 );
				half Visual_Transmission138_g158261 = Out_Transmission4_g158262;
				half Subsurface_Value268_g158261 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g158265 = Data204_g158069;
				float Out_Dummy15_g158265 = 0;
				float4 Out_CoatParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g158265 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g158265 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g158265 = Data15_g158265.Dummy;
				Out_CoatParams15_g158265 = Data15_g158265.CoatParams;
				Out_PaintParams15_g158265 = Data15_g158265.PaintParams;
				Out_GlowParams15_g158265 = Data15_g158265.GlowParams;
				Out_AtmoParams15_g158265= Data15_g158265.AtmoParams;
				Out_FormParams15_g158265 = Data15_g158265.FormParams;
				Out_LandParams15_g158265 = Data15_g158265.LandParams;
				Out_WindParams15_g158265 = Data15_g158265.WindParams;
				Out_PushParams15_g158265 = Data15_g158265.PushParams;
				}
				half4 Global_GlowParams373_g158261 = Out_GlowParams15_g158265;
				float lerpResult403_g158261 = lerp( 1.0 , saturate( (Global_GlowParams373_g158261).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g158261 = lerpResult403_g158261;
				#else
				float staticSwitch367_g158261 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g158261 = staticSwitch367_g158261;
				half Visual_MultiMask292_g158261 = temp_output_301_11_g158261;
				float lerpResult293_g158261 = lerp( 1.0 , Visual_MultiMask292_g158261 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g158261 = lerpResult293_g158261;
				half Custom_Mask363_g158261 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g158261 = ( Visual_Transmission138_g158261 * Subsurface_Value268_g158261 * Subsurface_GlobalMask369_g158261 * Subsurface_MultiMask296_g158261 * Custom_Mask363_g158261 );
				#else
				float staticSwitch345_g158261 = 0.0;
				#endif
				half Final_Transmission269_g158261 = staticSwitch345_g158261;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g158261 = ( Subsurface_Color264_g158261 * Final_Transmission269_g158261 * 10.0 );
				#else
				float3 staticSwitch348_g158261 = temp_cast_25;
				#endif
				half3 Final_Translucency254_g158261 = staticSwitch348_g158261;
				float3 In_Translucency3_g158263 = Final_Translucency254_g158261;
				float In_Transmission3_g158263 = Final_Transmission269_g158261;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g158261 = 0.0;
				#else
				float staticSwitch351_g158261 = 1.0;
				#endif
				half Final_Thickness275_g158261 = staticSwitch351_g158261;
				float In_Thickness3_g158263 = Final_Thickness275_g158261;
				float Final_Diffusion340_g158261 = _SubsurfaceDiffusion;
				float In_Diffusion3_g158263 = Final_Diffusion340_g158261;
				{
				Data3_g158263.Dummy = In_Dummy3_g158263;
				Data3_g158263.Albedo = In_Albedo3_g158263;
				Data3_g158263.NormalTS = In_NormalTS3_g158263;
				Data3_g158263.NormalWS = In_NormalWS3_g158263;
				Data3_g158263.Shader = In_Shader3_g158263;
				Data3_g158263.Emissive= In_Emissive3_g158263;
				Data3_g158263.MultiMask = In_MultiMask3_g158263;
				Data3_g158263.Grayscale = In_Grayscale3_g158263;
				Data3_g158263.Luminosity = In_Luminosity3_g158263;
				Data3_g158263.AlphaClip = In_AlphaClip3_g158263;
				Data3_g158263.AlphaFade = In_AlphaFade3_g158263;
				Data3_g158263.Translucency = In_Translucency3_g158263;
				Data3_g158263.Transmission = In_Transmission3_g158263;
				Data3_g158263.Thickness = In_Thickness3_g158263;
				Data3_g158263.Diffusion = In_Diffusion3_g158263;
				}
				TVEVisualData Data4_g158294 = Data3_g158263;
				float Out_Dummy4_g158294 = 0;
				float3 Out_Albedo4_g158294 = float3( 0,0,0 );
				float2 Out_NormalTS4_g158294 = float2( 0,0 );
				float3 Out_NormalWS4_g158294 = float3( 0,0,0 );
				float4 Out_Shader4_g158294 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g158294 = float4( 0,0,0,0 );
				float Out_MultiMask4_g158294 = 0;
				float Out_Grayscale4_g158294 = 0;
				float Out_Luminosity4_g158294 = 0;
				float Out_AlphaClip4_g158294 = 0;
				float Out_AlphaFade4_g158294 = 0;
				float3 Out_Translucency4_g158294 = float3( 0,0,0 );
				float Out_Transmission4_g158294 = 0;
				float Out_Thickness4_g158294 = 0;
				float Out_Diffusion4_g158294 = 0;
				{
				Out_Dummy4_g158294 = Data4_g158294.Dummy;
				Out_Albedo4_g158294 = Data4_g158294.Albedo;
				Out_NormalTS4_g158294 = Data4_g158294.NormalTS;
				Out_NormalWS4_g158294 = Data4_g158294.NormalWS;
				Out_Shader4_g158294 = Data4_g158294.Shader;
				Out_Emissive4_g158294= Data4_g158294.Emissive;
				Out_MultiMask4_g158294 = Data4_g158294.MultiMask;
				Out_Grayscale4_g158294 = Data4_g158294.Grayscale;
				Out_Luminosity4_g158294= Data4_g158294.Luminosity;
				Out_AlphaClip4_g158294 = Data4_g158294.AlphaClip;
				Out_AlphaFade4_g158294 = Data4_g158294.AlphaFade;
				Out_Translucency4_g158294 = Data4_g158294.Translucency;
				Out_Transmission4_g158294 = Data4_g158294.Transmission;
				Out_Thickness4_g158294 = Data4_g158294.Thickness;
				Out_Diffusion4_g158294 = Data4_g158294.Diffusion;
				}
				float temp_output_3_0_g158295 = Out_AlphaClip4_g158294;
				float Alpha19_g158295 = temp_output_3_0_g158295;
				float temp_output_15_0_g158295 = 0.0;
				float Treshold19_g158295 = temp_output_15_0_g158295;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#else
				clip(Alpha19_g158295 - Treshold19_g158295);
				#endif
				#endif
				}
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha19_g158295 * Out_AlphaFade4_g158294 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUILite"
	
	Fallback Off
}
/*ASEBEGIN
Version=19404
Node;AmplifyShaderEditor.FunctionNode;2180;-10496,-256;Inherit;False;Block Model;41;;152464;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,193,0,189,0,300,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;2181;-10176,-256;Half;False;Model Raw;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2182;-8704,-256;Inherit;False;2181;Model Raw;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2183;-8448,-256;Inherit;False;Block Pivots Sub;-1;;152479;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2403;-8064,-256;Inherit;False;Block Lite Motion;477;;158005;d8687cf5f6a8faa449e82fd2b678fe12;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2186;-7680,-256;Inherit;False;Block Transform;-1;;158053;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2395;-7296,-256;Inherit;False;Block Lite Normal;537;;158060;d07450326a8fd9045b27c2ea55f72353;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;2184;-9728,-256;Inherit;False;2181;Model Raw;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2244;-6912,-256;Inherit;False;Block Pivots Add;-1;;158066;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;2194;-6592,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2364;-9472,-256;Inherit;False;Block Lite Global;50;;158069;3cde0aa66f3d8ec4a9b80a215a26f02b;16,315,0,311,0,317,0,321,0,319,0,323,0,337,1,283,0,285,0,282,0,308,0,276,0,349,0,287,0,289,1,348,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;2195;-6144,-256;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2188;-9152,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2196;-5888,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2353;-5888,-64;Inherit;False;2188;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2198;-5888,-256;Inherit;False;Block Main;112;;158120;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;2199;-5504,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2355;-5504,-64;Inherit;False;2188;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2376;-5504,-256;Inherit;False;Block Layer;138;;158134;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;2202;-5120,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2377;-5120,-256;Inherit;False;Block Detail;185;;158164;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;2204;-4736,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2205;-4736,-256;Inherit;False;Block Occlusion;230;;158193;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;2207;-4352,-256;Inherit;False;Block Gradient;242;;158203;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2401;-4352,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2398;-3968,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2399;-3968,-64;Inherit;False;2188;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2404;-3968,-256;Inherit;False;Block Highlight;255;;158213;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;194;OBJECT;;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2227;-3584,-128;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2228;-3584,-64;Inherit;False;2188;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2397;-3584,-256;Inherit;False;Block Lite Overlay;322;;158217;df6d6bbf01172a34387d93d862d3d156;9,821,1,819,1,813,1,908,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;2336;-3200,-64;Inherit;False;2188;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2374;-3200,-256;Inherit;False;Block Emissive;416;;158244;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;2349;-1920,192;Inherit;False;Block Lite Size Fade;466;;158259;828b7cb552f180f4193fb67dbaaae0ce;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2342;-1920,-256;Inherit;False;Block Lite Variation;257;;158260;3df1ad26aa7a397488e4d172ec7355ef;0;0;1;COLOR;116
Node;AmplifyShaderEditor.FunctionNode;2375;-2816,-256;Inherit;False;Block Subsurface;440;;158261;d738d295ada6b1f409db6776b5efe789;3,315,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;2389;-1920,-192;Inherit;False;Block Lite Tinting;269;;158268;c2bee839afbcbb7499ebde2af2a2b317;3,352,1,377,0,375,1;0;1;COLOR;204
Node;AmplifyShaderEditor.FunctionNode;2390;-1920,-128;Inherit;False;Block Lite Dryness;294;;158269;d0ad841a44e589843b633cc1b97af190;3,398,1,440,0,438,1;0;1;COLOR;346
Node;AmplifyShaderEditor.FunctionNode;2391;-1920,0;Inherit;False;Block Lite Cutout;386;;158270;0780bee94024ab547ae8bb1fac250cb1;2,775,1,824,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2392;-1920,128;Inherit;False;Block Lite Perspective;459;;158271;d4a92d6e6eef32d4f945d10292650e0c;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2393;-1920,64;Inherit;False;Block Lite Dithering;403;;158272;6e52cef07120daa408f9658182b29574;2,847,1,848,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2405;-1920,-64;Inherit;False;Block Lite Wetness;368;;158287;30361f2d9d7742e4db0b62746ed1affc;2,850,1,873,1;0;1;COLOR;566
Node;AmplifyShaderEditor.RegisterLocalVarNode;2232;-2496,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.SimpleAddOpNode;2261;-1536,-256;Inherit;False;8;8;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;2233;-640,-192;Inherit;False;2194;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2234;-640,-256;Inherit;False;2232;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2262;-1344,-256;Half;False;Dummy Data;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;2265;-384,320;Inherit;False;2262;Dummy Data;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;2383;-384,-256;Inherit;False;Block Render;0;;158288;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.FunctionNode;2264;0,288;Inherit;False;Register;-1;;158303;673534ff3248b7442a6471d786096f1f;0;2;6;FLOAT4;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;2235;-464,-640;Half;False;Property;_render_src;_render_src;547;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2236;-640,-640;Half;False;Property;_render_cull;_render_cull;546;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;2;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2237;-288,-640;Half;False;Property;_render_dst;_render_dst;548;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2238;-112,-640;Half;False;Property;_render_zw;_render_zw;549;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2239;64,-640;Half;False;Property;_render_coverage;_render_coverage;550;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2241;-192,-768;Half;False;Property;_IsLiteShader;_IsLiteShader;551;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2384;-416,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;553;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2386;-640,-768;Half;False;Property;_IsGeneralShader;_IsGeneralShader;552;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;2240;384,-640;Inherit;False;Base Compile;-1;;158304;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2174;128,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2176;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2177;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2178;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2179;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2175;384,-256;Float;False;True;-1;2;TVEShaderGUILite;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite);28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;0;638375640342140968;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638375639859340986;Deferred Pass;0;0;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;1;638375639879434880;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638375639915106055;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;2181;0;2180;128
WireConnection;2183;146;2182;0
WireConnection;2403;146;2183;128
WireConnection;2186;146;2403;128
WireConnection;2395;146;2186;128
WireConnection;2244;146;2395;128
WireConnection;2194;0;2244;128
WireConnection;2364;206;2184;0
WireConnection;2188;0;2364;151
WireConnection;2198;225;2195;0
WireConnection;2376;585;2198;106
WireConnection;2376;633;2196;0
WireConnection;2376;974;2353;0
WireConnection;2377;585;2376;552
WireConnection;2377;633;2199;0
WireConnection;2377;971;2355;0
WireConnection;2205;144;2377;552
WireConnection;2205;204;2202;0
WireConnection;2207;144;2205;116
WireConnection;2207;222;2204;0
WireConnection;2404;144;2207;116
WireConnection;2404;194;2401;0
WireConnection;2397;572;2404;116
WireConnection;2397;596;2398;0
WireConnection;2397;600;2399;0
WireConnection;2374;146;2397;566
WireConnection;2374;148;2227;0
WireConnection;2374;178;2228;0
WireConnection;2375;146;2374;183
WireConnection;2375;371;2336;0
WireConnection;2232;0;2375;183
WireConnection;2261;0;2342;116
WireConnection;2261;1;2389;204
WireConnection;2261;2;2390;346
WireConnection;2261;3;2405;566
WireConnection;2261;4;2391;566
WireConnection;2261;5;2393;566
WireConnection;2261;6;2392;128
WireConnection;2261;7;2349;128
WireConnection;2262;0;2261;0
WireConnection;2383;17;2234;0
WireConnection;2383;19;2233;0
WireConnection;2264;6;2383;33
WireConnection;2264;7;2265;0
WireConnection;2175;0;2383;21
WireConnection;2175;1;2383;22
WireConnection;2175;2;2383;34
WireConnection;2175;3;2383;77
WireConnection;2175;6;2383;26
WireConnection;2175;5;2383;27
WireConnection;2175;7;2383;28
WireConnection;2175;14;2383;65
WireConnection;2175;15;2383;30
WireConnection;2175;16;2383;32
WireConnection;2175;17;2264;0
ASEEND*/
//CHKSM=DF33FB9C4F3DF36064598EEB03A3D1F6A2A03B71